{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n    VirusERC\r\n\r\n    You must be referred to buy!\r\n\r\n    Refer other wallets and get rewards for their every buy\r\n\r\n\r\n\r\n    Telegram: @VirusErc\r\n\r\n*/\r\n\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.5;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        // Solidity only automatically asserts when dividing by 0\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\nabstract contract Auth {\r\n\r\n    address internal owner;\r\n\r\n    mapping (address => bool) internal authorizations;\r\n\r\n\r\n\r\n    constructor(address _owner) {\r\n\r\n        owner = _owner;\r\n\r\n        authorizations[_owner] = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier authorized() {\r\n\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n\r\n        authorizations[adr] = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n\r\n        authorizations[adr] = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n\r\n        return account == owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n\r\n        return authorizations[adr];\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n\r\n        owner = adr;\r\n\r\n        authorizations[adr] = true;\r\n\r\n        emit OwnershipTransferred(adr);\r\n\r\n    }\r\n\r\n\r\n\r\n    event OwnershipTransferred(address owner);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IDEXFactory {\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IDEXRouter {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\ncontract virus is IBEP20, Auth {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    string constant _name = \"Virus\";\r\n\r\n    string constant _symbol = \"VIRUS\";\r\n\r\n    uint8 constant _decimals = 9;\r\n\r\n\r\n\r\n    uint256 _totalSupply = 100000000 * (10 ** _decimals);\r\n\r\n    uint256 public _maxWalletSize = (_totalSupply * 1) / 100; \r\n\r\n    uint256 public _minTransferForReferral = 1 * (10 ** _decimals); \r\n\r\n\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    \r\n\r\n    mapping (address => bool) isFeeExempt;\r\n\r\n    mapping (address => address) public referrer; \r\n\r\n    mapping(address => bool) public isReferred;\r\n\r\n\r\n\r\n    uint256 liquidityFee = 2;\r\n\r\n    uint256 devFee = 0;\r\n\r\n    uint256 marketingFee = 6;\r\n\r\n\r\n\r\n    uint256 totalFee = 8;\r\n\r\n    uint256 feeDenominator = 100;\r\n\r\n\r\n\r\n    uint256 referralFee = 3;\r\n\r\n\r\n\r\n    uint256 public minSupplyForReferralReward = (_totalSupply * 1) / 1000;\r\n\r\n    \r\n\r\n    address private marketingFeeReceiver = 0xDcA1eEDd2166Bb128594aa8C64Dbe1Fa75Bd00E1;\r\n\r\n\r\n\r\n    IDEXRouter public router;\r\n\r\n    address public pair;\r\n\r\n\r\n\r\n    bool public swapEnabled = true;\r\n\r\n    uint256 public swapThreshold = _totalSupply / 1000 * 3; // 0.3%\r\n\r\n\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n\r\n\r\n    event ReferralBonus(address indexed feesTo , address indexed feesFrom , uint value);\r\n\r\n    event Referred(address indexed referred,address indexed referrer);\r\n\r\n\r\n\r\n    constructor () Auth(msg.sender) {\r\n\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n\r\n\r\n        address _owner = owner;\r\n\r\n        isFeeExempt[_owner] = true;\r\n\r\n        isFeeExempt[pair] = true;\r\n\r\n        isFeeExempt[address(router)] = true;\r\n\r\n\r\n\r\n        isReferred[_owner] = true;\r\n\r\n        \r\n\r\n        _balances[_owner] = _totalSupply;\r\n\r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable { }\r\n\r\n\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n\r\n    function name() external pure override returns (string memory) { return _name; }\r\n\r\n    function getOwner() external view override returns (address) { return owner; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n\r\n        _allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n\r\n        return approve(spender, type(uint256).max);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n\r\n        }\r\n\r\n\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }    \r\n\r\n\r\n\r\n        if (recipient != pair) {\r\n\r\n            require(isFeeExempt[recipient] || _balances[recipient] + amount <= _maxWalletSize, \"Transfer amount exceeds the bag size.\");\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 amountReceived = amount; \r\n\r\n        \r\n\r\n        if(sender == pair) { //buy\r\n\r\n            if(!isFeeExempt[recipient]) {\r\n\r\n                require(isReferred[recipient],\"Not referred\");\r\n\r\n                amountReceived = takeReferralFees(recipient,amount);\r\n\r\n            }\r\n\r\n\r\n\r\n        } else if(recipient == pair) { //sell\r\n\r\n            if(shouldTakeFee(sender)) {\r\n\r\n                amountReceived = takeFee(sender, amount);\r\n\r\n            }  \r\n\r\n\r\n\r\n        } else if(isReferred[recipient]==false) {\r\n\r\n            if(amount >= _minTransferForReferral) {\r\n\r\n                isReferred[recipient] = true;\r\n\r\n                referrer[recipient] = sender;\r\n\r\n                emit Referred(recipient,sender);\r\n\r\n            }\r\n\r\n        } \r\n\r\n        \r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function takeReferralFees(address from,uint256 amount) internal returns(uint) {\r\n\r\n        uint256 referralTokens = referralFee * amount / feeDenominator;\r\n\r\n        if(_balances[referrer[from]] > minSupplyForReferralReward) {\r\n\r\n            _balances[referrer[from]] = _balances[referrer[from]].add(referralTokens);\r\n\r\n            emit ReferralBonus(referrer[from],from,referralTokens);\r\n\r\n        } else {\r\n\r\n             _balances[marketingFeeReceiver] = _balances[marketingFeeReceiver].add(referralTokens);\r\n\r\n            emit ReferralBonus(marketingFeeReceiver,from,referralTokens);\r\n\r\n        }\r\n\r\n\r\n\r\n        return amount - referralTokens;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n\r\n        return !isFeeExempt[sender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\r\n\r\n\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n\r\n\r\n        return amount.sub(feeAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n\r\n        return msg.sender != pair\r\n\r\n        && !inSwap\r\n\r\n        && swapEnabled\r\n\r\n        && _balances[address(this)] >= swapThreshold;\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapBack() internal swapping {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        uint256 amountToLiquify = contractTokenBalance.mul(liquidityFee).div(totalFee).div(2);\r\n\r\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\r\n\r\n\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = router.WETH();\r\n\r\n\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            amountToSwap,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalBNBFee = totalFee.sub(liquidityFee.div(2));\r\n\r\n        uint256 amountBNBLiquidity = amountBNB.mul(liquidityFee).div(totalBNBFee).div(2);\r\n\r\n        uint256 amountBNBMarketing = amountBNB - amountBNBLiquidity;\r\n\r\n\r\n\r\n        (bool MarketingSuccess, /* bytes memory data */) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n\r\n        require(MarketingSuccess, \"receiver rejected ETH transfer\");\r\n\r\n        addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n\r\n    }\r\n\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n\r\n        if(tokenAmount > 0){\r\n\r\n                router.addLiquidityETH{value: BNBAmount}(\r\n\r\n                    address(this),\r\n\r\n                    tokenAmount,\r\n\r\n                    0,\r\n\r\n                    0,\r\n\r\n                    address(this),\r\n\r\n                    block.timestamp\r\n\r\n                );\r\n\r\n                emit AutoLiquify(BNBAmount, tokenAmount);\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMaxWallet(uint256 amount) external onlyOwner() {\r\n\r\n        require(amount >= _totalSupply / 1000 );\r\n\r\n        _maxWalletSize = amount;\r\n\r\n    }   \r\n\r\n\r\n\r\n    function setMinTransferForReferral(uint256 amount) external onlyOwner() {\r\n\r\n        require(amount <= 1*(10**_decimals) );\r\n\r\n        _minTransferForReferral = amount; \r\n\r\n    }\r\n\r\n\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n\r\n        isFeeExempt[holder] = exempt;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _devFee, uint256 _marketingFee, uint256 _feeDenominator) external authorized {\r\n\r\n        liquidityFee = _liquidityFee;\r\n\r\n        devFee = _devFee;\r\n\r\n        marketingFee = _marketingFee;\r\n\r\n        totalFee = _liquidityFee.add(_devFee).add(_marketingFee);\r\n\r\n        feeDenominator = _feeDenominator;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\r\n\r\n        swapEnabled = _enabled;\r\n\r\n        swapThreshold = _amount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function manualSend() external authorized {\r\n\r\n        uint256 contractETHBalance = address(this).balance;\r\n\r\n        payable(marketingFeeReceiver).transfer(contractETHBalance);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferForeignToken(address _token) public authorized {\r\n\r\n        require(_token != address(this), \"Can't let you take all native token\");\r\n\r\n        uint256 _contractBalance = IBEP20(_token).balanceOf(address(this));\r\n\r\n        payable(marketingFeeReceiver).transfer(_contractBalance);\r\n\r\n    }\r\n\r\n    \r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feesTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feesFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReferralBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referred\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Referred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTransferForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSupplyForReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTransferForReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"virus","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://be30decf64bd3b535265101793908f2e5ce5f96eed2dc56c99416cf29b9d095e"}]}