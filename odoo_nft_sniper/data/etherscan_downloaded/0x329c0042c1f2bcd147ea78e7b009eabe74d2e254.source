{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract GlobalSettlementLike {\r\n    function shutdownSystem() external virtual;\r\n}\r\n\r\ncontract MinimalGlobalSettlementOverlay is GebAuth {\r\n    uint256              public settlementDelay;\r\n    uint256              public settlementExecutionDate;\r\n\r\n    GlobalSettlementLike public globalSettlement;\r\n\r\n    constructor(address globalSettlement_, uint256 settlementDelay_) public GebAuth() {\r\n        require(globalSettlement_ != address(0), \"MinimalGlobalSettlementOverlay/null-address\");\r\n        require(settlementDelay_ > 0, \"MinimalGlobalSettlementOverlay/invalid-settlement-delay\");\r\n\r\n        globalSettlement = GlobalSettlementLike(globalSettlement_);\r\n        settlementDelay  = settlementDelay_;\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"MinimalGlobalSettlementOverlay/add-uint-uint-overflow\");\r\n    }\r\n\r\n    /*\r\n    * @notice Start shutdown procedure\r\n    */\r\n    function startShutdownProcedure() external isAuthorized {\r\n        require(settlementExecutionDate == 0, \"MinimalGlobalSettlementOverlay/shutdown-already-started\");\r\n        settlementExecutionDate = addition(now, settlementDelay);\r\n    }\r\n\r\n    /*\r\n    * @notice Stop shutdown procedure\r\n    */\r\n    function stopShutdownProcedure() external isAuthorized {\r\n        settlementExecutionDate = 0;\r\n    }\r\n\r\n    /*\r\n    * @notice Trigger settlement for the system\r\n    */\r\n    function shutdownSystem() external {\r\n        require(both(settlementExecutionDate > 0, now > settlementExecutionDate), \"MinimalGlobalSettlementOverlay/cannot-settle\");\r\n        settlementExecutionDate = 0;\r\n        globalSettlement.shutdownSystem();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"globalSettlement_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"settlementDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalSettlement\",\"outputs\":[{\"internalType\":\"contract GlobalSettlementLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementExecutionDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startShutdownProcedure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopShutdownProcedure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinimalGlobalSettlementOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ee4cf96e5359d9619197fd82b6ef2a9eae7b91e1000000000000000000000000000000000000000000000000000000000024ea00","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9c230c56b0ec6c37c77a2842736513281a25af43ec05af2dabd42c33951f125a"}]}