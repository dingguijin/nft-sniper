{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/BalDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title BalDepositor contract\\n/// @dev Deposit contract for Prime Pools is based on the convex contract crvDepositor.sol\\ncontract BalDepositor is IBalDepositor {\\n    event FeeManagerChanged(address newFeeManager);\\n    event LockIncentiveChanged(uint256 newLockIncentive);\\n\\n    error Unauthorized();\\n    error InvalidAmount();\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    uint256 private constant MAXTIME = 365 days;\\n    uint256 private constant WEEK = 7 days;\\n\\n    address public immutable wethBal;\\n    address public immutable veBal;\\n    address public immutable staker; // VoterProxy smart contract\\n    address public immutable d2dBal;\\n\\n    address public feeManager;\\n    uint256 public lockIncentive = 10; // incentive to users who spend gas to lock bal\\n    uint256 public incentiveBal;\\n    uint256 public unlockTime;\\n\\n    constructor(\\n        address _wethBal,\\n        address _veBal,\\n        address _staker,\\n        address _d2dBal\\n    ) {\\n        wethBal = _wethBal;\\n        veBal = _veBal;\\n        staker = _staker;\\n        d2dBal = _d2dBal;\\n        feeManager = msg.sender;\\n    }\\n\\n    modifier onlyFeeManager() {\\n        if (msg.sender != feeManager) revert Unauthorized();\\n        _;\\n    }\\n\\n    /// @notice Sets the contracts feeManager variable\\n    /// @param _feeManager The address of the fee manager\\n    function setFeeManager(address _feeManager) external onlyFeeManager {\\n        feeManager = _feeManager;\\n        emit FeeManagerChanged(_feeManager);\\n    }\\n\\n    /// @notice Sets the lock incentive variable\\n    /// @param _lockIncentive Time to lock tokens\\n    function setFees(uint256 _lockIncentive) external onlyFeeManager {\\n        if (_lockIncentive >= 0 && _lockIncentive <= 30) {\\n            lockIncentive = _lockIncentive;\\n            emit LockIncentiveChanged(_lockIncentive);\\n        }\\n    }\\n\\n    /// @notice Locks initial Weth/Bal balance in veBal contract via voterProxy contract\\n    function initialLock() external onlyFeeManager {\\n        uint256 veBalance = IERC20(veBal).balanceOf(staker);\\n        if (veBalance == 0) {\\n            // solhint-disable-next-line\\n            uint256 unlockAt = block.timestamp + MAXTIME;\\n\\n            // release old lock if exists\\n            IVoterProxy(staker).release();\\n            // create new lock\\n            uint256 wethBalBalanceStaker = IERC20(wethBal).balanceOf(staker);\\n            IVoterProxy(staker).createLock(wethBalBalanceStaker, unlockAt);\\n            unlockTime = (unlockAt / WEEK) * WEEK;\\n        }\\n    }\\n\\n    /// @notice Locks tokens in vBal contract and mints reward tokens to sender\\n    /// @dev Needed in order to lockFunds on behalf of someone else\\n    function lockBalancer() external {\\n        _lockBalancer();\\n\\n        // mint incentives\\n        if (incentiveBal > 0) {\\n            ITokenMinter(d2dBal).mint(msg.sender, incentiveBal);\\n            incentiveBal = 0;\\n        }\\n    }\\n\\n    /// @notice Deposits entire Weth/Bal balance of caller. Stakes same amount in Rewards contract\\n    /// @param _stakeAddress The Reward contract address\\n    /// @param _lock boolean whether depositor wants to lock funds immediately\\n    function depositAll(bool _lock, address _stakeAddress) external {\\n        uint256 wethBalBalance = IERC20(wethBal).balanceOf(msg.sender); //This is balancer balance of msg.sender\\n        deposit(wethBalBalance, _lock, _stakeAddress);\\n    }\\n\\n    /// @notice Locks initial balance of Weth/Bal in Voter Proxy. Then stakes `_amount` of Weth/Bal tokens to veBal contract\\n    /// Mints & stakes d2dBal in Rewards contract on behalf of caller\\n    /// @dev VoterProxy `staker` is responsible for sending Weth/Bal tokens to veBal contract via _locktoken()\\n    /// All of the minted d2dBal will be automatically staked to the Rewards contract\\n    /// @param _amount The amount of tokens user wants to stake\\n    /// @param _lock boolean whether depositor wants to lock funds immediately\\n    /// @param _stakeAddress The Reward contract address\\n    function deposit(\\n        uint256 _amount,\\n        bool _lock,\\n        address _stakeAddress\\n    ) public {\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        if (_lock) {\\n            // lock immediately, transfer directly to staker to skip an erc20 transfer\\n            IERC20(wethBal).transferFrom(msg.sender, staker, _amount);\\n            _lockBalancer();\\n            if (incentiveBal > 0) {\\n                // add the incentive tokens here so they can be staked together\\n                _amount = _amount + incentiveBal;\\n                incentiveBal = 0;\\n            }\\n        } else {\\n            // move tokens here\\n            IERC20(wethBal).transferFrom(msg.sender, address(this), _amount);\\n            // defer lock cost to another user\\n            uint256 callIncentive = ((_amount * lockIncentive) / FEE_DENOMINATOR);\\n            _amount = _amount - callIncentive;\\n\\n            // add to a pool for lock caller\\n            incentiveBal = incentiveBal + callIncentive;\\n        }\\n        // mint here\\n        ITokenMinter(d2dBal).mint(address(this), _amount);\\n        // stake for msg.sender\\n        IERC20(d2dBal).approve(_stakeAddress, _amount);\\n        IRewards(_stakeAddress).stakeFor(msg.sender, _amount);\\n    }\\n\\n    /// @notice Burns D2DBal from some address\\n    /// @dev Only Controller can call this\\n    function burnD2DBal(address _from, uint256 _amount) external {\\n        if (msg.sender != IVoterProxy(staker).operator()) {\\n            revert Unauthorized();\\n        }\\n\\n        ITokenMinter(d2dBal).burn(_from, _amount);\\n    }\\n\\n    /// @notice Transfers Weth/Bal from VoterProxy `staker` to veBal contract\\n    /// @dev VoterProxy `staker` is responsible for transferring Weth/Bal tokens to veBal contract via increaseAmount()\\n    function _lockBalancer() internal {\\n        // multiple SLOAD -> MLOAD\\n        address wethBalMemory = wethBal;\\n        address stakerMemory = staker;\\n\\n        uint256 wethBalBalance = IERC20(wethBalMemory).balanceOf(address(this));\\n        if (wethBalBalance > 0) {\\n            IERC20(wethBalMemory).transfer(stakerMemory, wethBalBalance);\\n        }\\n\\n        uint256 wethBalBalanceStaker = IERC20(wethBalMemory).balanceOf(stakerMemory);\\n        if (wethBalBalanceStaker == 0) {\\n            return;\\n        }\\n\\n        // increase amount\\n        IVoterProxy(stakerMemory).increaseAmount(wethBalBalanceStaker);\\n\\n        // solhint-disable-next-line\\n        uint256 newUnlockAt = block.timestamp + MAXTIME;\\n        uint256 unlockInWeeks = (newUnlockAt / WEEK) * WEEK;\\n\\n        // We always want to have max voting power on each vote\\n        // Bal voting is a weekly event, and we want to increase time every week\\n        // solhint-disable-next-line\\n        if ((unlockInWeeks - unlockTime) > 2) {\\n            IVoterProxy(stakerMemory).increaseTime(newUnlockAt);\\n            // solhint-disable-next-line\\n            unlockTime = newUnlockAt;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IBalDepositor {\\n    function d2dBal() external view returns (address);\\n\\n    function wethBal() external view returns (address);\\n\\n    function burnD2DBal(address _from, uint256 _amount) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address _to) external;\\n\\n    function wethBal() external view returns (address);\\n\\n    function depositor() external view returns (address);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to controller\\n    /// @dev WethBal is redeemable by burning equivalent amount of D2D WethBal\\n    function withdrawUnlockedWethBal() external;\\n\\n    /// @notice Burns all D2DWethBal from a user, and transfers the equivalent amount of unlocked WethBal tokes\\n    function redeemWethBal() external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(uint256 _pid, address _gauge) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_d2dBal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockIncentive\",\"type\":\"uint256\"}],\"name\":\"LockIncentiveChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnD2DBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"d2dBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIncentive\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalDepositor","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"0000000000000000000000005c6ee304399dbdb9c8ef030ab642b10820db8f56000000000000000000000000c128a9954e6c874ea3d62ce62b468ba073093f25000000000000000000000000e25e53220df33d41b0422fedbd2d23a94045cff3000000000000000000000000c54e6f16a1940d000c6adee341d11570490a86f6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}