{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return a / b;\r\n    }\r\n}\r\n\r\ncontract EXCH {\r\n    function distribute() public payable returns (uint256);\r\n}\r\n\r\ncontract TOKEN {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract UniSwapV2LiteRouter {\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract UniSwapV2LiteFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ncontract UniSwapV2LitePair {\r\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract OctaAA {\r\n    using SafeMath for uint256;\r\n\r\n    UniSwapV2LiteRouter private router = UniSwapV2LiteRouter(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n    UniSwapV2LiteFactory private factory = UniSwapV2LiteFactory(address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f));\r\n    address private hexAddress = address(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39);\r\n    address private octaAddress = address(0xb9c1C6364467dF64E91e1A175c00990d17775275);\r\n    TOKEN private hexToken = TOKEN(hexAddress);\r\n    TOKEN private octaToken = TOKEN(octaAddress);\r\n\r\n    constructor() public {\r\n        hexToken.approve(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D), uint256(-1));\r\n    }\r\n\r\n    function() payable external {\r\n        revert();\r\n    }\r\n\r\n    function checkAndTransferHEX(uint256 _amount) private {\r\n        require(hexToken.transferFrom(msg.sender, address(this), _amount) == true, \"transfer must succeed\");\r\n    }\r\n\r\n    function isHighPriceImpact() private view returns (bool) {\r\n        uint256 _hexBalance = hexToken.balanceOf(address(this));\r\n\r\n        uint112 _reserve0;\r\n        uint112 _reserve1;\r\n\r\n        address hexOcta = factory.getPair(hexAddress, octaAddress);\r\n        UniSwapV2LitePair hexOctaPair = UniSwapV2LitePair(hexOcta);\r\n        (_reserve0, _reserve1, ) = hexOctaPair.getReserves();\r\n        uint256 _octaBalanceWithNoFee = router.quote(_hexBalance, _reserve1, _reserve0);\r\n        uint256 _octaBalanceWithFee = router.getAmountOut(_hexBalance, _reserve1, _reserve0);\r\n\r\n        if (_octaBalanceWithFee >= _octaBalanceWithNoFee.div(2)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function swapAndReceive(address _receiver, uint256 _extraTokens) public returns (uint256) {\r\n        checkAndTransferHEX(_extraTokens);\r\n\r\n        if (isHighPriceImpact()) {\r\n            hexToken.transfer(_receiver, _extraTokens);\r\n            return 0;\r\n        } else {\r\n            address[] memory path = new address[](2);\r\n            path[0] = hexAddress;\r\n            path[1] = octaAddress;\r\n\r\n            router.swapExactTokensForTokens(_extraTokens, 1, path, address(this), block.timestamp);\r\n            uint256 swappedAmount = octaToken.balanceOf(address(this));\r\n\r\n            if (swappedAmount > 0) {\r\n              octaToken.transfer(_receiver, swappedAmount);\r\n            }\r\n            return swappedAmount;\r\n        }\r\n    }\r\n\r\n    function reApproveContractForUniswap() public {\r\n        hexToken.approve(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D), uint256(-1));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"reApproveContractForUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_extraTokens\",\"type\":\"uint256\"}],\"name\":\"swapAndReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OctaAA","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a4a597d81f0449161863a2b3df2c35451bbf698dbb1f9e51909d4451fe8f2518"}]}