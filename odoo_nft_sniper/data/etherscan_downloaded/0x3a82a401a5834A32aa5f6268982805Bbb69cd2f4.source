{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/interfaces/external/curve/ICurveAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ICurveRegistry.sol\\\";\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (ICurveRegistry);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/curve/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/curve/ICurveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveRegistry {\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/ITokenOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/tokens/CurveLpTokenOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveAddressProvider.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveRegistry.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurvePool.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\n\\n/**\\n * @title Oracle for Curve LP tokens\\n */\\ncontract CurveLpTokenOracle is ITokenOracle {\\n    /// @dev Same address for all chains\\n    ICurveAddressProvider public constant addressProvider =\\n        ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n    /// @notice Registry contract\\n    ICurveRegistry public immutable registry;\\n\\n    /// @notice LP token => coins mapping\\n    mapping(address => address[]) public underlyingTokens;\\n\\n    /// @notice LP token => pool\\n    mapping(address => address) public poolOf;\\n\\n    constructor() {\\n        registry = ICurveRegistry(addressProvider.get_registry());\\n    }\\n\\n    /// @inheritdoc ITokenOracle\\n    /// @dev This function is supposed to be called from `MasterOracle` only\\n    function getPriceInUsd(address lpToken_) public view override returns (uint256 _priceInUsd) {\\n        address _pool = poolOf[lpToken_];\\n        require(_pool != address(0), \\\"lp-is-not-registered\\\");\\n        address[] memory _tokens = underlyingTokens[lpToken_];\\n        uint256 _min = type(uint256).max;\\n        uint256 _n = _tokens.length;\\n\\n        for (uint256 i; i < _n; i++) {\\n            // Note: `msg.sender` is the `MasterOracle` contract\\n            uint256 _price = IOracle(msg.sender).getPriceInUsd(_tokens[i]);\\n            if (_price < _min) _min = _price;\\n        }\\n\\n        require(_min < type(uint256).max, \\\"no-min-underlying-price-found\\\");\\n        require(_min > 0, \\\"invalid-min-price\\\");\\n\\n        return (_min * ICurvePool(_pool).get_virtual_price()) / 1e18;\\n    }\\n\\n    /// @notice Register LP token data\\n    function registerPool(address lpToken_) external {\\n        address _pool = poolOf[lpToken_];\\n        require(_pool == address(0), \\\"lp-already-registered\\\");\\n\\n        _pool = registry.get_pool_from_lp_token(lpToken_);\\n        require(_pool != address(0), \\\"invalid-non-factory-lp\\\");\\n\\n        poolOf[lpToken_] = _pool;\\n\\n        uint256 _n = registry.get_n_coins(_pool);\\n        address[8] memory tokens = registry.get_coins(_pool);\\n        for (uint256 i; i < _n; i++) {\\n            underlyingTokens[lpToken_].push(tokens[i]);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveLpTokenOracle","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"5000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}