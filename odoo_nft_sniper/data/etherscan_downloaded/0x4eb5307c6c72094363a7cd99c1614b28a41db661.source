{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SignataIdentity.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.11;\r\n\r\n\r\n\r\ncontract SignataIdentity {\r\n\r\n    uint256 private constant MAX_UINT256 = type(uint256).max;\r\n\r\n    \r\n\r\n    // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\")\r\n\r\n    bytes32 private constant EIP712DOMAINTYPE_DIGEST = 0xd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472;\r\n\r\n    \r\n\r\n    // keccak256(\"Signata\")\r\n\r\n    bytes32 private constant NAME_DIGEST = 0xfc8e166e81add347414f67a8064c94523802ae76625708af4cddc107b656844f;\r\n\r\n    \r\n\r\n    // keccak256(\"1\")\r\n\r\n    bytes32 private constant VERSION_DIGEST = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\r\n\r\n    \r\n\r\n    bytes32 private constant SALT = 0x233cdb81615d25013bb0519fbe69c16ddc77f9fa6a9395bd2aecfdfc1c0896e3;\r\n\r\n    \r\n\r\n    // keccak256(\"SignataIdentityCreateTransaction(address delegateKey, address securityKey)\")\r\n\r\n    bytes32 private constant TXTYPE_CREATE_DIGEST = 0x469a26f6afcc5806677c064ceb4b952f409123d7e70ab1fd0a51e86205b9937b;   \r\n\r\n    \r\n\r\n    // keccak256(\"SignataIdentityRolloverTransaction(address identity, address newDelegateKey, address newSecurityKey, uint256 rolloverCount)\")\r\n\r\n    bytes32 private constant TXTYPE_ROLLOVER_DIGEST = 0x3925a5eeb744076e798ef9df4a1d3e1d70bcca2f478f6df9e6f0496d7de53e1e;\r\n\r\n    \r\n\r\n    // keccak256(\"SignataIdentityUnlockTransaction(uint256 lockCount)\")\r\n\r\n    bytes32 private constant TXTYPE_UNLOCK_DIGEST = 0xd814812ff462bae7ba452aadd08061fe1b4bda9916c0c4a84c25a78985670a7b;\r\n\r\n    \r\n\r\n    // keccak256(\"SignataIdentityDestroyTransaction()\");\r\n\r\n    bytes32 private constant TXTYPE_DESTROY_DIGEST = 0x21459c8977584463672e32d031e5caf426140890a0f0d2172da41491b70ef9f5;\r\n\r\n    \r\n\r\n    bytes32 private immutable _domainSeperator;\r\n\r\n    \r\n\r\n    // storage\r\n\r\n    mapping(address => address) private _delegateKeyToIdentity;\r\n\r\n    mapping(address => uint256) private _identityLockCount;\r\n\r\n    mapping(address => uint256) private _identityRolloverCount;\r\n\r\n    mapping(address => address) private _identityToSecurityKey;\r\n\r\n    mapping(address => address) private _identityToDelegateKey;\r\n\r\n    mapping(address => bool) private _identityDestroyed;\r\n\r\n    mapping(address => bool) private _identityExists;\r\n\r\n    mapping(address => bool) private _identityLocked;\r\n\r\n    \r\n\r\n    constructor(uint256 chainId) {\r\n\r\n        _domainSeperator = keccak256(\r\n\r\n            abi.encode(\r\n\r\n                EIP712DOMAINTYPE_DIGEST,\r\n\r\n                NAME_DIGEST,\r\n\r\n                VERSION_DIGEST,\r\n\r\n                chainId,\r\n\r\n                this,\r\n\r\n                SALT\r\n\r\n            )\r\n\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    event Create(address indexed identity, address indexed delegateKey, address indexed securityKey);\r\n\r\n    event Destroy(address indexed identity);\r\n\r\n    event Lock(address indexed identity);\r\n\r\n    event Rollover(address indexed identity, address indexed delegateKey, address indexed securityKey);\r\n\r\n    event Unlock(address indexed identity);\r\n\r\n    \r\n\r\n    function create(\r\n\r\n        uint8 identityV, \r\n\r\n        bytes32 identityR, \r\n\r\n        bytes32 identityS, \r\n\r\n        address delegateKey, \r\n\r\n        address securityKey\r\n\r\n    ) external {\r\n\r\n        require(\r\n\r\n            _delegateKeyToIdentity[delegateKey] == address(0),\r\n\r\n            \"SignataIdentity: Delegate key must not already be in use.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        bytes32 digest = keccak256(\r\n\r\n            abi.encodePacked(\r\n\r\n                \"\\x19\\x01\",\r\n\r\n                _domainSeperator,\r\n\r\n                keccak256(\r\n\r\n                    abi.encode(\r\n\r\n                        TXTYPE_CREATE_DIGEST,\r\n\r\n                        delegateKey,\r\n\r\n                        securityKey\r\n\r\n                    )\r\n\r\n                )\r\n\r\n            )\r\n\r\n        );\r\n\r\n        \r\n\r\n        address identity = ecrecover(digest, identityV, identityR, identityS);\r\n\r\n        \r\n\r\n        require(\r\n\r\n            msg.sender == identity,\r\n\r\n            \"SignataIdentity: The identity to be created must match the address of the sender.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            identity != delegateKey && identity != securityKey && delegateKey != securityKey,\r\n\r\n            \"SignataIdentity: Keys must be unique.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must not already exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        _delegateKeyToIdentity[delegateKey] = identity;\r\n\r\n        _identityToDelegateKey[identity] = delegateKey;\r\n\r\n        _identityExists[identity] = true;\r\n\r\n        _identityToSecurityKey[identity] = securityKey;\r\n\r\n        \r\n\r\n        emit Create(identity, delegateKey, securityKey);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function destroy(\r\n\r\n        address identity,\r\n\r\n        uint8 delegateV,\r\n\r\n        bytes32 delegateR, \r\n\r\n        bytes32 delegateS,\r\n\r\n        uint8 securityV,\r\n\r\n        bytes32 securityR, \r\n\r\n        bytes32 securityS\r\n\r\n    ) external {\r\n\r\n        require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has already been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        bytes32 digest = keccak256(\r\n\r\n            abi.encodePacked(\r\n\r\n                \"\\x19\\x01\",\r\n\r\n                _domainSeperator,\r\n\r\n                keccak256(abi.encode(TXTYPE_DESTROY_DIGEST))\r\n\r\n            )\r\n\r\n        );\r\n\r\n        \r\n\r\n        address delegateKey = ecrecover(digest, delegateV, delegateR, delegateS);\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityToDelegateKey[identity] == delegateKey,\r\n\r\n            \"SignataIdentity: Invalid delegate key signature provided.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        address securityKey = ecrecover(digest, securityV, securityR, securityS);\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityToSecurityKey[identity] == securityKey,\r\n\r\n            \"SignataIdentity: Invalid security key signature provided.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        _identityDestroyed[identity] = true;\r\n\r\n        \r\n\r\n        delete _delegateKeyToIdentity[delegateKey];\r\n\r\n        delete _identityLockCount[identity];\r\n\r\n        delete _identityRolloverCount[identity];\r\n\r\n        delete _identityToSecurityKey[identity];\r\n\r\n        delete _identityToDelegateKey[identity];\r\n\r\n        delete _identityLocked[identity];\r\n\r\n        \r\n\r\n        emit Destroy(identity);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function lock(address identity) external {\r\n\r\n        require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityLocked[identity],\r\n\r\n            \"SignataIdentity: The identity has already been locked.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            msg.sender == _identityToDelegateKey[identity] || msg.sender == _identityToSecurityKey[identity],\r\n\r\n            \"SignataIdentity: The sender is unauthorised to lock identity.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        _identityLocked[identity] = true;\r\n\r\n        _identityLockCount[identity] += 1;\r\n\r\n        \r\n\r\n        emit Lock(identity);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function getDelegate(address identity)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (address)\r\n\r\n    {\r\n\r\n        require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        return _identityToDelegateKey[identity];\r\n\r\n    }\r\n\r\n    \r\n\r\n    function getIdentity(address delegateKey) \r\n\r\n        external\r\n\r\n        view \r\n\r\n        returns (address) \r\n\r\n    {\r\n\r\n        address identity = _delegateKeyToIdentity[delegateKey];\r\n\r\n        \r\n\r\n        require(\r\n\r\n            identity != address(0),\r\n\r\n            \"SignataIdentity: The delegate key provided is not linked to an existing identity.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        return identity;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getLockCount(address identity)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256) \r\n\r\n    {\r\n\r\n         require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        return _identityLockCount[identity];\r\n\r\n    }    \r\n\r\n    \r\n\r\n    function getRolloverCount(address identity)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256) \r\n\r\n    {\r\n\r\n        require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        return _identityRolloverCount[identity];\r\n\r\n    }\r\n\r\n    \r\n\r\n    function isLocked(address identity)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (bool) \r\n\r\n    {\r\n\r\n        require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        return _identityLocked[identity];\r\n\r\n    }\r\n\r\n    \r\n\r\n    function rollover(\r\n\r\n        address identity,\r\n\r\n        uint8 delegateV, \r\n\r\n        bytes32 delegateR, \r\n\r\n        bytes32 delegateS, \r\n\r\n        uint8 securityV, \r\n\r\n        bytes32 securityR, \r\n\r\n        bytes32 securityS,\r\n\r\n        address newDelegateKey, \r\n\r\n        address newSecurityKey\r\n\r\n    ) \r\n\r\n        external \r\n\r\n    {\r\n\r\n        require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            identity != newDelegateKey && identity != newSecurityKey && newDelegateKey != newSecurityKey,\r\n\r\n            \"SignataIdentity: The keys must be unique.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _delegateKeyToIdentity[newDelegateKey] == address(0),\r\n\r\n            \"SignataIdentity: The new delegate key must not already be in use.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            msg.sender == _identityToDelegateKey[identity] || msg.sender == _identityToSecurityKey[identity],\r\n\r\n            \"SignataIdentity: The sender is unauthorised to rollover the identity.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityRolloverCount[identity] != MAX_UINT256,\r\n\r\n            \"SignataIdentity: The identity has already reached the maximum number of rollovers allowed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        bytes32 digest = keccak256(\r\n\r\n            abi.encodePacked(\r\n\r\n                \"\\x19\\x01\",\r\n\r\n                _domainSeperator,\r\n\r\n                keccak256(\r\n\r\n                    abi.encode(\r\n\r\n                        TXTYPE_ROLLOVER_DIGEST,\r\n\r\n                        newDelegateKey,\r\n\r\n                        newSecurityKey,\r\n\r\n                        _identityRolloverCount[identity]\r\n\r\n                    )\r\n\r\n                )\r\n\r\n            )\r\n\r\n        );\r\n\r\n        \r\n\r\n        address delegateKey = ecrecover(digest, delegateV, delegateR, delegateS);\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityToDelegateKey[identity] == delegateKey,\r\n\r\n            \"SignataIdentity: Invalid delegate key signature provided.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        address securityKey = ecrecover(digest, securityV, securityR, securityS);\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityToSecurityKey[identity] == securityKey,\r\n\r\n            \"SignataIdentity: Invalid delegate key signature provided.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        delete _delegateKeyToIdentity[delegateKey];\r\n\r\n        \r\n\r\n        _delegateKeyToIdentity[newDelegateKey] = identity;\r\n\r\n        _identityToDelegateKey[identity] = newDelegateKey;\r\n\r\n        _identityToSecurityKey[identity] = newSecurityKey;\r\n\r\n        _identityRolloverCount[identity] += 1;\r\n\r\n        \r\n\r\n        emit Rollover(identity, newDelegateKey, newSecurityKey);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function unlock(\r\n\r\n        address identity,\r\n\r\n        uint8 delegateV, \r\n\r\n        bytes32 delegateR, \r\n\r\n        bytes32 delegateS, \r\n\r\n        uint8 securityV, \r\n\r\n        bytes32 securityR, \r\n\r\n        bytes32 securityS\r\n\r\n    ) \r\n\r\n        external \r\n\r\n    {\r\n\r\n        require(\r\n\r\n            _identityExists[identity],\r\n\r\n            \"SignataIdentity: The identity must exist.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            !_identityDestroyed[identity],\r\n\r\n            \"SignataIdentity: The identity has been destroyed.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityLocked[identity],\r\n\r\n            \"SignataIdentity: The identity is already unlocked.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityLockCount[identity] != MAX_UINT256,\r\n\r\n            \"SignataIdentity: The identity is permanently locked.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        require(\r\n\r\n            msg.sender == _identityToDelegateKey[identity] || msg.sender == _identityToSecurityKey[identity],\r\n\r\n            \"SignataIdentity: The sender is unauthorised to unlock the identity.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        bytes32 digest = keccak256(\r\n\r\n            abi.encodePacked(\r\n\r\n                \"\\x19\\x01\",\r\n\r\n                _domainSeperator,\r\n\r\n                keccak256(\r\n\r\n                    abi.encode(\r\n\r\n                        TXTYPE_UNLOCK_DIGEST,\r\n\r\n                        _identityLockCount[identity]\r\n\r\n                    )\r\n\r\n                )\r\n\r\n            )\r\n\r\n        );\r\n\r\n        \r\n\r\n        address delegateKey = ecrecover(digest, delegateV, delegateR, delegateS);\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityToDelegateKey[identity] == delegateKey,\r\n\r\n            \"SignataIdentity: Invalid delegate key signature provided.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        address securityKey = ecrecover(digest, securityV, securityR, securityS);\r\n\r\n        \r\n\r\n        require(\r\n\r\n            _identityToSecurityKey[identity] == securityKey,\r\n\r\n            \"SignataIdentity: Invalid security key signature provided.\"\r\n\r\n        );\r\n\r\n        \r\n\r\n        _identityLocked[identity] = false;\r\n\r\n        \r\n\r\n        emit Unlock(identity);\r\n\r\n    }\r\n\r\n}\r\n// File: contracts/openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/VeriswapERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.14;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VeriswapERC20 is Ownable, ReentrancyGuard {\r\n\r\n    SignataIdentity public signataIdentity;\r\n\r\n\r\n\r\n    enum States {\r\n\r\n        INVALID,\r\n\r\n        OPEN,\r\n\r\n        CLOSED,\r\n\r\n        EXPIRED\r\n\r\n    }\r\n\r\n\r\n\r\n    struct AtomicSwap {\r\n\r\n      address inputToken;\r\n\r\n      uint256 inputAmount;\r\n\r\n      address outputToken;\r\n\r\n      uint256 outputAmount;\r\n\r\n      address executor;\r\n\r\n      address creator;\r\n\r\n      bool requireIdentity;\r\n\r\n      States state;\r\n\r\n    }\r\n\r\n\r\n\r\n    bool public canSwap = true;\r\n\r\n\r\n\r\n    mapping (address => AtomicSwap) public swaps;\r\n\r\n\r\n\r\n    event SwapCreated(AtomicSwap swapData);\r\n\r\n    event SwapExecuted(address creatorAddress);\r\n\r\n    event SwapCancelled(address creatorAddress);\r\n\r\n    event ExecutorModified(address creatorAddress, address oldExecutor, address newExecutor);\r\n\r\n    event IdentityContractChanged(SignataIdentity newIdentity);\r\n\r\n\r\n\r\n    constructor(SignataIdentity _signataIdentity) {\r\n\r\n        signataIdentity = _signataIdentity;\r\n\r\n    }\r\n\r\n\r\n\r\n    function createSwap(\r\n\r\n      address _inputToken,\r\n\r\n      uint256 _inputAmount,\r\n\r\n      address _outputToken,\r\n\r\n      uint256 _outputAmount,\r\n\r\n      address _executor,\r\n\r\n      bool _requireIdentity\r\n\r\n    ) public {\r\n\r\n        if (_requireIdentity) {\r\n\r\n            require(!signataIdentity.isLocked(msg.sender), \"createSwap::creator must not be locked.\");\r\n\r\n            // don't check the executor yet, just in case they go and register after the fact.\r\n\r\n        }\r\n\r\n        AtomicSwap memory swapToCheck = swaps[msg.sender];\r\n\r\n        require(swapToCheck.state != States.OPEN, \"createSwap::already have an open swap.\");\r\n\r\n\r\n\r\n        IERC20 inputToken = IERC20(_inputToken);\r\n\r\n\r\n\r\n        // check allowance\r\n\r\n        require(_inputAmount <= inputToken.allowance(msg.sender, address(this)), \"createSwap::insufficient allowance\");\r\n\r\n\r\n\r\n        // transfer into escrow\r\n\r\n        require(inputToken.transferFrom(msg.sender, address(this), _inputAmount), \"createSwap::transferFrom failed\");\r\n\r\n\r\n\r\n        // store the details\r\n\r\n        AtomicSwap memory newSwap = AtomicSwap({\r\n\r\n          inputToken: _inputToken,\r\n\r\n          inputAmount: _inputAmount,\r\n\r\n          outputToken: _outputToken,\r\n\r\n          outputAmount: _outputAmount,\r\n\r\n          executor: _executor,\r\n\r\n          creator: msg.sender,\r\n\r\n          requireIdentity: _requireIdentity,\r\n\r\n          state: States.OPEN\r\n\r\n        });\r\n\r\n        swaps[msg.sender] = newSwap;\r\n\r\n\r\n\r\n        emit SwapCreated(newSwap);\r\n\r\n    }\r\n\r\n\r\n\r\n    function executeSwap(address creatorAddress) nonReentrant external {\r\n\r\n      require(canSwap, \"executeSwap::swaps not enabled!\");\r\n\r\n\r\n\r\n      // check the state\r\n\r\n      AtomicSwap memory swapToExecute = swaps[creatorAddress];\r\n\r\n\r\n\r\n      require(swapToExecute.state == States.OPEN, \"executeSwap::not an open swap.\");\r\n\r\n      require(swapToExecute.executor == msg.sender, \"executeSwap::only the executor can call this function.\");\r\n\r\n\r\n\r\n      // check identities\r\n\r\n      if (swapToExecute.requireIdentity == true) {\r\n\r\n        require(!signataIdentity.isLocked(msg.sender), \"executeSwap::Sender must not be locked.\");\r\n\r\n        require(!signataIdentity.isLocked(swapToExecute.executor), \"executeSwap::Trader must not be locked.\");\r\n\r\n      }\r\n\r\n\r\n\r\n      IERC20 outputToken = IERC20(swapToExecute.outputToken);\r\n\r\n      IERC20 inputToken = IERC20(swapToExecute.inputToken);\r\n\r\n\r\n\r\n      swaps[swapToExecute.creator].state = States.CLOSED;\r\n\r\n\r\n\r\n      // check allowance\r\n\r\n      require(swapToExecute.outputAmount <= outputToken.allowance(msg.sender, address(this)));\r\n\r\n      // send the input to the executor\r\n\r\n      require(inputToken.transfer(swapToExecute.executor, swapToExecute.inputAmount));\r\n\r\n      // send the output to the creator\r\n\r\n      require(outputToken.transferFrom(msg.sender, swapToExecute.creator, swapToExecute.outputAmount));\r\n\r\n\r\n\r\n      // send the parties their respective tokens\r\n\r\n      emit SwapExecuted(creatorAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    function cancelSwap() nonReentrant external {\r\n\r\n      AtomicSwap memory swapToCancel = swaps[msg.sender];\r\n\r\n      require(swapToCancel.creator == msg.sender, \"cancelSwap::not the creator.\");\r\n\r\n      require(swapToCancel.state == States.OPEN, \"cancelSwap::not an open swap.\");\r\n\r\n\r\n\r\n      swaps[msg.sender].state = States.EXPIRED;\r\n\r\n\r\n\r\n      // return the input back to the creator\r\n\r\n      IERC20 inputToken = IERC20(swapToCancel.inputToken);\r\n\r\n      require(inputToken.transfer(swapToCancel.creator, swapToCancel.inputAmount));\r\n\r\n\r\n\r\n      emit SwapCancelled(swapToCancel.creator);\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeExecutor(address newExecutor) external {\r\n\r\n      require(newExecutor != address(0), \"changeExecutor::cannot set to 0 address!\");\r\n\r\n      AtomicSwap memory swapToChange = swaps[msg.sender];\r\n\r\n\r\n\r\n      address oldExecutor = swaps[msg.sender].executor;\r\n\r\n\r\n\r\n      require(newExecutor != oldExecutor, \"changeExecutor::not different values!\");\r\n\r\n      require(swapToChange.creator == msg.sender, \"changeExecutor::not the creator!\");\r\n\r\n      require(swapToChange.state == States.OPEN, \"changeExecutor::not an open swap!\");\r\n\r\n\r\n\r\n      swaps[msg.sender].executor = newExecutor;\r\n\r\n\r\n\r\n      emit ExecutorModified(msg.sender, oldExecutor, newExecutor);\r\n\r\n    }\r\n\r\n\r\n\r\n    function enableSwaps() external onlyOwner { canSwap = true; }\r\n\r\n    function disableSwaps() external onlyOwner { canSwap = false; }\r\n\r\n    \r\n\r\n    function updateSignataIdentity(SignataIdentity newIdentity) external onlyOwner {\r\n\r\n        signataIdentity = newIdentity;\r\n\r\n        emit IdentityContractChanged(newIdentity);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract SignataIdentity\",\"name\":\"_signataIdentity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"ExecutorModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract SignataIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"}],\"name\":\"SwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"requireIdentity\",\"type\":\"bool\"},{\"internalType\":\"enum VeriswapERC20.States\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct VeriswapERC20.AtomicSwap\",\"name\":\"swapData\",\"type\":\"tuple\"}],\"name\":\"SwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"canSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"changeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_requireIdentity\",\"type\":\"bool\"}],\"name\":\"createSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signataIdentity\",\"outputs\":[{\"internalType\":\"contract SignataIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"requireIdentity\",\"type\":\"bool\"},{\"internalType\":\"enum VeriswapERC20.States\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SignataIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"updateSignataIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VeriswapERC20","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b47e26a52a9b5b467b98142e382c081ea97b0fc","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f9ddbe8e986f7d81ce05d546237668f75f50ffc0a5d41e73066d98d486f19512"}]}