{"status":"1","message":"OK","result":[{"SourceCode":"//       :                                   .                                 \r\n                        //      ^PY7                               :!!                                 \r\n                        //      ~GB5?.                            !??:                                 \r\n                        //      ~&&G?J.                          !PJY5:                                \r\n                        //      ~&B#G#Y.                        !PJYB#.                                \r\n                        //      !#B&#5P5.                     .7GBG&@&:                                \r\n                        //      ~##&#PG#Y                    .!P55@@@#:                                \r\n                        //      :B#55BP5B5:                  ^!GGB@@&B.                                \r\n                        //      .GG?Y&BPJ?J.                ~7^7G#B#BB.                                \r\n                        //      :GG5BGBB5~?J.              !J!^JBG5PG5                                 \r\n                        //      :B&BBBGB#BP5?             !G?!!JY555Y~                                 \r\n                        //      :B#B&&G#BB#!!!           :GG?BP5G&B555.                                \r\n                        //      .B#B&&#&B&&GJB!         .5#GGBG###GPGP                                 \r\n                        //      .GG#&&&@&#BGYBG:        7P#P&#GB#5BGB?                                 \r\n                        //      :P##GBGBGGB5??#J       :7Y##5BB#5P#B5Y                                 \r\n                        //      .5GP5PPPPG#G55?P^      ?5#@BPBB5YPB5JJ                                 \r\n                        //       ?P555BB#&@#P#^77.    ^JG#GY5Y5PYYYY?:                                 \r\n                        //       ^#GPGP#&G&&#@Y!J?   .YG5JPJPB#&55PBJ.                                 \r\n                        //        7##BG@BPB&G#&~YB:  7#PY?#B#&###@##^                                  \r\n                        //         !###&PP&#5B#5Y&? .5YP5P&B#&#&@GP~                                   \r\n                        //          ^G@#G#@#B#JB?&B:?GGPG&PBB&&#PJ:                                    \r\n                        //           .Y&BBP5#YY@#5#5YB&?5#JBBGYY?.                                     \r\n                        //             5GY77&Y?J?BY^:P#!P5PY57^J.                                      \r\n                        //             ^5~^~5J~.!BJ?7YY~~~BJ?5?~                                       \r\n                        //            ~!!J!~~777YP5YJ?5YJ?#J?JJ?!^.                                    \r\n                        //         .!5?:!YJ?777J75?..:~!7?GPGJPBGP5!                                   \r\n                        //        ^?YJ^~JYGJB5JBGBY.^~YJYJJ#5GGPPBGJ!:.                                \r\n                        //      ^??~^~7JY?PJ&5BB#GPP&YGP#P7BGBYBPY??J?7^                               \r\n                        //     !5J7777?J5B5G@B##&#&@BY&B&5?B?!G#?!!7JYYJ^                              \r\n                        //    .55JJ???JJJ#P&#&!5B#&#YG&&#GGG?!?G7^!7?YJY?                              \r\n                        //    .PP5YYYYY5~Y#BBG 7P#P?Y&#BB~Y!..?G~.!?J??YJ                              \r\n                        //    ^GGP5P55PPY!BG&P?~JJ7!5G55G~7..:GP..?J???Y5.                             \r\n                        //    ^B#G555PGGBJ?B#B&J?77JJ:YYGYY~~YG! 7YJ?JPPP:                             \r\n                        //    :P###PP55PGB?G#&GYJ?JBJ7P5YGG..PB^7YY5PBBB5.                             \r\n                        //     7##PG&B#PPG5P&&G55#&@G5&G5@G~?G#J55B&&##B7                              \r\n                        //      Y#P#GP&&&&#&@#BB&BJG@B@GB@PJ5&&B##&&&#G7                               \r\n                        //       7B&GPGB#PP&@&#@#GJP@&&B&#JY##&&G##B5Y7                                \r\n                        //        ^JG5JP#5G#GB#&BGP&@@&&@P5B@GBG?5JJ!:                                 \r\n                        //          :7?JJY##GPG&G5#&G&#&#BGGY7GJ7!~:                                   \r\n                        //            .:!?Y5PGP55G5?5&G#J7?7777~:.                                     \r\n                        //                :~7YGGP5PB5YJGY5Y!~:.                                        \r\n                        //                    :^!JYY5J777^.                                            \r\n                        //                         ...        \r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/a.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ncontract LoveAuction is Ownable, ERC721Holder {\r\n\r\n    mapping(address => uint256) public biderBurns;\r\n    address[] public biders;\r\n\r\n    bool public isOpen = false;\r\n    uint256 public totalBurned = 0;\r\n\r\n    IERC721 loveLoves;\r\n\r\n    address targetAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    constructor(address nftAddress) {\r\n        loveLoves = IERC721(nftAddress);\r\n    }\r\n\r\n    function bid(uint256[] calldata ids) public {\r\n        require(isOpen, \"not start\");\r\n        require(ids.length > 0, \"need love\");\r\n\r\n        if(biderBurns[msg.sender] == 0) {\r\n          biders.push(msg.sender);\r\n        }\r\n\r\n        biderBurns[msg.sender] += ids.length;\r\n        totalBurned += ids.length;\r\n\r\n        for (uint i=0; i< ids.length; i++) {\r\n            loveLoves.transferFrom(\r\n                msg.sender, targetAddress, ids[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function toggleOpen() public onlyOwner {\r\n        isOpen = !isOpen;\r\n    }\r\n\r\n    function setTarget(address newTarget) public onlyOwner {\r\n        targetAddress = newTarget;\r\n    }\r\n\r\n    function totalBider() public view returns (uint256) {\r\n        return biders.length;\r\n    }\r\n\r\n    function getBurnInfo(uint index) public view returns(address bider, uint burns) {\r\n        bider = biders[index];\r\n        burns = biderBurns[bider];\r\n    }\r\n\r\n    struct BurnInfo {\r\n      address bider;\r\n      uint burns;\r\n    }\r\n\r\n    function page(uint256 pageIndex, uint256 pageSize) public view returns (BurnInfo[] memory burners) {\r\n        uint256 start = pageIndex * pageSize;\r\n        uint256 length = _min(pageSize, start > biders.length ? 0: biders.length - start);\r\n        burners = new BurnInfo[](length);\r\n        for (uint i = 0; i < length ; i++) {\r\n            (address bider, uint burns) = getBurnInfo(start + i);\r\n            burners[i] = BurnInfo(bider, burns);\r\n        }\r\n    }\r\n\r\n    function _min(uint a, uint b) internal pure returns (uint) {\r\n      return a >= b ? b : a;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"biderBurns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"biders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBurnInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burns\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"page\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burns\",\"type\":\"uint256\"}],\"internalType\":\"struct LoveAuction.BurnInfo[]\",\"name\":\"burners\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoveAuction","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d44dc6a31c984b1e138894288985edd17c83d623","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9a6fdb6d6969a7b63024253230cb45e9321e25f9770d4bdf20c7644aafaedac6"}]}