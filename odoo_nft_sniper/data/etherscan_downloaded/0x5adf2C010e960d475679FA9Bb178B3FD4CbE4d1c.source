{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ChainboxContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n *\\n *\\n * Chainbox Proxy by Robin Syihab\\n *\\n * Chainbox proxy smart contract\\n *\\n */\\nimport \\\"Ownable.sol\\\";\\nimport \\\"HasAdmin.sol\\\";\\nimport \\\"SigVerifier.sol\\\";\\n\\ncontract ChainboxProxy is Ownable, HasAdmin, SigVerifier {\\n    uint256 public minPrice = 0.0001 ether;\\n\\n    mapping(uint128 => address) private _ownerOf;\\n\\n    event Payment(\\n        address indexed sender,\\n        uint128 indexed projectId,\\n        uint256 indexed amount\\n    );\\n\\n    constructor(address admin) {\\n        _setAdmin(admin);\\n    }\\n\\n    function changeAdmin(address newAdmin) external onlyOwner {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(\\n            _isAdmin(_msgSender()) || _msgSender() == owner(),\\n            \\\"Only admin or owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function setMinPrice(uint256 newMinPrice) external onlyAdminOrOwner {\\n        minPrice = newMinPrice;\\n    }\\n\\n    function deployPayment(uint128 projectId) external payable {\\n        require(projectId != 0, \\\"Project ID cannot be 0\\\");\\n        require(msg.value >= minPrice, \\\"Not enough payment amount\\\");\\n\\n        address _sender = _msgSender();\\n\\n        if (_ownerOf[projectId] != 0x0000000000000000000000000000000000000000) {\\n            require(\\n                _ownerOf[projectId] == _sender,\\n                \\\"You are not the owner of this project\\\"\\n            );\\n        }\\n\\n        _ownerOf[projectId] = _sender;\\n\\n        emit Payment(_sender, projectId, msg.value);\\n    }\\n\\n    function ownerOf(uint128 projectId) external view returns (address) {\\n        return _ownerOf[projectId];\\n    }\\n\\n    function withdrawAll() external onlyOwner {\\n        require(address(this).balance > 0, \\\"No amount to withdraw\\\");\\n        payable(_msgSender()).transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"HasAdmin.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n *\\n * This code is part of Chainbox project (https://chainbox.one).\\n * Developed by Jagat Token (jagatoken.com).\\n *\\n */\\n\\ncontract HasAdmin {\\n    address private _admin;\\n\\n    event AdminChanged(address indexed admin);\\n\\n    modifier onlyAdmin {\\n        _onlyAdmin();\\n        _;\\n    }\\n\\n    function _onlyAdmin() private view {\\n        require(_isAdmin(msg.sender), \\\"Admin only\\\");\\n    }\\n\\n    function admin() public view returns(address) {\\n        return _admin;\\n    }\\n\\n    function _setAdmin(address account) internal {\\n        _admin = account;\\n        emit AdminChanged(_admin);\\n    }\\n\\n    function _isAdmin(address account) internal view returns(bool) {\\n        return account == _admin;\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"SigVerifier.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n *\\n * This code is part of Chainbox project (https://chainbox.one).\\n * Developed by Jagat Token (jagatoken.com).\\n *\\n */\\n\\ncontract SigVerifier {\\n    struct Sig {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n  function sigPrefixed(bytes32 hash) internal pure returns (bytes32) {\\n    return\\n      keccak256(abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', hash));\\n  }\\n\\n    \\n  function _isSigner(address account, bytes32 message, Sig memory sig)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ecrecover(message, sig.v, sig.r, sig.s) == account;\\n  }\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"ChainboxContract.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"projectId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"projectId\",\"type\":\"uint128\"}],\"name\":\"deployPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"projectId\",\"type\":\"uint128\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPrice\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainboxProxy","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009ab17fd1361ff95085df2a299028f229928a1919","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}