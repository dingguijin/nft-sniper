{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\n// pragma experimental ABIEncoderV2;\n\n////// lib/dss-exec-lib/src/CollateralOpts.sol\n/* pragma solidity ^0.6.12; */\n\nstruct CollateralOpts {\n    bytes32 ilk;\n    address gem;\n    address join;\n    address clip;\n    address calc;\n    address pip;\n    bool    isLiquidatable;\n    bool    isOSM;\n    bool    whitelistOSM;\n    uint256 ilkDebtCeiling;\n    uint256 minVaultAmount;\n    uint256 maxLiquidationAmount;\n    uint256 liquidationPenalty;\n    uint256 ilkStabilityFee;\n    uint256 startingPriceFactor;\n    uint256 breakerTolerance;\n    uint256 auctionDuration;\n    uint256 permittedDrop;\n    uint256 liquidationRatio;\n    uint256 kprFlatReward;\n    uint256 kprPctReward;\n}\n\n////// lib/dss-exec-lib/src/DssExecLib.sol\n//\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.12; */\n/* // pragma experimental ABIEncoderV2; */\n\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface Initializable {\n    function init(bytes32) external;\n}\n\ninterface Authorizable {\n    function rely(address) external;\n    function deny(address) external;\n    function setAuthority(address) external;\n}\n\ninterface Fileable {\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n}\n\ninterface Drippable {\n    function drip() external returns (uint256);\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface Pricing {\n    function poke(bytes32) external;\n}\n\ninterface ERC20 {\n    function decimals() external returns (uint8);\n}\n\ninterface DssVat {\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n    function Line() external view returns (uint256);\n    function suck(address, address, uint) external;\n}\n\ninterface ClipLike {\n    function vat() external returns (address);\n    function dog() external returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function ilk() external returns (bytes32);\n}\n\ninterface DogLike {\n    function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);\n}\n\ninterface JoinLike {\n    function vat() external returns (address);\n    function ilk() external returns (bytes32);\n    function gem() external returns (address);\n    function dec() external returns (uint256);\n    function join(address, uint) external;\n    function exit(address, uint) external;\n}\n\n// Includes Median and OSM functions\ninterface OracleLike_2 {\n    function src() external view returns (address);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n}\n\ninterface MomLike {\n    function setOsm(bytes32, address) external;\n    function setPriceTolerance(address, uint256) external;\n}\n\ninterface RegistryLike {\n    function add(address) external;\n    function xlip(bytes32) external view returns (address);\n}\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogLike {\n    function setVersion(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function getAddress(bytes32) external view returns (address);\n    function setAddress(bytes32, address) external;\n    function removeAddress(bytes32) external;\n}\n\ninterface IAMLike {\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\ninterface LerpFactoryLike {\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n}\n\ninterface LerpLike {\n    function tick() external returns (uint256);\n}\n\n\nlibrary DssExecLib {\n\n    /* WARNING\n\nThe following library code acts as an interface to the actual DssExecLib\nlibrary, which can be found in its own deployed contract. Only trust the actual\nlibrary's implementation.\n\n    */\n\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    uint256 constant internal WAD      = 10 ** 18;\n    uint256 constant internal RAY      = 10 ** 27;\n    uint256 constant internal RAD      = 10 ** 45;\n    uint256 constant internal THOUSAND = 10 ** 3;\n    uint256 constant internal MILLION  = 10 ** 6;\n    uint256 constant internal BPS_ONE_PCT             = 100;\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\n    function spotter()    public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\n    function setChangelogAddress(bytes32 _key, address _val) public {}\n    function setChangelogVersion(string memory _version) public {}\n    function authorize(address _base, address _ward) public {}\n    function setAuthority(address _base, address _authority) public {}\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\n    function updateCollateralPrice(bytes32 _ilk) public {}\n    function setContract(address _base, bytes32 _what, address _addr) public {}\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {}\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\n    function increaseGlobalDebtCeiling(uint256 _amount) public {}\n    function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {}\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n}\n\n////// lib/dss-exec-lib/src/DssAction.sol\n//\n// DssAction.sol -- DSS Executive Spell Actions\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface OracleLike_1 {\n    function src() external view returns (address);\n}\n\nabstract contract DssAction {\n\n    using DssExecLib for *;\n\n    // Modifier used to limit execution time when office hours is enabled\n    modifier limited {\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\n        _;\n    }\n\n    // Office Hours defaults to true by default.\n    //   To disable office hours, override this function and\n    //    return false in the inherited action.\n    function officeHours() public virtual returns (bool) {\n        return true;\n    }\n\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\n    function execute() external limited {\n        actions();\n    }\n\n    // DssAction developer must override `actions()` and place all actions to be called inside.\n    //   The DssExec function will call this subject to the officeHours limiter\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n    function actions() public virtual;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external virtual view returns (string memory);\n\n    // Returns the next available cast time\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n        require(eta <= uint40(-1));\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n    }\n}\n\n////// lib/dss-exec-lib/src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n    function description() external view returns (string memory);\n    function nextCastTime(uint256) external view returns (uint256);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        return SpellAction(action).nextCastTime(eta);\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// lib/dss-interfaces/src/ERC/GemAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// A base ERC-20 abstract class\n// https://eips.ethereum.org/EIPS/eip-20\ninterface GemAbstract {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function allowance(address, address) external view returns (uint256);\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\n////// lib/dss-interfaces/src/dss/ChainlogAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function keys() external view returns (bytes32[] memory);\n    function version() external view returns (string memory);\n    function ipfs() external view returns (string memory);\n    function setVersion(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setAddress(bytes32,address) external;\n    function removeAddress(bytes32) external;\n    function count() external view returns (uint256);\n    function get(uint256) external view returns (bytes32,address);\n    function list() external view returns (bytes32[] memory);\n    function getAddress(bytes32) external view returns (address);\n}\n\n// Helper function for returning address or abstract of Chainlog\n//  Valid on Mainnet, Kovan, Rinkeby, Ropsten, and Goerli\ncontract ChainlogHelper {\n    address          public constant ADDRESS  = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    ChainlogAbstract public constant ABSTRACT = ChainlogAbstract(ADDRESS);\n}\n\n////// lib/dss-interfaces/src/dss/GemJoinAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/join.sol\ninterface GemJoinAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function ilk() external view returns (bytes32);\n    function gem() external view returns (address);\n    function dec() external view returns (uint256);\n    function live() external view returns (uint256);\n    function cage() external;\n    function join(address, uint256) external;\n    function exit(address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/ilk-registry\ninterface IlkRegistryAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function dog() external view returns (address);\n    function cat() external view returns (address);\n    function spot() external view returns (address);\n    function ilkData(bytes32) external view returns (\n        uint96, address, address, uint8, uint96, address, address, string memory, string memory\n    );\n    function ilks() external view returns (bytes32[] memory);\n    function ilks(uint) external view returns (bytes32);\n    function add(address) external;\n    function remove(bytes32) external;\n    function update(bytes32) external;\n    function removeAuth(bytes32) external;\n    function file(bytes32, address) external;\n    function file(bytes32, bytes32, address) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, string calldata) external;\n    function count() external view returns (uint256);\n    function list() external view returns (bytes32[] memory);\n    function list(uint256, uint256) external view returns (bytes32[] memory);\n    function get(uint256) external view returns (bytes32);\n    function info(bytes32) external view returns (\n        string memory, string memory, uint256, uint256, address, address, address, address\n    );\n    function pos(bytes32) external view returns (uint256);\n    function class(bytes32) external view returns (uint256);\n    function gem(bytes32) external view returns (address);\n    function pip(bytes32) external view returns (address);\n    function join(bytes32) external view returns (address);\n    function xlip(bytes32) external view returns (address);\n    function dec(bytes32) external view returns (uint256);\n    function symbol(bytes32) external view returns (string memory);\n    function name(bytes32) external view returns (string memory);\n    function put(bytes32, address, address, uint256, uint256, address, address, string calldata, string calldata) external;\n}\n\n////// src/DssSpellCollateral.sol\n// SPDX-FileCopyrightText: © 2022 Dai Foundation <www.daifoundation.org>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n// Enable ABIEncoderV2 when onboarding collateral through `DssExecLib.addNewCollateral()`\n// // pragma experimental ABIEncoderV2;\n\n/* import \"dss-exec-lib/DssExecLib.sol\"; */\n/* import \"dss-interfaces/dss/ChainlogAbstract.sol\"; */\n/* import \"dss-interfaces/dss/GemJoinAbstract.sol\"; */\n/* import \"dss-interfaces/dss/IlkRegistryAbstract.sol\"; */\n/* import \"dss-interfaces/ERC/GemAbstract.sol\"; */\n\ninterface RwaLiquidationLike_2 {\n    function ilks(bytes32) external returns (string memory, address, uint48, uint48);\n    function init(bytes32, uint256, string calldata, uint48) external;\n}\n\ninterface RwaUrnLike_3 {\n    function vat() external view returns(address);\n    function jug() external view returns(address);\n    function gemJoin() external view returns(address);\n    function daiJoin() external view returns(address);\n    function outputConduit() external view returns(address);\n    function hope(address) external;\n}\n\ninterface RwaOutputConduitLike_2 {\n    function dai() external view returns(address);\n    function hope(address) external;\n    function mate(address) external;\n}\n\ninterface RwaInputConduitLike_2 {\n    function dai() external view returns(address);\n    function to() external view returns(address);\n    function mate(address usr) external;\n}\n\ncontract DssSpellCollateralAction {\n    // --- Rates ---\n    // Many of the settings that change weekly rely on the rate accumulator\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n    // To check this yourself, use the following rate calculation (example 8%):\n    //\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n    //\n    // A table of rates can be found at\n    //    https://ipfs.io/ipfs/QmX2QMoM1SZq2XMoTbMak8pZP86Y2icpgPAKDjQg4r4YHn\n\n    uint256 constant ZERO_PCT_RATE           = 1000000000000000000000000000;\n    uint256 constant ZERO_ZERO_FIVE_PCT_RATE = 1000000000015850933588756013;\n\n    // --- Math ---\n    uint256 public constant WAD = 10**18;\n    uint256 public constant RAY = 10**27;\n    uint256 public constant RAD = 10**45;\n\n    // -- RWA008 MIP21 components --\n    address constant RWA008                    = 0xb9737098b50d7c536b6416dAeB32879444F59fCA;\n    address constant MCD_JOIN_RWA008_A         = 0x56eDD5067d89D4E65Bf956c49eAF054e6Ff0b262;\n    address constant RWA008_A_URN              = 0x495215cabc630830071F80263a908E8826a66121;\n    address constant RWA008_A_URN_CLOSE_HELPER = 0xCfc4043675EE82EEAe63C90D6eb3aB2dcf833431;\n    address constant RWA008_A_INPUT_CONDUIT    = 0xa397a23dDA051186F202C67148c90683c413383C;\n    address constant RWA008_A_OUTPUT_CONDUIT   = 0x21CF5Ad1311788D762f9035829f81B9f54610F0C;\n    // SocGen's wallet\n    address constant RWA008_A_OPERATOR         = 0x03f1A14A5b31e2f1751b6db368451dFCEA5A0439;\n    // DIIS Group wallet\n    address constant RWA008_A_MATE             = 0xb9444802F0831A3EB9f90E24EFe5FfA20138d684;\n\n    string  constant RWA008_DOC                = \"QmdfzY6p5EpkYMN8wcomF2a1GsJbhkPiRQVRYSPfS4NZtB\";\n    /**\n     * The Future Value of the debt ceiling by the end of the agreement:\n     *   - 30,000,00 USD: Debt Ceiling\n     *   - 0.05% per year: Stability Fee\n     *   - 2.9 years: Duration of the Loan\n     *\n     *     bc -l <<< 'scale=18; (30000000 * e( l(1.0005) * 2.9 ))'\n     *\n     * There is no DssExecLib helper, so WAD precision is used.\n     */\n    uint256 constant RWA008_A_INITIAL_PRICE    = 30_043_520_665599336150000000;\n    uint48  constant RWA008_A_TAU              = 0;\n\n    // Ilk registry params\n    uint256 constant RWA008_REG_CLASS_RWA      = 3;\n\n    // Remaining params\n    uint256 constant RWA008_A_LINE             = 30_000_000;\n    uint256 constant RWA008_A_MAT              = 100_00; // 100% in basis-points\n    uint256 constant RWA008_A_RATE             = ZERO_ZERO_FIVE_PCT_RATE;\n    // -- RWA008 end --\n\n    // -- RWA009 MIP21 components --\n    address constant RWA009                  = 0x8b9734bbaA628bFC0c9f323ba08Ed184e5b88Da2;\n    address constant MCD_JOIN_RWA009_A       = 0xEe0FC514280f09083a32AE906cCbD2FAc4c680FA;\n    address constant RWA009_A_URN            = 0x1818EE501cd28e01E058E7C283E178E9e04a1e79;\n    address constant RWA009_A_JAR            = 0x6C6d4Be2223B5d202263515351034861dD9aFdb6;\n    // Goerli: CES Goerli Multisig / Mainnet: Genesis\n    address constant RWA009_A_OUTPUT_CONDUIT = 0x508D982e13263Fc8e1b5A4E6bf59b335202e36b4;\n\n    // MIP21_LIQUIDATION_ORACLE params\n    string  constant RWA009_DOC              = \"QmRe77P2JsvQWygVr9ZAMs4SHnjUQXz6uawdSboAaj2ryF\";\n    // There is no DssExecLib helper, so WAD precision is used.\n    uint256 constant RWA009_A_INITIAL_PRICE  = 100_000_000 * WAD;\n    uint48  constant RWA009_A_TAU            = 0;\n\n    // Ilk registry params\n    uint256 constant RWA009_REG_CLASS_RWA    = 3;\n\n    // Remaining params\n    uint256 constant RWA009_A_LINE           = 100_000_000;\n    uint256 constant RWA009_A_MAT            = 100_00; // 100% in basis-points\n    uint256 constant RWA009_A_RATE           = ZERO_PCT_RATE;\n\n    // -- RWA009 END --\n\n    function onboardRwa008(\n        ChainlogAbstract CHANGELOG,\n        IlkRegistryAbstract REGISTRY,\n        address MIP21_LIQUIDATION_ORACLE,\n        address MCD_VAT,\n        address MCD_JUG,\n        address MCD_SPOT,\n        address MCD_JOIN_DAI,\n        address MCD_DAI\n    ) internal {\n        // RWA008-A collateral deploy\n        bytes32 ilk      = \"RWA008-A\";\n        uint256 decimals = GemAbstract(RWA008).decimals();\n\n        // Sanity checks\n        require(GemJoinAbstract(MCD_JOIN_RWA008_A).vat() == MCD_VAT,  \"join-vat-not-match\");\n        require(GemJoinAbstract(MCD_JOIN_RWA008_A).ilk() == ilk,      \"join-ilk-not-match\");\n        require(GemJoinAbstract(MCD_JOIN_RWA008_A).gem() == RWA008,   \"join-gem-not-match\");\n        require(GemJoinAbstract(MCD_JOIN_RWA008_A).dec() == decimals, \"join-dec-not-match\");\n\n        require(RwaUrnLike_3(RWA008_A_URN).vat()           == MCD_VAT,                 \"urn-vat-not-match\");\n        require(RwaUrnLike_3(RWA008_A_URN).jug()           == MCD_JUG,                 \"urn-jug-not-match\");\n        require(RwaUrnLike_3(RWA008_A_URN).daiJoin()       == MCD_JOIN_DAI,            \"urn-daijoin-not-match\");\n        require(RwaUrnLike_3(RWA008_A_URN).gemJoin()       == MCD_JOIN_RWA008_A,       \"urn-gemjoin-not-match\");\n        require(RwaUrnLike_3(RWA008_A_URN).outputConduit() == RWA008_A_OUTPUT_CONDUIT, \"urn-outputconduit-not-match\");\n\n        require(RwaInputConduitLike_2(RWA008_A_INPUT_CONDUIT).dai() == MCD_DAI,      \"inputconduit-dai-not-match\");\n        require(RwaInputConduitLike_2(RWA008_A_INPUT_CONDUIT).to()  == RWA008_A_URN, \"inputconduit-to-not-match\");\n\n        require(RwaOutputConduitLike_2(RWA008_A_OUTPUT_CONDUIT).dai() == MCD_DAI, \"outputconduit-dai-not-match\");\n\n        // Init the RwaLiquidationOracle\n        RwaLiquidationLike_2(MIP21_LIQUIDATION_ORACLE).init(ilk, RWA008_A_INITIAL_PRICE, RWA008_DOC, RWA008_A_TAU);\n        (, address pip, , ) = RwaLiquidationLike_2(MIP21_LIQUIDATION_ORACLE).ilks(ilk);\n\n        // Set price feed for RWA008\n        DssExecLib.setContract(MCD_SPOT, ilk, \"pip\", pip);\n\n        // Init RWA008 in Vat\n        Initializable(MCD_VAT).init(ilk);\n        // Init RWA008 in Jug\n        Initializable(MCD_JUG).init(ilk);\n\n        // Allow RWA008 Join to modify Vat registry\n        DssExecLib.authorize(MCD_VAT, MCD_JOIN_RWA008_A);\n\n        // Set the debt ceiling\n        DssExecLib.increaseIlkDebtCeiling(ilk, RWA008_A_LINE, /* _global = */ true);\n\n        // Set the stability fee\n        DssExecLib.setIlkStabilityFee(ilk, RWA008_A_RATE, /* _doDrip = */ false);\n\n        // Set the collateralization ratio\n        DssExecLib.setIlkLiquidationRatio(ilk, RWA008_A_MAT);\n\n        // Poke the spotter to pull in a price\n        DssExecLib.updateCollateralPrice(ilk);\n\n        // Give the urn permissions on the join adapter\n        DssExecLib.authorize(MCD_JOIN_RWA008_A, RWA008_A_URN);\n\n        // Helper contract permisison on URN\n        RwaUrnLike_3(RWA008_A_URN).hope(RWA008_A_URN_CLOSE_HELPER);\n        RwaUrnLike_3(RWA008_A_URN).hope(RWA008_A_OPERATOR);\n\n        // Set up output conduit\n        //\n        // We are not hope-ing the operator wallet in this spell because SocGen could not verify their addess in time.\n        //\n        // There is a potential front-running attack:\n        //   1. The operator choses a legit `to` address with `pick()`\n        //   2. The mate calls `push()` on the output conduit\n        //   3. The operator front-runs the `push()` transaction and `pick()`s a fraudulent address.\n        //\n        // Once SocGen verifies the ownership of the address, it will be hope-d in the output conduit.\n        //\n        // RwaOutputConduitLike(RWA008_A_OUTPUT_CONDUIT).hope(RWA008_A_OPERATOR);\n\n        // Whitelist DIIS Group in the conduits\n        RwaOutputConduitLike_2(RWA008_A_OUTPUT_CONDUIT).mate(RWA008_A_MATE);\n        RwaInputConduitLike_2(RWA008_A_INPUT_CONDUIT)  .mate(RWA008_A_MATE);\n\n        // Whitelist Socgen in the conduits as a fallback for DIIS Group\n        RwaOutputConduitLike_2(RWA008_A_OUTPUT_CONDUIT).mate(RWA008_A_OPERATOR);\n        RwaInputConduitLike_2(RWA008_A_INPUT_CONDUIT)  .mate(RWA008_A_OPERATOR);\n\n        // Add RWA008 contract to the changelog\n        CHANGELOG.setAddress(\"RWA008\",                  RWA008);\n        CHANGELOG.setAddress(\"PIP_RWA008\",              pip);\n        CHANGELOG.setAddress(\"MCD_JOIN_RWA008_A\",       MCD_JOIN_RWA008_A);\n        CHANGELOG.setAddress(\"RWA008_A_URN\",            RWA008_A_URN);\n        CHANGELOG.setAddress(\"RWA008_A_INPUT_CONDUIT\",  RWA008_A_INPUT_CONDUIT);\n        CHANGELOG.setAddress(\"RWA008_A_OUTPUT_CONDUIT\", RWA008_A_OUTPUT_CONDUIT);\n\n        REGISTRY.put(\n            ilk,\n            MCD_JOIN_RWA008_A,\n            RWA008,\n            decimals,\n            RWA008_REG_CLASS_RWA,\n            pip,\n            address(0),\n            \"RWA008-A: SG Forge OFH\",\n            GemAbstract(RWA008).symbol()\n        );\n    }\n\n    function onboardRwa009(\n        ChainlogAbstract CHANGELOG,\n        IlkRegistryAbstract REGISTRY,\n        address MIP21_LIQUIDATION_ORACLE,\n        address MCD_VAT,\n        address MCD_JUG,\n        address MCD_SPOT,\n        address MCD_JOIN_DAI\n    ) internal {\n        // RWA009-A collateral deploy\n        bytes32 ilk      = \"RWA009-A\";\n        uint256 decimals = GemAbstract(RWA009).decimals();\n\n        // Sanity checks\n        require(GemJoinAbstract(MCD_JOIN_RWA009_A).vat() == MCD_VAT,  \"join-vat-not-match\");\n        require(GemJoinAbstract(MCD_JOIN_RWA009_A).ilk() == ilk,      \"join-ilk-not-match\");\n        require(GemJoinAbstract(MCD_JOIN_RWA009_A).gem() == RWA009,   \"join-gem-not-match\");\n        require(GemJoinAbstract(MCD_JOIN_RWA009_A).dec() == decimals, \"join-dec-not-match\");\n\n        require(RwaUrnLike_3(RWA009_A_URN).vat()           == MCD_VAT,                 \"urn-vat-not-match\");\n        require(RwaUrnLike_3(RWA009_A_URN).jug()           == MCD_JUG,                 \"urn-jug-not-match\");\n        require(RwaUrnLike_3(RWA009_A_URN).daiJoin()       == MCD_JOIN_DAI,            \"urn-daijoin-not-match\");\n        require(RwaUrnLike_3(RWA009_A_URN).gemJoin()       == MCD_JOIN_RWA009_A,       \"urn-gemjoin-not-match\");\n        require(RwaUrnLike_3(RWA009_A_URN).outputConduit() == RWA009_A_OUTPUT_CONDUIT, \"urn-outputconduit-not-match\");\n\n        // Init the RwaLiquidationOracle\n        RwaLiquidationLike_2(MIP21_LIQUIDATION_ORACLE).init(ilk, RWA009_A_INITIAL_PRICE, RWA009_DOC, RWA009_A_TAU);\n        (, address pip, , ) = RwaLiquidationLike_2(MIP21_LIQUIDATION_ORACLE).ilks(ilk);\n\n        // Set price feed for RWA009\n        DssExecLib.setContract(MCD_SPOT, ilk, \"pip\", pip);\n\n        // Init RWA009 in Vat\n        Initializable(MCD_VAT).init(ilk);\n        // Init RWA009 in Jug\n        Initializable(MCD_JUG).init(ilk);\n\n        // Allow RWA009 Join to modify Vat registry\n        DssExecLib.authorize(MCD_VAT, MCD_JOIN_RWA009_A);\n\n        // 100m debt ceiling\n        DssExecLib.increaseIlkDebtCeiling(ilk, RWA009_A_LINE, /* _global = */ true);\n\n        // Set the stability fee\n        DssExecLib.setIlkStabilityFee(ilk, RWA009_A_RATE, /* _doDrip = */ false);\n\n        // Set collateralization ratio\n        DssExecLib.setIlkLiquidationRatio(ilk, RWA009_A_MAT);\n\n        // Poke the spotter to pull in a price\n        DssExecLib.updateCollateralPrice(ilk);\n\n        // Give the urn permissions on the join adapter\n        DssExecLib.authorize(MCD_JOIN_RWA009_A, RWA009_A_URN);\n\n        // MCD_PAUSE_PROXY permission on URN\n        RwaUrnLike_3(RWA009_A_URN).hope(address(this));\n\n        // Add RWA009 contract to the changelog\n        CHANGELOG.setAddress(\"RWA009\",                  RWA009);\n        CHANGELOG.setAddress(\"PIP_RWA009\",              pip);\n        CHANGELOG.setAddress(\"MCD_JOIN_RWA009_A\",       MCD_JOIN_RWA009_A);\n        CHANGELOG.setAddress(\"RWA009_A_URN\",            RWA009_A_URN);\n        CHANGELOG.setAddress(\"RWA009_A_JAR\",            RWA009_A_JAR);\n        CHANGELOG.setAddress(\"RWA009_A_OUTPUT_CONDUIT\", RWA009_A_OUTPUT_CONDUIT);\n\n        // Add RWA009 to ILK REGISTRY\n        REGISTRY.put(\n            ilk,\n            MCD_JOIN_RWA009_A,\n            RWA009,\n            decimals,\n            RWA009_REG_CLASS_RWA,\n            pip,\n            address(0),\n            \"RWA009-A: H. V. Bank\",\n            GemAbstract(RWA009).symbol()\n        );\n    }\n\n    function onboardNewCollaterals() internal {\n        ChainlogAbstract CHANGELOG       = ChainlogAbstract(DssExecLib.LOG);\n        IlkRegistryAbstract REGISTRY     = IlkRegistryAbstract(DssExecLib.reg());\n        address MIP21_LIQUIDATION_ORACLE = CHANGELOG.getAddress(\"MIP21_LIQUIDATION_ORACLE\");\n        address MCD_VAT                  = DssExecLib.vat();\n        address MCD_DAI                  = DssExecLib.dai();\n        address MCD_JUG                  = DssExecLib.jug();\n        address MCD_SPOT                 = DssExecLib.spotter();\n        address MCD_JOIN_DAI             = DssExecLib.daiJoin();\n\n        // --------------------------- RWA Collateral onboarding ---------------------------\n\n        // Onboard SocGen: https://vote.makerdao.com/polling/QmajCtnG\n        onboardRwa008(CHANGELOG, REGISTRY, MIP21_LIQUIDATION_ORACLE, MCD_VAT, MCD_JUG, MCD_SPOT, MCD_JOIN_DAI, MCD_DAI);\n\n        // Onboard HvB: https://vote.makerdao.com/polling/QmQMDasC\n        onboardRwa009(CHANGELOG, REGISTRY, MIP21_LIQUIDATION_ORACLE, MCD_VAT, MCD_JUG, MCD_SPOT, MCD_JOIN_DAI);\n    }\n\n    function offboardCollaterals() internal {}\n}\n\n\n////// src/DssSpell.sol\n// SPDX-FileCopyrightText: © 2020 Dai Foundation <www.daifoundation.org>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n// Enable ABIEncoderV2 when onboarding collateral through `DssExecLib.addNewCollateral()`\n// // pragma experimental ABIEncoderV2;\n\n/* import \"dss-exec-lib/DssExec.sol\"; */\n/* import \"dss-exec-lib/DssAction.sol\"; */\n\n/* import { DssSpellCollateralAction } from \"./DssSpellCollateral.sol\"; */\n\ninterface ERC20Like {\n    function approve(address, uint256) external returns (bool);\n}\n\ninterface RwaUrnLike_1 {\n    function lock(uint256) external;\n    function draw(uint256) external;\n}\n\ncontract DssSpellAction is DssAction, DssSpellCollateralAction {\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: cast keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/969f04cfec25e56791fbe4503bcbe2df7a58df1e/governance/votes/Executive%20vote%20-%20July%2029%2C%202022.md -q -O - 2>/dev/null)\"\n    string public constant override description =\n        \"2022-07-29 MakerDAO Executive Spell | Hash: 0x18850080b101bb43125dd2bec32e5e7196586c5614bb9a0f05f9bbe392901d64\";\n\n    address constant RWA_TOKEN_FAB = 0x2B3a4c18705e99bC29b22222dA7E10b643658552;\n\n    uint256 constant RWA009_DRAW_AMOUNT = 25_000_000 * WAD;\n\n    // Many of the settings that change weekly rely on the rate accumulator\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n    // To check this yourself, use the following rate calculation (example 8%):\n    //\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n    //\n    // A table of rates can be found at\n    //    https://ipfs.io/ipfs/QmX2QMoM1SZq2XMoTbMak8pZP86Y2icpgPAKDjQg4r4YHn\n    //\n\n    function officeHours() public override returns (bool) {\n        return true;\n    }\n\n    function actions() public override {\n\n        // ---------------------------------------------------------------------\n        // Includes changes from the DssSpellCollateralAction\n        onboardNewCollaterals();\n        // offboardCollaterals();\n\n        drawFromRWA009Urn();\n\n        // Add RWA_TOKEN_FAB to changelog\n        DssExecLib.setChangelogAddress(\"RWA_TOKEN_FAB\", RWA_TOKEN_FAB);\n\n        DssExecLib.setChangelogVersion(\"1.13.3\");\n    }\n\n    function drawFromRWA009Urn() internal {\n        // lock RWA009 Token in the URN\n        ERC20Like(RWA009).approve(RWA009_A_URN, 1 * WAD);\n        RwaUrnLike_1(RWA009_A_URN).lock(1 * WAD);\n\n        // draw DAI to genesis address\n        RwaUrnLike_1(RWA009_A_URN).draw(RWA009_DRAW_AMOUNT);\n    }\n}\n\ncontract DssSpell is DssExec {\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\n}\n\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"DssExecLib:8de6ddbcd5053d32292aaa0d2105a32d108484a6","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":""}]}