{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract MinerYieldFarm is Ownable, IERC20 {\r\n\r\n    // name and symbol for tokenized contract\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private immutable _decimals;\r\n\r\n    // lock time in blocks\r\n    uint256 public lockTime;\r\n\r\n    // fee for leaving staking early\r\n    uint256 public leaveEarlyFee;\r\n\r\n    // recipient of fee\r\n    address public feeRecipient;\r\n\r\n    // Staking Token\r\n    address public immutable token;\r\n\r\n    // Reward Token\r\n    address public immutable reward;\r\n    address public rewardTokenSwapper;\r\n\r\n    // User Info\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 unlockBlock;\r\n        uint256 totalExcluded;\r\n    }\r\n    // Address => UserInfo\r\n    mapping ( address => UserInfo ) public userInfo;\r\n\r\n    // Tracks Dividends\r\n    uint256 public totalRewards;\r\n    uint256 private totalShares;\r\n    uint256 private dividendsPerShare;\r\n    uint256 private constant precision = 10**18;\r\n\r\n    // Events\r\n    event SetLockTime(uint LockTime);\r\n    event SetEarlyFee(uint earlyFee);\r\n    event SetFeeRecipient(address FeeRecipient);\r\n\r\n    constructor(\r\n        address token_, \r\n        address feeRecipient_, \r\n        address reward_, \r\n        string memory name_, \r\n        string memory symbol_,\r\n        uint256 leaveEarlyFee_,\r\n        uint256 lockTime_\r\n    ){\r\n        require(\r\n            token_ != address(0) &&\r\n            feeRecipient_ != address(0) &&\r\n            reward_ != address(0),\r\n            'Zero Address'\r\n        );\r\n\r\n        token = token_;\r\n        feeRecipient = feeRecipient_;\r\n        reward = reward_;\r\n        leaveEarlyFee = leaveEarlyFee_;\r\n        lockTime = lockTime_;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = IERC20(token_).decimals();\r\n        emit Transfer(address(0), msg.sender, 0);\r\n    }\r\n\r\n    /** Returns the total number of tokens in existence */\r\n    function totalSupply() external view override returns (uint256) { \r\n        return totalShares; \r\n    }\r\n\r\n    /** Returns the number of tokens owned by `account` */\r\n    function balanceOf(address account) public view override returns (uint256) { \r\n        return userInfo[account].amount;\r\n    }\r\n\r\n    /** Returns the number of tokens `spender` can transfer from `holder` */\r\n    function allowance(address, address) external pure override returns (uint256) { \r\n        return 0; \r\n    }\r\n    \r\n    /** Token Name */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /** Token Ticker Symbol */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /** Tokens decimals */\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /** Approves `spender` to transfer `amount` tokens from caller */\r\n    function approve(address spender, uint256) public override returns (bool) {\r\n        emit Approval(msg.sender, spender, 0);\r\n        return true;\r\n    }\r\n  \r\n    /** Transfer Function */\r\n    function transfer(address, uint256) external override returns (bool) {\r\n        _claimReward(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /** Transfer Function */\r\n    function transferFrom(address, address, uint256) external override returns (bool) {\r\n        _claimReward(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function setLockTime(uint256 newLockTime) external onlyOwner {\r\n        require(\r\n            lockTime <= 10**7,\r\n            'Lock Time Too Long'\r\n        );\r\n        lockTime = newLockTime;\r\n        emit SetLockTime(newLockTime);\r\n    }\r\n\r\n    function setLeaveEarlyFee(uint256 newEarlyFee) external onlyOwner {\r\n        require(\r\n            newEarlyFee <= 25,\r\n            'Fee Too High'\r\n        );\r\n        leaveEarlyFee = newEarlyFee;\r\n        emit SetEarlyFee(newEarlyFee);\r\n    }\r\n\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(\r\n            newFeeRecipient != address(0),\r\n            'Zero Address'\r\n        );\r\n        feeRecipient = newFeeRecipient;\r\n        emit SetFeeRecipient(newFeeRecipient);\r\n    }\r\n\r\n    function setRewardTokenSwapper(address newTokenSwapper) external onlyOwner {\r\n        require(\r\n            newTokenSwapper != address(0),\r\n            'Zero Address'\r\n        );\r\n        rewardTokenSwapper = newTokenSwapper;\r\n    }\r\n\r\n    function withdraw(address token_) external onlyOwner {\r\n        require(\r\n            token != token_,\r\n            'Cannot Withdraw Staked Token'\r\n        );\r\n        require(\r\n            IERC20(token_).transfer(\r\n                msg.sender,\r\n                IERC20(token_).balanceOf(address(this))\r\n            ),\r\n            'Failure On Token Withdraw'\r\n        );\r\n    }\r\n\r\n    function claimRewards() external {\r\n        _claimReward(msg.sender);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        require(\r\n            amount <= userInfo[msg.sender].amount,\r\n            'Insufficient Amount'\r\n        );\r\n        require(\r\n            amount > 0,\r\n            'Zero Amount'\r\n        );\r\n        if (userInfo[msg.sender].amount > 0) {\r\n            _claimReward(msg.sender);\r\n        }\r\n\r\n        totalShares -= amount;\r\n        userInfo[msg.sender].amount -= amount;\r\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\r\n\r\n        uint fee = timeUntilUnlock(msg.sender) == 0 ? 0 : ( amount * leaveEarlyFee ) / 100;\r\n        if (fee > 0) {\r\n            require(\r\n                IERC20(token).transfer(feeRecipient, fee),\r\n                'Failure On Token Transfer'\r\n            );\r\n        }\r\n\r\n        uint sendAmount = amount - fee;\r\n        require(\r\n            IERC20(token).transfer(msg.sender, sendAmount),\r\n            'Failure On Token Transfer To Sender'\r\n        );\r\n        emit Transfer(address(this), msg.sender, sendAmount);\r\n    }\r\n\r\n    function stake(uint256 amount) external {\r\n        if (userInfo[msg.sender].amount > 0) {\r\n            _claimReward(msg.sender);\r\n        }\r\n\r\n        // transfer in tokens\r\n        uint received = _transferIn(token, amount);\r\n        \r\n        // update data\r\n        totalShares += received;\r\n        userInfo[msg.sender].amount += received;\r\n        userInfo[msg.sender].unlockBlock = block.number + lockTime;\r\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\r\n        emit Transfer(msg.sender, address(this), received);\r\n    }\r\n\r\n    function depositRewards(uint256 amount) external {\r\n        uint received = _transferIn(reward, amount);\r\n        dividendsPerShare += ((precision * received) / totalShares);\r\n        totalRewards += received;\r\n    }\r\n\r\n\r\n    function _claimReward(address user) internal {\r\n\r\n        // exit if zero value locked\r\n        if (userInfo[user].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // fetch pending rewards\r\n        uint256 amount = pendingRewards(user);\r\n        \r\n        // exit if zero rewards\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // update total excluded\r\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\r\n\r\n        // transfer reward to user\r\n        require(\r\n            IERC20(reward).transfer(user, amount),\r\n            'Failure On Token Claim'\r\n        );\r\n    }\r\n\r\n    function _transferIn(address _token, uint256 amount) internal returns (uint256) {\r\n        uint before = IERC20(_token).balanceOf(address(this));\r\n        bool s = IERC20(_token).transferFrom(msg.sender, address(this), amount);\r\n        uint received = IERC20(_token).balanceOf(address(this)) - before;\r\n        require(\r\n            s && received > 0 && received <= amount,\r\n            'Error On Transfer From'\r\n        );\r\n        return received;\r\n    }\r\n\r\n    function timeUntilUnlock(address user) public view returns (uint256) {\r\n        return userInfo[user].unlockBlock < block.number ? 0 : userInfo[user].unlockBlock - block.number;\r\n    }\r\n\r\n    function pendingRewards(address shareholder) public view returns (uint256) {\r\n        if(userInfo[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(userInfo[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = userInfo[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return (share * dividendsPerShare) / precision;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(\r\n            msg.value > 0,\r\n            'Zero Amount'\r\n        );\r\n        // purchase reward token\r\n        uint before = IERC20(reward).balanceOf(address(this));\r\n        (bool s,) = payable(rewardTokenSwapper).call{value: msg.value}(\"\");\r\n        require(s, 'Failure On Token Purchase');\r\n        uint received = IERC20(reward).balanceOf(address(this)) - before;\r\n        require(received > 0, 'Zero Received');\r\n        // update rewards\r\n        dividendsPerShare += ((precision * received) / totalShares);\r\n        totalRewards += received;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"leaveEarlyFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyFee\",\"type\":\"uint256\"}],\"name\":\"SetEarlyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"FeeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LockTime\",\"type\":\"uint256\"}],\"name\":\"SetLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveEarlyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEarlyFee\",\"type\":\"uint256\"}],\"name\":\"setLeaveEarlyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenSwapper\",\"type\":\"address\"}],\"name\":\"setRewardTokenSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"timeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MinerYieldFarm","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000062ca0d30eb980c769ac1c5ad153b148058b1408b00000000000000000000000075e2f2c5e23b1155a98e72c1a7e722c7a91ef3a50000000000000000000000002b645a57e82123796c3ea7d78de27c3e3ff7f01600000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000009d8000000000000000000000000000000000000000000000000000000000000000094d696e65722d455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094d494e45522d4554480000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7b98c336530b582bad3e844934cf3d701adba30f76684953661c4bdfb5aeb4fd"}]}