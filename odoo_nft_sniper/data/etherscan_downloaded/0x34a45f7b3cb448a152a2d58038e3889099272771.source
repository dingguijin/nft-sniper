{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/FakeMarketPrice.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/*\r\nFakeMarketPrice.sol\r\n\r\nIdea by Kilo and joe.\r\n\r\nwritten by:\r\nmousedev.eth\r\n\r\nedited by:\r\nthnod\r\n\r\nImplications of using FakeMarketPrice.sol\r\n\r\nAny call to _convertCentsToWei will fail.\r\n\r\nThese includes:\r\n1. modifier onlyOwnerOrAdmin\r\n    a. This means the fake market price MUST detect if sender is an admin, and continue to work if it is.\r\n2. createRandomizedIpc\r\n3. createIpcSeed\r\n4. buyIpc\r\n5. changeIpcName\r\n6. modifyDna\r\n7. buyXp\r\n8. getIpcPriceInWei\r\n\r\nSince _convertCentsToWei is called within the onlyOwnerOrAdmin modifier, these functions are also affected:\r\n1. setIpcPrice\r\n2. rollAttributes\r\n3. customizeDna\r\n4. randomizeDna\r\n5. changeAdminAuthorization\r\n6. setSpecialPriceForAddress\r\n7. changeIpcName\r\n\r\nHowever, we can solve this by allowing admin accounts to call the USD function.\r\n\r\nThe side effects are that under no circumstance can a user call the included functions without admin access.\r\n*/\r\n\r\n\r\ninterface MarketPrice {\r\n    function USD(uint256 _id) external view returns (uint256);\r\n}\r\n\r\n//=============================================================================\r\n//=============================================================================\r\ncontract FakeMarketPrice is Ownable {\r\n    \r\n    MarketPrice public OldMarketPrice = MarketPrice(0x2138FfE292fd0953f7fe2569111246E4DE9ff1DC);\r\n    \r\n    bool public willRevert = true;\r\n    bool public allowAdminUsage = true;\r\n    \r\n    address[] public admins;  // added so that admins are publicly visible\r\n    uint public numberOfAdmins = 0;  // needed for enumeration\r\n    mapping(address => bool) public isAdmin;\r\n\r\n\r\n    //-------------------------------------------------------------------------\r\n    //-------------------------------------------------------------------------\r\n    function setOldMarketPriceContract(address _marketPriceAddress) external onlyOwner {\r\n        OldMarketPrice = MarketPrice(_marketPriceAddress);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //-------------------------------------------------------------------------\r\n    function setRevert(bool _willRevert) external onlyOwner {\r\n        willRevert = _willRevert;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //-------------------------------------------------------------------------\r\n    function setAdminUsage(bool _allowAdminUsage) external onlyOwner {\r\n        allowAdminUsage = _allowAdminUsage;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //-------------------------------------------------------------------------\r\n    function setAdmin(address _admin, bool _isAdmin) external onlyOwner {\r\n        // check if admin needs to be added to list\r\n        if (!isAdmin[_admin] && _isAdmin) {\r\n            admins.push(_admin);\r\n        }\r\n        // check if admin needs to be removed from list\r\n        else if (isAdmin[_admin] && !_isAdmin) {\r\n            // find the admin in admins array\r\n            for (uint i = 0; i < admins.length; ++i) {\r\n                if (admins[i] == _admin) {\r\n                    // replace admin with the last element in the list\r\n                    admins[i] == admins[admins.length-1];\r\n                    // pop the list to remove the admin\r\n                    admins.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            revert(\"admin is already set to the value of _isAdmin\");\r\n        }\r\n\r\n        isAdmin[_admin] = _isAdmin;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //-------------------------------------------------------------------------\r\n    function USD(uint256) external view returns (uint256) {\r\n        if (willRevert) {\r\n            //If admins are allowed and they are one, return old market price.\r\n            if (allowAdminUsage && isAdmin[tx.origin]) {\r\n                return OldMarketPrice.USD(0);\r\n            }\r\n            else {\r\n                //revert.\r\n                revert();\r\n            }\r\n        }\r\n        //If reverting it turned off, return old market price.\r\n        return OldMarketPrice.USD(0);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OldMarketPrice\",\"outputs\":[{\"internalType\":\"contract MarketPrice\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAdminUsage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAdmins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowAdminUsage\",\"type\":\"bool\"}],\"name\":\"setAdminUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketPriceAddress\",\"type\":\"address\"}],\"name\":\"setOldMarketPriceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_willRevert\",\"type\":\"bool\"}],\"name\":\"setRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"willRevert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FakeMarketPrice","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://44996f6fb32e706008058a9cb4980df44ec35e6f8807630c7912268c26f871e1"}]}