{"status":"1","message":"OK","result":[{"SourceCode":"{\"DadContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Son.sol\\\";\\r\\n\\r\\ncontract DadContract{\\r\\n\\r\\n    //Other contracts\\r\\n    PPtoken private pptoken;\\r\\n    constructor(){\\r\\n        pptoken = PPtoken(0x0144B7e66993C6BfaB85581e8601f96BFE50c9Df);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getVote(uint256 tokenId, address delegatee) public{\\r\\n        Son current = new Son();\\r\\n        pptoken.transferFrom(msg.sender, address(current), tokenId);\\r\\n        current.claDelTra(tokenId, delegatee);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getMultipleVotes(uint256[] memory tokenIds, address delegatee) public{\\r\\n        for(uint i = 0; i \\u003c tokenIds.length; i++){\\r\\n            getVote(tokenIds[i], delegatee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n \\r\\n}\"},\"Son.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n\\r\\ncontract Son is IERC721Receiver {\\r\\n\\r\\n    //Other contracts\\r\\n    DAOtoken private immutable daotoken;\\r\\n    DelegationContract private immutable delegationcontract;\\r\\n    PPtoken private immutable pptoken;\\r\\n    constructor(){\\r\\n        daotoken = DAOtoken(0xa3aFb35a7d1155A141417707eB9Aac3522087659);\\r\\n        delegationcontract = DelegationContract(0x1755b682CfF797ee083FAf3F3e1C3e1015586c60);\\r\\n        pptoken = PPtoken(0x0144B7e66993C6BfaB85581e8601f96BFE50c9Df);\\r\\n    }\\r\\n\\r\\n\\r\\n    function claDelTra(uint256 tokenId, address delegatee) external {\\r\\n            daotoken.claim(tokenId);\\r\\n            delegationcontract.delegate(delegatee);\\r\\n            pptoken.transferFrom(address(this), tx.origin, tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function onERC721Received(address, address, uint256, bytes memory) public pure override returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nabstract contract DAOtoken {\\r\\n    function claim(uint256 _tokenId) public virtual;\\r\\n}\\r\\nabstract contract DelegationContract {\\r\\n    function delegate(address _delegatee) public virtual;\\r\\n}\\r\\nabstract contract PPtoken {\\r\\n      function transferFrom(address _from, address _to, uint256 _tokenId) public virtual;\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"getMultipleVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DadContract","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://40f2f72951ec1a1cd1eb4f5d21f2ad50a0de823e3ba9c6a5bc8c9bc54d9fb492"}]}