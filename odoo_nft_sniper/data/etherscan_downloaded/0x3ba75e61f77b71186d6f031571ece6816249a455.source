{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: IMaker.sol\r\n\r\ninterface GemLike {\r\n    function approve(address, uint256) external;\r\n\r\n    function transfer(address, uint256) external;\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n\r\n    function dai() external returns (GemLike);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint256);\r\n\r\n    function ilks(bytes32)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function dai(address) external view returns (uint256);\r\n\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function hope(address) external;\r\n\r\n    function move(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint256);\r\n\r\n    function gem() external returns (GemLike);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface OasisLike {\r\n    function sellAllAmount(\r\n        address pay_gem,\r\n        uint256 pay_amt,\r\n        address buy_gem,\r\n        uint256 min_fill_amount\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(\r\n        address,\r\n        uint256,\r\n        address\r\n    ) external view returns (uint256);\r\n\r\n    function ilks(uint256) external view returns (bytes32);\r\n\r\n    function owns(uint256) external view returns (address);\r\n\r\n    function urns(uint256) external view returns (address);\r\n\r\n    function vat() external view returns (address);\r\n\r\n    function open(bytes32, address) external returns (uint256);\r\n\r\n    function give(uint256, address) external;\r\n\r\n    function cdpAllow(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function urnAllow(address, uint256) external;\r\n\r\n    function frob(\r\n        uint256,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function flux(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function move(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function exit(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function quit(uint256, address) external;\r\n\r\n    function enter(address, uint256) external;\r\n\r\n    function shift(uint256, uint256) external;\r\n}\r\n\r\ninterface SpotLike {\r\n    function live() external view returns (uint256);\r\n\r\n    function par() external view returns (uint256);\r\n\r\n    function vat() external view returns (address);\r\n\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n}\r\n\r\ninterface DssAutoLine {\r\n    function exec(bytes32 _ilk) external returns (uint256);\r\n}\r\n\r\ninterface OracleSecurityModule {\r\n    function peek() external view returns (uint256, bool);\r\n\r\n    function peep() external view returns (uint256, bool);\r\n\r\n    function users(address) external view returns (bool);\r\n\r\n    function bud(address) external view returns (bool);\r\n\r\n    function oracle() external view returns (address);\r\n}\r\n\r\n// File: IOSMedianizer.sol\r\n\r\ninterface IOSMedianizer {\r\n    function foresight() external view returns (uint256 price, bool osm);\r\n\r\n    function read() external view returns (uint256 price, bool osm);\r\n\r\n  \tfunction setAuthorized(address _authorized) external;\r\n}\r\n\r\n// File: Math.sol\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: GUniPool.sol\r\n\r\ninterface GUniPool is IERC20 {\r\n\r\n    /// @notice mint fungible G-UNI tokens, fractional shares of a Uniswap V3 position\r\n    /// @dev to compute the amouint of tokens necessary to mint `mintAmount` see getMintAmounts\r\n    /// @param mintAmount The number of G-UNI tokens to mint\r\n    /// @param receiver The account to receive the minted tokens\r\n    /// @return amount0 amount of token0 transferred from msg.sender to mint `mintAmount`\r\n    /// @return amount1 amount of token1 transferred from msg.sender to mint `mintAmount`\r\n    /// @return liquidityMinted amount of liquidity added to the underlying Uniswap V3 position\r\n    // solhint-disable-next-line function-max-lines, code-complexity\r\n    function mint(uint256 mintAmount, address receiver)\r\n        external\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            uint128 liquidityMinted\r\n        );\r\n\r\n    /// @notice burn G-UNI tokens (fractional shares of a Uniswap V3 position) and receive tokens\r\n    /// @param burnAmount The number of G-UNI tokens to burn\r\n    /// @param receiver The account to receive the underlying amounts of token0 and token1\r\n    /// @return amount0 amount of token0 transferred to receiver for burning `burnAmount`\r\n    /// @return amount1 amount of token1 transferred to receiver for burning `burnAmount`\r\n    /// @return liquidityBurned amount of liquidity removed from the underlying Uniswap V3 position\r\n    // solhint-disable-next-line function-max-lines\r\n    function burn(uint256 burnAmount, address receiver)\r\n        external\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            uint128 liquidityBurned\r\n        );\r\n\r\n    // View functions\r\n\r\n    /// @notice compute maximum G-UNI tokens that can be minted from `amount0Max` and `amount1Max`\r\n    /// @param amount0Max The maximum amount of token0 to forward on mint\r\n    /// @param amount0Max The maximum amount of token1 to forward on mint\r\n    /// @return amount0 actual amount of token0 to forward when minting `mintAmount`\r\n    /// @return amount1 actual amount of token1 to forward when minting `mintAmount`\r\n    /// @return mintAmount maximum number of G-UNI tokens to mint\r\n    function getMintAmounts(uint256 amount0Max, uint256 amount1Max)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            uint256 mintAmount\r\n        );\r\n\r\n    /// @notice compute total underlying holdings of the G-UNI token supply\r\n    /// includes current liquidity invested in uniswap position, current fees earned\r\n    /// and any uninvested leftover (but does not include manager or gelato fees accrued)\r\n    /// @return amount0Current current total underlying balance of token0\r\n    /// @return amount1Current current total underlying balance of token1\r\n    function getUnderlyingBalances()\r\n        external\r\n        view\r\n        returns (uint256 amount0Current, uint256 amount1Current);\r\n\r\n}\r\n\r\n// File: SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: MakerDaiDelegateLib.sol\r\n\r\n//OSM\r\n\r\ninterface PSMLike {\r\n    function gemJoin() external view returns (address);\r\n    function sellGem(address usr, uint256 gemAmt) external;\r\n    function buyGem(address usr, uint256 gemAmt) external;\r\n}\r\n\r\ninterface IERC3156FlashLender {\r\n    function maxFlashLoan(\r\n        address token\r\n    ) external view returns (uint256);\r\n    function flashFee(\r\n        address token,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n    function flashLoan(\r\n        //IERC3156FlashBorrower receiver,\r\n        address receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC3156FlashBorrower {\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32);\r\n}\r\n\r\nlibrary MakerDaiDelegateLib {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    //event DebugDelegate(uint256 _number, uint _value);\r\n\r\n    enum Action {WIND, UNWIND}\r\n\r\n    //uint256 public constant otherTokenTo18Conversion = 10 ** (18 - _otherToken.decimals());\r\n    //Strategy specific addresses:\r\n    //dai:\r\n    IERC20 internal constant want = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 internal constant otherToken = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    uint256 public constant otherTokenTo18Conversion = 10 ** 12;\r\n    //usdc:\r\n    //IERC20 internal constant want = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    //IERC20 internal constant otherToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    //uint256 public constant otherTokenTo18Conversion = 1;\r\n\r\n    //GUNIDAIUSDC1 - Gelato Uniswap DAI/USDC LP - 0.05% fee\r\n    GUniPool internal constant yieldBearing = GUniPool(0xAbDDAfB225e10B90D798bB8A886238Fb835e2053);\r\n    bytes32 internal constant ilk_yieldBearing = 0x47554e49563344414955534443312d4100000000000000000000000000000000;\r\n    address internal constant gemJoinAdapter = 0xbFD445A97e7459b0eBb34cfbd3245750Dba4d7a4;\r\n\r\n    //GUNIDAIUSDC2 - Gelato Uniswap DAI/USDC2 LP 2 - 0.01% fee\r\n    //GUniPool internal constant yieldBearing = GUniPool(0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e);\r\n    //bytes32 internal constant ilk_yieldBearing = 0x47554e49563344414955534443322d4100000000000000000000000000000000;\r\n    //address internal constant gemJoinAdapter = 0xA7e4dDde3cBcEf122851A7C8F7A55f23c0Daf335;\r\n\r\n    PSMLike public constant psm = PSMLike(0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A) ;\r\n\r\n    IERC20 internal constant borrowToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    //MAKER Flashmint:\r\n    IERC3156FlashLender public constant flashmint = IERC3156FlashLender(0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853);\r\n\r\n    // Units used in Maker contracts\r\n    uint256 internal constant WAD = 10**18;\r\n    uint256 internal constant RAY = 10**27;\r\n\r\n    // Do not attempt to mint DAI if there are less than MIN_MINTABLE available. Used to be 500kDAI --> reduced to 50kDAI\r\n    uint256 internal constant MIN_MINTABLE = 50000 * WAD;\r\n\r\n    // Maker vaults manager\r\n    ManagerLike internal constant manager = ManagerLike(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\r\n\r\n    // Token Adapter Module for collateral\r\n    DaiJoinLike internal constant daiJoin = DaiJoinLike(0x9759A6Ac90977b93B58547b4A71c78317f391A28);\r\n\r\n    // Liaison between oracles and core Maker contracts\r\n    SpotLike internal constant spotter = SpotLike(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\r\n\r\n    // Part of the Maker Rates Module in charge of accumulating stability fees\r\n    JugLike internal constant jug = JugLike(0x19c0976f590D67707E62397C87829d896Dc0f1F1);\r\n\r\n    // Debt Ceiling Instant Access Module\r\n    DssAutoLine internal constant autoLine = DssAutoLine(0xC7Bdd1F2B16447dcf3dE045C4a039A60EC2f0ba3);\r\n\r\n    // ----------------- PUBLIC FUNCTIONS -----------------\r\n\r\n    // Creates an UrnHandler (cdp) for a specific ilk and allows to manage it via the internal\r\n    // registry of the manager.\r\n    function openCdp(bytes32 ilk) public returns (uint256) {\r\n        return manager.open(ilk, address(this));\r\n    }\r\n\r\n    // Moves cdpId collateral balance and debt to newCdpId.\r\n    function shiftCdp(uint256 cdpId, uint256 newCdpId) public {\r\n        manager.shift(cdpId, newCdpId);\r\n    }\r\n\r\n    // Transfers the ownership of cdp to recipient address in the manager registry.\r\n    function transferCdp(uint256 cdpId, address recipient) public {\r\n        manager.give(cdpId, recipient);\r\n    }\r\n\r\n    // Allow/revoke manager access to a cdp\r\n    function allowManagingCdp(\r\n        uint256 cdpId,\r\n        address user,\r\n        bool isAccessGranted\r\n    ) public {\r\n        manager.cdpAllow(cdpId, user, isAccessGranted ? 1 : 0);\r\n    }\r\n\r\n    // Deposits collateral (gem) and mints DAI\r\n    function lockGemAndDraw(\r\n        address gemJoin,\r\n        uint256 cdpId,\r\n        uint256 collateralAmount,\r\n        uint256 daiToMint,\r\n        uint256 totalDebt\r\n    ) public {\r\n        address urn = manager.urns(cdpId);\r\n        VatLike vat = VatLike(manager.vat());\r\n        bytes32 ilk = manager.ilks(cdpId);\r\n\r\n        if (daiToMint > 0) {\r\n            daiToMint = _forceMintWithinLimits(vat, ilk, daiToMint, totalDebt);\r\n        }\r\n\r\n        // Takes token amount from the strategy and joins into the vat\r\n        if (collateralAmount > 0) {\r\n            GemJoinLike(gemJoin).join(urn, collateralAmount);\r\n        }\r\n\r\n        // Locks token amount into the CDP and generates debt\r\n        manager.frob(\r\n            cdpId,\r\n            int256(convertTo18(gemJoin, collateralAmount)),\r\n            _getDrawDart(vat, urn, ilk, daiToMint)\r\n        );\r\n\r\n        // Moves the DAI amount to the strategy. Need to convert dai from [wad] to [rad]\r\n        manager.move(cdpId, address(this), daiToMint.mul(1e27));\r\n\r\n        // Allow access to DAI balance in the vat\r\n        vat.hope(address(daiJoin));\r\n\r\n        // Exits DAI to the user's wallet as a token\r\n        daiJoin.exit(address(this), daiToMint);\r\n    }\r\n\r\n    // Returns DAI to decrease debt and attempts to unlock any amount of collateral\r\n    function wipeAndFreeGem(\r\n        address gemJoin,\r\n        uint256 cdpId,\r\n        uint256 collateralAmount,\r\n        uint256 daiToRepay\r\n    ) public {\r\n        address urn = manager.urns(cdpId);\r\n\r\n        // Joins DAI amount into the vat\r\n        if (daiToRepay > 0) {\r\n            daiJoin.join(urn, daiToRepay);\r\n        }\r\n\r\n        uint256 wadC = convertTo18(gemJoin, collateralAmount);\r\n\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        manager.frob(\r\n            cdpId,\r\n            -int256(wadC),\r\n            _getWipeDart(\r\n                VatLike(manager.vat()),\r\n                VatLike(manager.vat()).dai(urn),\r\n                urn,\r\n                manager.ilks(cdpId)\r\n            )\r\n        );\r\n\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        manager.flux(cdpId, address(this), collateralAmount);\r\n\r\n        // Exits token amount to the strategy as a token\r\n        GemJoinLike(gemJoin).exit(address(this), collateralAmount);\r\n    }\r\n\r\n    function debtFloor(bytes32 ilk) public view returns (uint256) {\r\n        // uint256 Art;   // Total Normalised Debt     [wad]\r\n        // uint256 rate;  // Accumulated Rates         [ray]\r\n        // uint256 spot;  // Price with Safety Margin  [ray]\r\n        // uint256 line;  // Debt Ceiling              [rad]\r\n        // uint256 dust;  // Urn Debt Floor            [rad]\r\n        (, , , , uint256 dust) = VatLike(manager.vat()).ilks(ilk);\r\n        return dust.div(RAY);\r\n    }\r\n\r\n    function debtForCdp(uint256 cdpId, bytes32 ilk)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address urn = manager.urns(cdpId);\r\n        VatLike vat = VatLike(manager.vat());\r\n\r\n        // Normalized outstanding stablecoin debt [wad]\r\n        (, uint256 art) = vat.urns(ilk, urn);\r\n\r\n        // Gets actual rate from the vat [ray]\r\n        (, uint256 rate, , , ) = vat.ilks(ilk);\r\n\r\n        // Return the present value of the debt with accrued fees\r\n        return art.mul(rate).div(RAY);\r\n    }\r\n\r\n    function balanceOfCdp(uint256 cdpId, bytes32 ilk)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address urn = manager.urns(cdpId);\r\n        VatLike vat = VatLike(manager.vat());\r\n\r\n        (uint256 ink, ) = vat.urns(ilk, urn);\r\n        return ink;\r\n    }\r\n\r\n    // Returns value of DAI in the reference asset (e.g. $1 per DAI)\r\n    function getDaiPar() public view returns (uint256) {\r\n        // Value is returned in ray (10**27)\r\n        return spotter.par();\r\n    }\r\n\r\n    // Liquidation ratio for the given ilk returned in [ray]\r\n    function getLiquidationRatio(bytes32 ilk) public view returns (uint256) {\r\n        (, uint256 liquidationRatio) = spotter.ilks(ilk);\r\n        return liquidationRatio;\r\n    }\r\n\r\n    function getSpotPrice(bytes32 ilk) public view returns (uint256) {\r\n        VatLike vat = VatLike(manager.vat());\r\n\r\n        // spot: collateral price with safety margin returned in [ray]\r\n        (, , uint256 spot, , ) = vat.ilks(ilk);\r\n\r\n        uint256 liquidationRatio = getLiquidationRatio(ilk);\r\n\r\n        // convert ray*ray to wad\r\n        return spot.mul(liquidationRatio).div(RAY * 1e9);\r\n    }\r\n\r\n    function getPessimisticRatioOfCdpWithExternalPrice(\r\n        uint256 cdpId,\r\n        bytes32 ilk,\r\n        uint256 externalPrice,\r\n        uint256 collateralizationRatioPrecision\r\n    ) public view returns (uint256) {\r\n        // Use pessimistic price to determine the worst ratio possible\r\n        uint256 price = Math.min(getSpotPrice(ilk), externalPrice);\r\n        require(price > 0); // dev: invalid price\r\n\r\n        uint256 totalCollateralValue = balanceOfCdp(cdpId, ilk).mul(price).div(WAD);\r\n        uint256 totalDebt = debtForCdp(cdpId, ilk);\r\n\r\n        // If for some reason we do not have debt (e.g: deposits under dust)\r\n        // make sure the operation does not revert\r\n        if (totalDebt == 0) {\r\n            totalDebt = 1;\r\n        }\r\n\r\n        return totalCollateralValue.mul(collateralizationRatioPrecision).div(totalDebt);\r\n    }\r\n\r\n    // Make sure we update some key content in Maker contracts\r\n    // These can be updated by anyone without authenticating\r\n    function keepBasicMakerHygiene(bytes32 ilk) public {\r\n        // Update accumulated stability fees\r\n        jug.drip(ilk);\r\n\r\n        // Update the debt ceiling using DSS Auto Line\r\n        autoLine.exec(ilk);\r\n    }\r\n\r\n    function daiJoinAddress() public view returns (address) {\r\n        return address(daiJoin);\r\n    }\r\n\r\n    // Checks if there is at least MIN_MINTABLE dai available to be minted\r\n    function isDaiAvailableToMint(bytes32 ilk) public view returns (bool) {\r\n        return balanceOfDaiAvailableToMint(ilk) >= MIN_MINTABLE;\r\n    }\r\n\r\n    // Checks amount of Dai mintable\r\n    function balanceOfDaiAvailableToMint(bytes32 ilk) public view returns (uint256) {\r\n        VatLike vat = VatLike(manager.vat());\r\n        (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\r\n\r\n        // Total debt in [rad] (wad * ray)\r\n        uint256 vatDebt = Art.mul(rate);\r\n\r\n        if (vatDebt >= line) {\r\n            return 0;\r\n        }\r\n\r\n        return line.sub(vatDebt).div(RAY);\r\n    }\r\n\r\n    function wind(\r\n        uint256 wantAmountInitial,\r\n        uint256 targetCollateralizationRatio,\r\n        uint256 cdpId\r\n    ) public {\r\n        wantAmountInitial = Math.min(wantAmountInitial, balanceOfWant());\r\n        //Calculate how much borrowToken to mint to leverage up to targetCollateralizationRatio:\r\n        uint256 flashloanAmount = wantAmountInitial.mul(RAY).div(targetCollateralizationRatio.mul(1e9).sub(RAY));\r\n        VatLike vat = VatLike(manager.vat());\r\n        uint256 currentDebt = debtForCdp(cdpId, ilk_yieldBearing);\r\n        flashloanAmount = Math.min(flashloanAmount, _forceMintWithinLimits(vat, ilk_yieldBearing, flashloanAmount, currentDebt));\r\n        //Check if amount of dai to borrow is above debtFloor\r\n        if ( (currentDebt.add(flashloanAmount)) <= debtFloor(ilk_yieldBearing).add(1e15)){\r\n            return;\r\n        }\r\n        bytes memory data = abi.encode(Action.WIND, cdpId, wantAmountInitial, flashloanAmount, targetCollateralizationRatio);\r\n        _initFlashLoan(data, flashloanAmount);\r\n    }\r\n\r\n    function unwind(\r\n        uint256 wantAmountRequested,\r\n        uint256 targetCollateralizationRatio,\r\n        uint256 cdpId\r\n    ) public {\r\n        if (balanceOfCdp(cdpId, ilk_yieldBearing) == 0){\r\n            return;\r\n        }\r\n        //Paying off the full debt it's common to experience Vat/dust reverts: we circumvent this with add 1 Wei to the amount to be paid\r\n        uint256 flashloanAmount = debtForCdp(cdpId, ilk_yieldBearing).add(1);\r\n        bytes memory data = abi.encode(Action.UNWIND, cdpId, wantAmountRequested, flashloanAmount, targetCollateralizationRatio);\r\n        //Always flashloan entire debt to pay off entire debt:\r\n        _initFlashLoan(data, flashloanAmount);\r\n    }\r\n\r\n    function _wind(uint256 cdpId, uint256 flashloanRepayAmount, uint256 wantAmountInitial, uint256) public {\r\n        //repayAmount includes any fees\r\n        uint256 yieldBearingAmountToLock = _swapWantToYieldBearing(balanceOfWant());\r\n        //Check allowance to lock collateral\r\n        _checkAllowance(gemJoinAdapter, address(yieldBearing), yieldBearingAmountToLock);\r\n        //Lock collateral and borrow dai to repay flashmint\r\n        lockGemAndDraw(\r\n            gemJoinAdapter,\r\n            cdpId,\r\n            yieldBearingAmountToLock,\r\n            flashloanRepayAmount,\r\n            debtForCdp(cdpId, ilk_yieldBearing)\r\n        );\r\n    }\r\n\r\n    function _unwind(uint256 cdpId, uint256 flashloanRepayAmount, uint256 wantAmountRequested, uint256 targetCollateralizationRatio) public {\r\n        //Repay entire debt, to then take debt again later:\r\n        //Check allowance for repaying borrowToken Debt\r\n        uint256 currentDebtPlusRounding = debtForCdp(cdpId, ilk_yieldBearing).add(1);\r\n        _checkAllowance(daiJoinAddress(), address(borrowToken), currentDebtPlusRounding);\r\n        wipeAndFreeGem(gemJoinAdapter, cdpId, balanceOfCdp(cdpId, ilk_yieldBearing), currentDebtPlusRounding);\r\n        //All debt paid down, collateral unlocked\r\n        //Calculate leverage+1 to know how much totalRequestedInYieldBearing to swap for borrowToken\r\n        uint256 leveragePlusOne = (RAY.mul(WAD).div((targetCollateralizationRatio.mul(1e9).sub(RAY)))).add(WAD);\r\n        uint256 totalRequestedInYieldBearing = wantAmountRequested.mul(leveragePlusOne).div(getWantPerYieldBearing());\r\n        //Maximum of all yieldBearing can be requested\r\n        totalRequestedInYieldBearing = Math.min(totalRequestedInYieldBearing, balanceOfYieldBearing());\r\n\r\n        _swapYieldBearingToWant(totalRequestedInYieldBearing);\r\n        //Want amount requested now in wallet\r\n\r\n        //Lock collateral and borrow dai equivalent to amount given by targetCollateralizationRatio:\r\n        uint256 yieldBearingBalance = balanceOfYieldBearing();\r\n        uint256 borrowTokenAmountToMint = yieldBearingBalance.mul(getWantPerYieldBearing()).div(targetCollateralizationRatio);\r\n        //Check if amount of dai to borrow is above debtFloor. If not, swap everything to want and return.\r\n        if ( borrowTokenAmountToMint <= debtFloor(ilk_yieldBearing).add(1e15)){\r\n            _swapYieldBearingToWant(balanceOfYieldBearing());\r\n            yieldBearingBalance = balanceOfYieldBearing();\r\n            return;\r\n        }\r\n        //Make sure to always mint enough to repay the flashloan\r\n        borrowTokenAmountToMint = Math.min(borrowTokenAmountToMint, flashloanRepayAmount);\r\n        //Check allowance to lock collateral\r\n        _checkAllowance(gemJoinAdapter, address(yieldBearing), yieldBearingBalance);\r\n        //Lock collateral and mint dai to repay flashmint\r\n        lockGemAndDraw(\r\n            gemJoinAdapter,\r\n            cdpId,\r\n            yieldBearingBalance,\r\n            borrowTokenAmountToMint,\r\n            debtForCdp(cdpId, ilk_yieldBearing)\r\n        );\r\n        //want=dai: nothing further necessary\r\n    }\r\n\r\n    //get amount of Want in Wei that is received for 1 yieldBearing\r\n    function getWantPerYieldBearing() internal view returns (uint256){\r\n        (uint256 wantUnderlyingBalance, uint256 otherTokenUnderlyingBalance) = yieldBearing.getUnderlyingBalances();\r\n        return (wantUnderlyingBalance.mul(WAD).add(otherTokenUnderlyingBalance.mul(WAD).mul(WAD).div(1e6))).div(yieldBearing.totalSupply());\r\n    }\r\n\r\n    function balanceOfWant() internal view returns (uint256) {\r\n        return want.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfYieldBearing() internal view returns (uint256) {\r\n        return yieldBearing.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfOtherToken() internal view returns (uint256) {\r\n        return otherToken.balanceOf(address(this));\r\n    }\r\n\r\n    // ----------------- INTERNAL FUNCTIONS -----------------\r\n\r\n        function _initFlashLoan(bytes memory data, uint256 amount) internal {\r\n        //Flashmint implementation:\r\n        _checkAllowance(address(flashmint), address(borrowToken), amount);\r\n        flashmint.flashLoan(address(this), address(borrowToken), amount, data);\r\n    }\r\n\r\n    function _checkAllowance(\r\n        address _contract,\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (IERC20(_token).allowance(address(this), _contract) < _amount) {\r\n            //IERC20(_token).safeApprove(_contract, 0);\r\n            IERC20(_token).safeApprove(_contract, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function _swapWantToYieldBearing(uint256 _amount) internal returns (uint256) {\r\n        if (_amount == 0) {\r\n            return 0;\r\n        }\r\n        _amount = Math.min(_amount, balanceOfWant());\r\n        (uint256 wantRatio, uint256 otherTokenRatio) = yieldBearing.getUnderlyingBalances();\r\n        wantRatio = wantRatio.mul(WAD).div(yieldBearing.totalSupply());\r\n        otherTokenRatio = otherTokenRatio.mul(WAD).mul(otherTokenTo18Conversion).div(yieldBearing.totalSupply());\r\n        uint256 wantAmountForMint = _amount.mul(wantRatio).div(wantRatio + otherTokenRatio);\r\n        uint256 wantAmountToSwapToOtherTokenForMint = _amount.mul(otherTokenRatio).div(wantRatio + otherTokenRatio);\r\n        //Swap through PSM wantAmountToSwapToOtherTokenForMint --> otherToken\r\n        _checkAllowance(address(psm), address(want), wantAmountToSwapToOtherTokenForMint);\r\n        psm.buyGem(address(this), wantAmountToSwapToOtherTokenForMint.div(otherTokenTo18Conversion));\r\n\r\n        //Mint yieldBearing:\r\n        wantAmountForMint = Math.min(wantAmountForMint, balanceOfWant());\r\n        uint256 otherTokenBalance = balanceOfOtherToken();\r\n        _checkAllowance(address(yieldBearing), address(want), wantAmountForMint);\r\n        _checkAllowance(address(yieldBearing), address(otherToken), otherTokenBalance);\r\n        (,,uint256 mintAmount) = yieldBearing.getMintAmounts(wantAmountForMint, otherTokenBalance);\r\n        yieldBearing.mint(mintAmount, address(this));\r\n        return balanceOfYieldBearing();\r\n    }\r\n\r\n    function _swapYieldBearingToWant(uint256 _amount) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n        //Burn the yieldBearing token to unlock DAI and USDC:\r\n        yieldBearing.burn(Math.min(_amount, balanceOfYieldBearing()), address(this));\r\n\r\n        //Amount of otherToken after burning:\r\n        uint256 otherTokenBalance = balanceOfOtherToken();\r\n\r\n        //Swap through PSM otherToken ---> Want:\r\n        address psmGemJoin = psm.gemJoin();\r\n        _checkAllowance(psmGemJoin, address(otherToken), otherTokenBalance);\r\n        psm.sellGem(address(this), otherTokenBalance);\r\n    }\r\n\r\n    // This function repeats some code from daiAvailableToMint because it needs\r\n    // to handle special cases such as not leaving debt under dust\r\n    function _forceMintWithinLimits(\r\n        VatLike vat,\r\n        bytes32 ilk,\r\n        uint256 desiredAmount,\r\n        uint256 debtBalance\r\n    ) internal view returns (uint256) {\r\n        // uint256 Art;   // Total Normalised Debt     [wad]\r\n        // uint256 rate;  // Accumulated Rates         [ray]\r\n        // uint256 spot;  // Price with Safety Margin  [ray]\r\n        // uint256 line;  // Debt Ceiling              [rad]\r\n        // uint256 dust;  // Urn Debt Floor            [rad]\r\n        (uint256 Art, uint256 rate, , uint256 line, uint256 dust) =\r\n            vat.ilks(ilk);\r\n\r\n        // Total debt in [rad] (wad * ray)\r\n        uint256 vatDebt = Art.mul(rate);\r\n\r\n        // Make sure we are not over debt ceiling (line) or under debt floor (dust)\r\n        if (\r\n            vatDebt >= line || (desiredAmount.add(debtBalance) <= dust.div(RAY))\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 maxMintableDAI = line.sub(vatDebt).div(RAY);\r\n\r\n        // Avoid edge cases with low amounts of available debt\r\n        if (maxMintableDAI < MIN_MINTABLE) {\r\n            return 0;\r\n        }\r\n\r\n        // Prevent rounding errors\r\n        if (maxMintableDAI > WAD) {\r\n            maxMintableDAI = maxMintableDAI - WAD;\r\n        }\r\n\r\n        return Math.min(maxMintableDAI, desiredAmount);\r\n    }\r\n\r\n    function _getDrawDart(\r\n        VatLike vat,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint256 wad\r\n    ) internal returns (int256 dart) {\r\n        // Updates stability fee rate\r\n        uint256 rate = jug.drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = vat.dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < wad.mul(RAY)) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = int256(wad.mul(RAY).sub(dai).div(rate));\r\n            // This is neeeded due to lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\r\n            dart = uint256(dart).mul(rate) < wad.mul(RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function _getWipeDart(\r\n        VatLike vat,\r\n        uint256 dai,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (int256 dart) {\r\n        // Gets actual rate from the vat\r\n        (, uint256 rate, , , ) = vat.ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint256 art) = vat.urns(ilk, urn);\r\n\r\n        // Uses the whole dai balance in the vat to reduce the debt\r\n        dart = int256(dai / rate);\r\n\r\n        // Checks the calculated dart is not higher than urn.art (total debt), otherwise uses its value\r\n        dart = uint256(dart) <= art ? -dart : -int256(art);\r\n    }\r\n\r\n    function convertTo18(address gemJoin, uint256 amt)\r\n        internal\r\n        returns (uint256 wad)\r\n    {\r\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before\r\n        // passing to frob function\r\n        // Adapters will automatically handle the difference of precision\r\n        wad = amt.mul(10**(18 - GemJoinLike(gemJoin).dec()));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"balanceOfCdp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"balanceOfDaiAvailableToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"debtFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"debtForCdp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashmint\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"IERC3156FlashLender\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaiPar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"getLiquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"externalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralizationRatioPrecision\",\"type\":\"uint256\"}],\"name\":\"getPessimisticRatioOfCdpWithExternalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"getSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"isDaiAvailableToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherTokenTo18Conversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psm\",\"outputs\":[{\"internalType\":\"contract PSMLike\",\"name\":\"\",\"type\":\"PSMLike\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MakerDaiDelegateLib","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://45039ef45ebc8447e27369e419c422f71a722a979b470cef85138e701b46ac5e"}]}