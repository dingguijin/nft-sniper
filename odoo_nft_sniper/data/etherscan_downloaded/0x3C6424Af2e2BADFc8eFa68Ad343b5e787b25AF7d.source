{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"CollectionUtils.sol\":{\"content\":\"// ░██████╗████████╗░█████╗░██████╗░██████╗░██╗░░░░░░█████╗░░█████╗░██╗░░██╗\\n// ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██╔══██╗██║░░░░░██╔══██╗██╔══██╗██║░██╔╝\\n// ╚█████╗░░░░██║░░░███████║██████╔╝██████╦╝██║░░░░░██║░░██║██║░░╚═╝█████═╝░\\n// ░╚═══██╗░░░██║░░░██╔══██║██╔══██╗██╔══██╗██║░░░░░██║░░██║██║░░██╗██╔═██╗░\\n// ██████╔╝░░░██║░░░██║░░██║██║░░██║██████╦╝███████╗╚█████╔╝╚█████╔╝██║░╚██╗\\n// ╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░╚══════╝░╚════╝░░╚════╝░╚═╝░░╚═╝\\n\\n// SPDX-License-Identifier: MIT\\n// StarBlock DAO Contracts, https://www.starblockdao.io/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./NFTMasterChef_interfaces.sol\\\";\\n\\ncontract CollectionUtils is ICollectionUtils, Ownable, ReentrancyGuard {\\n    mapping(IERC721 =\\u003e uint256) public minTokenIds;// must set the minTokenId for the nft token ID not from 0 or 1, and is not IERC721Enumerable, is not WNFT.\\n    mapping(IERC721 =\\u003e uint256) public maxTokenIds;// must set the maxTokenId for the nft without totalSupply method, and is not IERC721Enumerable, is not WNFT.\\n\\n    function addMinTokenIds(IERC721[] memory _nfts, uint256[] memory _minTokenIds) external onlyOwner nonReentrant {\\n        require(_nfts.length \\u003e 0 \\u0026\\u0026 (_nfts.length == _minTokenIds.length), \\\"CollectionUtils: invalid parameters!\\\");\\n        for(uint256 index = 0; index \\u003c _nfts.length; index ++){\\n            minTokenIds[_nfts[index]] = _minTokenIds[index];\\n        }\\n    }\\n\\n    function addMaxTokenIds(IERC721[] memory _nfts, uint256[] memory _maxTokenIds) external onlyOwner nonReentrant {\\n        require(_nfts.length \\u003e 0 \\u0026\\u0026 (_nfts.length == _maxTokenIds.length), \\\"CollectionUtils: invalid parameters!\\\");\\n        for(uint256 index = 0; index \\u003c _nfts.length; index ++){\\n            maxTokenIds[_nfts[index]] = _maxTokenIds[index];\\n        }\\n    }\\n\\n    function ownerMay(address _contract) public view returns (address _owner) {\\n        // require(isContract(_contract), \\\"CollectionUtils: invalid parameters!\\\");\\n        try Ownable(_contract).owner() returns (address owner) {\\n            _owner = owner;\\n        } catch {\\n            \\n        }\\n    }\\n\\n    function collectionInfos(IERC721Metadata[] memory _nfts) external view returns (CollectionInfo[] memory _collectionInfos) {\\n        require(_nfts.length \\u003e 0, \\\"CollectionUtils: invalid parameters!\\\");\\n        _collectionInfos = new CollectionInfo[](_nfts.length);\\n        for(uint256 index = 0; index \\u003c _nfts.length; index ++){\\n            _collectionInfos[index] = collectionInfo(_nfts[index]);\\n        }\\n    }\\n\\n    function collectionInfo(IERC721Metadata _nft) public view returns (CollectionInfo memory _collectionInfo) {\\n        require(address(_nft) != address(0), \\\"CollectionUtils: invalid parameters!\\\");\\n        try _nft.name() returns (string memory name) {\\n            _collectionInfo.name = name;\\n        } catch {\\n            \\n        }\\n\\n        try _nft.symbol() returns (string memory symbol) {\\n            _collectionInfo.symbol = symbol;\\n        } catch {\\n            \\n        }\\n\\n        _collectionInfo.totalSupply = totalSupplyMay(_nft);\\n        _collectionInfo.owner = ownerMay(address(_nft));\\n    }\\n\\n    function tokenInfos(IERC721Metadata _nft, uint256[] memory _tokenIds) external view returns \\n            (CollectionInfo memory _collectionInfo, TokenInfo[] memory _tokenInfos) {\\n        require(_tokenIds.length \\u003e 0, \\\"CollectionUtils: invalid parameters!\\\");\\n        _collectionInfo = collectionInfo(_nft);\\n\\n        _tokenInfos = new TokenInfo[](_tokenIds.length);\\n        for(uint256 index = 0; index \\u003c _tokenIds.length; index ++){\\n            uint256 tokenId = _tokenIds[index];\\n            try _nft.tokenURI(tokenId) returns (string memory tokenURI) {\\n                _tokenInfos[index].tokenURI = tokenURI;\\n            } catch {\\n                \\n            }\\n\\n            _tokenInfos[index].owner = tokenIdOwnerMay(_nft, tokenId);\\n        }\\n    }\\n\\n    function tokenInfosByNfts(IERC721Metadata[] memory _nfts, uint256[] memory _tokenIds) external view returns \\n            (CollectionInfo[] memory _collectionInfos, TokenInfo[] memory _tokenInfos) {\\n        require(_nfts.length \\u003e 0 \\u0026\\u0026 _nfts.length == _tokenIds.length, \\\"CollectionUtils: invalid parameters!\\\");\\n        \\n        _collectionInfos = new CollectionInfo[](_nfts.length);\\n        _tokenInfos = new TokenInfo[](_nfts.length);\\n        for(uint256 index = 0; index \\u003c _nfts.length; index ++){\\n            (_collectionInfos[index], _tokenInfos[index]) = tokenInfo(_nfts[index], _tokenIds[index]);\\n        }\\n    }\\n\\n    function tokenInfo(IERC721Metadata _nft, uint256 _tokenId) public view returns \\n            (CollectionInfo memory _collectionInfo, TokenInfo memory _tokenInfo) {\\n        _collectionInfo = collectionInfo(_nft);\\n\\n        try _nft.tokenURI(_tokenId) returns (string memory tokenURI) {\\n            _tokenInfo.tokenURI = tokenURI;\\n        } catch {\\n            \\n        }\\n\\n        _tokenInfo.owner = tokenIdOwnerMay(_nft, _tokenId);\\n    }\\n\\n    function tokenIdRangeMay(IERC721 _nft) public view returns (uint256 _minTokenId, uint256 _maxTokenId){\\n        _minTokenId = minTokenIds[_nft];\\n        _maxTokenId = maxTokenIds[_nft];\\n        if(_minTokenId == 0 \\u0026\\u0026 _maxTokenId == 0){\\n            //WFNT not setted, check if NFT setted\\n        \\tif(_nft.supportsInterface(type(IWrappedNFT).interfaceId)){\\n            \\t_nft = IWrappedNFT(address(_nft)).nft();\\n\\t\\t\\t}\\n\\t\\t\\t_minTokenId = minTokenIds[_nft];\\n\\t\\t\\tuint256 nftTotalSupply = totalSupplyMay(_nft);\\n\\t\\t\\t_maxTokenId = maxTokenIds[_nft];\\n\\t\\t\\tif(_maxTokenId \\u003c nftTotalSupply){\\n\\t\\t\\t\\t_maxTokenId = nftTotalSupply;\\n\\t\\t\\t}\\n        }\\n    }\\n\\n    //return all the token ids the collection may have\\n    function allTokenIdsMay(IERC721 _nft) external view returns (uint256[] memory _tokenIds) {\\n        (uint256 minTokenId, uint256 maxTokenId) = tokenIdRangeMay(_nft);\\n        if(maxTokenId \\u003e minTokenId || maxTokenId != 0){\\n            _tokenIds = new uint256[](maxTokenId - minTokenId + 1);\\n            uint256 index = 0;\\n            for(uint256 tokenId = minTokenId; tokenId \\u003c= maxTokenId; tokenId ++){\\n                _tokenIds[index] = tokenId;\\n                index ++;\\n            }\\n        }\\n    }\\n\\n    function ownedNFTTokenIds(IERC721 _nft, address _user) external view returns (uint256[] memory _ownedTokenIds) {\\n        if(address(_nft) == address(0) || _user == address(0)){\\n            return _ownedTokenIds;\\n        }\\n        (uint256 minTokenId, uint256 maxTokenId) = tokenIdRangeMay(_nft);\\n        return ownedNFTTokenIdsByIdRange(_nft, _user, minTokenId, maxTokenId);\\n    }\\n\\n    function ownedNFTTokenIdsByIdRange(IERC721 _nft, address _user, uint256 _minTokenId, uint256 _maxTokenId) public view returns (uint256[] memory _ownedTokenIds) {\\n        // if(address(_nft) == address(0) || _user == address(0)){\\n        //     return _ownedTokenIds;\\n        // }\\n        if (_nft.supportsInterface(type(IERC721Enumerable).interfaceId)) {\\n            IERC721Enumerable nftEnumerable = IERC721Enumerable(address(_nft));\\n            _ownedTokenIds = ownedNFTTokenIdsEnumerable(nftEnumerable, _user);\\n        } else if (_nft.supportsInterface(type(IERC721AQueryable).interfaceId) || _nft.supportsInterface(type(IStarBlockCollection).interfaceId)){\\n            _ownedTokenIds = IERC721AQueryable(address(_nft)).tokensOfOwner(_user);\\n        } else {\\n            _ownedTokenIds = ownedNFTTokenIdsNotEnumerable(_nft, _user, _minTokenId, _maxTokenId);\\n        }\\n    }\\n\\n    function ownedNFTTokenIdsEnumerable(IERC721Enumerable _nftEnumerable, address _user) public view returns (uint256[] memory _ownedTokenIds) {\\n        // if(address(_nftEnumerable) == address(0) || _user == address(0)){\\n        //     return _ownedTokenIds;\\n        // }\\n        uint256 balance = _nftEnumerable.balanceOf(_user);\\n        if (balance \\u003e 0) {\\n            _ownedTokenIds = new uint256[](balance);\\n            for (uint256 index = 0; index \\u003c balance; index ++) {\\n                uint256 tokenId = _nftEnumerable.tokenOfOwnerByIndex(_user, index);\\n                _ownedTokenIds[index] = tokenId;\\n            }\\n        }\\n    }\\n\\n    function ownedNFTTokenIdsNotEnumerable(IERC721 _nft, address _user, uint256 _minTokenId, uint256 _maxTokenId) public view returns (uint256[] memory _ownedTokenIds) {\\n        // if(address(_nft) == address(0) || _user == address(0)){\\n        //     return _ownedTokenIds;\\n        // }\\n        uint256 balance = _nft.balanceOf(_user);\\n        if(balance \\u003e 0){\\n            //one wrong result with all 0: have balanceOf but not totalSupplyMay, not set maxTokenId\\n            _ownedTokenIds = new uint256[](balance);\\n            uint256 index = 0;\\n            for (uint256 tokenId = _minTokenId; tokenId \\u003c= _maxTokenId; tokenId ++) {\\n                address owner = tokenIdOwnerMay(_nft, tokenId);\\n                if (_user == owner) {\\n                    _ownedTokenIds[index] = tokenId;\\n                    index ++;\\n                    if(index == balance){\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function totalSupplyMay(IERC721 _nft) public view returns (uint256 _totalSupply){\\n        IERC721TotalSupply nftWithTotalSupply = IERC721TotalSupply(address(_nft));\\n        try nftWithTotalSupply.totalSupply() returns (uint256 totalSupply) {\\n            _totalSupply = totalSupply;\\n        } catch {\\n            // _totalSupply = 0;\\n        }\\n    }\\n\\n    function tokenIdOwnerMay(IERC721 _nft, uint256 _tokenId) public view returns (address _owner){\\n        try _nft.ownerOf(_tokenId) returns (address owner) {\\n            _owner = owner;\\n        } catch {\\n            // _owner = address(0);\\n        }\\n    }\\n\\n    function tokenIdExistsMay(IERC721 _nft, uint256 _tokenId) public view returns (bool _exists){\\n        if(_nft.supportsInterface(type(IWrappedNFT).interfaceId)){\\n            IWrappedNFT wnft = IWrappedNFT(address(_nft));\\n            return wnft.exists(_tokenId);\\n        }\\n        try _nft.ownerOf(_tokenId) {\\n            _exists = true;\\n        } catch {\\n            // _exists = false;\\n        }\\n    }\\n\\n    //check if NFT is enumerable by itself\\n    function canEnumerate(IERC721 _nft) external view returns (bool _enumerable) {\\n    \\t_enumerable = true;\\n    \\tif (!_nft.supportsInterface(type(IWrappedNFT).interfaceId) \\u0026\\u0026 !_nft.supportsInterface(type(IERC721Enumerable).interfaceId) \\u0026\\u0026 totalSupplyMay(_nft) == 0) {\\n            _enumerable = false;\\n\\t\\t}\\n    }\\n\\n    function transferERC20(IERC20 _token, address[] memory _users, uint256[] memory _amounts) external {\\n        require(address(_token) != address(0) \\u0026\\u0026 _users.length \\u003e 0 \\u0026\\u0026 _users.length == _amounts.length, \\\"CollectionUtils: invalid parameters!\\\");\\n        for(uint256 index = 0; index \\u003c _users.length; index ++){\\n            _token.transfer(_users[index], _amounts[index]);\\n        }\\n    }\\n\\n    function areContract(address[] memory _accounts) external view returns (bool[] memory _areContract) {\\n        require(_accounts.length \\u003e 0, \\\"CollectionUtils: invalid parameters!\\\");\\n\\n        _areContract = new bool[](_accounts.length);\\n        for(uint256 index = 0; index \\u003c _accounts.length; index ++){\\n            _areContract[index] = isContract(_accounts[index]);\\n        }\\n    }\\n\\n    function isContract(address _account) public view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return _account.code.length \\u003e 0;\\n    }\\n\\n    function supportERC721(IERC721 _nft) external view returns (bool){\\n        return _nft.supportsInterface(type(IERC721).interfaceId);\\n    }\\n\\n    function supportERC721Metadata(IERC721 _nft) external view returns (bool){\\n        return _nft.supportsInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    function supportERC721Enumerable(IERC721 _nft) external view returns (bool){\\n        return _nft.supportsInterface(type(IERC721Enumerable).interfaceId);\\n    }\\n\\n    function supportIWrappedNFT(IERC721 _nft) external view returns (bool){\\n        return _nft.supportsInterface(type(IWrappedNFT).interfaceId);\\n    }\\n\\n    function supportIWrappedNFTEnumerable(IERC721 _nft) external view returns (bool){\\n        return _nft.supportsInterface(type(IWrappedNFTEnumerable).interfaceId);\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 =\\u003e RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator \\u003c= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator \\u003c= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\\n        uint24 extraData;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // ==============================\\n    //            IERC2309\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"},\"IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\u0027./IERC721A.sol\\u0027;\\n\\n/**\\n * @dev Interface of an ERC721AQueryable compliant contract.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` \\u003e= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *   - `addr` = `address(0)`\\n     *   - `startTimestamp` = `0`\\n     *   - `burned` = `false`\\n     *\\n     * If the `tokenId` is burned:\\n     *   - `addr` = `\\u003cAddress of owner before token was burned\\u003e`\\n     *   - `startTimestamp` = `\\u003cTimestamp when token was burned\\u003e`\\n     *   - `burned = `true`\\n     *\\n     * Otherwise:\\n     *   - `addr` = `\\u003cAddress of owner\\u003e`\\n     *   - `startTimestamp` = `\\u003cTimestamp of start of ownership\\u003e`\\n     *   - `burned = `false`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start \\u003c= tokenId \\u003c stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start` \\u003c `stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K pfp collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"NFTMasterChef_interfaces.sol\":{\"content\":\"// ░██████╗████████╗░█████╗░██████╗░██████╗░██╗░░░░░░█████╗░░█████╗░██╗░░██╗\\n// ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██╔══██╗██║░░░░░██╔══██╗██╔══██╗██║░██╔╝\\n// ╚█████╗░░░░██║░░░███████║██████╔╝██████╦╝██║░░░░░██║░░██║██║░░╚═╝█████═╝░\\n// ░╚═══██╗░░░██║░░░██╔══██║██╔══██╗██╔══██╗██║░░░░░██║░░██║██║░░██╗██╔═██╗░\\n// ██████╔╝░░░██║░░░██║░░██║██║░░██║██████╦╝███████╗╚█████╔╝╚█████╔╝██║░╚██╗\\n// ╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░╚══════╝░╚════╝░░╚════╝░╚═╝░░╚═╝\\n\\n// SPDX-License-Identifier: MIT\\n// StarBlock DAO Contracts, https://www.starblockdao.io/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC721AQueryable.sol\\\";\\nimport \\\"./ERC2981.sol\\\";\\n\\nimport \\\"./wnft_interfaces.sol\\\";\\n\\ninterface IERC721TotalSupply is IERC721 {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IStarBlockCollection is IERC721AQueryable, IERC2981 {\\n    struct SaleConfig {\\n        uint256 startTime;// 0 for not set\\n        uint256 endTime;// 0 for will not end\\n        uint256 price;\\n        uint256 maxAmountPerAddress;// 0 for not limit the amount per address\\n    }\\n\\n    event UpdateWhitelistSaleConfig(SaleConfig _whitelistSaleConfig);\\n    event UpdateWhitelistSaleEndTime(uint256 _oldEndTime, uint256 _newEndTime);\\n    event UpdateexternalSaleConfig(SaleConfig _externalSaleConfig);\\n    event UpdateexternalSaleEndTime(uint256 _oldEndTime, uint256 _newEndTime);\\n    event UpdateChargeToken(IERC20 _chargeToken);\\n\\n    function supportsInterface(bytes4 _interfaceId) external view override(IERC165, IERC721A) returns (bool);\\n    \\n    function maxSupply() external view returns (uint256);\\n    function exists(uint256 _tokenId) external view returns (bool);\\n    \\n    function maxAmountForArtist() external view returns (uint256);\\n    function artistMinted() external view returns (uint256);\\n\\n    function chargeToken() external view returns (IERC20);\\n\\n    // function whitelistSaleConfig() external view returns (SaleConfig memory);\\n    function whitelistSaleConfig() external view \\n            returns (uint256 _startTime, uint256 _endTime, uint256 _price, uint256 _maxAmountPerAddress);\\n    function whitelist(address _user) external view returns (bool);\\n    function whitelistAmount() external view returns (uint256);\\n    function whitelistSaleMinted(address _user) external view returns (uint256);\\n\\n    // function externalSaleConfig() external view returns (SaleConfig memory);\\n    function externalSaleConfig() external view \\n            returns (uint256 _startTime, uint256 _endTime, uint256 _price, uint256 _maxAmountPerAddress);\\n    function externalSaleMinted(address _user) external view returns (uint256);\\n\\n    function userCanMintTotalAmount() external view returns (uint256);\\n\\n    function whitelistMint(uint256 _amount) external payable;\\n    function externalMint(uint256 _amount) external payable;\\n}\\n\\ninterface IHarvestStrategy {\\n    function canHarvest(uint256 _pid, address _forUser, uint256[] memory _wnfTokenIds) external view returns (bool);\\n}\\n\\ninterface INFTMasterChef {\\n    event AddPoolInfo(IERC721Metadata nft, IWrappedNFT wnft, uint256 startBlock,\\n                    RewardInfo[] rewards, uint256 depositFee, IERC20 dividendToken, bool withUpdate);\\n    event SetStartBlock(uint256 pid, uint256 startBlock);\\n    event UpdatePoolReward(uint256 pid, uint256 rewardIndex, uint256 rewardBlock, uint256 rewardForEachBlock, uint256 rewardPerNFTForEachBlock);\\n    event SetPoolDepositFee(uint256 pid, uint256 depositFee);\\n    event SetHarvestStrategy(IHarvestStrategy harvestStrategy);\\n    event SetPoolDividendToken(uint256 pid, IERC20 dividendToken);\\n\\n    event AddTokenRewardForPool(uint256 pid, uint256 addTokenPerPool, uint256 addTokenPerBlock, bool withTokenTransfer);\\n    event AddDividendForPool(uint256 pid, uint256 addDividend);\\n\\n    event UpdateDevAddress(address payable devAddress);\\n    event EmergencyStop(address user, address to);\\n    event ClosePool(uint256 pid, address payable to);\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256[] tokenIds);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256[] wnfTokenIds);\\n    event WithdrawWithoutHarvest(address indexed user, uint256 indexed pid, uint256[] wnfTokenIds);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256[] wnftTokenIds,\\n                    uint256 mining, uint256 dividend);\\n\\n    // Info of each NFT.\\n    struct NFTInfo {\\n        bool deposited;     // If the NFT is deposited.\\n        uint256 rewardDebt; // Reward debt.\\n\\n        uint256 dividendDebt; // Dividend debt.\\n    }\\n\\n    //Info of each Reward\\n    struct RewardInfo {\\n        uint256 rewardBlock;\\n        uint256 rewardForEachBlock;    //Reward for each block, can only be set one with rewardPerNFTForEachBlock\\n        uint256 rewardPerNFTForEachBlock;    //Reward for each block for every NFT, can only be set one with rewardForEachBlock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IWrappedNFT wnft;// Address of wnft contract.\\n\\n        uint256 startBlock; // Reward start block.\\n\\n        uint256 currentRewardIndex;// the current reward phase index for poolsRewardInfos\\n        uint256 currentRewardEndBlock;  // the current reward end block.\\n\\n        uint256 amount;     // How many NFTs the pool has.\\n       \\n        uint256 lastRewardBlock;  // Last block number that token distribution occurs.\\n        uint256 accTokenPerShare; // Accumulated tokens per share, times 1e12.\\n       \\n        IERC20 dividendToken;\\n        uint256 accDividendPerShare;\\n\\n        uint256 depositFee;// ETH charged when user deposit.\\n    }\\n   \\n    function token() external view returns (IERC20);\\n\\n    function poolLength() external view returns (uint256);\\n    function poolRewardLength(uint256 _pid) external view returns (uint256);\\n\\n    function poolInfos(uint256 _pid) external view returns (PoolInfo memory _poolInfo);\\n    function poolsRewardInfos(uint256 _pid, uint256 _rewardInfoId) external view returns (RewardInfo memory _rewardInfo);\\n    function poolNFTInfos(uint256 _pid, uint256 _nftTokenId) external view returns (NFTInfo memory _nftInfo);\\n\\n    function getPoolCurrentReward(uint256 _pid) external view returns (RewardInfo memory _rewardInfo, uint256 _currentRewardIndex);\\n    function getPoolEndBlock(uint256 _pid) external view returns (uint256 _poolEndBlock);\\n    function isPoolEnd(uint256 _pid) external view returns (bool);\\n\\n    function pending(uint256 _pid, uint256[] memory _wnftTokenIds) external view returns (uint256 _mining, uint256 _dividend);\\n    function deposit(uint256 _pid, uint256[] memory _tokenIds) external payable;\\n    function withdraw(uint256 _pid, uint256[] memory _wnftTokenIds) external;\\n    function withdrawWithoutHarvest(uint256 _pid, uint256[] memory _wnftTokenIds) external;\\n    function harvest(uint256 _pid, address _forUser, uint256[] memory _wnftTokenIds) external returns (uint256 _mining, uint256 _dividend);\\n\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n}\\n\\ninterface ITokenPriceUtils {\\n    function getTokenPrice(address _token) external view returns (uint256);\\n}\\n\\ninterface INFTPool {\\n    function nftMasterChef() external view returns (INFTMasterChef);\\n    function pending(uint256 _pid, uint256[] memory _wnftTokenIds) external view returns (uint256 _mining, uint256 _dividend);\\n}\\n\\ninterface ICollectionUtils {\\n    struct CollectionInfo {\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n        address owner;\\n    }\\n\\n    struct TokenInfo {\\n        string tokenURI;\\n        address owner;\\n    }\\n\\n    function collectionInfos(IERC721Metadata[] memory _nfts) external view returns (CollectionInfo[] memory _collectionInfos);\\n    function collectionInfo(IERC721Metadata _nft) external view returns (CollectionInfo memory _collectionInfo);\\n\\n    function tokenInfos(IERC721Metadata _nft, uint256[] memory _tokenIds) external view returns \\n            (CollectionInfo memory _collectionInfo, TokenInfo[] memory _tokenInfos);\\n    function tokenInfosByNfts(IERC721Metadata[] memory _nfts, uint256[] memory _tokenIds) external view returns \\n            (CollectionInfo[] memory _collectionInfos, TokenInfo[] memory _tokenInfos);\\n    function tokenInfo(IERC721Metadata _nft, uint256 _tokenId) external view returns (CollectionInfo memory _collectionInfo, TokenInfo memory _tokenInfo);\\n    \\n    //return the token id range the collection may have\\n    function tokenIdRangeMay(IERC721 _nft) external view returns (uint256 _minTokenId, uint256 _maxTokenId);\\n    \\n    //return all the token ids the collection may have\\n    function allTokenIdsMay(IERC721 _nft) external view returns (uint256[] memory _tokenIds);\\n\\n    function ownedNFTTokenIds(IERC721 _nft, address _user) external view returns (uint256[] memory _ownedTokenIds);\\n\\n    function ownedNFTTokenIdsByIdRange(IERC721 _nft, address _user, uint256 _minTokenId, uint256 _maxTokenId) external view returns (uint256[] memory _ownedTokenIds);\\n\\n    function totalSupplyMay(IERC721 _nft) external view returns (uint256);\\n\\n    function tokenIdExistsMay(IERC721 _nft, uint256 _tokenId) external view returns (bool);\\n\\n    //check if NFT is enumerable by itself\\n    function canEnumerate(IERC721 _nft) external view returns (bool);\\n\\n    function areContract(address[] memory _accounts) external view returns (bool[] memory);\\n    function isContract(address _account) external view returns (bool);\\n\\n    function supportERC721(IERC721 _nft) external view returns (bool);\\n}\\n\\ninterface INFTMasterChefBatch {\\n    function nftPool() external view returns (INFTPool);\\n    function nftMasterChef() external view returns (INFTMasterChef);\\n    function ownedNFTTokenIds(IERC721 _nft, address _user) external view returns (uint256[] memory _ownedTokenIds);\\n    function pending(uint256 _pid, uint256[] memory _wnftTokenIds) external view returns (uint256 _mining, uint256 _dividend);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"wnft_interfaces.sol\":{\"content\":\"// ░██████╗████████╗░█████╗░██████╗░██████╗░██╗░░░░░░█████╗░░█████╗░██╗░░██╗\\n// ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██╔══██╗██║░░░░░██╔══██╗██╔══██╗██║░██╔╝\\n// ╚█████╗░░░░██║░░░███████║██████╔╝██████╦╝██║░░░░░██║░░██║██║░░╚═╝█████═╝░\\n// ░╚═══██╗░░░██║░░░██╔══██║██╔══██╗██╔══██╗██║░░░░░██║░░██║██║░░██╗██╔═██╗░\\n// ██████╔╝░░░██║░░░██║░░██║██║░░██║██████╦╝███████╗╚█████╔╝╚█████╔╝██║░╚██╗\\n// ╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░╚══════╝░╚════╝░░╚════╝░╚═╝░░╚═╝\\n\\n// SPDX-License-Identifier: MIT\\n// StarBlock DAO Contracts, https://www.starblockdao.io/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\ninterface IERC2981Mutable is IERC165, IERC2981 {\\n    function setDefaultRoyalty(address _receiver, uint96 _feeNumerator) external;\\n    function deleteDefaultRoyalty() external;\\n}\\n\\ninterface IBaseWrappedNFT is IERC165, IERC2981Mutable, IERC721Receiver, IERC721, IERC721Metadata {\\n    event DelegatorChanged(address _delegator);\\n    event Deposit(address _forUser, uint256[] _tokenIds);\\n    event Withdraw(address _forUser, uint256[] _wnftTokenIds);\\n\\n    function nft() external view returns (IERC721Metadata);\\n    function factory() external view returns (IWrappedNFTFactory);\\n\\n    function deposit(address _forUser, uint256[] memory _tokenIds) external;\\n    function withdraw(address _forUser, uint256[] memory _wnftTokenIds) external;\\n\\n    function exists(uint256 _tokenId) external view returns (bool);\\n    \\n    function delegator() external view returns (address);\\n    function setDelegator(address _delegator) external;\\n    \\n    function isEnumerable() external view returns (bool);\\n}\\n\\ninterface IWrappedNFT is IBaseWrappedNFT {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IWrappedNFTEnumerable is IWrappedNFT, IERC721Enumerable {\\n    function totalSupply() external view override(IWrappedNFT, IERC721Enumerable) returns (uint256);\\n}\\n\\ninterface IWrappedNFTFactory {\\n    event WrappedNFTDeployed(IERC721Metadata _nft, IWrappedNFT _wnft, bool _isEnumerable);\\n    event WNFTDelegatorChanged(address _wnftDelegator);\\n\\n    function wnftDelegator() external view returns (address);\\n\\n    function deployWrappedNFT(IERC721Metadata _nft, bool _isEnumerable) external returns (IWrappedNFT);\\n    function wnfts(IERC721Metadata _nft) external view returns (IWrappedNFT);\\n    function wnftsNumber() external view returns (uint);\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"addMaxTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"addMinTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"allTokenIdsMay\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"areContract\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_areContract\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"canEnumerate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_enumerable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Metadata\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"collectionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.CollectionInfo\",\"name\":\"_collectionInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Metadata[]\",\"name\":\"_nfts\",\"type\":\"address[]\"}],\"name\":\"collectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.CollectionInfo[]\",\"name\":\"_collectionInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ownedNFTTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ownedTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenId\",\"type\":\"uint256\"}],\"name\":\"ownedNFTTokenIdsByIdRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ownedTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nftEnumerable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ownedNFTTokenIdsEnumerable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ownedTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenId\",\"type\":\"uint256\"}],\"name\":\"ownedNFTTokenIdsNotEnumerable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ownedTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"ownerMay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"supportERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"supportERC721Enumerable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"supportERC721Metadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"supportIWrappedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"supportIWrappedNFTEnumerable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdExistsMay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdOwnerMay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"tokenIdRangeMay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Metadata\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.CollectionInfo\",\"name\":\"_collectionInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.TokenInfo\",\"name\":\"_tokenInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Metadata\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.CollectionInfo\",\"name\":\"_collectionInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.TokenInfo[]\",\"name\":\"_tokenInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Metadata[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"tokenInfosByNfts\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.CollectionInfo[]\",\"name\":\"_collectionInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICollectionUtils.TokenInfo[]\",\"name\":\"_tokenInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"totalSupplyMay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CollectionUtils","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://784be2e0b8c78975f33dea35f89b7bb774b1d08115609778fd3505b2477f48ee"}]}