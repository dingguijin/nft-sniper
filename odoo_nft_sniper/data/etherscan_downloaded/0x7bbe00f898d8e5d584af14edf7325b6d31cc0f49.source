{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\ninterface IRoyaltyFeeRegistry {\r\n    function royaltyFeeInfoCollection(address collection) external view returns (address, address, uint256);\r\n}\r\n\r\ncontract LooksRareRoyaltyFeeHelper {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address private _owner;\r\n    IRoyaltyFeeRegistry public royaltyFeeRegistry;\r\n\r\n    constructor(IRoyaltyFeeRegistry _royaltyFeeRegistry) {\r\n        _transferOwnership(msg.sender);\r\n        royaltyFeeRegistry = _royaltyFeeRegistry;\r\n    }\r\n\r\n    function updateRoyaltyFeeRegistry(IRoyaltyFeeRegistry _royaltyFeeRegistry) external onlyOwner {\r\n        royaltyFeeRegistry = _royaltyFeeRegistry;\r\n    }\r\n\r\n    function royaltyFeeInfos(address[] calldata collections) external view returns (\r\n        address[] memory setters,\r\n        address[] memory receivers,\r\n        uint256[] memory fees\r\n    ) {\r\n        setters = new address[](collections.length);\r\n        receivers = new address[](collections.length);\r\n        fees = new uint256[](collections.length);\r\n        for (uint256 i = 0; i < collections.length; i++) {\r\n            (setters[i], receivers[i], fees[i]) = royaltyFeeRegistry.royaltyFeeInfoCollection(collections[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IRoyaltyFeeRegistry\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"royaltyFeeInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"setters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltyFeeRegistry\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"}],\"name\":\"updateRoyaltyFeeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LooksRareRoyaltyFeeHelper","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000055010472a93921a117aad9b055c141060c8d8022","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9ce2ae760073c96b4f5c8735153ba0c4cbb7e891508bfbfa133cdfce37c163c2"}]}