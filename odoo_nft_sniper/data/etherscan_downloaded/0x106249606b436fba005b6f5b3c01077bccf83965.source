{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ncontract BulkNFTSender{\r\n\r\n    function airdropNFTs(address _NFTaddress, address _owner, address[] calldata _recipients) public {\r\n        IERC721 nft = IERC721(_NFTaddress);\r\n        require(nft.isApprovedForAll(_owner,address(this)),\"Operator not approved for transfer all\");\r\n        require(nft.balanceOf(_owner)>=_recipients.length,\"Owner doesnt have enough NFTs\");\r\n        uint256 nft_balance = nft.balanceOf(_owner);\r\n       \r\n        uint[] memory tokenIds = new uint[](nft_balance);\r\n\r\n        for (uint256 i = 0; i < nft_balance; i++) {\r\n            tokenIds[i] = nft.tokenOfOwnerByIndex(_owner,i);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            nft.safeTransferFrom(_owner,_recipients[i],tokenIds[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"airdropNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BulkNFTSender","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://65f10204c358783b7f96a3ef9092a1fc887b473835914a0c9a0edbde693170c7"}]}