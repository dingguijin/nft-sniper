{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface ITokenVestingFLYY {\r\n    function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        uint256 _amount\r\n    ) external;\r\n}\r\n\r\ncontract TokenCrowdsaleFLYY is Ownable, ReentrancyGuard {\r\n    address public tokenContractAddress;\r\n    uint256 public tokenPriceInWei;\r\n    uint8 public tokenDecimals;\r\n\r\n    address public vestingContractAddress;\r\n    uint256 vestingCliff;\r\n    uint256 vestingStart;\r\n    uint256 vestingDuration;\r\n    uint256 vestingSlicePeriodSeconds;\r\n\r\n    bool public whitelistingSwitch;\r\n    mapping(address => bool) private _isIncludedInWhitelist;\r\n\r\n    uint256 public lowerPurchasingLimitInWei;\r\n    uint256 public upperPurchasingLimitInWei;\r\n\r\n    event TokenSold(address, uint256);\r\n    event PriceChanged(uint256, uint256);\r\n    event VestingScheduleChanged(uint256, uint256, uint256, uint256);\r\n    event whitelistingSwitchTriggered(bool flag);\r\n\r\n    modifier checkWhitelisting(address caller) {\r\n        require((!whitelistingSwitch || _isIncludedInWhitelist[caller]), \"TokenCrowdsaleFLYY: calling account address must be whitelisted first OR switch off whitelisting feature\" );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _tokenContractAddress,\r\n        uint256 _tokenPriceInWei,\r\n        uint8 _tokenDecimals,\r\n        address _vestingContractAddress\r\n    ) {\r\n        tokenContractAddress = _tokenContractAddress;\r\n        tokenPriceInWei = _tokenPriceInWei;\r\n        tokenDecimals = _tokenDecimals;\r\n\r\n        vestingContractAddress = _vestingContractAddress;\r\n        vestingCliff = 1;\r\n        vestingStart = 1;\r\n        vestingDuration = 1;\r\n        vestingSlicePeriodSeconds = 1;\r\n\r\n        whitelistingSwitch = false;\r\n\r\n        lowerPurchasingLimitInWei = 0;\r\n        upperPurchasingLimitInWei = ~uint256(0);\r\n    }\r\n\r\n    function changeVestingContractAddress(address newContractAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        vestingContractAddress = newContractAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeTokenPrice(uint256 newPrice)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newPrice > 0,\r\n            \"TokenCrowdsaleFLYY: token price must be greater than 0 wei\"\r\n        );\r\n\r\n        uint256 oldPrice = tokenPriceInWei;\r\n        tokenPriceInWei = newPrice;\r\n\r\n        emit PriceChanged(oldPrice, newPrice);\r\n        return true;\r\n    }\r\n\r\n    function setLowerPurchasingLimit(uint256 newLimit)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        lowerPurchasingLimitInWei = newLimit;\r\n        return true;\r\n    }\r\n\r\n    function setUpperPurchasingLimit(uint256 newLimit)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        upperPurchasingLimitInWei = newLimit;\r\n        return true;\r\n    }\r\n\r\n    function changeVestingSchedule(\r\n        uint256 _vestingCliff,\r\n        uint256 _vestingStart,\r\n        uint256 _vestingDuration,\r\n        uint256 _vestingSlicePeriodSeconds\r\n    ) external onlyOwner returns (bool) {\r\n        vestingCliff = _vestingCliff;\r\n        vestingStart = _vestingStart;\r\n        vestingDuration = _vestingDuration;\r\n        vestingSlicePeriodSeconds = _vestingSlicePeriodSeconds;\r\n\r\n        emit VestingScheduleChanged(\r\n            _vestingCliff,\r\n            _vestingStart,\r\n            _vestingDuration,\r\n            _vestingSlicePeriodSeconds\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function getVestingSchedule()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            vestingCliff,\r\n            vestingStart,\r\n            vestingDuration,\r\n            vestingSlicePeriodSeconds\r\n        );\r\n    }\r\n\r\n    function buyToken() external payable nonReentrant checkWhitelisting(msg.sender) returns (bool) {\r\n        _buyToken();\r\n        return true;\r\n    }\r\n\r\n    function _buyToken() private {\r\n        uint256 sentValue = msg.value;\r\n\r\n        require(\r\n            sentValue >= lowerPurchasingLimitInWei && sentValue <= upperPurchasingLimitInWei,\r\n            \"TokenCrowdsaleFLYY: sent ETH amount must be between purchasing limit\"\r\n        );\r\n\r\n        address buyer = _msgSender();\r\n        uint256 contractTokenBalance = getContractTokenBalance();\r\n        uint256 buyableTokens = _buyableTokens();\r\n\r\n        require(\r\n            contractTokenBalance >= buyableTokens,\r\n            \"TokenCrowdsaleFLYY: buyable token amount exceeds crowdsale contract balance\"\r\n        );\r\n\r\n        _sendToVesting(buyer, buyableTokens);\r\n\r\n        emit TokenSold(buyer, buyableTokens);\r\n    }\r\n\r\n    function _buyableTokens() private view returns (uint256) {\r\n        uint256 buyableTokens = (msg.value * 10**tokenDecimals) /\r\n            tokenPriceInWei;\r\n        return buyableTokens;\r\n    }\r\n\r\n    function _sendToVesting(address beneficiary, uint256 amount) private {\r\n        IERC20(tokenContractAddress).transfer(vestingContractAddress, amount);\r\n        ITokenVestingFLYY(vestingContractAddress).createVestingSchedule(\r\n            beneficiary,\r\n            vestingStart,\r\n            vestingCliff,\r\n            vestingDuration,\r\n            vestingSlicePeriodSeconds,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function getContractEthBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawEthBalance() external onlyOwner returns (bool) {\r\n        payable(owner()).transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n    function getContractTokenBalance() public view returns (uint256) {\r\n        return IERC20(tokenContractAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawContractTokenBalance(uint256 amount)\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(\r\n            getContractTokenBalance() >= amount,\r\n            \"TokenVestingFLYY: not enough withdrawable funds\"\r\n        );\r\n        IERC20(tokenContractAddress).transfer(owner(), amount);\r\n    }\r\n\r\n    function getCurrentTime() public view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function whitelistingSwitchControl(bool flag) public onlyOwner returns (bool) {\r\n        whitelistingSwitch = flag;\r\n        emit whitelistingSwitchTriggered(flag);\r\n        return true;\r\n    }\r\n\r\n    function excludeFromWhitelist(address account) public onlyOwner {\r\n        _isIncludedInWhitelist[account] = false;\r\n    }\r\n\r\n    function includeInWhitelist(address account) public onlyOwner {\r\n        _isIncludedInWhitelist[account] = true;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _isIncludedInWhitelist[account];\r\n    }\r\n\r\n    receive() external payable {\r\n        _buyToken();\r\n    }\r\n\r\n    fallback() external payable {\r\n        _buyToken();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_vestingContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"whitelistingSwitchTriggered\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"changeVestingContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingSlicePeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"changeVestingSchedule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerPurchasingLimitInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setLowerPurchasingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setUpperPurchasingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperPurchasingLimitInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"whitelistingSwitchControl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawContractTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenCrowdsaleFLYY","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d324ba09f83a109da048001bbfb0e84c9733150e00000000000000000000000000000000000000000000000000000cbba106e0000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000efd3505a2ec51385705fd0268ea337a2ee5bca14","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f252b0955947b5822881f96c3ab389998223662ba9830dca89b01c9246c8ed83"}]}