{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2022-07-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// the base implementation contract for the bridge-contract\r\n\r\n\r\ncontract Bridge {\r\n\r\n    enum Step {\r\n        Burn,\r\n        Mint\r\n    }\r\n\r\n    enum MintStatus {\r\n        None,\r\n        Pending,\r\n        Accepted,\r\n        Denied,\r\n        Failed\r\n    }\r\n\r\n    struct MintInfo {\r\n        MintStatus status;\r\n        uint256 otherChainNonce;\r\n        address receiver;\r\n        uint256 amount;\r\n        address _token;\r\n        uint256 requestTime;\r\n        uint256 signTime;\r\n    }\r\n\r\n    address public admin;\r\n    uint256 public nonce;\r\n    mapping(uint256 => bool) public processedTransactionNonces; // for storing the nonce process status using boolean and mapping\r\n    mapping(address => bool) public blacklist;\r\n    mapping(uint256 => MintInfo) public mintsInfo;\r\n\r\n    mapping(address => uint256[]) public userMintNonces;\r\n    uint256[] public globalMintNonces;\r\n    uint256[] public pendingMintNonces;\r\n    uint256[] public acceptedMintNonces;\r\n    uint256[] public deniedMintNonces;\r\n    uint256[] public failedMintNonces;\r\n\r\n    event BurnEvent(\r\n        uint256 indexed nonce,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        address token,\r\n        uint256 date\r\n    );\r\n    event MintRequest(\r\n        uint256 indexed nonce,\r\n        address _admin,\r\n        address to,\r\n        uint256 amount,\r\n        address token,\r\n        uint256 date\r\n    );\r\n    event MintAccepted(\r\n        uint256 indexed nonce,\r\n        address _admin,\r\n        address to,\r\n        uint256 amount,\r\n        address token,\r\n        uint256 date\r\n    );\r\n    event MintDenied(\r\n        uint256 indexed nonce,\r\n        address _admin,\r\n        address to,\r\n        uint256 amount,\r\n        address token,\r\n        uint256 date\r\n    );\r\n    event MintFailed(\r\n        uint256 indexed nonce,\r\n        address _admin,\r\n        address to,\r\n        uint256 amount,\r\n        address token,\r\n        uint256 date\r\n    );\r\n    event BlackListSet(\r\n        address indexed _admin,\r\n        address user,\r\n        bool flag,\r\n        uint256 date\r\n    );\r\n    event AdminTransfer(\r\n        address indexed oldAdmin,\r\n        address newAdmin,\r\n        uint256 date\r\n    );\r\n\r\n    // initializing the bridge with the token contract and the admin address\r\n    constructor () {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    // burn some amount of tokens\r\n    function burn(uint256 _amount, address _token) public {\r\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount); // locking the tokens from the sender address in the contract\r\n        emit BurnEvent(\r\n            nonce,\r\n            msg.sender,\r\n            address(this),\r\n            _amount,\r\n            _token,\r\n            block.timestamp\r\n        );\r\n        nonce++;\r\n    }\r\n\r\n    // function for minting some tokens the reciver\r\n\r\n    function mint_request(\r\n        uint256 otherChainNonce,\r\n        address receiver,\r\n        uint256 amount,\r\n        address _token\r\n    ) external {\r\n        require(msg.sender == admin, \"Only admin can ask mint tokens\");\r\n        require(\r\n            processedTransactionNonces[otherChainNonce] == false,\r\n            \"transfer already processed\"\r\n        ); // checking if the nonce is already processed\r\n        processedTransactionNonces[otherChainNonce] = true;\r\n\r\n        mintsInfo[otherChainNonce].otherChainNonce = otherChainNonce;\r\n        mintsInfo[otherChainNonce].status = MintStatus.Pending;\r\n        mintsInfo[otherChainNonce].receiver = receiver;\r\n        mintsInfo[otherChainNonce].amount = amount;\r\n        mintsInfo[otherChainNonce]._token = _token;\r\n        mintsInfo[otherChainNonce].requestTime = block.timestamp;\r\n\r\n        globalMintNonces.push(otherChainNonce);\r\n        userMintNonces[receiver].push(otherChainNonce);\r\n\r\n        emit MintRequest(\r\n            otherChainNonce,\r\n            msg.sender,\r\n            receiver,\r\n            amount,\r\n            _token,\r\n            block.timestamp\r\n        );\r\n\r\n        if (blacklist[receiver]) {\r\n            mintsInfo[otherChainNonce].status = MintStatus.Failed;\r\n            mintsInfo[otherChainNonce].signTime = block.timestamp;\r\n            failedMintNonces.push(otherChainNonce);\r\n\r\n            emit MintFailed(\r\n                otherChainNonce,\r\n                msg.sender,\r\n                receiver,\r\n                amount,\r\n                _token,\r\n                block.timestamp\r\n            );\r\n        } else {\r\n            pendingMintNonces.push(otherChainNonce);\r\n        }\r\n    }\r\n\r\n    function mint_sign(\r\n        uint256 _nonce,\r\n        bool _sign\r\n    ) external {\r\n        require(msg.sender == admin, \"Only admin can sign\");\r\n        require(mintsInfo[_nonce].status == MintStatus.Pending, \"not Pending\");\r\n\r\n        if (_sign) {\r\n            mintsInfo[_nonce].status = MintStatus.Accepted;\r\n            mintsInfo[_nonce].signTime = block.timestamp;\r\n\r\n            for (uint256 i = 0; i < pendingMintNonces.length; i++) {\r\n                if (pendingMintNonces[i] == _nonce) {\r\n                    pendingMintNonces[i] = pendingMintNonces[pendingMintNonces.length - 1];\r\n                    pendingMintNonces.pop();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            acceptedMintNonces.push(_nonce);\r\n\r\n            IERC20(mintsInfo[_nonce]._token).approve(address(this),\r\n                mintsInfo[_nonce].amount); // approving the amount of tokens to be minted\r\n            IERC20(mintsInfo[_nonce]._token).transferFrom(address(this),\r\n                mintsInfo[_nonce].receiver, mintsInfo[_nonce].amount); // minting some tokens for the receiver\r\n\r\n            emit MintAccepted(\r\n                mintsInfo[_nonce].otherChainNonce,\r\n                msg.sender,\r\n                mintsInfo[_nonce].receiver,\r\n                mintsInfo[_nonce].amount,\r\n                mintsInfo[_nonce]._token,\r\n                block.timestamp\r\n            );\r\n        } else {\r\n            mintsInfo[_nonce].status = MintStatus.Denied;\r\n            mintsInfo[_nonce].signTime = block.timestamp;\r\n\r\n            for (uint256 i = 0; i < pendingMintNonces.length; i++) {\r\n                if (pendingMintNonces[i] == _nonce) {\r\n                    pendingMintNonces[i] = pendingMintNonces[pendingMintNonces.length - 1];\r\n                    pendingMintNonces.pop();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            deniedMintNonces.push(_nonce);\r\n\r\n            emit MintDenied(\r\n                mintsInfo[_nonce].otherChainNonce,\r\n                msg.sender,\r\n                mintsInfo[_nonce].receiver,\r\n                mintsInfo[_nonce].amount,\r\n                mintsInfo[_nonce]._token,\r\n                block.timestamp\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    function setBlacklist(address _address, bool _flag) external {\r\n        require(msg.sender == admin, \"Only admin can set blacklist\");\r\n        blacklist[_address] = _flag;\r\n        \r\n        emit BlackListSet(msg.sender, _address, _flag, block.timestamp);\r\n    }\r\n\r\n    function transferAdmin(address _address) external {\r\n        require(msg.sender == admin, \"Forbidden\");\r\n        admin = _address;\r\n\r\n        emit AdminTransfer(msg.sender, _address, block.timestamp);\r\n    }\r\n\r\n    function viewGlobalMintNoncesLength() external view returns (uint256) {\r\n        return globalMintNonces.length;\r\n    }\r\n\r\n    function viewUserMintNoncesLength(address _address) external view returns (uint256) {\r\n        return userMintNonces[_address].length;\r\n    }\r\n\r\n    function viewPendingMintNoncesLength() external view returns (uint256) {\r\n        return pendingMintNonces.length;\r\n    }\r\n\r\n    function viewAcceptedMintNoncesLength() external view returns (uint256) {\r\n        return acceptedMintNonces.length;\r\n    }\r\n\r\n    function viewDeniedMintNoncesLength() external view returns (uint256) {\r\n        return deniedMintNonces.length;\r\n    }\r\n\r\n    function viewFailedMintNoncesLength() external view returns (uint256) {\r\n        return failedMintNonces.length;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"AdminTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"BlackListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"BurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"MintAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"MintDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"MintFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"MintRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptedMintNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deniedMintNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMintNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalMintNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"otherChainNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"mint_request\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sign\",\"type\":\"bool\"}],\"name\":\"mint_sign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintsInfo\",\"outputs\":[{\"internalType\":\"enum Bridge.MintStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"otherChainNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingMintNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedTransactionNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMintNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAcceptedMintNoncesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewDeniedMintNoncesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFailedMintNoncesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewGlobalMintNoncesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPendingMintNoncesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewUserMintNoncesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Bridge","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://27369be8218708715b3bda79e122eb79382cb54c519faa50d4e655d0daed1530"}]}