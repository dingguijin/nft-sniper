{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IWc3Decorator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Wc3Lib.sol\\\";\\r\\n\\r\\n/// @title Witty Creatures 3.0 Decorating interface.\\r\\n/// @author Otherplane Labs, 2022.\\r\\ninterface IWc3Decorator {\\r\\n    function baseURI() external view returns (string memory);\\r\\n    function forged() external view returns (bool);\\r\\n    function guildId() external view returns (uint256);\\r\\n    function randomTraits(bytes32, uint256) external view returns (Wc3Lib.WittyCreatureTraits memory);\\r\\n    function toJSON(bytes32, Wc3Lib.WittyCreature memory) external view returns (string memory);\\r\\n    function version() external view returns (string memory);\\r\\n}\\r\\n\"},\"IWitnetRandomness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\nimport \\\"./Witnet.sol\\\";\\r\\n\\r\\n/// @title The Witnet Randomness generator interface.\\r\\n/// @author Witnet Foundation.\\r\\ninterface IWitnetRandomness {\\r\\n\\r\\n    /// Thrown every time a new WitnetRandomnessRequest gets succesfully posted to the WitnetRequestBoard.\\r\\n    /// @param from Address from which the randomize() function was called. \\r\\n    /// @param prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\\r\\n    /// @param witnetQueryId Unique query id assigned to this request by the WRB.\\r\\n    /// @param witnetRequestHash SHA-256 hash of the WitnetRandomnessRequest actual bytecode just posted to the WRB.\\r\\n    event Randomized(\\r\\n        address indexed from,\\r\\n        uint256 indexed prevBlock,\\r\\n        uint256 witnetQueryId,\\r\\n        bytes32 witnetRequestHash\\r\\n    );\\r\\n\\r\\n    /// Returns amount of wei required to be paid as a fee when requesting randomization with a \\r\\n    /// transaction gas price as the one given.\\r\\n    function estimateRandomizeFee(uint256 _gasPrice) external view returns (uint256);\\r\\n\\r\\n    /// Retrieves data of a randomization request that got successfully posted to the WRB within a given block.\\r\\n    /// @dev Returns zero values if no randomness request was actually posted within a given block.\\r\\n    /// @param _block Block number whose randomness request is being queried for.\\r\\n    /// @return _from Address from which the latest randomness request was posted.\\r\\n    /// @return _id Unique request identifier as provided by the WRB.\\r\\n    /// @return _prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\\r\\n    /// @return _nextBlock Block number in which a randomness request got posted just after this one, 0 if none.\\r\\n    function getRandomizeData(uint256 _block)\\r\\n        external view returns (address _from, uint256 _id, uint256 _prevBlock, uint256 _nextBlock);\\r\\n\\r\\n    /// Retrieves the randomness generated upon solving a request that was posted within a given block,\\r\\n    /// if any, or to the _first_ request posted after that block, otherwise. Should the intended \\r\\n    /// request happen to be finalized with errors on the Witnet oracle network side, this function \\r\\n    /// will recursively try to return randomness from the next non-faulty randomization request found \\r\\n    /// in storage, if any. \\r\\n    /// @dev Fails if:\\r\\n    /// @dev   i.   no `randomize()` was not called in either the given block, or afterwards.\\r\\n    /// @dev   ii.  a request posted in/after given block does exist, but no result has been provided yet.\\r\\n    /// @dev   iii. all requests in/after the given block were solved with errors.\\r\\n    /// @param _block Block number from which the search will start.\\r\\n    function getRandomnessAfter(uint256 _block) external view returns (bytes32); \\r\\n\\r\\n    /// Tells what is the number of the next block in which a randomization request was posted after the given one. \\r\\n    /// @param _block Block number from which the search will start.\\r\\n    /// @return Number of the first block found after the given one, or `0` otherwise.\\r\\n    function getRandomnessNextBlock(uint256 _block) external view returns (uint256); \\r\\n\\r\\n    /// Gets previous block in which a randomness request was posted before the given one.\\r\\n    /// @param _block Block number from which the search will start.\\r\\n    /// @return First block found before the given one, or `0` otherwise.\\r\\n    function getRandomnessPrevBlock(uint256 _block) external view returns (uint256);\\r\\n\\r\\n    /// Returns `true` only when the randomness request that got posted within given block was already\\r\\n    /// reported back from the Witnet oracle, either successfully or with an error of any kind.\\r\\n    function isRandomized(uint256 _block) external view returns (bool);\\r\\n\\r\\n    /// Returns latest block in which a randomness request got sucessfully posted to the WRB.\\r\\n    function latestRandomizeBlock() external view returns (uint256);\\r\\n\\r\\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \\r\\n    /// the given `_nonce` value and the randomness returned by `getRandomnessAfter(_block)`. \\r\\n    /// @dev Fails under same conditions as `getRandomnessAfter(uint256)` may do.\\r\\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\\r\\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\\r\\n    /// @param _block Block number from which the search will start.\\r\\n    function random(uint32 _range, uint256 _nonce, uint256 _block) external view returns (uint32);\\r\\n\\r\\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \\r\\n    /// the given `_nonce` value and the given `_seed` as a source of entropy.\\r\\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\\r\\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\\r\\n    /// @param _seed Seed value used as entropy source.\\r\\n    function random(uint32 _range, uint256 _nonce, bytes32 _seed) external pure returns (uint32);\\r\\n\\r\\n    /// Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. \\r\\n    /// Only one randomness request per block will be actually posted to the WRB. Should there \\r\\n    /// already be a posted request within current block, it will try to upgrade Witnet fee of current\\u0027s \\r\\n    /// block randomness request according to current gas price. In both cases, all unused funds shall \\r\\n    /// be transfered back to the tx sender.\\r\\n    /// @return _usedFunds Amount of funds actually used from those provided by the tx sender.\\r\\n    function randomize() external payable returns (uint256 _usedFunds);\\r\\n\\r\\n    /// Increases Witnet fee related to a pending-to-be-solved randomness request, as much as it\\r\\n    /// may be required in proportion to how much bigger the current tx gas price is with respect the \\r\\n    /// highest gas price that was paid in either previous fee upgrades, or when the given randomness \\r\\n    /// request was posted. All unused funds shall be transferred back to the tx sender.\\r\\n    /// @return _usedFunds Amount of dunds actually used from those provided by the tx sender.\\r\\n    function upgradeRandomizeFee(uint256 _block) external payable returns (uint256 _usedFunds);\\r\\n}\\r\\n\"},\"IWitnetRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\n/// @title The Witnet Data Request basic interface.\\r\\n/// @author The Witnet Foundation.\\r\\ninterface IWitnetRequest {\\r\\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \\r\\n    /// a well-formed Witnet Data Request using Protocol Buffers.\\r\\n    function bytecode() external view returns (bytes memory);\\r\\n\\r\\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\\r\\n    function hash() external view returns (bytes32);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"Wc3Decorator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\nimport \\\"./IWc3Decorator.sol\\\";\\r\\n\\r\\n/// @title Decorator contract providing metadata content for Witty Creatures v3\\r\\n/// @author Otherplane Labs, 2022.\\r\\ncontract Wc3Decorator is IWc3Decorator, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Wc3Lib for bytes32;\\r\\n    using Wc3Lib for string;\\r\\n    using Wc3Lib for Wc3Lib.WittyCreatureRarity;\\r\\n\\r\\n    uint256 public constant TRAITS_MAX_SPREAD_RANK = 31;\\r\\n\\r\\n    string internal constant _TRAITS_DEFAULT_BACKGROUND = \\\"Plain\\\";\\r\\n    string internal constant _TRAITS_DEFAULT_EYES = \\\"Default\\\";\\r\\n    string internal constant _TRAITS_DEFAULT_HEAD = \\\"Default\\\";\\r\\n    string internal constant _TRAITS_DEFAULT_MOUTH = \\\"Default\\\";\\r\\n    string internal constant _TRAITS_DEFAULT_OBJECT = \\\"None\\\";\\r\\n    string internal constant _TRAITS_DEFAULT_OUTFIT = \\\"Default\\\";    \\r\\n\\r\\n    bytes32 internal immutable __version;\\r\\n\\r\\n    string public override baseURI;\\r\\n    bool public override forged;\\r\\n    uint256 public override immutable guildId;\\r\\n    TraitRanges public ranges;\\r\\n\\r\\n    mapping (uint256 =\\u003e string) public backgrounds;\\r\\n    mapping (uint256 =\\u003e string) public colors;\\r\\n    mapping (uint256 =\\u003e string) public eyes;\\r\\n    mapping (uint256 =\\u003e string) public guilds;\\r\\n    mapping (uint256 =\\u003e string) public heads;\\r\\n    mapping (uint256 =\\u003e string) public mouths;\\r\\n    mapping (uint256 =\\u003e string) public objects;\\r\\n    mapping (uint256 =\\u003e string) public outfits;\\r\\n\\r\\n    struct TraitRanges {\\r\\n        uint16 totalBackgrounds;\\r\\n        uint16 totalColors;\\r\\n        uint16 totalEyes;\\r\\n        uint16 totalHeads;\\r\\n        uint16 totalMouths;\\r\\n        uint16 totalObjects;\\r\\n        uint16 totalOutfits;        \\r\\n    }\\r\\n\\r\\n    modifier checkRange(string[] memory _tags) {\\r\\n        require(\\r\\n            _tags.length \\u003c= TRAITS_MAX_SPREAD_RANK,\\r\\n            \\\"Wc3Decorator: out of range\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isForged {\\r\\n        require(forged, \\\"Wc3Decorator: not forged\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notForged {\\r\\n        require(!forged, \\\"Wc3Decorator: already forged\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory _version,\\r\\n        string memory _baseURI,\\r\\n        string memory _chainName\\r\\n    ) {\\r\\n        __version = _version.toBytes32();\\r\\n        setBaseURI(_baseURI);\\r\\n        setGuildTag(block.chainid, _chainName);\\r\\n        guildId = block.chainid;\\r\\n    }\\r\\n\\r\\n    function version()\\r\\n        external view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return __version.toString();\\r\\n    }\\r\\n\\r\\n    function forge()\\r\\n        external virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(ranges.totalBackgrounds \\u003e 0, \\\"Wc3Decorator: no backgrounds\\\");\\r\\n        require(ranges.totalColors \\u003e 0, \\\"Wc3Decorator: no colors\\\");\\r\\n        require(ranges.totalEyes \\u003e 0, \\\"Wc3Decorator: no eyes\\\");\\r\\n        require(ranges.totalHeads \\u003e 0, \\\"Wc3Decorator: no heads\\\");\\r\\n        require(ranges.totalMouths \\u003e 0, \\\"Wc3Decorator: no mouths\\\");\\r\\n        require(ranges.totalObjects \\u003e 0, \\\"Wc3Decorator: no objects\\\");\\r\\n        require(ranges.totalOutfits \\u003e 0, \\\"Wc3Decorator: no outfits\\\");\\r\\n        require(\\r\\n            bytes(guilds[block.chainid]).length \\u003e 0,\\r\\n            \\\"Wc3Decorator: guild name not set\\\"\\r\\n        );\\r\\n        forged = true;\\r\\n    }\\r\\n\\r\\n    function getBackgrounds()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string[] memory _tags)\\r\\n    {\\r\\n        _tags = new string[](ranges.totalBackgrounds);\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            _tags[_i] = backgrounds[_i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getColors()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string[] memory _tags)\\r\\n    {\\r\\n        _tags = new string[](ranges.totalColors);\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            _tags[_i] = colors[_i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getEyes()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string[] memory _tags)\\r\\n    {\\r\\n        _tags = new string[](ranges.totalEyes);\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            _tags[_i] = eyes[_i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getGuildName()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return guilds[block.chainid];\\r\\n    }\\r\\n\\r\\n    function getHeads()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string[] memory _tags)\\r\\n    {\\r\\n        _tags = new string[](ranges.totalHeads);\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            _tags[_i] = heads[_i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMouths()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string[] memory _tags)\\r\\n    {\\r\\n        _tags = new string[](ranges.totalMouths);\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            _tags[_i] = mouths[_i];\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getObjects()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string[] memory _tags)\\r\\n    {\\r\\n        _tags = new string[](ranges.totalObjects);\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            _tags[_i] = objects[_i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOutfits()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string[] memory _tags)\\r\\n    {\\r\\n        _tags = new string[](ranges.totalOutfits);\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            _tags[_i] = outfits[_i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _baseURI)\\r\\n        public virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        bytes memory _rawURI = bytes(_baseURI);\\r\\n        require(\\r\\n            _rawURI.length \\u003e 0,\\r\\n            \\\"Wc3Decorator: empty URI\\\"\\r\\n        );\\r\\n        require(\\r\\n            _rawURI[_rawURI.length - 1] == \\\"/\\\",\\r\\n            \\\"Wc3Decorator: no trailing slash\\\"\\r\\n        );\\r\\n        baseURI = _baseURI;  \\r\\n    }\\r\\n\\r\\n    // backgrounds\\r\\n    function setBackgrounds(string[] memory _tags)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n        checkRange(_tags)\\r\\n    {\\r\\n        uint16 _total;\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            if (bytes(_tags[_i]).length \\u003e 0) {\\r\\n                backgrounds[_i] = _tags[_i];\\r\\n                _total ++;\\r\\n            }\\r\\n        }\\r\\n        ranges.totalBackgrounds = _total;\\r\\n    }\\r\\n\\r\\n    // colors\\r\\n    function setColors(string[] memory _tags)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n        checkRange(_tags)\\r\\n    {\\r\\n        uint16 _total;\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            if (bytes(_tags[_i]).length \\u003e 0) {\\r\\n                colors[_i] = _tags[_i];\\r\\n                _total ++;\\r\\n            }\\r\\n        }\\r\\n        ranges.totalColors = _total;\\r\\n    }\\r\\n\\r\\n    // eyes\\r\\n    function setEyes(string[] memory _tags)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n        checkRange(_tags)\\r\\n    {\\r\\n        uint16 _total;\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            if (bytes(_tags[_i]).length \\u003e 0) {\\r\\n                eyes[_i] = _tags[_i];\\r\\n                _total ++;\\r\\n            }\\r\\n        }\\r\\n        ranges.totalEyes = _total;\\r\\n    }\\r\\n\\r\\n    // guild\\r\\n    function setGuildTag(uint _index, string memory _tag)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n    {\\r\\n        guilds[_index] = _tag;\\r\\n    }\\r\\n\\r\\n    // heads\\r\\n    function setHeads(string[] memory _tags)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n        checkRange(_tags)\\r\\n    {\\r\\n        uint16 _total;\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            if (bytes(_tags[_i]).length \\u003e 0) {\\r\\n                heads[_i] = _tags[_i];\\r\\n                _total ++;\\r\\n            }\\r\\n        }\\r\\n        ranges.totalHeads = _total;\\r\\n    }\\r\\n\\r\\n    // mouths\\r\\n    function setMouths(string[] memory _tags)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n        checkRange(_tags)\\r\\n    {\\r\\n        uint16 _total;\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            if (bytes(_tags[_i]).length \\u003e 0) {\\r\\n                mouths[_i] = _tags[_i];\\r\\n                _total ++;\\r\\n            }\\r\\n        }\\r\\n        ranges.totalMouths = _total;\\r\\n    }\\r\\n\\r\\n    // objects\\r\\n    function setObjects(string[] memory _tags)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n        checkRange(_tags)\\r\\n    {\\r\\n        uint16 _total;\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            if (bytes(_tags[_i]).length \\u003e 0) {\\r\\n                objects[_i] = _tags[_i];\\r\\n                _total ++;\\r\\n            }\\r\\n        }\\r\\n        ranges.totalObjects = _total;\\r\\n    }\\r\\n\\r\\n    // outfits\\r\\n    function setOutfits(string[] memory _tags)\\r\\n        public virtual\\r\\n        notForged\\r\\n        onlyOwner\\r\\n        checkRange(_tags)\\r\\n    {\\r\\n        uint16 _total;\\r\\n        for (uint _i = 0; _i \\u003c _tags.length; _i ++) {\\r\\n            if (bytes(_tags[_i]).length \\u003e 0) {\\r\\n                outfits[_i] = _tags[_i];\\r\\n                _total ++;\\r\\n            }\\r\\n        }\\r\\n        ranges.totalOutfits = _total;\\r\\n    }\\r\\n\\r\\n    function randomTraits(\\r\\n            bytes32 _randomness,\\r\\n            uint256 _eggIndex\\r\\n        )\\r\\n        external view\\r\\n        override\\r\\n        returns (Wc3Lib.WittyCreatureTraits memory)\\r\\n    {\\r\\n        return _splitRandomPhenotype(_randomness, _eggIndex);\\r\\n    }\\r\\n\\r\\n    function toJSON(\\r\\n            bytes32 _randomness,\\r\\n            Wc3Lib.WittyCreature memory _intrinsics\\r\\n        )\\r\\n        external view\\r\\n        virtual override\\r\\n        returns (string memory _json)\\r\\n    {\\r\\n        Wc3Lib.WittyCreatureTraits memory _traits = _splitRandomPhenotype(\\r\\n            _randomness,\\r\\n            _intrinsics.eggIndex\\r\\n        );\\r\\n        \\r\\n        string memory _guildIdStr = block.chainid.toString();\\r\\n        string memory _tokenIdStr = _intrinsics.eggGuildRanking.toString();\\r\\n        string memory _baseURI = baseURI;\\r\\n\\r\\n        string memory _name = string(abi.encodePacked(\\r\\n            \\\"\\\\\\\"name\\\\\\\": \\\\\\\"\\\", _intrinsics.eggName, \\\"\\\\\\\",\\\"\\r\\n        ));\\r\\n        string memory _description = string(abi.encodePacked(\\r\\n            \\\"\\\\\\\"description\\\\\\\": \\\\\\\"Witty Creature #\\\",\\r\\n                (_intrinsics.eggIndex + 1).toString(),\\r\\n            \\\" at EthCC[5] Paris, July 19-21, 2022.\\\"\\r\\n            \\\" The [Witnet multi-chain decentralized oracle](https://witnet.io) was used\\\"\\r\\n            \\\" for both generating randomness and retrieving the last known [USD price at the moment this token\\\"\\r\\n            \\\" got minted](https://witnet.network/search/\\\",\\r\\n                _intrinsics.mintUsdPriceWitnetProof.toHexString(), \\r\\n            \\\").\\\\\\\",\\\"\\r\\n        ));\\r\\n        string memory _externalUrl = string(abi.encodePacked(\\r\\n            \\\"\\\\\\\"external_url\\\\\\\": \\\\\\\"\\\", _baseURI, \\\"metadata/\\\", _guildIdStr, \\\"/\\\", _tokenIdStr, \\\"\\\\\\\",\\\"\\r\\n        ));\\r\\n        string memory _image = string(abi.encodePacked(\\r\\n            \\\"\\\\\\\"image\\\\\\\": \\\\\\\"\\\", _baseURI, \\\"image/\\\", _guildIdStr, \\\"/\\\", _tokenIdStr, \\\"\\\\\\\",\\\"\\r\\n        ));\\r\\n        string memory _attributes = string(abi.encodePacked(\\r\\n            \\\"\\\\\\\"attributes\\\\\\\": [\\\",\\r\\n                _loadAttributes(\\r\\n                    _randomness,\\r\\n                    _intrinsics,\\r\\n                    _traits\\r\\n                ),\\r\\n            \\\"]\\\"\\r\\n        ));\\r\\n        return string(abi.encodePacked(\\r\\n            \\\"{\\\", _name, _description, _externalUrl, _image, _attributes, \\\"}\\\"\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function _loadAttributes(\\r\\n            bytes32 _randomness,\\r\\n            Wc3Lib.WittyCreature memory _intrinsics,\\r\\n            Wc3Lib.WittyCreatureTraits memory _traits\\r\\n        )\\r\\n        internal view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory _witnetRandomness = string(abi.encodePacked(\\r\\n            \\\"{\\\", \\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Witnet Randomness\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"0x\\\", (\\r\\n                    _randomness.toHexString()\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        return string(abi.encodePacked(\\r\\n            _witnetRandomness,\\r\\n            _loadAttributesIntrinsics(_intrinsics),\\r\\n            _loadAttributesRandomized(_intrinsics.eggRarity, _traits)\\r\\n        ));        \\r\\n    }\\r\\n\\r\\n    function _loadAttributesIntrinsics(Wc3Lib.WittyCreature memory _intrinsics)\\r\\n        internal view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory _birthDate = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"display_type\\\\\\\": \\\\\\\"date\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Birth date\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\", _intrinsics.mintTimestamp.toString(),\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _eggColor = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Egg color\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    colors[_intrinsics.eggIndex % ranges.totalColors]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _eggRarity = string(abi.encodePacked(\\r\\n            \\\"{\\\", \\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Egg rarity\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    _intrinsics.eggRarity.toString()\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _eggScore = string(abi.encodePacked(\\r\\n            \\\"{\\\", \\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Egg score\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\", _intrinsics.eggScore.toString(),\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _globalRanking = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"display_type\\\\\\\": \\\\\\\"number\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Global ranking\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\", _intrinsics.eggGlobalRanking.toString(),\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _guild = string(abi.encodePacked(\\r\\n            \\\"{\\\", \\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Guild\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    guilds[block.chainid]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _guildRanking = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"display_type\\\\\\\": \\\\\\\"number\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Guild ranking\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\", _intrinsics.eggGuildRanking.toString(),\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _mintGasPrice = string(abi.encodePacked(\\r\\n            \\\"{\\\", \\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Mint gas price (gwei)\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\", _toStringDecimals2(_intrinsics.mintGasPrice / 10 ** 3),\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _mintUsdCost = string(abi.encodePacked(\\r\\n            \\\"{\\\", \\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Mint cost (USD)\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\", _toStringDecimals2(_intrinsics.mintUsdCost6),\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        return string(abi.encodePacked(\\r\\n            _birthDate,\\r\\n            _eggColor,\\r\\n            _eggRarity,\\r\\n            _eggScore,\\r\\n            _globalRanking,\\r\\n            _guild,\\r\\n            _guildRanking,\\r\\n            _mintGasPrice,\\r\\n            _mintUsdCost\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function _loadAttributesRandomized(\\r\\n            Wc3Lib.WittyCreatureRarity _rarity,\\r\\n            Wc3Lib.WittyCreatureTraits memory _traits\\r\\n        )\\r\\n        internal view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory _background = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Background\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    _rarity != Wc3Lib.WittyCreatureRarity.Legendary\\r\\n                        || bytes(backgrounds[_traits.background]).length == 0\\r\\n                    ? _TRAITS_DEFAULT_BACKGROUND\\r\\n                    : backgrounds[_traits.background]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _eyes = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Eyes\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    bytes(eyes[_traits.eyes]).length == 0\\r\\n                        ? _TRAITS_DEFAULT_EYES\\r\\n                        : eyes[_traits.eyes]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _head = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Head\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    bytes(heads[_traits.head]).length == 0\\r\\n                        ? _TRAITS_DEFAULT_HEAD\\r\\n                        : heads[_traits.head]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _mouth = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Mouth\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    bytes(mouths[_traits.mouth]).length == 0\\r\\n                        ? _TRAITS_DEFAULT_MOUTH\\r\\n                        : mouths[_traits.mouth]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _object = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Object\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    _rarity == Wc3Lib.WittyCreatureRarity.Common \\r\\n                        || bytes(objects[_traits.object]).length == 0\\r\\n                    ? _TRAITS_DEFAULT_OBJECT\\r\\n                    : objects[_traits.object]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"},\\\"\\r\\n        ));\\r\\n        string memory _outfit = string(abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n                \\\"\\\\\\\"trait_type\\\\\\\": \\\\\\\"Outfit\\\\\\\",\\\",\\r\\n                \\\"\\\\\\\"value\\\\\\\": \\\\\\\"\\\", (\\r\\n                    bytes(outfits[_traits.outfit]).length == 0\\r\\n                        ? _TRAITS_DEFAULT_OUTFIT\\r\\n                        : outfits[_traits.outfit]\\r\\n                ), \\\"\\\\\\\"\\\"\\r\\n            \\\"}\\\"\\r\\n        ));\\r\\n        return string(abi.encodePacked(\\r\\n            _background,\\r\\n            _eyes,\\r\\n            _head,\\r\\n            _mouth,\\r\\n            _object,\\r\\n            _outfit\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function _splitRandomPhenotype(\\r\\n            bytes32 _randomness,\\r\\n            uint256 _eggIndex\\r\\n        )\\r\\n        internal view\\r\\n        returns (Wc3Lib.WittyCreatureTraits memory _traits)\\r\\n    {\\r\\n        bytes32 _phenotype = keccak256(abi.encodePacked(\\r\\n            _randomness,\\r\\n            _eggIndex\\r\\n        ));\\r\\n        uint _nonce;\\r\\n        _traits.background = _phenotype.randomUint8(_nonce ++, ranges.totalBackgrounds);\\r\\n        _traits.eyes = _phenotype.randomUint8(_nonce ++, ranges.totalEyes * 2);\\r\\n        _traits.head = _phenotype.randomUint8(_nonce ++, ranges.totalHeads + 1);\\r\\n        _traits.object = _phenotype.randomUint8(_nonce ++, ranges.totalObjects);\\r\\n        _traits.outfit = _phenotype.randomUint8(_nonce ++, ranges.totalOutfits * 2);\\r\\n        _traits.mouth = _phenotype.randomUint8(_nonce ++, ranges.totalMouths * 2);\\r\\n    }\\r\\n\\r\\n    function _toStringDecimals2(uint256 _decimals6)\\r\\n        internal pure\\r\\n        returns (string memory _str)\\r\\n    {\\r\\n        uint256 _integer = _decimals6 / 10 ** 6;\\r\\n        uint256 _fraction2 = (_decimals6 - _integer * 10 ** 6) / 10 ** 4;\\r\\n        return string(abi.encodePacked(\\r\\n            _integer.toString(),\\r\\n            \\\".\\\",\\r\\n            _fraction2.toString()\\r\\n        ));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"Wc3Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IWitnetRandomness.sol\\\";\\r\\n\\r\\n/// @title Wc3Lib Library: data model and helper functions\\r\\n/// @author Otherplane Labs, 2022.\\r\\nlibrary Wc3Lib {\\r\\n\\r\\n    struct Storage {\\r\\n        address decorator;\\r\\n        address signator;\\r\\n        Settings settings;\\r\\n\\r\\n        uint256 mintGasOverhead;\\r\\n        uint256 hatchingBlock;\\r\\n        uint256 totalSupply;\\r\\n\\r\\n        mapping (/* tokenId =\\u003e WittyCreature */ uint256 =\\u003e WittyCreature) intrinsics;\\r\\n    }\\r\\n\\r\\n    struct Settings {        \\r\\n        uint256 expirationBlocks;\\r\\n        uint256 totalEggs;\\r\\n        uint8[] percentileMarks;\\r\\n    }\\r\\n\\r\\n    enum Status {\\r\\n        Batching,\\r\\n        Randomizing,\\r\\n        Hatching,\\r\\n        Frozen\\r\\n    }\\r\\n\\r\\n    struct WittyCreature {\\r\\n        string  eggName;\\r\\n        uint256 eggGlobalRanking;\\r\\n        uint256 eggGuildRanking; /// @dev same as tokenId\\r\\n        uint256 eggIndex;\\r\\n        WittyCreatureRarity eggRarity;\\r\\n        uint256 eggScore;\\r\\n        uint256 mintBlock;\\r\\n        uint256 mintGas;\\r\\n        uint256 mintGasPrice;\\r\\n        uint256 mintTimestamp;\\r\\n        uint256 mintUsdCost6;\\r\\n        bytes32 mintUsdPriceWitnetProof;\\r\\n    }\\r\\n\\r\\n    struct WittyCreatureTraits {\\r\\n        uint8 background;\\r\\n        uint8 eyes;\\r\\n        uint8 head;\\r\\n        uint8 mouth;\\r\\n        uint8 object;\\r\\n        uint8 outfit;  \\r\\n    }\\r\\n\\r\\n    enum WittyCreatureRarity {\\r\\n        Legendary,  // 0\\r\\n        Rare,       // 1\\r\\n        Common      // 2\\r\\n    }\\r\\n\\r\\n    enum WittyCreatureStatus {\\r\\n        Void,        // 0\\r\\n        Incubating,  // 1\\r\\n        Randomizing, // 2\\r\\n        Hatching,    // 3\\r\\n        Minted,      // 4\\r\\n        Frozen       // 5\\r\\n    }\\r\\n\\r\\n    // Calculate length of string-equivalent to given bytes32.\\r\\n    function length(bytes32 _bytes32)\\r\\n        internal pure\\r\\n        returns (uint _length)\\r\\n    {\\r\\n        for (; _length \\u003c 32; _length ++) {\\r\\n            if (_bytes32[_length] == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Generates pseudo-random number uniformly distributed in range [0 .. _range).\\r\\n    function randomUint8(bytes32 _seed, uint256 _index, uint _range)\\r\\n        internal pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        assert(_range \\u003e 0 \\u0026\\u0026 _range \\u003c= 256);\\r\\n        uint8 _flagBits = uint8(255 - _msbDeBruijn32(uint32(_range)));\\r\\n        uint256 _number = uint256(keccak256(abi.encode(_seed, _index))) \\u0026 uint256(2 ** _flagBits - 1);\\r\\n        return uint8((_number * _range) \\u003e\\u003e _flagBits); \\r\\n    }\\r\\n\\r\\n    /// Calculate rarity index based on a creature\\u0027s ranking percentile.\\r\\n    function eggRarity(\\r\\n            Storage storage self,\\r\\n            uint _percentile100\\r\\n        )\\r\\n        internal view\\r\\n        returns (WittyCreatureRarity)\\r\\n    {\\r\\n        uint8 _i; uint8 _cumuled;\\r\\n        if (_percentile100 \\u003e 100) {\\r\\n            _percentile100 = 100;\\r\\n        }\\r\\n        uint _length = self.settings.percentileMarks.length; \\r\\n        for (; _i \\u003c _length; _i ++) {\\r\\n            _cumuled += self.settings.percentileMarks[_i];\\r\\n            if (_percentile100 \\u003c= _cumuled) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return WittyCreatureRarity(_i);\\r\\n    }\\r\\n\\r\\n    /// Recovers address from hash and signature.\\r\\n    function recoverAddr(bytes32 _hash, bytes memory _signature)\\r\\n        internal pure\\r\\n        returns (address)\\r\\n    {\\r\\n        if (_signature.length != 65) {\\r\\n            return (address(0));\\r\\n        }\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            r := mload(add(_signature, 0x20))\\r\\n            s := mload(add(_signature, 0x40))\\r\\n            v := byte(0, mload(add(_signature, 0x60)))\\r\\n        }\\r\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return address(0);\\r\\n        }\\r\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\r\\n            return address(0);\\r\\n        }\\r\\n        return ecrecover(_hash, v, r, s);\\r\\n    }    \\r\\n\\r\\n    /// Gets tender\\u0027s current status.\\r\\n    function status(Storage storage self, IWitnetRandomness _randomizer)\\r\\n        internal view\\r\\n        returns (Status)\\r\\n    {\\r\\n        uint _hatchingBlock = self.hatchingBlock;\\r\\n        uint _expirationBlocks = self.settings.expirationBlocks;\\r\\n        if (_hatchingBlock \\u003e 0) {\\r\\n            if (_randomizer.isRandomized(_hatchingBlock)) {\\r\\n                if (_expirationBlocks \\u003e 0 \\u0026\\u0026 block.number \\u003e _hatchingBlock + _expirationBlocks) {\\r\\n                    return Status.Frozen;\\r\\n                } else {\\r\\n                    return Status.Hatching;\\r\\n                }\\r\\n            } else {\\r\\n                return Status.Randomizing;\\r\\n            }\\r\\n        } else {\\r\\n            return Status.Batching;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Produces revert message when tender is not in expected status.\\r\\n    function statusRevertMessage(Status _status)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_status == Status.Frozen) {\\r\\n            return \\\"Wc3Lib: not in Frozen status\\\";\\r\\n        } else if (_status == Status.Batching) {\\r\\n            return \\\"Wc3Lib: not in Batching status\\\";\\r\\n        } else if (_status == Status.Randomizing) {\\r\\n            return \\\"Wc3Lib: not in Randomizing status\\\";\\r\\n        } else if (_status == Status.Hatching) {\\r\\n            return \\\"Wc3Lib: not in Hatching status\\\";\\r\\n        } else {\\r\\n            return \\\"Wc3Lib: bad mood\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Gets tokens\\u0027s current status.\\r\\n    function tokenStatus(Storage storage self, IWitnetRandomness _randomizer, uint256 _tokenId)\\r\\n        internal view\\r\\n        returns (WittyCreatureStatus)\\r\\n    {\\r\\n        WittyCreature memory _wc3 = self.intrinsics[_tokenId];\\r\\n        if (\\r\\n            _tokenId == 0\\r\\n                || _tokenId \\u003e self.settings.totalEggs\\r\\n        ) {\\r\\n            return WittyCreatureStatus.Void;\\r\\n        }\\r\\n        else if (_wc3.mintTimestamp \\u003e 0) {\\r\\n            return WittyCreatureStatus.Minted;\\r\\n        }\\r\\n        else {\\r\\n            uint _hatchingBlock = self.hatchingBlock;\\r\\n            if (_hatchingBlock \\u003e 0) {\\r\\n                if (_randomizer.isRandomized(_hatchingBlock)) {\\r\\n                    uint _expirationBlocks = self.settings.expirationBlocks;\\r\\n                    if (\\r\\n                        _expirationBlocks \\u003e 0\\r\\n                            \\u0026\\u0026 block.number \\u003e _hatchingBlock + _expirationBlocks\\r\\n                    ) {\\r\\n                        return WittyCreatureStatus.Frozen;\\r\\n                    } else {\\r\\n                        return WittyCreatureStatus.Hatching;\\r\\n                    }\\r\\n                } else {\\r\\n                    return WittyCreatureStatus.Randomizing;\\r\\n                }\\r\\n            } else {\\r\\n                return WittyCreatureStatus.Incubating;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Reduces string into bytes32.\\r\\n    function toBytes32(string memory _string)\\r\\n        internal pure\\r\\n        returns (bytes32 _result)\\r\\n    {\\r\\n        if (bytes(_string).length == 0) {\\r\\n            return 0x0;\\r\\n        } else {\\r\\n            assembly {\\r\\n                _result := mload(add(_string, 32))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Converts bytes32 into hex string.\\r\\n    function toHexString(bytes32 _bytes32)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_bytes32 == 0) {\\r\\n            return \\\"0\\\";\\r\\n        } else {\\r\\n            bytes32 _temp = _bytes32;\\r\\n            uint _length;\\r\\n            while (_temp != 0) {\\r\\n                _length ++;\\r\\n                _temp = _temp \\u003e\\u003e 4;\\r\\n            }\\r\\n            bytes memory _bstr = new bytes(_length);\\r\\n            uint _k = _length;\\r\\n            while (_bytes32 != 0) {\\r\\n                uint _char = uint(_bytes32) \\u0026 0xf;\\r\\n                _bstr[-- _k] = (_char \\u003e 9\\r\\n                    ? bytes1(uint8(87 + _char)) // lower-case letters\\r\\n                    : bytes1(uint8(48 + _char)) // decimal digits\\r\\n                );\\r\\n                _bytes32 = _bytes32 \\u003e\\u003e 4;\\r\\n            }\\r\\n            return string(_bstr);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Converts bytes32 into string.\\r\\n    function toString(bytes32 _bytes32)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes memory _bytes = new bytes(length(_bytes32));\\r\\n        for (uint _i = 0; _i \\u003c _bytes.length; _i ++) {\\r\\n            _bytes[_i] = _bytes32[_i];\\r\\n        }\\r\\n        return string(_bytes);\\r\\n    }\\r\\n\\r\\n    /// Translate rarity index into a literal string.\\r\\n    function toString(WittyCreatureRarity _rarity)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_rarity == WittyCreatureRarity.Legendary) {\\r\\n            return \\\"Legendary\\\";\\r\\n        } else if (_rarity == WittyCreatureRarity.Rare) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else {\\r\\n            return \\\"Common\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Returns contract status string.\\r\\n    function toString(Status _status)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_status == Status.Batching) {\\r\\n            return \\\"Batching\\\";\\r\\n        } else if (_status == Status.Randomizing) {\\r\\n            return \\\"Randomizing\\\";\\r\\n        } else if (_status == Status.Hatching) {\\r\\n            return \\\"Hatching\\\";\\r\\n        } else {\\r\\n            return \\\"Frozen\\\";\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// Returns token status string.\\r\\n    function toString(WittyCreatureStatus _status)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_status == WittyCreatureStatus.Incubating) {\\r\\n            return \\\"Incubating\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Randomizing) {\\r\\n            return \\\"Randomizing\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Hatching) {\\r\\n            return \\\"Hatching\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Minted) {\\r\\n            return \\\"Minted\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Frozen) {\\r\\n            return \\\"Frozen\\\";\\r\\n        } else {\\r\\n            return \\\"Void\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Returns index of Most Significant Bit of given number, applying De Bruijn O(1) algorithm.\\r\\n    function _msbDeBruijn32(uint32 _v)\\r\\n        private pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        uint8[32] memory _bitPosition = [\\r\\n                0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30,\\r\\n                8, 12, 20, 28, 15, 17, 24, 7, 19, 27, 23, 6, 26, 5, 4, 31\\r\\n            ];\\r\\n        _v |= _v \\u003e\\u003e 1;\\r\\n        _v |= _v \\u003e\\u003e 2;\\r\\n        _v |= _v \\u003e\\u003e 4;\\r\\n        _v |= _v \\u003e\\u003e 8;\\r\\n        _v |= _v \\u003e\\u003e 16;\\r\\n        return _bitPosition[\\r\\n            uint32(_v * uint256(0x07c4acdd)) \\u003e\\u003e 27\\r\\n        ];\\r\\n    }\\r\\n}\\r\\n\"},\"Witnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IWitnetRequest.sol\\\";\\r\\n\\r\\nlibrary Witnet {\\r\\n\\r\\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\\r\\n    /// @param _bytecode CBOR-encoded RADON.\\r\\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\\r\\n        return sha256(_bytecode);\\r\\n    }\\r\\n\\r\\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\\r\\n    struct Query {\\r\\n        Request request;\\r\\n        Response response;\\r\\n        address from;      // Address from which the request was posted.\\r\\n    }\\r\\n\\r\\n    /// Possible status of a Witnet query.\\r\\n    enum QueryStatus {\\r\\n        Unknown,\\r\\n        Posted,\\r\\n        Reported,\\r\\n        Deleted\\r\\n    }\\r\\n\\r\\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\\r\\n    struct Request {\\r\\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\\r\\n        address requester;      // Address from which the request was posted.\\r\\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\\r\\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\\r\\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\\r\\n    }\\r\\n\\r\\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\\r\\n    struct Response {\\r\\n        address reporter;       // Address from which the result was reported.\\r\\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\\r\\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\\r\\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\\r\\n    }\\r\\n\\r\\n    /// Data struct containing the Witnet-provided result to a Data Request.\\r\\n    struct Result {\\r\\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\\r\\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\\r\\n    }\\r\\n\\r\\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\\r\\n    struct CBOR {\\r\\n        Buffer buffer;\\r\\n        uint8 initialByte;\\r\\n        uint8 majorType;\\r\\n        uint8 additionalInformation;\\r\\n        uint64 len;\\r\\n        uint64 tag;\\r\\n    }\\r\\n\\r\\n    /// Iterable bytes buffer.\\r\\n    struct Buffer {\\r\\n        bytes data;\\r\\n        uint32 cursor;\\r\\n    }\\r\\n\\r\\n    /// Witnet error codes table.\\r\\n    enum ErrorCodes {\\r\\n        // 0x00: Unknown error. Something went really bad!\\r\\n        Unknown,\\r\\n        // Script format errors\\r\\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\\r\\n        SourceScriptNotCBOR,\\r\\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\\r\\n        SourceScriptNotArray,\\r\\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\\r\\n        SourceScriptNotRADON,\\r\\n        /// Unallocated\\r\\n        ScriptFormat0x04,\\r\\n        ScriptFormat0x05,\\r\\n        ScriptFormat0x06,\\r\\n        ScriptFormat0x07,\\r\\n        ScriptFormat0x08,\\r\\n        ScriptFormat0x09,\\r\\n        ScriptFormat0x0A,\\r\\n        ScriptFormat0x0B,\\r\\n        ScriptFormat0x0C,\\r\\n        ScriptFormat0x0D,\\r\\n        ScriptFormat0x0E,\\r\\n        ScriptFormat0x0F,\\r\\n        // Complexity errors\\r\\n        /// 0x10: The request contains too many sources.\\r\\n        RequestTooManySources,\\r\\n        /// 0x11: The script contains too many calls.\\r\\n        ScriptTooManyCalls,\\r\\n        /// Unallocated\\r\\n        Complexity0x12,\\r\\n        Complexity0x13,\\r\\n        Complexity0x14,\\r\\n        Complexity0x15,\\r\\n        Complexity0x16,\\r\\n        Complexity0x17,\\r\\n        Complexity0x18,\\r\\n        Complexity0x19,\\r\\n        Complexity0x1A,\\r\\n        Complexity0x1B,\\r\\n        Complexity0x1C,\\r\\n        Complexity0x1D,\\r\\n        Complexity0x1E,\\r\\n        Complexity0x1F,\\r\\n        // Operator errors\\r\\n        /// 0x20: The operator does not exist.\\r\\n        UnsupportedOperator,\\r\\n        /// Unallocated\\r\\n        Operator0x21,\\r\\n        Operator0x22,\\r\\n        Operator0x23,\\r\\n        Operator0x24,\\r\\n        Operator0x25,\\r\\n        Operator0x26,\\r\\n        Operator0x27,\\r\\n        Operator0x28,\\r\\n        Operator0x29,\\r\\n        Operator0x2A,\\r\\n        Operator0x2B,\\r\\n        Operator0x2C,\\r\\n        Operator0x2D,\\r\\n        Operator0x2E,\\r\\n        Operator0x2F,\\r\\n        // Retrieval-specific errors\\r\\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\\r\\n        HTTP,\\r\\n        /// 0x31: Retrieval of at least one of the sources timed out.\\r\\n        RetrievalTimeout,\\r\\n        /// Unallocated\\r\\n        Retrieval0x32,\\r\\n        Retrieval0x33,\\r\\n        Retrieval0x34,\\r\\n        Retrieval0x35,\\r\\n        Retrieval0x36,\\r\\n        Retrieval0x37,\\r\\n        Retrieval0x38,\\r\\n        Retrieval0x39,\\r\\n        Retrieval0x3A,\\r\\n        Retrieval0x3B,\\r\\n        Retrieval0x3C,\\r\\n        Retrieval0x3D,\\r\\n        Retrieval0x3E,\\r\\n        Retrieval0x3F,\\r\\n        // Math errors\\r\\n        /// 0x40: Math operator caused an underflow.\\r\\n        Underflow,\\r\\n        /// 0x41: Math operator caused an overflow.\\r\\n        Overflow,\\r\\n        /// 0x42: Tried to divide by zero.\\r\\n        DivisionByZero,\\r\\n        /// Unallocated\\r\\n        Math0x43,\\r\\n        Math0x44,\\r\\n        Math0x45,\\r\\n        Math0x46,\\r\\n        Math0x47,\\r\\n        Math0x48,\\r\\n        Math0x49,\\r\\n        Math0x4A,\\r\\n        Math0x4B,\\r\\n        Math0x4C,\\r\\n        Math0x4D,\\r\\n        Math0x4E,\\r\\n        Math0x4F,\\r\\n        // Other errors\\r\\n        /// 0x50: Received zero reveals\\r\\n        NoReveals,\\r\\n        /// 0x51: Insufficient consensus in tally precondition clause\\r\\n        InsufficientConsensus,\\r\\n        /// 0x52: Received zero commits\\r\\n        InsufficientCommits,\\r\\n        /// 0x53: Generic error during tally execution\\r\\n        TallyExecution,\\r\\n        /// Unallocated\\r\\n        OtherError0x54,\\r\\n        OtherError0x55,\\r\\n        OtherError0x56,\\r\\n        OtherError0x57,\\r\\n        OtherError0x58,\\r\\n        OtherError0x59,\\r\\n        OtherError0x5A,\\r\\n        OtherError0x5B,\\r\\n        OtherError0x5C,\\r\\n        OtherError0x5D,\\r\\n        OtherError0x5E,\\r\\n        OtherError0x5F,\\r\\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\\r\\n        MalformedReveal,\\r\\n        /// Unallocated\\r\\n        OtherError0x61,\\r\\n        OtherError0x62,\\r\\n        OtherError0x63,\\r\\n        OtherError0x64,\\r\\n        OtherError0x65,\\r\\n        OtherError0x66,\\r\\n        OtherError0x67,\\r\\n        OtherError0x68,\\r\\n        OtherError0x69,\\r\\n        OtherError0x6A,\\r\\n        OtherError0x6B,\\r\\n        OtherError0x6C,\\r\\n        OtherError0x6D,\\r\\n        OtherError0x6E,\\r\\n        OtherError0x6F,\\r\\n        // Access errors\\r\\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\\r\\n        ArrayIndexOutOfBounds,\\r\\n        /// 0x71: Tried to access a value from a map using a key that does not exist\\r\\n        MapKeyNotFound,\\r\\n        /// Unallocated\\r\\n        OtherError0x72,\\r\\n        OtherError0x73,\\r\\n        OtherError0x74,\\r\\n        OtherError0x75,\\r\\n        OtherError0x76,\\r\\n        OtherError0x77,\\r\\n        OtherError0x78,\\r\\n        OtherError0x79,\\r\\n        OtherError0x7A,\\r\\n        OtherError0x7B,\\r\\n        OtherError0x7C,\\r\\n        OtherError0x7D,\\r\\n        OtherError0x7E,\\r\\n        OtherError0x7F,\\r\\n        OtherError0x80,\\r\\n        OtherError0x81,\\r\\n        OtherError0x82,\\r\\n        OtherError0x83,\\r\\n        OtherError0x84,\\r\\n        OtherError0x85,\\r\\n        OtherError0x86,\\r\\n        OtherError0x87,\\r\\n        OtherError0x88,\\r\\n        OtherError0x89,\\r\\n        OtherError0x8A,\\r\\n        OtherError0x8B,\\r\\n        OtherError0x8C,\\r\\n        OtherError0x8D,\\r\\n        OtherError0x8E,\\r\\n        OtherError0x8F,\\r\\n        OtherError0x90,\\r\\n        OtherError0x91,\\r\\n        OtherError0x92,\\r\\n        OtherError0x93,\\r\\n        OtherError0x94,\\r\\n        OtherError0x95,\\r\\n        OtherError0x96,\\r\\n        OtherError0x97,\\r\\n        OtherError0x98,\\r\\n        OtherError0x99,\\r\\n        OtherError0x9A,\\r\\n        OtherError0x9B,\\r\\n        OtherError0x9C,\\r\\n        OtherError0x9D,\\r\\n        OtherError0x9E,\\r\\n        OtherError0x9F,\\r\\n        OtherError0xA0,\\r\\n        OtherError0xA1,\\r\\n        OtherError0xA2,\\r\\n        OtherError0xA3,\\r\\n        OtherError0xA4,\\r\\n        OtherError0xA5,\\r\\n        OtherError0xA6,\\r\\n        OtherError0xA7,\\r\\n        OtherError0xA8,\\r\\n        OtherError0xA9,\\r\\n        OtherError0xAA,\\r\\n        OtherError0xAB,\\r\\n        OtherError0xAC,\\r\\n        OtherError0xAD,\\r\\n        OtherError0xAE,\\r\\n        OtherError0xAF,\\r\\n        OtherError0xB0,\\r\\n        OtherError0xB1,\\r\\n        OtherError0xB2,\\r\\n        OtherError0xB3,\\r\\n        OtherError0xB4,\\r\\n        OtherError0xB5,\\r\\n        OtherError0xB6,\\r\\n        OtherError0xB7,\\r\\n        OtherError0xB8,\\r\\n        OtherError0xB9,\\r\\n        OtherError0xBA,\\r\\n        OtherError0xBB,\\r\\n        OtherError0xBC,\\r\\n        OtherError0xBD,\\r\\n        OtherError0xBE,\\r\\n        OtherError0xBF,\\r\\n        OtherError0xC0,\\r\\n        OtherError0xC1,\\r\\n        OtherError0xC2,\\r\\n        OtherError0xC3,\\r\\n        OtherError0xC4,\\r\\n        OtherError0xC5,\\r\\n        OtherError0xC6,\\r\\n        OtherError0xC7,\\r\\n        OtherError0xC8,\\r\\n        OtherError0xC9,\\r\\n        OtherError0xCA,\\r\\n        OtherError0xCB,\\r\\n        OtherError0xCC,\\r\\n        OtherError0xCD,\\r\\n        OtherError0xCE,\\r\\n        OtherError0xCF,\\r\\n        OtherError0xD0,\\r\\n        OtherError0xD1,\\r\\n        OtherError0xD2,\\r\\n        OtherError0xD3,\\r\\n        OtherError0xD4,\\r\\n        OtherError0xD5,\\r\\n        OtherError0xD6,\\r\\n        OtherError0xD7,\\r\\n        OtherError0xD8,\\r\\n        OtherError0xD9,\\r\\n        OtherError0xDA,\\r\\n        OtherError0xDB,\\r\\n        OtherError0xDC,\\r\\n        OtherError0xDD,\\r\\n        OtherError0xDE,\\r\\n        OtherError0xDF,\\r\\n        // Bridge errors: errors that only belong in inter-client communication\\r\\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\\r\\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\\r\\n        /// are never included into blocks and therefore never get a Tally in response.\\r\\n        BridgeMalformedRequest,\\r\\n        /// 0xE1: Witnesses exceeds 100\\r\\n        BridgePoorIncentives,\\r\\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\\r\\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\\r\\n        BridgeOversizedResult,\\r\\n        /// Unallocated\\r\\n        OtherError0xE3,\\r\\n        OtherError0xE4,\\r\\n        OtherError0xE5,\\r\\n        OtherError0xE6,\\r\\n        OtherError0xE7,\\r\\n        OtherError0xE8,\\r\\n        OtherError0xE9,\\r\\n        OtherError0xEA,\\r\\n        OtherError0xEB,\\r\\n        OtherError0xEC,\\r\\n        OtherError0xED,\\r\\n        OtherError0xEE,\\r\\n        OtherError0xEF,\\r\\n        OtherError0xF0,\\r\\n        OtherError0xF1,\\r\\n        OtherError0xF2,\\r\\n        OtherError0xF3,\\r\\n        OtherError0xF4,\\r\\n        OtherError0xF5,\\r\\n        OtherError0xF6,\\r\\n        OtherError0xF7,\\r\\n        OtherError0xF8,\\r\\n        OtherError0xF9,\\r\\n        OtherError0xFA,\\r\\n        OtherError0xFB,\\r\\n        OtherError0xFC,\\r\\n        OtherError0xFD,\\r\\n        OtherError0xFE,\\r\\n        // This should not exist:\\r\\n        /// 0xFF: Some tally error is not intercepted but should\\r\\n        UnhandledIntercept\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TRAITS_MAX_SPREAD_RANK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eyes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBackgrounds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColors\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEyes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuildName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHeads\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMouths\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getObjects\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutfits\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heads\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mouths\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"objects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outfits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_randomness\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_eggIndex\",\"type\":\"uint256\"}],\"name\":\"randomTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"object\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outfit\",\"type\":\"uint8\"}],\"internalType\":\"struct Wc3Lib.WittyCreatureTraits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ranges\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"totalBackgrounds\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalColors\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalEyes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalHeads\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalMouths\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalObjects\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalOutfits\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"setBackgrounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"setColors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"setEyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"}],\"name\":\"setGuildTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"setHeads\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"setMouths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"setObjects\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"setOutfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_randomness\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"eggName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"eggGlobalRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggGuildRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum Wc3Lib.WittyCreatureRarity\",\"name\":\"eggRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eggScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintUsdCost6\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mintUsdPriceWitnetProof\",\"type\":\"bytes32\"}],\"internalType\":\"struct Wc3Lib.WittyCreature\",\"name\":\"_intrinsics\",\"type\":\"tuple\"}],\"name\":\"toJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Wc3Decorator","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000005332e332e39000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f6170692d6574686363352e77697474796372656174757265732e636f6d2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://95073c0fa485bf4304ae6df81e0c93da0a35d2a2be799ea7888b980944a767bd"}]}