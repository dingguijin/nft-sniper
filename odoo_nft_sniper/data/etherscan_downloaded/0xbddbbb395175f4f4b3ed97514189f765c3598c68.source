{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC721Pledge {\r\n    function pledgeMint(address to, uint256 quantity)\r\n        external;\r\n    \r\n    function amountForPledgeMint() external view returns (uint256);\r\n}\r\n\r\ncontract PledgeMint is Ownable, ReentrancyGuard {\r\n\r\n    uint256 public totalMinted = 0;\r\n\r\n    IERC721Pledge public nftContract;\r\n    uint256 public mintPrice = 0.01 ether;\r\n    uint256 public maxPerWallet = 10;\r\n    bool public pledgesLocked = false;\r\n    bool public open = true;\r\n\r\n    address[] public pledgers;\r\n    mapping(address => bool) public allowlists;\r\n    mapping(address => uint256) public pledgesAmount;\r\n    mapping(address => uint256) public depositAmount;\r\n\r\n    modifier callerIsUser() {\r\n        require(tx.origin == msg.sender, \"The caller is another contract\");\r\n        _; \r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function setNftContract(address contractAdd) public onlyOwner {\r\n        require(address(nftContract) == address(0), \"Nft contract was setup\");\r\n        nftContract = IERC721Pledge(contractAdd);\r\n    }\r\n\r\n    function setupPledgePhase(uint256 _mintPrice, uint256 _maxPerWallet) external onlyOwner {\r\n        mintPrice = _mintPrice;\r\n        maxPerWallet = _maxPerWallet;\r\n    }\r\n\r\n    function allowAddresses(bool isAdding, address[] calldata _allowlist) external onlyOwner {\r\n        for (uint i=0; i < _allowlist.length; i++) {\r\n            allowlists[_allowlist[i]] = isAdding;\r\n        }\r\n    }\r\n\r\n    function pledge(uint256 number) external payable callerIsUser {\r\n        if(open == false){\r\n            require(allowlists[msg.sender], \"Not in whitelist\");\r\n        }\r\n        require((totalMinted + number) <= nftContract.amountForPledgeMint(), \"Cannot buy that many NFTs\");\r\n        require(pledgesAmount[msg.sender] + number <= maxPerWallet, \"Cannot buy that many NFTs\");\r\n        require(number > 0, \"Need to buy at least one\");\r\n        require(msg.value >= mintPrice * number, \"Amount mismatch\");\r\n        pledgers.push(msg.sender);\r\n        pledgesAmount[msg.sender] += number;\r\n        depositAmount[msg.sender] += msg.value;\r\n\r\n        totalMinted +=  number;\r\n    }\r\n\r\n    function unpledge() external nonReentrant callerIsUser {\r\n        require(pledgesLocked == false, \"Pledges are locked\");\r\n        require(pledgesAmount[msg.sender] > 0, \"Nothing pledged\");\r\n\r\n        (bool success, ) = msg.sender.call{value: depositAmount[msg.sender]}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n\r\n        totalMinted = totalMinted - pledgesAmount[msg.sender];\r\n        depositAmount[msg.sender] = 0;\r\n        pledgesAmount[msg.sender] = 0;\r\n    }\r\n\r\n    function lockPledgePhase() external onlyOwner {\r\n        pledgesLocked = true;\r\n    }\r\n\r\n    function unlockPledgePhase() external onlyOwner {\r\n        pledgesLocked = false;\r\n    }\r\n\r\n\r\n    function openPledgePublicly(bool isOpen) external onlyOwner {\r\n        open = isOpen;\r\n    }\r\n\r\n    // withdraw\r\n    function withdrawFund(uint256 amount) external onlyOwner {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    // mint for all participants\r\n    function mintPledgeForAll() external onlyOwner {\r\n        _mintPledge(pledgers, 0, pledgers.length);\r\n    }\r\n\r\n    // mint for all participants, paginated\r\n    function mintPledgeByIndex(uint startIdx, uint length) external onlyOwner {\r\n        _mintPledge(pledgers, startIdx, length);\r\n    }\r\n\r\n    // mint for select participants\r\n    // internal function checks eligibility and pledged number.\r\n    function mintPledgeForAddresses(address[] calldata selectPledgers) external onlyOwner {\r\n        _mintPledge(selectPledgers, 0, selectPledgers.length);\r\n    }\r\n\r\n    function _mintPledge(address[] memory addresses, uint startIdx, uint count) internal {\r\n        for (uint i = startIdx; i < count; i++) {\r\n            address pledger = addresses[i];\r\n            uint256 quantity = pledgesAmount[pledger];\r\n\r\n            if (quantity > 0) {\r\n                pledgesAmount[pledger] = 0;\r\n                depositAmount[pledger] = 0;\r\n                nftContract.pledgeMint(pledger, quantity);\r\n            }\r\n        }\r\n    }\r\n\r\n    function refundToPledger(address pledger) external onlyOwner nonReentrant {\r\n        (bool success, ) = pledger.call{value: depositAmount[pledger]}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        totalMinted = totalMinted - pledgesAmount[msg.sender];\r\n        depositAmount[msg.sender] = 0;\r\n        pledgesAmount[msg.sender] = 0;\r\n    }\r\n\r\n    function refundAll() public onlyOwner {\r\n        for (uint256 i = 0; i < pledgers.length; i++) {\r\n            address pledger = pledgers[i];\r\n\r\n            if(depositAmount[pledger] > 0){\r\n                (bool success, ) = pledger.call{value: depositAmount[pledger]}(\"\");\r\n                require(success, \"Address: unable to send value, recipient may have reverted\");\r\n                totalMinted = totalMinted - pledgesAmount[pledger];\r\n                depositAmount[pledger] = 0;\r\n                pledgesAmount[pledger] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function refundToPledgersByIndex(uint startIdx, uint count) external onlyOwner {\r\n        for (uint i = startIdx; i < count; i++) {\r\n            address pledger = pledgers[i];\r\n            if(depositAmount[pledger] > 0){\r\n                (bool success, ) = pledger.call{value: depositAmount[pledger]}(\"\");\r\n                require(success, \"Address: unable to send value, recipient may have reverted\");\r\n                totalMinted = totalMinted - pledgesAmount[pledger];\r\n                depositAmount[pledger] = 0;\r\n                pledgesAmount[pledger] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAmountForPledgeMint() public view returns(uint256){\r\n        if(address(nftContract) == address(0))\r\n            return 0;\r\n        else\r\n            return nftContract.amountForPledgeMint();\r\n    }\r\n\r\n    function totalPledgers() public view returns(uint256){\r\n        return pledgers.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAdding\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_allowlist\",\"type\":\"address[]\"}],\"name\":\"allowAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountForPledgeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"mintPledgeByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"selectPledgers\",\"type\":\"address[]\"}],\"name\":\"mintPledgeForAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPledgeForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IERC721Pledge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"openPledgePublicly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledgesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgesLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pledger\",\"type\":\"address\"}],\"name\":\"refundToPledger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"refundToPledgersByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAdd\",\"type\":\"address\"}],\"name\":\"setNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"}],\"name\":\"setupPledgePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPledgers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPledgePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PledgeMint","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b3359b9a3bd91bc64d72cd55e8cbf1a773649c47128f4711dd4ede62664cba93"}]}