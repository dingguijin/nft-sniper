{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n/**\r\n * @title USACOIN VESTING\r\n * @author DevAmerican\r\n */\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // benefit is lost if 'b' is also tested.\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract USACOINVESTING is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 private usacoin;\r\n    uint256 public tokensToVest = 0;\r\n    uint256 private vestingId = 0;\r\n\r\n    string private constant INSUFFICIENT_BALANCE = \"INSUFFICIENT_BALANCE\";\r\n    string private constant INVALID_VESTING_ID = \"INVALID_VESTIN_ID\";\r\n    string private constant VESTING_ALREADY_RELEASED = \"VESTING_ALREADY_RELEASED\";\r\n    string private constant INVALID_BENEFICIARY = \"INVALID_BENEFICIARY_ADDRESS\";\r\n    string private constant NOT_VESTED = \"TOKENS_HAVE_NOT_VESTED_YET\";\r\n    \r\n    uint256 constant private SCALING_FACTOR = 10**18;\r\n    uint256 constant private day = 1 days;\r\n\r\n    struct Vesting {\r\n        uint256 releaseTime;\r\n        uint256 amount;\r\n        address beneficiary;\r\n        bool released;\r\n    }\r\n\r\n    mapping(uint256 => Vesting) public vestings;\r\n\r\n    event TokenVestingReleased(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n    event TokenVestingAdded(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n    event TokenVestingRemoved(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n\r\n    constructor(IERC20 _token) {\r\n        require(address(_token) != address(0x0), \"INVALID_TOKEN_ADDRESS\");\r\n        usacoin = _token;        \r\n    }\r\n\r\n    function token() public view returns (IERC20) {\r\n        return usacoin;\r\n    }\r\n\r\n    function beneficiary(uint256 _vestingId) public view returns (address) {\r\n        return vestings[_vestingId].beneficiary;\r\n    }\r\n\r\n    function releaseTime(uint256 _vestingId) public view returns (uint256) {\r\n        return vestings[_vestingId].releaseTime;\r\n    }\r\n\r\n    function vestingAmount(uint256 _vestingId) public view returns (uint256) {\r\n        return vestings[_vestingId].amount;\r\n    }\r\n\r\n    function removeVesting(uint256 _vestingId) public onlyOwner {\r\n        Vesting storage vesting = vestings[_vestingId];\r\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\r\n        require(!vesting.released, VESTING_ALREADY_RELEASED);\r\n        vesting.released = true;\r\n        tokensToVest = tokensToVest.sub(vesting.amount);\r\n        emit TokenVestingRemoved(_vestingId, vesting.beneficiary, vesting.amount);\r\n    }\r\n\r\n    function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {\r\n        require(_beneficiary != address(0x0), INVALID_BENEFICIARY);\r\n        require(_releaseTime > block.timestamp, \"INVALID_RELEASE_TIME\");\r\n        require(_amount != 0, \"AMOUNT_MUST_BE_GREATER_THEN_0\");\r\n        tokensToVest = tokensToVest.add(_amount * SCALING_FACTOR);\r\n        vestingId = vestingId.add(1);\r\n        vestings[vestingId] = Vesting({\r\n            beneficiary: _beneficiary,\r\n            releaseTime: _releaseTime,\r\n            amount: _amount,\r\n            released: false\r\n        });\r\n        emit TokenVestingAdded(vestingId, _beneficiary, _amount);\r\n    }\r\n\r\n    function release(uint256 _vestingId) external {\r\n        Vesting storage vesting = vestings[_vestingId];\r\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\r\n        require(vesting.beneficiary == msg.sender, INVALID_VESTING_ID);\r\n        require(!vesting.released, VESTING_ALREADY_RELEASED);\r\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\r\n        require(usacoin.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\r\n        vesting.released = true;\r\n        tokensToVest = tokensToVest.sub(vesting.amount);\r\n        usacoin.transfer(vesting.beneficiary, vesting.amount);\r\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\r\n    }\r\n\r\n    function releaseByOwner(uint256 _vestingId) external onlyOwner {\r\n        Vesting storage vesting = vestings[_vestingId];\r\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\r\n        require(!vesting.released, VESTING_ALREADY_RELEASED);\r\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\r\n        require(usacoin.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\r\n        vesting.released = true;\r\n        tokensToVest = tokensToVest.sub(vesting.amount);\r\n        usacoin.transfer(vesting.beneficiary, vesting.amount);\r\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\r\n    }\r\n\r\n    function retrieveExcessTokens(uint256 _amount) public onlyOwner {\r\n        require(_amount <= usacoin.balanceOf(address(this)).sub(tokensToVest), INSUFFICIENT_BALANCE);\r\n        usacoin.transfer(owner(), _amount);\r\n    }\r\n\r\n    function calculateDays(uint256 _timestamp, uint256 _numberOfDays) public pure returns (uint256) {\r\n        return _timestamp + _numberOfDays * day;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfDays\",\"type\":\"uint256\"}],\"name\":\"calculateDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"releaseByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"removeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieveExcessTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToVest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"vestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"USACOINVESTING","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e70ea90718fd21471db240f3bae343daece65f53","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8dbe3fd483daebd5f1d4fb0b9465bd9d6389945fee8a54eb5c2d2e58fcc539b8"}]}