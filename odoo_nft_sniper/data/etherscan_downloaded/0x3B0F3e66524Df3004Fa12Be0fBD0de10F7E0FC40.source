{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"NFTBoxes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.2;\\n\\nimport \\\"ERC721.sol\\\";\\nimport \\\"ERC2981.sol\\\";\\nimport \\\"IVendingMachine.sol\\\";\\nimport \\\"Ownable.sol\\\";\\t\\nimport \\\"SubscriptionService.sol\\\";\\nimport \\\"BoxJsonParser.sol\\\";\\n\\n\\ncontract NFTBoxesBox is ERC721(\\\"NFTBox\\\", \\\"[BOX]\\\"), Ownable, ERC2981, BoxJsonParser {\\n    \\n\\tstruct BoxMould{\\n\\t\\tuint8\\t\\t\\t\\tlive; // bool\\n\\t\\tuint8\\t\\t\\t\\tshared; // bool\\n\\t\\tuint128\\t\\t\\t\\tmaxEdition;\\n\\t\\tuint128\\t\\t\\t\\tmaxBuyAmount;\\n\\t\\tuint128\\t\\t\\t\\tcurrentEditionCount;\\n\\t\\tuint256\\t\\t\\t\\tprice;\\n\\t\\taddress payable[]\\tartists;\\n\\t\\tuint256[]\\t\\t\\tshares;\\n\\t\\tstring\\t\\t\\t\\tname;\\n\\t\\tstring\\t\\t\\t\\tseries;\\n\\t\\tstring\\t\\t\\t\\ttheme;\\n\\t\\tstring\\t\\t\\t\\tipfsHash;\\n\\t\\tstring\\t\\t\\t\\tarweaveHash;\\n\\t}\\n\\n\\tstruct Box {\\n\\t\\tuint256\\t\\t\\t\\tmouldId;\\n\\t\\tuint256\\t\\t\\t\\tedition;\\n\\t}\\n\\n\\tuint256 totalSupply;\\n\\tIVendingMachine public\\tvendingMachine;\\n\\tSubscriptionService public subService;\\n\\tuint256 public\\t\\t\\tboxMouldCount;\\n\\n\\tuint256 constant public TOTAL_SHARES = 1000;\\n\\n\\tmapping(uint256 => BoxMould) public\\tboxMoulds;\\n\\tmapping(uint256 =>  Box) public\\tboxes;\\n\\tmapping(uint256 => bool) public lockedBoxes;\\n\\tmapping(uint256 => mapping(address => uint256)) boxBoughtMapping;\\n\\tmapping(uint256 => uint256) subDistroTracker;\\n\\n\\tmapping(address => uint256) public teamShare;\\n\\taddress payable[] public team;\\n\\n\\n\\tmapping(address => bool) public authorisedCaller;\\n\\n\\tevent BoxMouldCreated(uint256 id);\\n\\tevent BoxBought(uint256 indexed boxMould, uint256 boxEdition, uint256 tokenId);\\n\\tevent BatchDeployed(uint256 indexed boxMould, uint256 batchSize);\\n\\n\\tconstructor(address _service) {\\n\\t\\tteam.push(payable(0x3428B1746Dfd26C7C725913D829BE2706AA89B2e));\\n\\t\\tteam.push(payable(0x4C7BEdfA26C744e6bd61CBdF86F3fc4a76DCa073));\\n\\t\\tteam.push(payable(0x00000000002bF160523a704a019a0C0E63a41B66));\\n\\t\\tteam.push(payable(0x8C26a91205e531E8B35Cf3315f384727B9681D75));\\n\\n\\t\\tteamShare[address(0x3428B1746Dfd26C7C725913D829BE2706AA89B2e)] = 600;\\n        teamShare[address(0x4C7BEdfA26C744e6bd61CBdF86F3fc4a76DCa073)] = 10;\\n        teamShare[address(0x00000000002bF160523a704a019a0C0E63a41B66)] = 90;\\n\\t\\tteamShare[address(0x8C26a91205e531E8B35Cf3315f384727B9681D75)] = 30;\\n\\t\\tvendingMachine = IVendingMachine(0x6d4530149e5B4483d2F7E60449C02570531A0751);\\n\\t\\tsubService = SubscriptionService(_service);\\n\\t}\\n\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC2981) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId)\\n            || ERC721.supportsInterface(interfaceId);\\n    }\\n\\n\\tfunction setDefaultRoyalty(address _receiver, uint96 _feeNumerator) external onlyOwner {\\n\\t\\t_setDefaultRoyalty(_receiver, _feeNumerator);\\n\\t} \\n\\n\\tmodifier authorised() {\\n\\t\\trequire(authorisedCaller[msg.sender] || msg.sender == owner(), \\\"Not authorised to execute.\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction setCaller(address _caller, bool _value) external onlyOwner {\\n\\t\\tauthorisedCaller[_caller] = _value;\\n\\t}\\n\\n\\tfunction addTeamMember(address payable _member) external onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < team.length; i++)\\n\\t\\t\\trequire( _member != team[i], \\\"members exists already\\\");\\n\\t\\tteam.push(_member);\\n\\t}\\n\\n\\tfunction removeTeamMember(address payable _member) external onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < team.length; i++)\\n\\t\\t\\tif (team[i] == _member) {\\n\\t\\t\\t\\tdelete teamShare[_member];\\n\\t\\t\\t\\tteam[i] = team[team.length - 1];\\n\\t\\t\\t\\tteam.pop();\\n\\t\\t\\t}\\n\\t}\\n\\n\\tfunction setTeamShare(address _member, uint _share) external onlyOwner {\\n\\t\\trequire(_share <= TOTAL_SHARES, \\\"share must be below 1000\\\");\\n\\t\\tfor (uint256 i = 0; i < team.length; i++)\\n\\t\\t\\tif (team[i] == _member)\\n\\t\\t\\t\\tteamShare[_member] = _share;\\n\\t}\\n\\n\\tfunction setLockOnBox(uint256 _id, bool _lock) external authorised {\\n\\t\\trequire(_id <= boxMouldCount && _id > 0, \\\"ID !exist.\\\");\\n\\t\\tlockedBoxes[_id] = _lock;\\n\\t}\\n\\n\\tfunction createBoxMould(\\n\\t\\tuint128 _max,\\n\\t\\tuint128 _maxBuyAmount,\\n\\t\\tuint256 _price,\\n\\t\\taddress payable[] memory _artists,\\n\\t\\tuint256[] memory _shares,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _series,\\n\\t\\tstring memory _theme,\\n\\t\\tstring memory _ipfsHash,\\n\\t\\tstring memory _arweaveHash)\\n\\t\\texternal\\n\\t\\tonlyOwner {\\n\\t\\trequire(_artists.length == _shares.length, \\\"arrays !same len\\\");\\n\\t\\tboxMoulds[boxMouldCount + 1] = BoxMould({\\n\\t\\t\\tlive: uint8(0),\\n\\t\\t\\tshared: uint8(0),\\n\\t\\t\\tmaxEdition: _max,\\n\\t\\t\\tmaxBuyAmount: _maxBuyAmount,\\n\\t\\t\\tcurrentEditionCount: 0,\\n\\t\\t\\tprice: _price,\\n\\t\\t\\tartists: _artists,\\n\\t\\t\\tshares: _shares,\\n\\t\\t\\tname: _name,\\n\\t\\t\\tseries: _series,\\n\\t\\t\\ttheme: _theme,\\n\\t\\t\\tipfsHash: _ipfsHash,\\n\\t\\t\\tarweaveHash: _arweaveHash\\n\\t\\t});\\n\\t\\tboxMouldCount++;\\n\\t\\tlockedBoxes[boxMouldCount] = true;\\n\\t\\temit BoxMouldCreated(boxMouldCount);\\n\\t}\\n\\n\\tfunction removeArtist(uint256 _id, address payable _artist) external onlyOwner {\\n\\t\\tBoxMould storage boxMould = boxMoulds[_id];\\n\\t\\trequire(_id <= boxMouldCount && _id > 0, \\\"ID !exist\\\");\\n\\t\\tfor (uint256 i = 0; i < boxMould.artists.length; i++) {\\n\\t\\t\\tif (boxMould.artists[i] == _artist) {\\n\\t\\t\\t\\tboxMould.artists[i] = boxMould.artists[boxMould.artists.length - 1];\\n\\t\\t\\t\\tboxMould.artists.pop();\\n\\t\\t\\t\\tboxMould.shares[i] = boxMould.shares[boxMould.shares.length - 1];\\n\\t\\t\\t\\tboxMould.shares.pop();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction addArtists(uint256 _id, address payable _artist, uint256 _share) external onlyOwner {\\n\\t\\tBoxMould storage boxMould = boxMoulds[_id];\\n\\t\\trequire(_id <= boxMouldCount && _id > 0, \\\"ID !exist\\\");\\n\\t\\tboxMould.artists.push(_artist);\\n\\t\\tboxMould.shares.push(_share);\\n\\t}\\n\\n\\tfunction distributeBoxToSubHolders(uint256 _id) external onlyOwner {\\n\\t\\trequire(_id <= boxMouldCount && _id > 0, \\\"ID !exist\\\");\\n\\t\\tuint256 trackerId = subDistroTracker[_id]++;\\n\\t\\trequire(trackerId < 10, \\\"Distro done\\\");\\n\\n\\t\\tBoxMould storage boxMould = boxMoulds[_id];\\n\\t\\tuint128 currentEdition = boxMould.currentEditionCount;\\n\\t\\taddress[] memory subHolders = subService.fetchValidHolders(trackerId * 50, 50);\\n\\t\\tuint256 mintTracker;\\n\\t\\tuint256 _totalSupply = totalSupply;\\n\\t\\tfor (uint256 i = 0; i < 50; i++) {\\n\\t\\t\\taddress holder = subHolders[i];\\n\\t\\t\\tif (holder != address(0)) {\\n\\t\\t\\t\\t_buy(currentEdition, _id, mintTracker, holder, _totalSupply + mintTracker + 1);\\n\\t\\t\\t\\tmintTracker++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttotalSupply += mintTracker;\\n\\t\\tboxMould.currentEditionCount += uint128(mintTracker);\\n\\t\\tif (currentEdition + mintTracker == boxMould.maxEdition)\\n\\t\\t\\tboxMould.live = uint8(1);\\n\\t\\tif (trackerId == 9)\\n\\t\\t\\tsubService.pushNewBox();\\n\\t}\\n\\n\\tfunction buyManyBoxes(uint256 _id, uint128 _quantity) external payable {\\n\\t\\tBoxMould storage boxMould = boxMoulds[_id];\\n\\t\\tuint128 currentEdition = boxMould.currentEditionCount;\\n\\t\\tuint128 max = boxMould.maxEdition;\\n\\t\\trequire(_id <= boxMouldCount && _id > 0, \\\"ID !exist\\\");\\n\\t\\trequire(boxMould.live == 0, \\\"!live\\\");\\n\\t\\trequire(!lockedBoxes[_id], \\\"locked\\\");\\n\\t\\trequire(boxMould.price * _quantity == msg.value, \\\"!price\\\");\\n\\t\\trequire(currentEdition + _quantity <= max, \\\"Too many boxes\\\");\\n\\t\\trequire(boxBoughtMapping[_id][msg.sender] + _quantity <= boxMould.maxBuyAmount, \\\"!buy\\\");\\n\\n\\t\\tuint256 _totalSupply = totalSupply;\\n\\t\\tfor (uint128 i = 0; i < _quantity; i++)\\n\\t\\t\\t_buy(currentEdition, _id, i, msg.sender, _totalSupply + i + 1);\\n\\t\\ttotalSupply += _quantity;\\n\\t\\tboxMould.currentEditionCount += _quantity;\\n\\t\\tboxBoughtMapping[_id][msg.sender] = boxBoughtMapping[_id][msg.sender] + _quantity;\\n\\t\\tif (currentEdition + _quantity == max)\\n\\t\\t\\tboxMould.live = uint8(1);\\n\\t}\\n\\n\\tfunction _buy(uint128 _currentEdition, uint256 _id, uint256 _new, address _recipient, uint256 _tokenId) internal {\\n\\t\\tboxes[_tokenId] = Box(_id, _currentEdition + _new + 1);\\n\\t\\t//safe mint?\\n\\t\\temit BoxBought(_id, _currentEdition + _new + 1, _tokenId);\\n\\t\\t_mint(_recipient, _tokenId);\\n\\t}\\n\\n\\t// close a sale if not sold out\\n\\tfunction closeBox(uint256 _id) external authorised {\\n\\t\\tBoxMould storage boxMould = boxMoulds[_id];\\n\\t\\trequire(_id <= boxMouldCount && _id > 0, \\\"ID !exist.\\\");\\n\\t\\tboxMould.live = uint8(1);\\n\\t}\\n\\n\\tfunction setVendingMachine(address _machine) external onlyOwner {\\n\\t\\tvendingMachine = IVendingMachine(_machine);\\n\\t}\\n\\n\\tfunction distributeOffchain(uint256 _id, address[][] calldata _recipients, uint256[] calldata _ids) external authorised {\\n\\t\\tBoxMould memory boxMould= boxMoulds[_id];\\n\\t\\trequire(boxMould.live == 1, \\\"live\\\");\\n\\t\\trequire (_recipients[0].length == _ids.length, \\\"bad array\\\");\\n\\n\\t\\t// i is batch number\\n\\t\\tfor (uint256 i = 0; i < _recipients.length; i++) {\\n\\t\\t\\t// j is for the index of nft ID to send\\n\\t\\t\\tfor (uint256 j = 0;j <  _recipients[0].length; j++)\\n\\t\\t\\t\\tvendingMachine.NFTMachineFor(_ids[j], _recipients[i][j]);\\n\\t\\t}\\n\\t\\temit BatchDeployed(_id, _recipients.length);\\n\\t}\\n\\n\\tfunction distributeShares(uint256 _id) external {\\n\\t\\tBoxMould storage boxMould= boxMoulds[_id];\\n\\t\\trequire(_id <= boxMouldCount && _id > 0, \\\"ID !exist.\\\");\\n\\t\\trequire(boxMould.live == 1 && boxMould.shared == 0,  \\\"!distribute\\\");\\n\\t\\trequire(is100(_id), \\\"sum != 100%.\\\");\\n\\n\\t\\tboxMould.shared = 1;\\n\\t\\tuint256 rev = uint256(boxMould.currentEditionCount) * boxMould.price;\\n\\t\\tuint256 share;\\n\\t\\tfor (uint256 i = 0; i < team.length; i++) {\\n\\t\\t\\tshare = rev * teamShare[team[i]] / TOTAL_SHARES;\\n\\t\\t\\tteam[i].transfer(share);\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < boxMould.artists.length; i++) {\\n\\t\\t\\tshare = rev * boxMould.shares[i] / TOTAL_SHARES;\\n\\t\\t\\tboxMould.artists[i].transfer(share);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction is100(uint256 _id) internal returns(bool) {\\n\\t\\tBoxMould storage boxMould= boxMoulds[_id];\\n\\t\\tuint256 total;\\n\\t\\tfor (uint256 i = 0; i < team.length; i++) {\\n\\t\\t\\ttotal = total + teamShare[team[i]];\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < boxMould.shares.length; i++) {\\n\\t\\t\\ttotal = total + boxMould.shares[i];\\n\\t\\t}\\n\\t\\treturn total == TOTAL_SHARES;\\n\\t}\\n\\n\\tfunction getArtist(uint256 _id) external view returns (address payable[] memory) {\\n\\t\\treturn boxMoulds[_id].artists;\\n\\t}\\n\\n\\tfunction getArtistShares(uint256 _id) external view returns (uint256[] memory) {\\n\\t\\treturn boxMoulds[_id].shares;\\n\\t}\\n\\n    function getBoxMetaData(uint256 _id) external view returns \\n    (uint256 boxId, uint256 boxEdition, uint128 boxMax, string memory boxName, string memory boxSeries, string memory boxTheme, string memory boxHashIPFS, string memory boxHashArweave) {\\n        Box memory box = boxes[_id];\\n        BoxMould memory mould = boxMoulds[box.mouldId];\\n        return (box.mouldId, box.edition, mould.maxEdition, mould.name, mould.series, mould.theme, mould.ipfsHash, mould.arweaveHash);\\n    }\\n\\n\\tfunction _transfer(address from, address to, uint256 tokenId) internal override {\\n\\t\\tBox memory box = boxes[tokenId];\\n\\t\\trequire(!lockedBoxes[box.mouldId], \\\"Box is locked\\\");\\n\\t\\tsuper._transfer(from, to, tokenId);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 _tokenId) public view override returns(string memory) {\\n\\t\\tBox memory box = boxes[_tokenId];\\n\\t\\trequire(box.mouldId > 0);\\n\\t\\tBoxMould memory mould = boxMoulds[box.mouldId];\\n\\t\\treturn string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tgenerateTokenUriPart1(box.edition, mould.series, mould.name, mould.theme),\\n\\t\\t\\t\\tgenerateTokenUriPart2(box.mouldId, box.edition, mould.maxEdition, mould.series, mould.ipfsHash, mould.theme)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t// function tokenURITest(uint256 _tokenId) public view returns(string memory) {\\n\\n\\t// \\treturn string(\\n\\t// \\t\\tabi.encodePacked(\\n\\t// \\t\\t\\tgenerateTokenUriPart1(66, \\\"Main\\\", \\\"December 2021\\\", \\\"Finale\\\"),\\n\\t// \\t\\t\\tgenerateTokenUriPart2(12, 66, 132, \\\"Main\\\", \\\"QmefbyT1uqjDaHsLzVMmwicjHVAXQjzfkeCXjfBwUA8om2\\\", \\\"Finale\\\")\\n\\t// \\t\\t)\\n\\t// \\t);\\n\\t// }\\n}\\n\"\r\n    },\r\n    \"ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC721Receiver.sol\\\";\\nimport \\\"IERC721Metadata.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"Strings.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string internal _name;\\n\\n    // Token symbol\\n    string internal _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC2981.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"IVendingMachine.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\n\\ninterface IVendingMachine {\\n\\n\\tfunction NFTMachineFor(uint256 NFTId, address _recipient) external;\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"SubscriptionService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.2;\\n\\nimport \\\"ERC721Enumerable.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SubJsonParser.sol\\\";\\n\\ncontract SubscriptionService is ERC721Enumerable, Ownable, SubJsonParser {\\n\\n\\tstruct SubData {\\n\\t\\tuint32 tier;\\n\\t\\tuint32 start;\\n\\t\\tuint32 length;\\n\\t}\\n\\n\\tuint256 public constant MAX = 500;\\n\\tuint256 public maxSupply = 300;\\n\\tbool public paused;\\n\\tuint32 public counter;\\n\\n\\tuint256[3] public subPrice;\\n\\tuint256[3] public maxPerTier;\\n\\tuint256[3] public currentAtTier;\\n\\tuint256 buyCounter;\\n\\n\\tmapping(uint256 => uint256) expiredStack;\\n\\tuint256 expiredCounter;\\n\\tmapping(uint256 => SubData) public subData;\\n\\tmapping(address => bool) public authorisedCaller;\\n\\n\\tbool public initiated;\\n\\n\\tevent SubBought(address indexed buyer, uint256 indexed tokenId, uint32 tier, uint256 value);\\n\\n\\tconstructor(string memory _name, string memory _symbol)  ERC721(_name, _symbol) {}\\n\\n\\tfunction init (string memory __name, string memory __symbol)  external  {\\n\\t\\trequire(!initiated);\\n\\t\\tinitiated = true;\\n\\t\\tpaused = true;\\n\\t\\tsubPrice[0] = 1_950_000_000_000_000_000;\\n\\t\\tsubPrice[1] = 3_705_000_000_000_000_000;\\n\\t\\tsubPrice[2] = 5_265_000_000_000_000_000;\\n\\t\\tmaxPerTier[0] = 100;\\n\\t\\tmaxPerTier[1] = 100;\\n\\t\\tmaxPerTier[2] = 100;\\n\\t\\tcounter = 1;\\n\\t\\t_name = __name;\\n\\t\\t_symbol = __symbol;\\n\\t\\t_owner = msg.sender;\\n\\t}\\n\\n\\tmodifier notPaused() {\\n\\t\\trequire(!paused, \\\"Paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier authorised() {\\n\\t\\trequire(authorisedCaller[msg.sender], \\\"Not authorised to execute.\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction setCaller(address _caller, bool _value) external onlyOwner {\\n\\t\\tauthorisedCaller[_caller] = _value;\\n\\t}\\n\\n\\tfunction fetchEth() external onlyOwner {\\n\\t\\tpayable(owner()).transfer(address(this).balance);\\n\\t}\\n\\n\\tfunction pause() external onlyOwner {\\n\\t\\tpaused = true;\\n\\t}\\n\\n\\tfunction unpause() external onlyOwner {\\n\\t\\tpaused = false;\\n\\t}\\n\\n\\tfunction pushNewBox() external authorised {\\n\\t\\tcounter++;\\n\\t}\\n\\n\\tfunction setPrice(uint256 _index, uint256 _price) external onlyOwner {\\n\\t\\tsubPrice[_index] = _price;\\n\\t}\\n\\n\\tfunction setMaxSupply(uint256 _max) external onlyOwner {\\n\\t\\trequire(_max % 3 == 0);\\n\\t\\trequire(_max < MAX);\\n\\t\\tmaxSupply = _max;\\n\\t\\tmaxPerTier[0] = _max / 3;\\n\\t\\tmaxPerTier[1] = _max / 3;\\n\\t\\tmaxPerTier[2] = _max / 3;\\n\\t}\\n\\n\\tfunction refundSub(uint256 _tokenId) external onlyOwner {\\n\\t\\trequire(!isExpired(_tokenId), \\\"Expired\\\");\\n\\t\\tSubData memory data = subData[_tokenId];\\n\\t\\texpiredStack[expiredCounter++] = _tokenId;\\n\\t\\tcurrentAtTier[data.tier]--;\\n\\t\\tdelete subData[_tokenId];\\n\\t\\t_burn(_tokenId);\\n\\t}\\n\\n\\tfunction expireSub(uint256 _tokenId) external {\\n\\t\\trequire(isExpired(_tokenId), \\\"Not expired\\\");\\n\\t\\texpiredStack[expiredCounter++] = _tokenId;\\n\\t\\tcurrentAtTier[subData[_tokenId].tier]--;\\n\\t\\tdelete subData[_tokenId];\\n\\t\\t_burn(_tokenId);\\n\\t}\\n\\n\\tfunction buySub(uint8 _tier) external payable {\\n\\t\\tbuySub(_tier, msg.sender);\\n\\t}\\n\\n\\tfunction buySubOwner(uint8 _tier, address _for) public payable onlyOwner {\\n\\t\\trequire(_tier == 0 || _tier == 1 || _tier == 2, \\\"Sub: Wrong sub model\\\");\\n\\t\\trequire(currentAtTier[_tier]++ < maxPerTier[_tier], \\\"No more subs of that tier to buy\\\");\\n\\t\\trequire(msg.value == subPrice[_tier], \\\"!price\\\");\\n\\n\\t\\tif (buyCounter < MAX) {\\n\\t\\t\\tsubData[++buyCounter] = SubData(_tier, counter, _getLength(_tier));\\n\\t\\t\\t_mint(_for, buyCounter);\\n\\t\\t\\temit SubBought(_for, buyCounter, _tier, msg.value);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\trequire(expiredCounter > 0, \\\"No subs available, try next month\\\");\\n\\t\\t\\tuint256 id = expiredStack[--expiredCounter];\\n\\t\\t\\tsubData[id] = SubData(_tier, counter, _getLength(_tier));\\n\\t\\t\\t_mint(_for, id);\\n\\t\\t\\temit SubBought(_for, id, _tier, msg.value);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction buySub(uint8 _tier, address _for) public payable notPaused {\\n\\t\\trequire(_tier == 0 || _tier == 1 || _tier == 2, \\\"Sub: Wrong sub model\\\");\\n\\t\\trequire(currentAtTier[_tier]++ < maxPerTier[_tier], \\\"No more subs of that tier to buy\\\");\\n\\t\\trequire(msg.value == subPrice[_tier], \\\"!price\\\");\\n\\n\\t\\tif (buyCounter < MAX) {\\n\\t\\t\\tsubData[++buyCounter] = SubData(_tier, counter, _getLength(_tier));\\n\\t\\t\\t_mint(_for, buyCounter);\\n\\t\\t\\temit SubBought(_for, buyCounter, _tier, msg.value);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\trequire(expiredCounter > 0, \\\"No subs available, try next month\\\");\\n\\t\\t\\tuint256 id = expiredStack[--expiredCounter];\\n\\t\\t\\tsubData[id] = SubData(_tier, counter, _getLength(_tier));\\n\\t\\t\\t_mint(_for, id);\\n\\t\\t\\temit SubBought(_for, id, _tier, msg.value);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction isExpired(uint256 _tokenId) public view returns(bool) {\\n\\t\\tSubData memory data = subData[_tokenId];\\n\\t\\treturn data.start + data.length <= counter;\\n\\t}\\n\\n\\tfunction _getType(uint32 _length) internal pure returns(uint256) {\\n\\t\\tif (_length == 3)\\n\\t\\t\\treturn 0;\\n\\t\\telse if (_length == 6)\\n\\t\\t\\treturn 1;\\n\\t\\tif (_length == 9)\\n\\t\\t\\treturn 2;\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction _getLength(uint8 _type) internal pure returns(uint32) {\\n\\t\\tif (_type == uint8(0))\\n\\t\\t\\treturn uint32(3);\\n\\t\\telse if (_type == uint8(1))\\n\\t\\t\\treturn uint32(6);\\n\\t\\tif (_type == uint8(2))\\n\\t\\t\\treturn uint32(9);\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction fetchValidHolders(uint256 _start, uint256 _len) external view returns(address[] memory holders) {\\n\\t\\tholders = new address[](_len);\\n\\t\\tfor (uint256 i = _start; i < _start + _len; i++) {\\n\\t\\t\\tif (_exists(i)) {\\n\\t\\t\\t\\taddress owner = ownerOf(i);\\n\\t\\t\\t\\tif (!isExpired(i))\\n\\t\\t\\t\\t\\tholders[i - _start] = ownerOf(i);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction returnSubDataOfHolder(address _holder) external view returns(SubData[] memory data) {\\n\\t\\tuint256 amount = balanceOf(_holder);\\n\\t\\tdata = new SubData[](amount);\\n\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\tdata[i] = subData[tokenOfOwnerByIndex(_holder, i)];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction hasUserSub(address _holder, uint256 _tierId) external view returns(bool) {\\n\\t\\tuint256 amount = balanceOf(_holder);\\n\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\tuint256 tokenId = tokenOfOwnerByIndex(_holder, i);\\n\\t\\t\\tSubData memory data = subData[tokenId];\\n\\t\\t\\tif (data.tier == _tierId && !isExpired(tokenId))\\n\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction _transfer(address from, address to, uint256 tokenId) internal override notPaused {\\n\\t\\tsuper._transfer(from, to, tokenId);\\n\\t}\\n\\n\\n\\tfunction tokenURI(uint256 _tokenId) public view override returns(string memory) {\\n\\t\\tSubData memory data = subData[_tokenId];\\n\\t\\trequire(_exists(_tokenId));\\n\\t\\treturn string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tgenerateTokenUriPart1(_tokenId),\\n\\t\\t\\t\\tgenerateTokenUriPart2(_getLength(uint8(data.tier)), counter, data.start, data.length)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n}\"\r\n    },\r\n    \"ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC721.sol\\\";\\nimport \\\"IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"SubJsonParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.2;\\n\\ncontract SubJsonParser {\\n\\n\\tfunction generateTokenUriPart1(uint256 _tokenId) public pure returns(string memory) {\\n\\t\\treturn string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tbytes('data:application/json;utf8,{\\\"name\\\":\\\"'),\\n\\t\\t\\t\\t_getName(_tokenId),\\n\\t\\t\\t\\tbytes('\\\",\\\"description\\\":\\\"'),\\n\\t\\t\\t\\t\\\"NFTBox subscription that guarantees the reception of a monthly box until it expires.\\\",\\n\\t\\t\\t\\tbytes('\\\",\\\"external_url\\\":\\\"'),\\n\\t\\t\\t\\t_getExternalUrl()\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction generateTokenUriPart2(uint256 _tier, uint256 _counter, uint256 _start, uint256 _length) public pure returns(string memory) {\\n\\t\\treturn string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tbytes('\\\",\\\"attributes\\\":['),\\n\\t\\t\\t\\t_tierSub(_tier),\\n\\t\\t\\t\\t_expiry(_counter - _start + _length),\\n\\t\\t\\t\\tbytes(',\\\"image\\\":\\\"'),\\n\\t\\t\\t\\t_getImageCache(_tier),\\n\\t\\t\\t\\tbytes('\\\"}')\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _getImageCache(uint256 _tier) internal pure returns(string memory) {\\n\\t\\tif (_tier == 3)\\n\\t\\t\\treturn string(abi.encodePacked(\\\"https://ipfs.io/ipfs/QmV3GaTzqLvGSRTAuiLQGsBUDDx4Dr7G7gxqtR8eRhudLL\\\"));\\n\\t\\tif (_tier == 6)\\n\\t\\t\\treturn string(abi.encodePacked(\\\"https://ipfs.io/ipfs/QmZBtFNpbrstaKwSDzsB3uFGMeN7b5VjT93Udab2EbB2tQ\\\"));\\n\\t\\tif (_tier == 9)\\n\\t\\t\\treturn string(abi.encodePacked(\\\"https://ipfs.io/ipfs/QmPCv1DEWH6pTXXVVdR3nqcavT1bzNRY5QoyR6KEzVjUkb\\\"));\\n\\t\\treturn string(abi.encodePacked(\\\"\\\"));\\n\\t}\\n\\n\\tfunction _getName(uint256 _tokenId) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(\\\"NFTBox Subs #\\\", _uint2str(_tokenId)));\\n\\t}\\n\\n\\tfunction _tierSub(uint256 _tier) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(bytes('{\\\"trait_type\\\": \\\"tier\\\",\\\"value\\\":\\\"'), _uint2str(_tier), bytes('\\\"},')));\\n\\t}\\n\\n\\tfunction _expiry(uint256 _expirationCount) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(bytes('{\\\"trait_type\\\": \\\"box left\\\",\\\"value\\\":\\\"'), _uint2str(_expirationCount), bytes('\\\"}]')));\\n\\t}\\n\\n\\tfunction _getImageCache(string memory _hash) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(\\\"https://ipfs.io/ipfs/\\\", _hash));\\n\\t}\\n\\n\\tfunction _getExternalUrl() internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(\\\"https://www.nftboxes.io/\\\"));\\n\\t}\\n\\n\\tfunction _uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k-1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n}\"\r\n    },\r\n    \"BoxJsonParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.2;\\n\\ncontract BoxJsonParser {\\n\\n\\tfunction generateTokenUriPart1(uint256 _tokenId, string memory _series, string memory _name, string memory _theme) public pure returns(string memory) {\\n\\t\\treturn string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tbytes('data:application/json;utf8,{\\\"name\\\":\\\"'),\\n\\t\\t\\t\\t_getName(_name, _tokenId),\\n\\t\\t\\t\\tbytes('\\\",\\\"description\\\":\\\"'),\\n\\t\\t\\t\\t\\\"NFTBoxes are a curated monthly box of NFTs on the newest gold standard of NFT technology.\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction generateTokenUriPart2(uint256 _boxId, uint256 _tokenId, uint256 _max, string memory _series, string memory _hash, string memory _theme) public pure returns(string memory) {\\n\\t\\treturn string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tbytes('\\\",\\\"attributes\\\":['),\\n\\t\\t\\t\\t_traitBoxId(_boxId),\\n\\t\\t\\t\\t_traitBoxSeries(_series),\\n\\t\\t\\t\\t_traitBoxTheme(_theme),\\n\\t\\t\\t\\t_traitBoxEdition(_tokenId, _max),\\n\\t\\t\\t\\tbytes(',\\\"image\\\":\\\"'),\\n\\t\\t\\t\\t_getImageCache(_hash),bytes('\\\"}')\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _traitBoxId(uint256 _boxId) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(bytes('{\\\"trait_type\\\": \\\"box id\\\",\\\"value\\\":\\\"'), _uint2str(_boxId), bytes('\\\"},')));\\n\\t}\\n\\n\\tfunction _traitBoxSeries(string memory _series) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(bytes('{\\\"trait_type\\\": \\\"box series\\\",\\\"value\\\":\\\"'), _series, bytes('\\\"},')));\\n\\t}\\n\\n\\tfunction _traitBoxTheme(string memory _theme) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(bytes('{\\\"trait_type\\\": \\\"box theme\\\",\\\"value\\\":\\\"'), _theme, bytes('\\\"},')));\\n\\t}\\n\\n\\tfunction _traitBoxEdition(uint256 _tokenId, uint256 _maxEdition) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(bytes('{\\\"trait_type\\\": \\\"box edition\\\",\\\"value\\\":\\\"'), _uint2str(_tokenId), bytes(' of '), _uint2str(_maxEdition), bytes('\\\"}]')));\\n\\t}\\n\\n\\tfunction _getName(string memory _name, uint256 _tokenId) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(_name, \\\" #\\\", _uint2str(_tokenId)));\\n\\t}\\n\\n\\tfunction _getImageCache(string memory _hash) internal pure returns(string memory) {\\n\\t\\treturn string(abi.encodePacked(\\\"https://ipfs.io/ipfs/\\\", _hash));\\n\\t}\\n\\n\\tfunction _uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k-1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxMould\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"BatchDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxMould\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxEdition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BoxBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BoxMouldCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"addArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"addTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxMouldCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxMoulds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"live\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shared\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"maxEdition\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBuyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentEditionCount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"theme\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweaveHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mouldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"edition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_quantity\",\"type\":\"uint128\"}],\"name\":\"buyManyBoxes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxBuyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"_artists\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_theme\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_arweaveHash\",\"type\":\"string\"}],\"name\":\"createBoxMould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"distributeBoxToSubHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[][]\",\"name\":\"_recipients\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"distributeOffchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_theme\",\"type\":\"string\"}],\"name\":\"generateTokenUriPart1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_theme\",\"type\":\"string\"}],\"name\":\"generateTokenUriPart2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getArtist\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getArtistShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBoxMetaData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boxEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"boxMax\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"boxName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxSeries\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxTheme\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxHashIPFS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxHashArweave\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBoxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_artist\",\"type\":\"address\"}],\"name\":\"removeArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setLockOnBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"setTeamShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_machine\",\"type\":\"address\"}],\"name\":\"setVendingMachine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subService\",\"outputs\":[{\"internalType\":\"contract SubscriptionService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vendingMachine\",\"outputs\":[{\"internalType\":\"contract IVendingMachine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NFTBoxesBox","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004e31bbadaeabb04b14c59dc2598a6e8f6b55d163","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}