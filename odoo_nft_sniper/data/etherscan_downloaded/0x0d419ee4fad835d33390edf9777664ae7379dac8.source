{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title TokenBalanceRetriever\r\n * @author Amir Shirif, Telcoin, LLC.\r\n * @notice this contract returns a list of balances for various ERC20 tokens\r\n */\r\ninterface ITokenBalanceRetriever {\r\n  /**\r\n   * @notice returns array of token balances\r\n   * @dev an array of alternating addresses should be provided, each wallet address should be followed by the token for which the balance is being checked\r\n   * @dev the values returned will be in the same order as the provided pairs\r\n   * @param addresses an address[] of wallet and token addresses\r\n   * @return a uint256[] of the wallet and token balances\r\n   */\r\n  function getBalances(address[] memory addresses) external view returns (uint256[] memory);\r\n}\r\n\r\n/**\r\n * @title TokenBalanceRetriever\r\n * @author Amir Shirif, Telcoin, LLC.\r\n * @notice this contract returns a list of balances for various ERC20 tokens\r\n */\r\ncontract TokenBalanceRetriever is ITokenBalanceRetriever {\r\n  /**\r\n   * @notice returns array of token balances\r\n   * @dev an array of alternating addresses should be provided, each wallet address should be followed by the token for which the balance is being checked\r\n   * @dev the values returned will be in the same order as the provided pairs\r\n   * @param addresses an address[] of wallet and token addresses\r\n   * @return a uint256[] of the wallet and token balances\r\n   */\r\n  function getBalances(address[] memory addresses) external view override returns (uint256[] memory) {\r\n    uint256[] memory balances = new uint256[](addresses.length / 2);\r\n    uint256 counter = 0;\r\n\r\n    for (uint i = 0; i < addresses.length; i += 2) {\r\n      balances[counter] = IERC20(addresses[i + 1]).balanceOf(addresses[i]);\r\n      counter++;\r\n    }\r\n\r\n    return balances;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenBalanceRetriever","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d51431c1075e459d83cce09dbb9f167b57ce12ab6383de88ea9a7263aff4e45"}]}