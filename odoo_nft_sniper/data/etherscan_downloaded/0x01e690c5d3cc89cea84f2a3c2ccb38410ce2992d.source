{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n/*  ______    ___    ______    ______   _____          ____     ______           ____     ______    __ __  ______\r\n   / ____/   /   |  / ____/   / ____/  / ___/         / __ \\   / ____/          / __ \\   / ____/   / //_/ /_  __/\r\n  / /_      / /| | / /       / __/     \\__ \\         / / / /  / /_             / /_/ /  / __/     / ,<     / /\r\n / __/     / ___ |/ /___    / /___    ___/ /        / /_/ /  / __/            / _, _/  / /___    / /| |   / /\r\n/_/       /_/  |_|\\____/   /_____/   /____/         \\____/  /_/              /_/ |_|  /_____/   /_/ |_|  /_/\r\n                                                                                                                 */\r\n/*ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@@@@%%(%%@@@@@%%%@((%@@@@@@@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@@@%#(/////((((%%@@@(((///%%@&%(((@@@@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@@@%%///%(((%&%%&%%%(((((%%@@@@%%((((%&&&&((/&&%#(@@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@(((///(((%%&&&&&%(((((((((((((@@@@(((%%&&%((/&&/%%&&&&&%((@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@&&&%%((///(&&%(((#%(((///((%@@@@@@@@%%(((/#&&&%&&%//(&&((&((%@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@%(((%%&&&&&&%%&&&&&%///((%&&&#(((((((@@%//(((&&/((&(((((&&%&&/((@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@%%&((%&&%%&%%((((((%&&%%(%%&&&&&&&&%((%@@@((%&&&&%&&&(((((&&&((&((@@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@,,.//@((%&&&&&%%(///((%((%&&&&((((///((&&((((((%@@(((((&%%(//%(/((&%%(((@@@/º.@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº../((((((%%&&%&&&&&&&&&&%(((%%&%%(((%%&%%///%@@@&%((%&&&&&&&&&&%((/@@@,,/#@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@..,@@@@@&&&%%(((%&&&%%((((((%%&&&%#(((%&&&&&&@@@@&&&&&&&%%%%%%%&&&@@@/..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@,,............//.../,,......................,,,/º,....................,,@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@..............,,///.....................................................@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@........................................................................@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@........................................................................@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@........................................................................@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@..........................................,,............................,(@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@......,,.....,..,.........................,,............................./@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@......,,.....,..,.........................,,.,,.......................//./@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@.....,,,.....,......................@@@...,,,,,.....@@@...............///#@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@.....,.......,...................@@@@@@.....,,,...,,@@@@@@............@@@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@.....,......./...............................//...//..................@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@.....,.....//,........@#,......,,@,..........,,///,,....@@,.......,@@.@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº#@....................@@@#,......,,@@@@@.................@@@,.......,@@@@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@,,,...,,@................@,,,,.........,&@@@...............@@,,,.........,,@@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@,,.........,,...............@@@@@@@@@@@@@@@@......,,...........@@@@@@@@@@@@@@@@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...////////...................@#º((ººº(@@///......,,.,,...,,....@@(#####((@///@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...//,º///,...................@%(ººº((%@@///......,,///...,,....@@%####%%%@///@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...///º,,,....................@%((((%%#@@///.........,,///,,....@@./(((///@///,,@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...,,,º/,,/...................@%///(ºº(@@///....................@@(((..(%%@///..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@.....,,,,,,...................@%(%%%((º@@///....................@@/////(ºº@///..,(@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...@@.....,......,,..,......@@%%%@@...@(((//................,...@@%(///(((@///.../@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...@@.....,......,,../.....@%%%&@ººº@@((((@@.....,..........,...@@/%%%%@(((@@@.../@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@,,,@@.....@,,....//........@%%#(º...ººººº@,......@,,......,,@..@@@.&@///((///@..,(@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@@(...@..,...//........@%%#(º...ººººº@,.......,,@@@@@@@@,......&@///@@///@..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@ @@ (@,,@...,,/..........@%%#&@...ººººº@,..........,,,,,.........&@///@@///@..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@  #&@,,.................@%%#&@...@@@@@............................@@@@@///@..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@###&@,,..................@@%&@...@@.........../@@@@@@@@@@/...........@@///@..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@((((((%%@../.................(@ººº@@.........@@@@@@@@@@@@@@@@.........@@(((@..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@%%(%%(%@((@../.................................@@@@@@@@@@@@@@@@............,,@..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@%%(%%(%@@@...@,,............................,,.@@@@@@@@@@@@@@@@............//@..@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@@@@#ººº@@@º@@/...........................,,.%%@@@%%%@@@@@@@@.........,,@@@,,,@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@(/.........................,,.###%%@%%##%@@@@@........,@@º@@,,,@%ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@......................../...,,,,,,,,,,......,//@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...,,@...,,@@@,,,,,,,,,,,@@@@@@@@@@@@@@@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@...,,@...,,@@@,,,,,,,,,,,,,@,,...@%,...@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@,,.,,@@@@#º@@@,,,,,,,,,,,@@@@@@@@,(@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@,,,,,@ººº#@((@@@@@@@@@@@@   @@,,,@@@ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@(º,              ,, ((      ,,@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@@@@@@@(((,,                    ,, ((         ,,(@@@/ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº@@@@@@@@@@@@((,                              ,, ((         ,,@@@(@@@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººººººººººººººº/@@@(,,,           ,,(                              ,, ((              ,,,,,(@@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººººººº@@@@(,,                                                ,, ((               .,,,,((@@@@@@@@@@@ººººººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººººººººººº@@@@@@(/                            ,,,(@@@%(,,            ,, ((              ,/(@@@((,          ,((@ººººººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººººº@@(,,    ,,(/                               ,,,,,,((@@@(,,         ((        ,(((,,                      ,((@/ººººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@((           ,                                 ,,,,,,((@@@@#(,, ,, ((                                     ,,(&@ºººººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@                            ((,                                    ((                              ,,,(((@@@@@@@@ºººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@                            ,,@((                               ,, ((                 ,,,(((@@@@@@@@@@@@@&%%%#(@@ºººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@,,                            ,@@(        ,,(((@@@@@@@@@@@@@@,,    ((@@@@@@@@@@@&%%%#((((((((((((((((((((((((((&&@ººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººº@%(@@(,,                          ,,@.    ,,@%%%%%%#((((((((((((((@%%((((((((((((((((((((((((((((((((((((((((@@%#(%%@ººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººº@%(((@((,                        @@@@@@@@@@@@%%%%%@@@@@@@@@@@@%%ºº(@@&((((((((((((((((((((((((((((@@%#((((((((((((%%@ººººººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººº@%(,,,,,@@@@@@(((@@@&&%((((((((((((((((((((((((%&&@@&%%(((((((#%@@ººº@&&(((@&%%%((((((((((((((((((((((((((((((((((((@ººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@@@@@@&%%(@@(((@@&%%(((((((((((((((((((((((%%&%%(((((((((&&@@@@@(ºº(@@((((((((((((((((((((((((((((((((((((////////@ººººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@&&%((((((((%#(%%@%%((((((((((((((@%%(((((&%%(((((((((((((((#%%%@ººº@@((((((((((((//////////////(((#%%%&&&@@@@@@@@@@@ººººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@&&%(((@@%((%#(((@%%((((((((((((((((((#&%%(((((((((((/(((%%&&&&&&ººº@@&&&@@@@@@@@@@@@@@@@(@@((((((,,,             ,@@@ºººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@&&%((((((((%#(((@%%(((((((((////////&&@(((((((((((//(%%&&&@@@@@(ºº(@@@@@@#,,,           (@@                       ((@ºººººººººººººººººººººººººººººººººººººººººº\r\nººººººººººººººººººººººººººººººººººººººº#@&&%(((((((((#@((&@@&%%&@@@@@@@@@@@@@@@///////////(%%&@@%((((((((@@(,,           ,,,(((@@@@@                         @ºººººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººº@@&&&&%%%&&@@@@@@%%%@@@@@@%(((,((@((,,,@@(////////(#%&&@@@@@@@@@@@@((,                     ,((@,,                      (@@ºººººººººººººººººººººººººººººººººººººººº\r\nºººººººººººººººººººººººººººººººººººººº@%(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@,,,((@&&&&&&&&@@@(((,,                                       ,                     ,@@ºººººººººººººººººººººººººººººººººººººººº\r\n*/\r\n/*\r\n   _____    ____    _____  ____ _   __  __         _____  ____ _   ____  ____\r\n  / ___/   / __ \\  / ___/ / __ `/  / / / /        / ___/ / __ `/  / __ \\/_  /\r\n (__  )   / /_/ / / /    / /_/ /  / /_/ /        / /__  / /_/ /  / / / / / /_\r\n/____/   / .___/ /_/     \\__,_/   \\__, /         \\___/  \\__,_/  /_/ /_/ /___/\r\n        /_/                      /____/                                      */\r\n\r\n//THE GREAT REKT LAUNCH EVENT WILL NOT BE FORGOTTEN -pixelrogueart\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary MerkleProof {\r\n\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n    function verifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.1;\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721Receiver {\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 is IERC165 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n        interfaceId == type(IERC721).interfaceId ||\r\n        interfaceId == type(IERC721Metadata).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.14;\r\n\r\n\r\n\r\ncontract FOR is ERC721URIStorage, Ownable {\r\n\r\n    bool whitelist_mint = true;\r\n\r\n    using ECDSA for bytes32;\r\n\r\n    string private _baseURIextended = \"ipfs://QmTTvdZZpMFvSCHnAo3FqFY5CccirYRrFC3GZ6drXhP4Bn/\"; // This one is used on OpenSea to define the metadata IPFS address\r\n\r\n    bool private mint_paused = false; // in case someone tries to rekt our mint we can pause at will\r\n\r\n    mapping(uint8 => bytes32) private whiteListMapping;\r\n\r\n    mapping(uint8 => uint16) public cansLeft; // our supply\r\n\r\n    mapping(address => uint8) private alreadyOwnCan;  // used to set limits (no more than 2 cans, one of each)\r\n\r\n    mapping(address => string) public cansHeOwn; // your supply\r\n\r\n    mapping(uint8 => uint16) private canCountId;\r\n\r\n    address[] private unknownWhitelist;\r\n\r\n    constructor() ERC721(\"Rekt cans\", \"RKC\") {\r\n\r\n        cansLeft[0] = 1111;  // B0WB\r\n        cansLeft[1] = 1111;  // B0LT\r\n        cansLeft[2] = 1111;  // F1R3\r\n        cansLeft[3] = 1111;  // SCH00L\r\n        cansLeft[4] = 1111;  // SN3K\r\n        cansLeft[5] = 250;   // WabiSabi\r\n        cansLeft[6] = 100;   // Deladeso\r\n        cansLeft[7] = 250;   // Creepz\r\n        cansLeft[8] = 250;   // Grillz Gang\r\n        cansLeft[9] = 250;   // Mooncan\r\n        cansLeft[10] = 50;   // Tiny Zoo\r\n        cansLeft[11] = 150;  // Llamaverse\r\n        cansLeft[12] = 50;   // ??\r\n\r\n\r\n        whiteListMapping[0] = 0xa7b77bb86f03345c356b799d46aaf11289145d178881cf95e3ad5e4faf03934c;\r\n        whiteListMapping[1] = 0xa7b77bb86f03345c356b799d46aaf11289145d178881cf95e3ad5e4faf03934c;\r\n        whiteListMapping[2] = 0xa7b77bb86f03345c356b799d46aaf11289145d178881cf95e3ad5e4faf03934c;\r\n        whiteListMapping[3] = 0xa7b77bb86f03345c356b799d46aaf11289145d178881cf95e3ad5e4faf03934c;\r\n        whiteListMapping[4] = 0xa7b77bb86f03345c356b799d46aaf11289145d178881cf95e3ad5e4faf03934c;\r\n        whiteListMapping[5] = 0x0fb49340ec9e083562809c17e635d16b1fd00d7d2fa3d02090b63c1f39fc7ca1;  // WabiSabi\r\n        whiteListMapping[6] = 0x2d764d45115ce0415195b4296380ba7a8fb5fecb589f52d2d55ed49383bfd781;  // Deladeso\r\n        whiteListMapping[7] = 0x01886e59a4db5e0801f9a2243ad9ac01ddbb814b46b70a89f708562506a729a2;  // Creepz\r\n        whiteListMapping[8] = 0x4c156357cefbea51166ae7f0253d32c3d14d5849fbf75a297b2caa1fe86ad68e;  // Grillz Gang\r\n        whiteListMapping[9] = 0xab2a6e961b690b8f4f4f4dc733818bd4bef8586a7b976e5042bf334f59a5e285;  // Mooncan\r\n        whiteListMapping[10] = 0xf61184b70addc57bb4e61134c0c8e15f0da4960b947d636799150eb3339f2860; // Tiny Zoo\r\n        whiteListMapping[11] = 0x3af526e2f746fba2e576ed127edbb6d14c39dc13482d928114e7d4015660c03a; // Llamaverse\r\n        whiteListMapping[12] = 0x4f0a4dfc85667e30c6f8ad3c1698ece1314a4c26d2b1d1691cafe0c4de21dc2b; // ??\r\n\r\n        // TODO TOMOROW\r\n    }\r\n\r\n    // Set the Metadata IPFS url (see docs.opensea.io)\r\n    function setBaseURI(string memory baseURI_) external onlyOwner() {\r\n        _baseURIextended = baseURI_;\r\n    }\r\n\r\n    // In case we need to pause the mint\r\n    function switchMintState() external onlyOwner() {\r\n        mint_paused = !mint_paused;\r\n    }\r\n\r\n    function switchWhitelistMintState() external onlyOwner() {\r\n        whitelist_mint = !whitelist_mint;\r\n    }\r\n\r\n    // For OpenSEA\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseURIextended;\r\n    }\r\n\r\n    function setWhitelistMerkleRoot(bytes32 newMerkleRoot_, uint8 _id) external onlyOwner {\r\n        whiteListMapping[_id] = newMerkleRoot_;\r\n    }\r\n\r\n\r\n    function M_I_N_T(bytes32[] memory proof,uint256 amount, uint8 tokenID) public {\r\n\r\n        if(tokenID > 4) {\r\n            require(MerkleProof.verify(\r\n                    proof,\r\n                    whiteListMapping[tokenID],\r\n                    keccak256(abi.encodePacked(msg.sender, amount))), \"Not whitelisted, try again later if we don't sell-out\");\r\n        } else {\r\n            if (whitelist_mint) {\r\n                require(MerkleProof.verify(\r\n                        proof,\r\n                        whiteListMapping[tokenID],\r\n                        keccak256(abi.encodePacked(msg.sender, amount))), \"Not whitelisted, try again later if we don't sell-out\");\r\n            }\r\n        }\r\n\r\n        require(!mint_paused, \">MINT PAUSED< If you're getting this message, shit went down (again). >MINT PAUSED<\");\r\n\r\n        require(alreadyOwnCan[msg.sender] < 3, \"One community can and one collab can per wallet!!!\");\r\n\r\n        if(tokenID > 4) {\r\n            require(alreadyOwnCan[msg.sender] != 2, \"One collab can per wallet\");\r\n\r\n        } else {\r\n            require(alreadyOwnCan[msg.sender] != 1, \"One community can per wallet\");\r\n        }\r\n        \r\n        // In case some of the random cans sell-out, you can still get a can without spending another transaction gas fee\r\n        // but now instead of random its from 0 to 4\r\n        if(cansLeft[tokenID] == 0 && tokenID < 4) {\r\n            for(uint8 i = 0; i < 4; i++) {\r\n                if(cansLeft[i] > 0) {\r\n                    tokenID = i;\r\n                    i = 4;\r\n                }\r\n            }\r\n        }\r\n\r\n        // sold out require, sorry for the gas mate\r\n        require(cansLeft[tokenID] > 0, \"Sold out bother, don't brother ;)\");\r\n\r\n        if(alreadyOwnCan[msg.sender] == 0) {\r\n            tokenID <= 4 ? alreadyOwnCan[msg.sender] = 1 : alreadyOwnCan[msg.sender] = 2;\r\n        } else {\r\n            alreadyOwnCan[msg.sender] = 3;\r\n        }\r\n\r\n        cansLeft[tokenID] -= 1;\r\n\r\n        cansHeOwn[msg.sender] = string.concat(cansHeOwn[msg.sender], Strings.toString(tokenID));\r\n\r\n        uint16 _tokenID;\r\n\r\n        // Rekt code sorry guys, no time to do math -lrovaris\r\n\r\n        if (tokenID <= 5) {\r\n            _tokenID = (tokenID * 1111) + canCountId[tokenID];\r\n        } else if (tokenID == 6) {\r\n            _tokenID = 5805 + canCountId[tokenID];\r\n        } else if (tokenID == 7) {\r\n            _tokenID = 5905 + canCountId[tokenID];\r\n        } else if (tokenID == 8) {\r\n            _tokenID = 6155 + canCountId[tokenID];\r\n        } else if (tokenID == 9) {\r\n            _tokenID = 6405 + canCountId[tokenID];\r\n        } else if (tokenID == 10) {\r\n            _tokenID = 6655 + canCountId[tokenID];\r\n        } else if (tokenID == 11) {\r\n            _tokenID = 6705 + canCountId[tokenID];\r\n        } else if (tokenID == 12) {\r\n            _tokenID = 6855 + canCountId[tokenID];\r\n        }\r\n\r\n        canCountId[tokenID] += 1;\r\n        _safeMint(msg.sender, _tokenID);\r\n\r\n    }\r\n\r\n}\r\n\r\n//drop an 'F' in the chat for all those who got rekt in the first mint\r\n//Special thanks to all lab rats that helped us -FOR Team","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenID\",\"type\":\"uint8\"}],\"name\":\"M_I_N_T\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cansHeOwn\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"cansLeft\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"setWhitelistMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchWhitelistMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FOR","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7ce59a3371d326ddcd457477050170352c2c4c06a9e16b94212f97cca21b8767"}]}