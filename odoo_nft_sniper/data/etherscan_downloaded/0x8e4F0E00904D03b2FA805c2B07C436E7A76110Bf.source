{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/features/UsingMaxDeviation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Deviation check feature, useful when checking prices from different providers for the same asset\\n */\\nabstract contract UsingMaxDeviation is Governable {\\n    /**\\n     * @notice The max acceptable deviation\\n     * @dev 18-decimals scale (e.g 1e17 = 10%)\\n     */\\n    uint256 public maxDeviation;\\n\\n    /// @notice Emitted when max deviation is updated\\n    event MaxDeviationUpdated(uint256 oldMaxDeviation, uint256 newMaxDeviation);\\n\\n    constructor(uint256 maxDeviation_) {\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Update max deviation\\n     */\\n    function updateMaxDeviation(uint256 maxDeviation_) external onlyGovernor {\\n        emit MaxDeviationUpdated(maxDeviation, maxDeviation_);\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Check if two numbers deviation is acceptable\\n     */\\n    function _isDeviationOK(uint256 a_, uint256 b_) internal view returns (bool) {\\n        uint256 _deviation = a_ > b_ ? ((a_ - b_) * 1e18) / a_ : ((b_ - a_) * 1e18) / b_;\\n        return _deviation <= maxDeviation;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/features/UsingProvidersAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interfaces/core/IPriceProvidersAggregator.sol\\\";\\n\\n/**\\n * @title Providers Aggregators usage feature, useful for periphery oracles that need get prices from many providers\\n */\\nabstract contract UsingProvidersAggregator is Governable {\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public providersAggregator;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    constructor(IPriceProvidersAggregator providersAggregator_) {\\n        require(address(providersAggregator_) != address(0), \\\"aggregator-is-null\\\");\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/features/UsingStalePeriod.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Stale price check feature, useful when checking if prices are fresh enough\\n */\\nabstract contract UsingStalePeriod is Governable {\\n    /// @notice The stale period. It's used to determine if a price is invalid (i.e. outdated)\\n    uint256 public stalePeriod;\\n\\n    /// @notice Emitted when stale period is updated\\n    event StalePeriodUpdated(uint256 oldStalePeriod, uint256 newStalePeriod);\\n\\n    constructor(uint256 stalePeriod_) {\\n        stalePeriod = stalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Update stale period\\n     */\\n    function updateStalePeriod(uint256 stalePeriod_) external onlyGovernor {\\n        emit StalePeriodUpdated(stalePeriod, stalePeriod_);\\n        stalePeriod = stalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @dev Uses default stale period\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(uint256 timeOfLastUpdate_) internal view returns (bool) {\\n        return _priceIsStale(timeOfLastUpdate_, stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @param stalePeriod_ The maximum acceptable outdated period\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(uint256 timeOfLastUpdate_, uint256 stalePeriod_) internal view returns (bool) {\\n        return block.timestamp - timeOfLastUpdate_ > stalePeriod_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IPriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IPriceProvidersAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/ChainlinkAndFallbacksOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/core/IPriceProvidersAggregator.sol\\\";\\nimport \\\"../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../features/UsingProvidersAggregator.sol\\\";\\nimport \\\"../features/UsingMaxDeviation.sol\\\";\\nimport \\\"../features/UsingStalePeriod.sol\\\";\\n\\n/**\\n * @title Chainlink and Fallbacks oracle\\n * @dev Uses chainlink as primary oracle, if it doesn't support the asset(s), get price from fallback providers\\n */\\ncontract ChainlinkAndFallbacksOracle is IOracle, UsingProvidersAggregator, UsingMaxDeviation, UsingStalePeriod {\\n    /// @notice The fallback provider A. It's used when Chainlink isn't available\\n    DataTypes.Provider public fallbackProviderA;\\n\\n    /// @notice The fallback provider B. It's used when Chainlink isn't available\\n    /// @dev This is optional\\n    DataTypes.Provider public fallbackProviderB;\\n\\n    /// @notice Emitted when fallback providers are updated\\n    event FallbackProvidersUpdated(\\n        DataTypes.Provider oldFallbackProviderA,\\n        DataTypes.Provider newFallbackProviderA,\\n        DataTypes.Provider oldFallbackProviderB,\\n        DataTypes.Provider newFallbackProviderB\\n    );\\n\\n    constructor(\\n        IPriceProvidersAggregator providersAggregator_,\\n        uint256 maxDeviation_,\\n        uint256 stalePeriod_,\\n        DataTypes.Provider fallbackProviderA_,\\n        DataTypes.Provider fallbackProviderB_\\n    ) UsingProvidersAggregator(providersAggregator_) UsingMaxDeviation(maxDeviation_) UsingStalePeriod(stalePeriod_) {\\n        require(fallbackProviderA_ != DataTypes.Provider.NONE, \\\"fallback-provider-not-set\\\");\\n        fallbackProviderA = fallbackProviderA_;\\n        fallbackProviderB = fallbackProviderB_;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function getPriceInUsd(address _asset) public view virtual returns (uint256 _priceInUsd) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_priceInUsd, _lastUpdatedAt) = _getPriceInUsd(DataTypes.Provider.CHAINLINK, _asset);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_priceInUsd > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _priceInUsd;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _getPriceInUsd(fallbackProviderA, _asset);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _getPriceInUsd(fallbackProviderB, _asset);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quote(DataTypes.Provider.CHAINLINK, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quote(fallbackProviderA, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quote(fallbackProviderB, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quoteTokenToUsd(DataTypes.Provider.CHAINLINK, token_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quoteTokenToUsd(fallbackProviderA, token_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quoteTokenToUsd(fallbackProviderB, token_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteUsdToToken(address token_, uint256 amountIn_) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quoteUsdToToken(DataTypes.Provider.CHAINLINK, token_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quoteUsdToToken(fallbackProviderA, token_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quoteUsdToToken(fallbackProviderB, token_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /**\\n     * @notice Wrapped `getPriceInUsd` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        private\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        try providersAggregator.getPriceInUsd(provider_, token_) returns (\\n            uint256 __priceInUsd,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _priceInUsd = __priceInUsd;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quote` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try providersAggregator.quote(provider_, tokenIn_, tokenOut_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quoteTokenToUsd` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try providersAggregator.quoteTokenToUsd(provider_, token_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quoteUsdToToken` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try providersAggregator.quoteUsdToToken(provider_, token_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Update fallback providers\\n     * @dev The fallback provider B is optional\\n     */\\n    function updateFallbackProviders(DataTypes.Provider fallbackProviderA_, DataTypes.Provider fallbackProviderB_)\\n        external\\n        onlyGovernor\\n    {\\n        require(fallbackProviderA_ != DataTypes.Provider.NONE, \\\"fallback-a-is-null\\\");\\n        emit FallbackProvidersUpdated(fallbackProviderA, fallbackProviderA_, fallbackProviderB, fallbackProviderB_);\\n        fallbackProviderA = fallbackProviderA_;\\n        fallbackProviderB = fallbackProviderB_;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"providersAggregator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderA_\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderB_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"oldFallbackProviderA\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"newFallbackProviderA\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"oldFallbackProviderB\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"newFallbackProviderB\",\"type\":\"uint8\"}],\"name\":\"FallbackProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxDeviation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeviation\",\"type\":\"uint256\"}],\"name\":\"MaxDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"oldProvidersAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"newProvidersAggregator\",\"type\":\"address\"}],\"name\":\"ProvidersAggregatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStalePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"StalePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackProviderA\",\"outputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackProviderB\",\"outputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providersAggregator\",\"outputs\":[{\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderA_\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderB_\",\"type\":\"uint8\"}],\"name\":\"updateFallbackProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"}],\"name\":\"updateMaxDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"providersAggregator_\",\"type\":\"address\"}],\"name\":\"updateProvidersAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"}],\"name\":\"updateStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkAndFallbacksOracle","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"5000","ConstructorArguments":"00000000000000000000000032a21ec8ee93971d4b4093c0895fd841c7169a2300000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000384000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}