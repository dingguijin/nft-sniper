{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File @chainlink/contracts/Denominations.sol@v0.4.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Denominations {\r\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\r\n\r\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\r\n  address public constant USD = address(840);\r\n  address public constant GBP = address(826);\r\n  address public constant EUR = address(978);\r\n  address public constant JPY = address(392);\r\n  address public constant KRW = address(410);\r\n  address public constant CNY = address(156);\r\n  address public constant AUD = address(36);\r\n  address public constant CAD = address(124);\r\n  address public constant CHF = address(756);\r\n  address public constant ARS = address(32);\r\n  address public constant PHP = address(608);\r\n  address public constant NZD = address(554);\r\n  address public constant SGD = address(702);\r\n  address public constant NGN = address(566);\r\n  address public constant ZAR = address(710);\r\n  address public constant RUB = address(643);\r\n  address public constant INR = address(356);\r\n  address public constant BRL = address(986);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/interfaces/AggregatorInterface.sol@v0.4.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n\r\n  function latestTimestamp() external view returns (uint256);\r\n\r\n  function latestRound() external view returns (uint256);\r\n\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/interfaces/AggregatorV3Interface.sol@v0.4.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n\r\n// File @chainlink/contracts/interfaces/AggregatorV2V3Interface.sol@v0.4.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\r\n\r\n\r\n// File @chainlink/contracts/interfaces/FeedRegistryInterface.sol@v0.4.2\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\ninterface FeedRegistryInterface {\r\n  struct Phase {\r\n    uint16 phaseId;\r\n    uint80 startingAggregatorRoundId;\r\n    uint80 endingAggregatorRoundId;\r\n  }\r\n\r\n  event FeedProposed(\r\n    address indexed asset,\r\n    address indexed denomination,\r\n    address indexed proposedAggregator,\r\n    address currentAggregator,\r\n    address sender\r\n  );\r\n  event FeedConfirmed(\r\n    address indexed asset,\r\n    address indexed denomination,\r\n    address indexed latestAggregator,\r\n    address previousAggregator,\r\n    uint16 nextPhaseId,\r\n    address sender\r\n  );\r\n\r\n  // V3 AggregatorV3Interface\r\n\r\n  function decimals(address base, address quote) external view returns (uint8);\r\n\r\n  function description(address base, address quote) external view returns (string memory);\r\n\r\n  function version(address base, address quote) external view returns (uint256);\r\n\r\n  function latestRoundData(address base, address quote)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function getRoundData(\r\n    address base,\r\n    address quote,\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  // V2 AggregatorInterface\r\n\r\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\r\n\r\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\r\n\r\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\r\n\r\n  function getAnswer(\r\n    address base,\r\n    address quote,\r\n    uint256 roundId\r\n  ) external view returns (int256 answer);\r\n\r\n  function getTimestamp(\r\n    address base,\r\n    address quote,\r\n    uint256 roundId\r\n  ) external view returns (uint256 timestamp);\r\n\r\n  // Registry getters\r\n\r\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\r\n\r\n  function getPhaseFeed(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  ) external view returns (AggregatorV2V3Interface aggregator);\r\n\r\n  function isFeedEnabled(address aggregator) external view returns (bool);\r\n\r\n  function getPhase(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  ) external view returns (Phase memory phase);\r\n\r\n  // Round helpers\r\n\r\n  function getRoundFeed(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  ) external view returns (AggregatorV2V3Interface aggregator);\r\n\r\n  function getPhaseRange(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\r\n\r\n  function getPreviousRoundId(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  ) external view returns (uint80 previousRoundId);\r\n\r\n  function getNextRoundId(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  ) external view returns (uint80 nextRoundId);\r\n\r\n  // Feed management\r\n\r\n  function proposeFeed(\r\n    address base,\r\n    address quote,\r\n    address aggregator\r\n  ) external;\r\n\r\n  function confirmFeed(\r\n    address base,\r\n    address quote,\r\n    address aggregator\r\n  ) external;\r\n\r\n  // Proposed aggregator\r\n\r\n  function getProposedFeed(address base, address quote)\r\n    external\r\n    view\r\n    returns (AggregatorV2V3Interface proposedAggregator);\r\n\r\n  function proposedGetRoundData(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 id,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function proposedLatestRoundData(address base, address quote)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 id,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  // Phases\r\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\r\n}\r\n\r\n\r\n// File interfaces/IRoleManager.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IRoleManager {\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function addGovernor(address newGovernor) external;\r\n\r\n    function renounceGovernance() external;\r\n\r\n    function addGaugeZap(address zap) external;\r\n\r\n    function removeGaugeZap(address zap) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n}\r\n\r\n\r\n// File libraries/Errors.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Error {\r\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\r\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\r\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\r\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\r\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\r\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\r\n    string internal constant UNAUTHORIZED_PAUSE = \"not authorized to pause\";\r\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\r\n    string internal constant INVALID_INDEX = \"invalid index\";\r\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\r\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\r\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\r\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\r\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\r\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\r\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_POOL_IMPLEMENTATION =\r\n        \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\r\n        \"invalid LP Token implementation for given coin\";\r\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\r\n        \"invalid vault implementation for given coin\";\r\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\r\n        \"invalid stakerVault implementation for given coin\";\r\n    string internal constant INSUFFICIENT_ALLOWANCE = \"insufficient allowance\";\r\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\r\n    string internal constant INSUFFICIENT_AMOUNT_OUT = \"Amount received less than min amount\";\r\n    string internal constant INSUFFICIENT_AMOUNT_IN = \"Amount spent more than max amount\";\r\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\r\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\r\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\r\n    string internal constant ADDRESS_DOES_NOT_EXIST = \"address does not exist\";\r\n    string internal constant ADDRESS_FROZEN = \"address is frozen\";\r\n    string internal constant ROLE_EXISTS = \"role already exists\";\r\n    string internal constant CANNOT_REVOKE_ROLE = \"cannot revoke role\";\r\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\r\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\r\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\r\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\r\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\r\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\r\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\r\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\r\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\r\n    string internal constant CANNOT_EXECUTE_IN_SAME_BLOCK = \"cannot execute action in same block\";\r\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\r\n    string internal constant TOP_UP_FAILED = \"top up failed\";\r\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\r\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\r\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\r\n        \"not enough funds were withdrawn from the pool\";\r\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\r\n    string internal constant FAILED_MINT = \"mint failed\";\r\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\r\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\r\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\r\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\r\n    string internal constant INVALID_MINTER =\r\n        \"the minter address of the LP token and the pool address do not match\";\r\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\r\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\r\n    string internal constant NOTHING_PENDING = \"no pending change to reset\";\r\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\r\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\r\n    string internal constant DELAY_TOO_SHORT = \"delay must be at least 3 days\";\r\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\r\n        \"insufficient funds for updating the position\";\r\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\r\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\r\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\r\n    string internal constant ALREADY_SHUTDOWN = \"the pool is already shutdown\";\r\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\r\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\r\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\r\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\r\n    string internal constant GAUGE_KILLED = \"gauge killed\";\r\n    string internal constant INVALID_TARGET = \"Invalid Target\";\r\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\r\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\r\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\r\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\r\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\r\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\r\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\r\n        \"pool does not support additional underlying coins to be withdrawn\";\r\n    string internal constant STRATEGY_SHUTDOWN = \"Strategy is shutdown\";\r\n    string internal constant POOL_SHUTDOWN = \"Pool is shutdown\";\r\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\r\n    string internal constant GAUGE_STILL_ACTIVE = \"Gauge still active\";\r\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\r\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\r\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\r\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\r\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\r\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\r\n    string internal constant INVALID_MAX_FEE = \"invalid max fee\";\r\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\r\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\r\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\r\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\r\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\r\n    string internal constant PREPARED_WITHDRAWAL =\r\n        \"Cannot relock funds when withdrawal is being prepared\";\r\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\r\n    string internal constant STALE_PRICE = \"Price is stale\";\r\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\r\n    string internal constant ROUND_NOT_COMPLETE = \"Round not complete\";\r\n    string internal constant NOT_ENOUGH_MERO_STAKED = \"Not enough MERO tokens staked\";\r\n    string internal constant RESERVE_ACCESS_EXCEEDED = \"Reserve access exceeded\";\r\n}\r\n\r\n\r\n// File libraries/Roles.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Roles {\r\n    bytes32 internal constant GOVERNANCE = \"governance\";\r\n    bytes32 internal constant ADDRESS_PROVIDER = \"address_provider\";\r\n    bytes32 internal constant POOL_FACTORY = \"pool_factory\";\r\n    bytes32 internal constant CONTROLLER = \"controller\";\r\n    bytes32 internal constant GAUGE_ZAP = \"gauge_zap\";\r\n    bytes32 internal constant MAINTENANCE = \"maintenance\";\r\n    bytes32 internal constant INFLATION_MANAGER = \"inflation_manager\";\r\n    bytes32 internal constant POOL = \"pool\";\r\n    bytes32 internal constant VAULT = \"vault\";\r\n}\r\n\r\n\r\n// File contracts/access/AuthorizationBase.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n/**\r\n * @notice Provides modifiers for authorization\r\n */\r\nabstract contract AuthorizationBase {\r\n    /**\r\n     * @notice Only allows a sender with `role` to perform the given action\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        require(_roleManager().hasRole(role, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with GOVERNANCE role to perform the given action\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_roleManager().hasRole(Roles.GOVERNANCE, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles2(bytes32 role1, bytes32 role2) {\r\n        require(_roleManager().hasAnyRole(role1, role2, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles3(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _roleManager().hasAnyRole(role1, role2, role3, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    function roleManager() external view virtual returns (IRoleManager) {\r\n        return _roleManager();\r\n    }\r\n\r\n    function _roleManager() internal view virtual returns (IRoleManager);\r\n}\r\n\r\n\r\n// File contracts/access/Authorization.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ncontract Authorization is AuthorizationBase {\r\n    IRoleManager internal immutable __roleManager;\r\n\r\n    constructor(IRoleManager roleManager) {\r\n        __roleManager = roleManager;\r\n    }\r\n\r\n    function _roleManager() internal view override returns (IRoleManager) {\r\n        return __roleManager;\r\n    }\r\n}\r\n\r\n\r\n// File libraries/DecimalScale.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary DecimalScale {\r\n    uint8 internal constant _DECIMALS = 18; // 18 decimal places\r\n\r\n    function scaleFrom(uint256 value, uint8 decimals) internal pure returns (uint256) {\r\n        if (decimals == _DECIMALS) {\r\n            return value;\r\n        } else if (decimals > _DECIMALS) {\r\n            return value / 10**(decimals - _DECIMALS);\r\n        } else {\r\n            return value * 10**(_DECIMALS - decimals);\r\n        }\r\n    }\r\n\r\n    function scaleTo(uint256 value, uint8 decimals) internal pure returns (uint256) {\r\n        if (decimals == _DECIMALS) {\r\n            return value;\r\n        } else if (decimals > _DECIMALS) {\r\n            return value * 10**(decimals - _DECIMALS);\r\n        } else {\r\n            return value / 10**(_DECIMALS - decimals);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/oracles/IOracleProvider.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IOracleProvider {\r\n    /// @notice Checks whether the asset is supported\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return true if the asset is supported\r\n    function isAssetSupported(address baseAsset) external view returns (bool);\r\n\r\n    /// @notice Quotes the USD price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the USD price of the asset\r\n    function getPriceUSD(address baseAsset) external view returns (uint256);\r\n\r\n    /// @notice Quotes the ETH price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the ETH price of the asset\r\n    function getPriceETH(address baseAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/oracles/IChainlinkOracleProvider.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IChainlinkOracleProvider is IOracleProvider {\r\n    function setStalePriceDelay(uint256 stalePriceDelay_) external;\r\n}\r\n\r\n\r\n// File contracts/oracles/ChainlinkOracleProvider.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\ncontract ChainlinkOracleProvider is IChainlinkOracleProvider, Authorization {\r\n    using DecimalScale for uint256;\r\n\r\n    FeedRegistryInterface internal immutable _feedRegistry;\r\n\r\n    uint256 public stalePriceDelay;\r\n\r\n    event FeedUpdated(address indexed asset, address indexed previousFeed, address indexed newFeed);\r\n    event StalePriceDelaySet(uint256 newStalePriceDelay);\r\n\r\n    constructor(IRoleManager roleManager_, address feedRegistry_) Authorization(roleManager_) {\r\n        _feedRegistry = FeedRegistryInterface(feedRegistry_);\r\n\r\n        stalePriceDelay = 1 days;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the stale price delay value.\r\n     * @param stalePriceDelay_ The new stale price delay to set.\r\n     */\r\n    function setStalePriceDelay(uint256 stalePriceDelay_) external override onlyGovernance {\r\n        require(stalePriceDelay_ >= 1 hours, Error.INVALID_ARGUMENT);\r\n        stalePriceDelay = stalePriceDelay_;\r\n        emit StalePriceDelaySet(stalePriceDelay_);\r\n    }\r\n\r\n    /// @inheritdoc IOracleProvider\r\n    function isAssetSupported(address baseAsset) external view override returns (bool) {\r\n        try _feedRegistry.getFeed(baseAsset, Denominations.ETH) returns (AggregatorV2V3Interface) {\r\n            return true;\r\n        } catch Error(string memory) {\r\n            try _feedRegistry.getFeed(baseAsset, Denominations.USD) returns (\r\n                AggregatorV2V3Interface\r\n            ) {\r\n                return true;\r\n            } catch Error(string memory) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IOracleProvider\r\n    function getPriceETH(address asset_) external view override returns (uint256) {\r\n        return _getPrice(asset_, Denominations.ETH, false);\r\n    }\r\n\r\n    /// @inheritdoc IOracleProvider\r\n    function getPriceUSD(address asset_) public view override returns (uint256) {\r\n        return _getPrice(asset_, Denominations.USD, false);\r\n    }\r\n\r\n    function _getPrice(\r\n        address asset_,\r\n        address denomination_,\r\n        bool revert_\r\n    ) internal view returns (uint256) {\r\n        try _feedRegistry.latestRoundData(asset_, denomination_) returns (\r\n            uint80 roundID_,\r\n            int256 price_,\r\n            uint256, // startedAt\r\n            uint256 timeStamp_,\r\n            uint80 answeredInRound_\r\n        ) {\r\n            require(timeStamp_ != 0, Error.ROUND_NOT_COMPLETE);\r\n            require(block.timestamp <= timeStamp_ + stalePriceDelay, Error.STALE_PRICE);\r\n            require(price_ != 0, Error.NEGATIVE_PRICE);\r\n            require(answeredInRound_ >= roundID_, Error.STALE_PRICE);\r\n\r\n            return uint256(price_).scaleFrom(_feedRegistry.decimals(asset_, denomination_));\r\n        } catch Error(string memory reason) {\r\n            if (revert_) revert(reason);\r\n\r\n            if (denomination_ == Denominations.USD) {\r\n                return\r\n                    (_getPrice(asset_, Denominations.ETH, true) *\r\n                        _getPrice(Denominations.ETH, Denominations.USD, true)) / 1e18;\r\n            }\r\n            return\r\n                (_getPrice(asset_, Denominations.USD, true) * 1e18) /\r\n                _getPrice(Denominations.ETH, Denominations.USD, true);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"roleManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feedRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeed\",\"type\":\"address\"}],\"name\":\"FeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePriceDelay\",\"type\":\"uint256\"}],\"name\":\"StalePriceDelaySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"name\":\"getPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"name\":\"getPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"}],\"name\":\"isAssetSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stalePriceDelay_\",\"type\":\"uint256\"}],\"name\":\"setStalePriceDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePriceDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkOracleProvider","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f42420f505205b0771e631b5ef40cf3a563f210800000000000000000000000047fb2585d2c56fe188d0e6ec628a38b74fceeedf","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8fdc349e6fdee5dbe182a67f11f220467cf4e96ca0ec154b325f447baf2afd36"}]}