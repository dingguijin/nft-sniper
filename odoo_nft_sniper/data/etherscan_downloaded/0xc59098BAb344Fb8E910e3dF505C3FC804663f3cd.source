{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 is IERC20Upgradeable{\r\n     /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/ComptrollerInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ComptrollerInterface {\r\n\r\n    function isComptroller() external view returns(bool);\r\n    function oracle() external view returns(address);\r\n    function distributioner() external view returns(address);\r\n    function closeFactorMantissa() external view returns(uint);\r\n    function liquidationIncentiveMantissa() external view returns(uint);\r\n    function maxAssets() external view returns(uint);\r\n    function accountAssets(address account,uint index) external view returns(address);\r\n    function markets(address market) external view returns(bool,uint);\r\n\r\n    function pauseGuardian() external view returns(address);\r\n    function paused() external view returns(bool);\r\n    function marketMintPaused(address market) external view returns(bool);\r\n    function marketRedeemPaused(address market) external view returns(bool);\r\n    function marketBorrowPaused(address market) external view returns(bool);\r\n    function marketRepayBorrowPaused(address market) external view returns(bool);\r\n    function marketTransferPaused(address market) external view returns(bool);\r\n    function marketSeizePaused(address market) external view returns(bool);\r\n    function borrowCaps(address market) external view returns(uint);\r\n    function supplyCaps(address market) external view returns(uint);\r\n    function liquidateWhiteAddresses(uint index) external view returns(address);\r\n\r\n    function enterMarkets(address[] calldata marketTokens) external returns (uint[] memory);\r\n    function exitMarket(address marketToken) external returns (uint);\r\n\r\n    function mintAllowed(address marketToken, address minter, uint mintAmount) external returns (uint);\r\n    function mintVerify(address marketToken, address minter, uint mintAmount, uint mintTokens) external;\r\n\r\n    function redeemAllowed(address marketToken, address redeemer, uint redeemTokens) external returns (uint);\r\n    function redeemVerify(address marketToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\r\n\r\n    function borrowAllowed(address marketToken, address borrower, uint borrowAmount) external returns (uint);\r\n    function borrowVerify(address marketToken, address borrower, uint borrowAmount) external;\r\n\r\n    function repayBorrowAllowed(\r\n        address marketToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function repayBorrowVerify(\r\n        address marketToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint borrowerIndex) external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address marketTokenBorrowed,\r\n        address marketTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function liquidateBorrowVerify(\r\n        address marketTokenBorrowed,\r\n        address marketTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint seizeTokens) external;\r\n\r\n    function seizeAllowed(\r\n        address marketTokenCollateral,\r\n        address marketTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external returns (uint);\r\n    function seizeVerify(\r\n        address marketTokenCollateral,\r\n        address marketTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external;\r\n\r\n    function transferAllowed(address marketToken, address src, address dst, uint transferTokens) external returns (uint);\r\n    function transferVerify(address marketToken, address src, address dst, uint transferTokens) external;\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address marketTokenBorrowed,\r\n        address marketTokenCollateral,\r\n        uint repayAmount) external view returns (uint, uint);\r\n\r\n    function getHypotheticalAccountLiquidity(\r\n        address account,\r\n        address marketTokenModify,\r\n        uint redeemTokens,\r\n        uint borrowAmount) external view returns (uint, uint, uint);\r\n\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n    function checkMembership(address account, address marketToken) external view returns (bool) ;\r\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint) ;\r\n    function getAllMarkets() external view returns (address[] memory);\r\n    function isDeprecated(address marketToken) external view returns (bool);\r\n    function isMarketListed(address marketToken) external view returns (bool);\r\n\r\n    \r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/DistributionerInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface DistributionerInterface {\r\n\r\n    function _initializeMarket(address marketToken) external;\r\n\r\n    function distributeMintReward(address marketToken, address minter) external;\r\n    function distributeRedeemReward(address marketToken, address redeemer) external;\r\n    function distributeBorrowReward(address marketToken, address borrower) external;\r\n    function distributeRepayBorrowReward(address marketToken, address borrower) external;\r\n    function distributeSeizeReward(address marketTokenCollateral, address borrower, address liquidator) external;\r\n    function distributeTransferReward(address marketToken, address src, address dst) external;\r\n\r\n    function rewardSupplySpeeds(address marketToken) external view returns(uint);\r\n    function rewardBorrowSpeeds(address marketToken) external view returns(uint);\r\n    function rewardAccrued(address account) external view returns(uint);\r\n    function rewardToken() external view returns(address);\r\n\r\n    function claimRewardToken(address holder) external;\r\n    function claimRewardToken(address holder, address[] memory marketTokens) external;\r\n    function claimRewardToken(address[] memory holders, address[] memory marketTokens, bool borrowers, bool suppliers) external;\r\n\r\n\r\n}\r\n\r\ninterface DistributionerManagerInterface {\r\n    function getDistributioners() external view returns(address[] memory);\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/MarketTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface MarketTokenInterface {\r\n    function isMarketToken() external view returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n    function reserveFactorMantissa() external view returns (uint256);\r\n    function accrualBlockTimestamp() external view returns (uint256);\r\n    function borrowIndex() external view returns (uint256);\r\n    function totalBorrows() external view returns (uint256);\r\n    function totalReserves() external view returns (uint256);\r\n    function accountTokens(address account) external view returns (uint256);\r\n    function accountBorrows(address account) external view returns (uint256,uint256);\r\n    function protocolSeizeShareMantissa() external view returns (uint256);\r\n    function comptroller() external view returns (address);\r\n    function interestRateModel() external view returns (address);\r\n\r\n    function transfer(address dst, uint amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n    function borrowRatePerSecond() external view returns (uint);\r\n    function supplyRatePerSecond() external view returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function borrowBalanceStored(address account) external view returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function getCash() external view returns (uint);\r\n    function accrueInterest() external returns (uint);\r\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\r\n\r\n    function _setComptroller(address newComptroller) external returns (uint);\r\n    function _setReserveFactor(uint newReserveFactorMantissa) external  returns (uint);\r\n    function _reduceReserves(uint reduceAmount) external  returns (uint);\r\n    function _setInterestRateModel(address newInterestRateModel) external  returns (uint);\r\n\r\n\r\n\r\n    \r\n}\r\n\r\ninterface MarketTokenEtherInterface is MarketTokenInterface{\r\n\r\n    function mint() external payable;\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow() external payable;\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n    function liquidateBorrow(address borrower, address marketTokenCollateral) external payable;\r\n\r\n    function _addReserves() external payable returns (uint);\r\n\r\n}\r\n\r\ninterface MarketTokenERC20Interface is MarketTokenInterface{\r\n\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, address marketTokenCollateral) external returns (uint);\r\n    function sweepToken(address token) external ;\r\n\r\n    function _addReserves(uint addAmount) external returns (uint);\r\n\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/PriceOracle.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface PriceOracle {\r\n    /**\r\n      * @notice Get the underlying price of a marketToken asset\r\n      * @param marketToken The marketToken to get the underlying price of\r\n      * @return The underlying asset price mantissa (scaled by 1e(36-decimals)).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getUnderlyingPrice(MarketTokenInterface marketToken) external view returns (uint);\r\n}\r\n\r\n\r\ninterface PriceSource {\r\n    /**\r\n     * @notice Get the price of an token asset.\r\n     * @param token The token asset to get the price of.\r\n     * @return The token asset price in USD as a mantissa (scaled by 1e8).\r\n    */\r\n    function getPrice(address token) external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/JumpRateModelInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface JumpRateModelInterface{\r\n\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external  view returns (uint);\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\r\n    function secondsPerYear() external view returns (uint);\r\n    function multiplierPerSecond() external view returns (uint);\r\n    function baseRatePerSecond() external view returns (uint);\r\n    function jumpMultiplierPerSecond() external view returns (uint);\r\n    function kink() external view returns (uint);\r\n\r\n}\r\n\r\n\r\n// File contracts/view/ProtocolDataView.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ProtocolDataView {\r\n\r\n    string public nativeSymbol;\r\n    string public nativeName;\r\n    address public owner;\r\n\r\n\r\n    constructor(string memory _nativeSymbol, string memory _nativeName) {\r\n    \r\n        nativeSymbol = _nativeSymbol;\r\n        nativeName = _nativeName;\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getAllMarkets(ComptrollerInterface comptroller) public view returns (MarketTokenInterface[] memory){\r\n\r\n        address[] memory _markets = comptroller.getAllMarkets();\r\n        uint count = _markets.length;\r\n        MarketTokenInterface[] memory markets = new MarketTokenInterface[](count);\r\n        for(uint i =0; i < count; i++){\r\n            markets[i] = MarketTokenInterface(_markets[i]);\r\n        }\r\n        return markets;\r\n    }\r\n\r\n    struct Rewards{\r\n        address[] distributioners;\r\n        address[] rewardTokens;\r\n        uint[] supplySpeeds;\r\n        uint[] borrowSpeeds;\r\n    }\r\n\r\n    struct PendingRewards {\r\n        address[] rewardTokens;\r\n        uint[] pendings;\r\n    }\r\n\r\n    struct Paused{\r\n        bool mintPaused;\r\n        bool redeemPaused;\r\n        bool borrowPaused;\r\n        bool repayBorrowPaused;\r\n        bool transferPaused;\r\n        bool seizePaused;\r\n    }\r\n\r\n    struct MarketMetadata {\r\n        address marketAddress;\r\n        uint marketDecimals;\r\n        string marketSymbol;\r\n        string marketName;\r\n        address underlyingAddress;\r\n        uint underlyingDecimals;\r\n        string underlyingSymbol;\r\n        string underlyingName;\r\n        uint exchangeRateCurrent;\r\n        uint supplyRatePerSecond;\r\n        uint borrowRatePerSecond;\r\n        uint reserveFactorMantissa;\r\n        uint collateralFactorMantissa;\r\n        uint totalBorrows;\r\n        uint totalReserves;\r\n        uint totalSupply;\r\n        uint totalCash;\r\n        uint price;\r\n        uint accrualBlockTime;\r\n        uint borrowIndex;\r\n        uint supplyCaps;\r\n        uint borrowCaps;\r\n        Rewards rewards;\r\n        Paused paused;\r\n        bool isListed;\r\n        bool deprecated;\r\n        address interestRateModel;\r\n    }\r\n\r\n    function marketTokenMetadata(ComptrollerInterface comptroller, MarketTokenInterface marketToken) public returns (MarketMetadata memory){\r\n\r\n        (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(marketToken));\r\n\r\n        address underlyingAddress = marketToken.underlying();\r\n        uint underlyingDecimals;\r\n        string memory underlyingSymbol;\r\n        string memory underlyingName;\r\n        if ( underlyingAddress== 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE ) {\r\n            underlyingDecimals = 18;\r\n            underlyingSymbol = nativeSymbol;\r\n            underlyingName = nativeName;\r\n        } else {\r\n            underlyingDecimals = IERC20(underlyingAddress).decimals();\r\n            underlyingSymbol = IERC20(underlyingAddress).symbol();\r\n            underlyingName = IERC20(underlyingAddress).name();\r\n        }\r\n\r\n        Rewards memory rewards = _getRewards(comptroller, address(marketToken));\r\n        \r\n        return MarketMetadata({\r\n            marketAddress: address(marketToken),\r\n            marketDecimals: marketToken.decimals(),\r\n            marketSymbol: marketToken.symbol(),\r\n            marketName: marketToken.name(),\r\n            underlyingAddress: underlyingAddress,\r\n            underlyingDecimals: underlyingDecimals,\r\n            underlyingSymbol: underlyingSymbol,\r\n            underlyingName: underlyingName,\r\n            exchangeRateCurrent: marketToken.exchangeRateCurrent(),\r\n            supplyRatePerSecond: marketToken.supplyRatePerSecond(),\r\n            borrowRatePerSecond: marketToken.borrowRatePerSecond(),\r\n            reserveFactorMantissa: marketToken.reserveFactorMantissa(),\r\n            collateralFactorMantissa: collateralFactorMantissa,\r\n            totalBorrows: marketToken.totalBorrows(),\r\n            totalReserves: marketToken.totalReserves(),\r\n            totalSupply: marketToken.totalSupply(),\r\n            totalCash: marketToken.getCash(),\r\n            price: PriceOracle(comptroller.oracle()).getUnderlyingPrice(marketToken),\r\n            accrualBlockTime: marketToken.accrualBlockTimestamp(),\r\n            borrowIndex: marketToken.borrowIndex(),\r\n            supplyCaps: comptroller.supplyCaps(address(marketToken)),\r\n            borrowCaps: comptroller.borrowCaps(address(marketToken)),\r\n            rewards: rewards,\r\n            paused: Paused({\r\n                mintPaused: comptroller.marketMintPaused(address(marketToken)),\r\n                redeemPaused: comptroller.marketRedeemPaused(address(marketToken)),\r\n                borrowPaused: comptroller.marketBorrowPaused(address(marketToken)),\r\n                repayBorrowPaused: comptroller.marketRepayBorrowPaused(address(marketToken)),\r\n                transferPaused: comptroller.marketTransferPaused(address(marketToken)),\r\n                seizePaused: comptroller.marketSeizePaused(address(marketToken))\r\n            }),\r\n            isListed: isListed,\r\n            deprecated: comptroller.isDeprecated(address(marketToken)),\r\n            interestRateModel: marketToken.interestRateModel()\r\n        });\r\n    }\r\n\r\n    function allMarketTokenMetadata(ComptrollerInterface comptroller, MarketTokenInterface[] memory marketTokens) public returns (MarketMetadata[] memory){\r\n        uint count = marketTokens.length;\r\n        MarketMetadata[] memory res = new MarketMetadata[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            res[i] = marketTokenMetadata(comptroller, marketTokens[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct MarketTokenBalances {\r\n        address marketToken;\r\n        uint balanceOf;\r\n        uint balanceOfUnderlying;\r\n        uint borrowBalanceCurrent;\r\n        uint tokenBalance;\r\n        uint tokenAllowance;\r\n    }\r\n\r\n    function marketTokenBalances(MarketTokenInterface marketToken, address payable account) public returns (MarketTokenBalances memory) {\r\n        uint balanceOf = marketToken.balanceOf(account);\r\n        uint borrowBalanceCurrent = marketToken.borrowBalanceCurrent(account);\r\n        uint balanceOfUnderlying = marketToken.balanceOfUnderlying(account);\r\n        uint tokenBalance;\r\n        uint tokenAllowance;\r\n\r\n        address underlyingAddress = marketToken.underlying();\r\n         if (underlyingAddress== 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE ) {\r\n            tokenBalance = account.balance;\r\n            tokenAllowance = account.balance;\r\n        } else {\r\n            tokenBalance = IERC20(underlyingAddress).balanceOf(account);\r\n            tokenAllowance = IERC20(underlyingAddress).allowance(account, address(marketToken));\r\n        }\r\n\r\n        return MarketTokenBalances({\r\n            marketToken: address(marketToken),\r\n            balanceOf: balanceOf,\r\n            borrowBalanceCurrent: borrowBalanceCurrent,\r\n            balanceOfUnderlying: balanceOfUnderlying,\r\n            tokenBalance: tokenBalance,\r\n            tokenAllowance: tokenAllowance\r\n        });\r\n    }\r\n\r\n    function allMarketTokenBalances(MarketTokenInterface[] memory marketTokens, address payable account) public returns (MarketTokenBalances[] memory){\r\n        uint count = marketTokens.length;\r\n        MarketTokenBalances[] memory res = new MarketTokenBalances[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            res[i] = marketTokenBalances(marketTokens[i],account);\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n    struct InterestRateModel {\r\n        MarketTokenInterface market;\r\n        uint secondsPerYear;\r\n        uint multiplierPerSecond;\r\n        uint baseRatePerSecond;\r\n        uint jumpMultiplierPerSecond;\r\n        uint kink;\r\n        JumpRateModelInterface interestRateModel;\r\n    }\r\n\r\n\r\n    function getInterestRateModel(MarketTokenInterface market) public view returns (InterestRateModel memory){\r\n        JumpRateModelInterface interestRateModel = JumpRateModelInterface(market.interestRateModel());\r\n\r\n        return InterestRateModel({\r\n        market : market,\r\n        secondsPerYear : interestRateModel.secondsPerYear(),\r\n        multiplierPerSecond : interestRateModel.multiplierPerSecond(),\r\n        baseRatePerSecond : interestRateModel.baseRatePerSecond(),\r\n        jumpMultiplierPerSecond : interestRateModel.jumpMultiplierPerSecond(),\r\n        kink : interestRateModel.kink(),\r\n        interestRateModel: interestRateModel\r\n        });\r\n    }\r\n\r\n    function getInterestRateModels(MarketTokenInterface[] memory markets) public view returns (InterestRateModel[] memory){\r\n        uint count = markets.length;\r\n        InterestRateModel[] memory res = new InterestRateModel[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            res[i] = getInterestRateModel(markets[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct AccountLimits {\r\n        MarketTokenInterface[] markets;\r\n        uint liquidity;\r\n        uint shortfall;\r\n    }\r\n\r\n\r\n    function getAccountLimits(ComptrollerInterface comptroller, address payable account) public view returns (AccountLimits memory) {\r\n\r\n        (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\r\n        require(errorCode == 0);\r\n\r\n        address[] memory assetsIn = comptroller.getAssetsIn(account);\r\n        MarketTokenInterface[] memory markets = new MarketTokenInterface[](assetsIn.length);\r\n        for(uint i = 0; i < assetsIn.length; i++){\r\n            markets[i] = MarketTokenInterface(assetsIn[i]);\r\n        }\r\n\r\n        return AccountLimits({\r\n        markets : markets,\r\n        liquidity : liquidity,\r\n        shortfall : shortfall\r\n        });\r\n    }\r\n    \r\n\r\n    function accountAllMarkets(ComptrollerInterface comptroller, address payable account) public view returns(MarketTokenInterface[] memory){\r\n        MarketTokenInterface[] memory markets = getAllMarkets(comptroller);\r\n\r\n        MarketTokenInterface[] memory _markets = new MarketTokenInterface[](markets.length);\r\n        uint count = 0;\r\n        for(uint i = 0; i < markets.length; i++){\r\n            MarketTokenInterface market = markets[i];\r\n            (,uint TokenBalance, uint borrowBalance,) = market.getAccountSnapshot(account);\r\n            if(TokenBalance > 0 || borrowBalance > 0){\r\n               _markets[count] = market;\r\n               count = count + 1;\r\n            }\r\n        }\r\n\r\n        MarketTokenInterface[] memory accountMarkets = new MarketTokenInterface[](count);\r\n        for(uint i = 0; i < count; i++){\r\n            accountMarkets[i] = _markets[i];\r\n        }\r\n        return accountMarkets;\r\n    }\r\n\r\n\r\n    function allMarketInfo(ComptrollerInterface comptroller) external returns ( MarketMetadata[] memory, InterestRateModel[] memory){\r\n\r\n        MarketTokenInterface[] memory markets = getAllMarkets(comptroller);\r\n        MarketMetadata[] memory metaData = allMarketTokenMetadata(comptroller, markets);\r\n        InterestRateModel[] memory rateModels = getInterestRateModels(markets);\r\n\r\n        return (metaData, rateModels);\r\n    }\r\n\r\n\r\n    function accountAssetsInMarketInfo(ComptrollerInterface comptroller, address payable account) external returns (AccountLimits memory, MarketTokenBalances[] memory, MarketMetadata[] memory){\r\n\r\n        AccountLimits memory accountLimits = getAccountLimits(comptroller,account);\r\n        MarketMetadata[] memory metaData = allMarketTokenMetadata(comptroller, accountLimits.markets);\r\n        MarketTokenBalances[] memory balances = allMarketTokenBalances(accountLimits.markets, account);\r\n        \r\n        return (accountLimits, balances, metaData);\r\n    }\r\n\r\n    function accountAllMarketInfo(ComptrollerInterface comptroller, address payable account) external returns (AccountLimits memory, MarketTokenBalances[] memory, MarketMetadata[] memory){\r\n        \r\n        MarketTokenInterface[] memory accountMarkets = accountAllMarkets(comptroller,account);\r\n    \r\n        AccountLimits memory accountLimits = getAccountLimits(comptroller,account);\r\n        MarketTokenBalances[] memory balances = allMarketTokenBalances(accountMarkets, account);\r\n        MarketMetadata[] memory metaData = allMarketTokenMetadata(comptroller,accountMarkets);\r\n\r\n        return (accountLimits, balances, metaData);\r\n    }\r\n\r\n\r\n    function pendingReward(ComptrollerInterface comptroller, address account) external returns (PendingRewards memory pendingRewards){\r\n\r\n        address distributioner = comptroller.distributioner();\r\n\r\n        if(distributioner == address(0)){\r\n            return pendingRewards;\r\n        }\r\n\r\n        {\r\n            (bool success, bytes memory returndata) = distributioner.staticcall(abi.encodeWithSignature(\"isDistributionerManager()\"));\r\n            if(success){\r\n                bool isDistributionerManager = abi.decode(returndata,(bool));\r\n                if(isDistributionerManager){\r\n                    address[] memory distributioners = DistributionerManagerInterface(distributioner).getDistributioners();\r\n                    pendingRewards = _getPendingReward(distributioners, account);\r\n                }\r\n                return pendingRewards;\r\n            }\r\n        }\r\n\r\n        {\r\n            (bool success, bytes memory returndata) = distributioner.staticcall(abi.encodeWithSignature(\"isDistributioner()\"));\r\n            if(success){\r\n                bool isDistributioner = abi.decode(returndata,(bool));\r\n                if(isDistributioner){\r\n                    address[] memory distributioners = new address[](1);\r\n                    distributioners[0] = distributioner;\r\n                    pendingRewards = _getPendingReward(distributioners, account);\r\n                }\r\n                return pendingRewards;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getRewards(ComptrollerInterface comptroller, address marketToken) internal view returns(Rewards memory rewards) {\r\n\r\n        address distributioner = comptroller.distributioner();\r\n\r\n        if(distributioner == address(0)){\r\n            return rewards;\r\n        }\r\n\r\n        {\r\n            (bool success, bytes memory returndata) = distributioner.staticcall(abi.encodeWithSignature(\"isDistributionerManager()\"));\r\n            if(success){\r\n                bool isDistributionerManager = abi.decode(returndata,(bool));\r\n                if(isDistributionerManager){\r\n                    address[] memory distributioners = DistributionerManagerInterface(distributioner).getDistributioners();\r\n                    rewards = _getDistributionerInfo(distributioners, marketToken);\r\n                }\r\n                return rewards;\r\n            }\r\n        }\r\n\r\n        {\r\n            (bool success, bytes memory returndata) = distributioner.staticcall(abi.encodeWithSignature(\"isDistributioner()\"));\r\n            if(success){\r\n                bool isDistributioner = abi.decode(returndata,(bool));\r\n                if(isDistributioner){\r\n                    address[] memory distributioners = new address[](1);\r\n                    distributioners[0] = distributioner;\r\n                    rewards = _getDistributionerInfo(distributioners, marketToken);\r\n                }\r\n                return rewards;\r\n            }\r\n        }\r\n\r\n    \r\n    }\r\n\r\n    function _getDistributionerInfo(address[] memory distributioners, address marketToken) internal view returns(Rewards memory){\r\n\r\n        address[] memory rewardTokens = new address[](distributioners.length);\r\n        uint[] memory supplySpeeds = new uint[](distributioners.length);\r\n        uint[] memory borrowSpeeds = new uint[](distributioners.length);\r\n\r\n        for(uint i = 0; i < distributioners.length; i++){\r\n            try DistributionerInterface(distributioners[i]).rewardToken() returns(address _rewardToken){\r\n                rewardTokens[i] = _rewardToken;\r\n            }catch {\r\n                rewardTokens[i] = address(0);\r\n            }\r\n\r\n            try DistributionerInterface(distributioners[i]).rewardSupplySpeeds(marketToken) returns(uint _supplySpeed){\r\n                supplySpeeds[i] = _supplySpeed;\r\n            }catch {\r\n                supplySpeeds[i] = 0;\r\n            }\r\n\r\n            try DistributionerInterface(distributioners[i]).rewardBorrowSpeeds(marketToken) returns(uint _borrowSpeed){\r\n                borrowSpeeds[i] = _borrowSpeed;\r\n            }catch {\r\n                borrowSpeeds[i] = 0;\r\n            }\r\n        }\r\n        \r\n        return Rewards({\r\n            distributioners: distributioners,\r\n            rewardTokens: rewardTokens,\r\n            supplySpeeds: supplySpeeds,\r\n            borrowSpeeds: borrowSpeeds\r\n        });\r\n\r\n    }\r\n\r\n    function _getPendingReward(address[] memory distributioners, address account) internal returns(PendingRewards memory){\r\n\r\n        address[] memory rewardTokens = new address[](distributioners.length);\r\n        uint[] memory pendings = new uint[](distributioners.length);\r\n\r\n        for(uint i = 0; i < distributioners.length; i++){\r\n\r\n           DistributionerInterface distributioner = DistributionerInterface(distributioners[i]);\r\n           address _rewardToken = distributioner.rewardToken();\r\n\r\n            if ( _rewardToken == address(0)) {\r\n               rewardTokens[i] = address(0);\r\n               pendings[i] = 0;\r\n               continue;\r\n            }\r\n\r\n            IERC20 rewardToken = IERC20(_rewardToken); \r\n            uint balance = rewardToken.balanceOf(account);\r\n            distributioner.claimRewardToken(account);\r\n            uint newBalance = rewardToken.balanceOf(account);\r\n            uint accrued = distributioner.rewardAccrued(account);\r\n            uint total = accrued + newBalance;\r\n            uint allocated = total - balance;\r\n\r\n            rewardTokens[i] = _rewardToken;\r\n            pendings[i] = allocated;\r\n        }\r\n\r\n        return PendingRewards({\r\n            rewardTokens: rewardTokens,\r\n            pendings: pendings\r\n        });\r\n\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nativeSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nativeName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountAllMarketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolDataView.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolDataView.MarketTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCaps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"distributioners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ProtocolDataView.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"mintPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repayBorrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"seizePaused\",\"type\":\"bool\"}],\"internalType\":\"struct ProtocolDataView.Paused\",\"name\":\"paused\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.MarketMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountAllMarkets\",\"outputs\":[{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountAssetsInMarketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolDataView.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolDataView.MarketTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCaps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"distributioners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ProtocolDataView.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"mintPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repayBorrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"seizePaused\",\"type\":\"bool\"}],\"internalType\":\"struct ProtocolDataView.Paused\",\"name\":\"paused\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.MarketMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"allMarketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCaps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"distributioners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ProtocolDataView.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"mintPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repayBorrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"seizePaused\",\"type\":\"bool\"}],\"internalType\":\"struct ProtocolDataView.Paused\",\"name\":\"paused\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.MarketMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondsPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"},{\"internalType\":\"contract JumpRateModelInterface\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.InterestRateModel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"marketTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allMarketTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolDataView.MarketTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"marketTokens\",\"type\":\"address[]\"}],\"name\":\"allMarketTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCaps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"distributioners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ProtocolDataView.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"mintPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repayBorrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"seizePaused\",\"type\":\"bool\"}],\"internalType\":\"struct ProtocolDataView.Paused\",\"name\":\"paused\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.MarketMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolDataView.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getInterestRateModel\",\"outputs\":[{\"components\":[{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondsPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"},{\"internalType\":\"contract JumpRateModelInterface\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.InterestRateModel\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketTokenInterface[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"getInterestRateModels\",\"outputs\":[{\"components\":[{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondsPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"},{\"internalType\":\"contract JumpRateModelInterface\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.InterestRateModel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"marketTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolDataView.MarketTokenBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"marketTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCaps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"distributioners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ProtocolDataView.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"mintPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repayBorrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"seizePaused\",\"type\":\"bool\"}],\"internalType\":\"struct ProtocolDataView.Paused\",\"name\":\"paused\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolDataView.MarketMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendings\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ProtocolDataView.PendingRewards\",\"name\":\"pendingRewards\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProtocolDataView","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000345544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d7d151f1c66ce3e4aa341faf3d35481b6cae9a3d40216ef9cc7a7dedce91dbe1"}]}