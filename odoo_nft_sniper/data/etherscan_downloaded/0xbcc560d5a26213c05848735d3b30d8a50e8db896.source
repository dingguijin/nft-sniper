{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\n\r\ninterface ILightERC721 {\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n}\r\n\r\ncontract AirdropHelper {\r\n  ILightERC721 public llamascape = ILightERC721(0xE5C7D9A18df4fDc12DB723761A862845612917bA);\r\n  address public llama = 0xe8d939F1a9CC4e85E09AFf3d60d137a1Bea17b21;\r\n  address public admin = 0x000000003604223ecc88b0205fc02efBe35F437f;\r\n\r\n  mapping(address => uint[]) public wl;\r\n\r\n  function addToWhitelist(address _addr,  uint _tokenId) internal {\r\n    wl[_addr].push(_tokenId);\r\n  }\r\n\r\n  modifier onlyLlama {\r\n    require(msg.sender == llama || msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  function resetWhitelistForUser(address _addr) public onlyLlama {\r\n    wl[_addr] = new uint[](0);\r\n  }\r\n\r\n  function uploadWhitelist(address[] calldata addresses, uint[] calldata tokenIds) public onlyLlama {\r\n    for (uint i = 0; i < addresses.length; i++) {\r\n      addToWhitelist(addresses[i], tokenIds[i]);\r\n    }\r\n  }\r\n\r\n  function mint() public {\r\n    uint[] storage ids = wl[msg.sender];\r\n    for (uint i = 0; i < ids.length; i++) {\r\n      llamascape.transferFrom(llama, msg.sender, ids[i]);\r\n    }\r\n  }\r\n\r\n  function isWhitelisted(address user) public view returns (bool){\r\n    // If llama doesn't own the token anymore, it has already been transferred\r\n    return wl[user].length > 0 && llamascape.ownerOf(wl[user][0]) == llama;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"llama\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"llamascape\",\"outputs\":[{\"internalType\":\"contract ILightERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"resetWhitelistForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"uploadWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AirdropHelper","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3eaf10c3d682df05599246b6199e84c6ed5ab3627821120688ce49494aa23944"}]}