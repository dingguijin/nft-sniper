{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libraries/IterableBalances.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n/// @dev Models a address -> uint mapping where it is possible to iterate over all keys.\r\nlibrary IterableBalances {\r\n    struct iterableBalances {\r\n        mapping(address => Balances) balances;\r\n        KeyFlag[] keys;\r\n        uint256 size;\r\n    }\r\n\r\n    struct Balances {\r\n        uint256 keyIndex;\r\n        uint256 balance;\r\n        uint256 locked;\r\n    }\r\n    struct KeyFlag {\r\n        address key;\r\n        bool deleted;\r\n    }\r\n\r\n    function insert(\r\n        iterableBalances storage self,\r\n        address key,\r\n        uint256 balance\r\n    ) public {\r\n        uint256 keyIndex = self.balances[key].keyIndex;\r\n        self.balances[key].balance = balance;\r\n\r\n        if (keyIndex == 0) {\r\n            keyIndex = self.keys.length;\r\n            self.keys.push();\r\n            self.balances[key].keyIndex = keyIndex + 1;\r\n            self.keys[keyIndex].key = key;\r\n            self.size++;\r\n        }\r\n    }\r\n\r\n    function remove(iterableBalances storage self, address key) public {\r\n        uint256 keyIndex = self.balances[key].keyIndex;\r\n\r\n        require(\r\n            keyIndex != 0,\r\n            \"Cannot remove balance : key is not in balances\"\r\n        );\r\n\r\n        delete self.balances[key];\r\n        self.keys[keyIndex - 1].deleted = true;\r\n        self.size--;\r\n    }\r\n\r\n    function contains(iterableBalances storage self, address key)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return self.balances[key].keyIndex > 0;\r\n    }\r\n\r\n    function iterate_start(iterableBalances storage self)\r\n        public\r\n        view\r\n        returns (uint256 keyIndex)\r\n    {\r\n        return iterate_next(self, uint256(-1));\r\n    }\r\n\r\n    function iterate_valid(iterableBalances storage self, uint256 keyIndex)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return keyIndex < self.keys.length;\r\n    }\r\n\r\n    function iterate_next(iterableBalances storage self, uint256 keyIndex)\r\n        public\r\n        view\r\n        returns (uint256 r_keyIndex)\r\n    {\r\n        keyIndex++;\r\n\r\n        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted) {\r\n            keyIndex++;\r\n        }\r\n\r\n        return keyIndex;\r\n    }\r\n\r\n    function iterate_get(iterableBalances storage self, uint256 keyIndex)\r\n        public\r\n        view\r\n        returns (\r\n            address key,\r\n            uint256 balance,\r\n            uint256 locked\r\n        )\r\n    {\r\n        key = self.keys[keyIndex].key;\r\n        balance = self.balances[key].balance;\r\n        locked = self.balances[key].locked;\r\n    }\r\n\r\n    event Dummy(); // Needed otherwise typechain has no output\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SecurityTokenBalancesLibrary.sol\r\n\r\npragma solidity 0.6.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/// @dev Models a address -> uint mapping where it is possible to iterate over all keys.\r\nlibrary SecurityTokenBalancesLibrary {\r\n    using IterableBalances for IterableBalances.iterableBalances;\r\n    using SafeMath for uint256;\r\n\r\n    struct SecurityTokenBalances {\r\n        address issuer;\r\n        IterableBalances.iterableBalances iterableBalances;\r\n    }\r\n\r\n    struct Balance {\r\n        address _address;\r\n        uint256 _balance;\r\n        uint256 _locked;\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); // Only for erc20 explorer\r\n\r\n    function setIssuer(SecurityTokenBalances storage self, address key) public {\r\n        self.issuer = key;\r\n    }\r\n\r\n    function mint(\r\n        SecurityTokenBalances storage self,\r\n        address key,\r\n        uint256 balance\r\n    ) public {\r\n        require(key == self.issuer, \"Only issuer balance can be minted\");\r\n        self.iterableBalances.insert(key, balance);\r\n    }\r\n\r\n    function lock(\r\n        SecurityTokenBalances storage self,\r\n        address key,\r\n        uint256 valueToLock\r\n    ) public {\r\n        require(\r\n            self.iterableBalances.balances[key].balance -\r\n                self.iterableBalances.balances[key].locked >=\r\n                valueToLock,\r\n            \"Can not lock value : insufficient disposable balance\"\r\n        );\r\n\r\n        self.iterableBalances.balances[key].locked += valueToLock;\r\n    }\r\n\r\n    function unlock(\r\n        SecurityTokenBalances storage self,\r\n        address key,\r\n        uint256 valueToUnlock\r\n    ) public {\r\n        require(\r\n            self.iterableBalances.balances[key].balance >= valueToUnlock,\r\n            \"Can not unlock value : insufficient balance\"\r\n        );\r\n        require(\r\n            self.iterableBalances.balances[key].locked >= valueToUnlock,\r\n            \"Can not unlock value : insufficient locked balance\"\r\n        );\r\n\r\n        self.iterableBalances.balances[key].locked -= valueToUnlock;\r\n    }\r\n\r\n    function burn(\r\n        SecurityTokenBalances storage self,\r\n        address _from,\r\n        uint256 _value\r\n    ) public {\r\n        require(\r\n            self.iterableBalances.balances[_from].balance -\r\n                self.iterableBalances.balances[_from].locked >=\r\n                _value,\r\n            \"Can not burn value : insufficient disposable balance\"\r\n        );\r\n\r\n        self.iterableBalances.balances[_from].balance -= _value;\r\n\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n\r\n    function transferLocked(\r\n        SecurityTokenBalances storage self,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external {\r\n        unlock(self, _from, _value);\r\n\r\n        self.iterableBalances.balances[_from].balance -= _value;\r\n\r\n        self.iterableBalances.insert(\r\n            _to,\r\n            self.iterableBalances.balances[_to].balance + _value\r\n        );\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function getBalance(SecurityTokenBalances storage self, address _address)\r\n        external\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return self.iterableBalances.balances[_address].balance;\r\n    }\r\n\r\n    function getFullBalance(\r\n        SecurityTokenBalances storage self,\r\n        address _address\r\n    ) external view returns (Balance memory value) {\r\n        return\r\n            Balance(\r\n                _address,\r\n                self.iterableBalances.balances[_address].balance,\r\n                self.iterableBalances.balances[_address].locked\r\n            );\r\n    }\r\n\r\n    function getFullBalances(SecurityTokenBalances storage self)\r\n        public\r\n        view\r\n        returns (Balance[] memory value)\r\n    {\r\n        address tokenHolder = address(0);\r\n        uint256 balance;\r\n        uint256 locked;\r\n        uint256 balancesSize = self.iterableBalances.size;\r\n        Balance[] memory addressBalanceArray = new Balance[](balancesSize);\r\n        for (\r\n            uint256 index = self.iterableBalances.iterate_start();\r\n            self.iterableBalances.iterate_valid(index);\r\n            index = self.iterableBalances.iterate_next(index)\r\n        ) {\r\n            (tokenHolder, balance, locked) = self.iterableBalances.iterate_get(\r\n                index\r\n            );\r\n            addressBalanceArray[index] = Balance(tokenHolder, balance, locked);\r\n        }\r\n\r\n        return addressBalanceArray;\r\n    }\r\n\r\n    function totalSupply(SecurityTokenBalances storage self)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 total = 0;\r\n        uint256 balance;\r\n        uint256 locked;\r\n\r\n        for (\r\n            uint256 index = self.iterableBalances.iterate_start();\r\n            self.iterableBalances.iterate_valid(index);\r\n            index = self.iterableBalances.iterate_next(index)\r\n        ) {\r\n            (, balance, locked) = self.iterableBalances.iterate_get(index);\r\n\r\n            total += balance + locked;\r\n        }\r\n\r\n        return total;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SecurityTokenBalancesLibrary","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"IterableBalances:8bb0ba3734d5770eb7fbca74a126f479c4a0c4e8","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a29336e6fdacd8387118bb6a11fcbd1fa0911dbab16644cf7141e01e36468ca"}]}