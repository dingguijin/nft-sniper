{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address who) view external returns (uint256);\r\n}\r\ninterface IERC721 {\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external returns (address);\r\n    function ownerOf(uint256 tokenId) external returns (address);\r\n} \r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract BlockdeedStaking is Ownable{\r\n    address private _owner;\r\n\r\n    uint256 public BKDPrice = 1;  //1 BKD = $0.01 (0.01*100)\r\n\r\n    uint256 public stakingPrice = 1000; //$10 = ($10*100)\r\n    uint256 public constant stakingDuration = 300; // 5 minutes        ||     7776000; // 90 days\r\n\r\n    address public TokenContract;\r\n    address public NFTContract;\r\n\r\n    struct Stake{\r\n        address user;\r\n        uint256 tokenId;\r\n        uint256 since;\r\n        uint256 claimeAfter;\r\n        uint256 reward;\r\n        uint256 unstaked;\r\n    }\r\n    Stake[] private stakes;\r\n    mapping(uint256 => uint256) private history;\r\n    \r\n    event NFTStaked(address owner, uint256 tokenId);\r\n    event NFTUnstaked(address owner, uint256 tokenId);\r\n\r\n    mapping(address => Stake[]) private stake_holders;\r\n\r\n    event OwnerChanged(address _to);\r\n\r\n    constructor(address tokenContract,address NftContract) {\r\n        require(tokenContract!= address(0) && NftContract!= address(0),\"This address is not valid\");\r\n        _owner = msg.sender;\r\n\r\n        stakes.push(Stake(msg.sender,99999999,block.timestamp,(block.timestamp + stakingDuration),0,block.timestamp));\r\n        history[99999999]=stakes.length;\r\n        TokenContract=tokenContract;\r\n        NFTContract=NftContract;\r\n    }   \r\n\r\n    /* Staking part*/\r\n    function putOnStake(uint256 tokenId) public {\r\n        require(history[tokenId]==0,\"Exist record...\");\r\n        address owned = IERC721(NFTContract).ownerOf(tokenId);\r\n        require(owned==msg.sender,\"You are not owner of this NFT...\");\r\n        require(IERC721(NFTContract).getApproved(tokenId)==address(this),\"Approve to contract address first...\");\r\n        uint256 reward=(stakingPrice/BKDPrice) * (10 ** 18);\r\n        stakes.push(Stake(msg.sender,tokenId,block.timestamp,(block.timestamp + stakingDuration), reward ,0));\r\n        history[tokenId]=stakes.length-1;\r\n        stake_holders[msg.sender].push(stakes[history[tokenId]]);\r\n        IERC721(NFTContract).transferFrom(msg.sender, address(this), tokenId);\r\n        emit NFTStaked(msg.sender, tokenId);\r\n    }\r\n    function unstake(uint256 tokenId) public {\r\n        require(history[tokenId]>0,\"Not exist.\");\r\n        Stake storage stake = stakes[history[tokenId]];\r\n        require(stake.unstaked==0,\"NFT already unstaked.\");\r\n        require(stake.user==msg.sender,\"You are not owner.\");\r\n        require(stake.claimeAfter<=block.timestamp,\"You cant unstake before 90 days.\");\r\n        require(stake.reward<=IERC20(TokenContract).balanceOf(address(this)),\"ERC20 Token balance is lower.\");\r\n        IERC721(NFTContract).transferFrom(address(this), msg.sender, tokenId);\r\n        IERC20(TokenContract).transfer(msg.sender,stake.reward);\r\n        stake.unstaked=block.timestamp;\r\n        emit NFTUnstaked(msg.sender, tokenId);\r\n        \r\n    }\r\n    function getStakeDataByToken(uint256 tokenId) public view returns (address, uint256, uint256, uint256, uint256, uint256){\r\n        require(history[tokenId]>0,\"Not exist.\");\r\n        Stake storage stake = stakes[history[tokenId]];\r\n        return (stake.user, stake.tokenId, stake.since, stake.claimeAfter, stake.reward, stake.unstaked);\r\n    }\r\n    function getStakeData(address staker) public view returns(Stake[] memory){\r\n        return stake_holders[staker];\r\n    }\r\n    function getTotalStaked() public view returns(uint256){\r\n        return stakes.length-1;\r\n    }\r\n\r\n\r\n    function getTokenBalance() public view returns(uint256){\r\n        return IERC20(TokenContract).balanceOf(address(this));\r\n    }\r\n\r\n\r\n\r\n    //only owner\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner!= address(0),\"This address is not valid\");\r\n        _owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n    \r\n    function withdrawETH() public onlyOwner { \r\n        (bool os, ) = payable(_owner).call{value: address(this).balance}(\"\");\r\n        require(os,\"Tx not success\");\r\n    }\r\n    function withdrawToken() public onlyOwner { \r\n        IERC20(TokenContract).transfer(_owner,getTokenBalance());\r\n    }\r\n\r\n    function changeTokenContract(address tokenContract) public onlyOwner {\r\n        TokenContract = tokenContract;\r\n    }\r\n    \r\n    function changeNFTContract(address NftContract) public onlyOwner {\r\n        NFTContract = NftContract;\r\n    }\r\n\r\n    function setBKDPrice(uint256 _fee) public onlyOwner { \r\n        BKDPrice = _fee; \r\n    }\r\n    function setstakingPrice(uint256 _fee) public onlyOwner { \r\n        stakingPrice = _fee; \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BKDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NftContract\",\"type\":\"address\"}],\"name\":\"changeNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"changeTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstaked\",\"type\":\"uint256\"}],\"internalType\":\"struct BlockdeedStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakeDataByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"putOnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setBKDPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setstakingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BlockdeedStaking","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dff948360f46fd5d0d360f9e562f6d2771c38b810000000000000000000000001ce05a2964b43d5d30a39ddb3b4f7ed5b7424614","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d5a5a562aa5101658117a13208acf63534e2ba8ac516c3fa2065c2b285f1015"}]}