{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2022-07-20\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        uint256 _value;\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n     \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n }\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function removeLiquidityETH(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint amountToken, uint amountETH); \r\n}\r\n\r\nlibrary SignedSafeMath {\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        return a - b;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\nlibrary UniswapV2PriceImpactCalculator {\r\n    function calculateSellPriceImpact(address tokenAddress, address pairAddress, uint256 value) public view returns (uint256) {\r\n        value = value * 998 / 1000;\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n\r\n        (uint256 r0, uint256 r1,) = pair.getReserves();\r\n\r\n        IERC20Metadata token0 = IERC20Metadata(pair.token0());\r\n        IERC20Metadata token1 = IERC20Metadata(pair.token1());\r\n\r\n        if(address(token1) == tokenAddress) {\r\n            IERC20Metadata tokenTemp = token0;\r\n            token0 = token1;\r\n            token1 = tokenTemp;\r\n\r\n            uint256 rTemp = r0;\r\n            r0 = r1;\r\n            r1 = rTemp;\r\n        }\r\n\r\n        uint256 product = r0 * r1;\r\n\r\n        uint256 r0After = r0 + value;\r\n        uint256 r1After = product / r0After;\r\n\r\n        return (10000 - (r1After * 10000 / r1)) * 998 / 1000;\r\n    }\r\n}\r\n\r\nlibrary SafeCast {\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(\r\n            value <= type(uint224).max,\r\n            \"SafeCast: value doesn't fit in 224 bits\"\r\n        );\r\n        return uint224(value);\r\n    }\r\n\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(\r\n            value <= type(uint128).max,\r\n            \"SafeCast: value doesn't fit in 128 bits\"\r\n        );\r\n        return uint128(value);\r\n    }\r\n\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(\r\n            value <= type(uint96).max,\r\n            \"SafeCast: value doesn't fit in 96 bits\"\r\n        );\r\n        return uint96(value);\r\n    }\r\n\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(\r\n            value <= type(uint64).max,\r\n            \"SafeCast: value doesn't fit in 64 bits\"\r\n        );\r\n        return uint64(value);\r\n    }\r\n\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(\r\n            value <= type(uint32).max,\r\n            \"SafeCast: value doesn't fit in 32 bits\"\r\n        );\r\n        return uint32(value);\r\n    }\r\n\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(\r\n            value <= type(uint16).max,\r\n            \"SafeCast: value doesn't fit in 16 bits\"\r\n        );\r\n        return uint16(value);\r\n    }\r\n\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(\r\n            value <= type(uint8).max,\r\n            \"SafeCast: value doesn't fit in 8 bits\"\r\n        );\r\n        return uint8(value);\r\n    }\r\n\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(\r\n            value >= type(int128).min && value <= type(int128).max,\r\n            \"SafeCast: value doesn't fit in 128 bits\"\r\n        );\r\n        return int128(value);\r\n    }\r\n\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(\r\n            value >= type(int64).min && value <= type(int64).max,\r\n            \"SafeCast: value doesn't fit in 64 bits\"\r\n        );\r\n        return int64(value);\r\n    }\r\n\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(\r\n            value >= type(int32).min && value <= type(int32).max,\r\n            \"SafeCast: value doesn't fit in 32 bits\"\r\n        );\r\n        return int32(value);\r\n    }\r\n\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(\r\n            value >= type(int16).min && value <= type(int16).max,\r\n            \"SafeCast: value doesn't fit in 16 bits\"\r\n        );\r\n        return int16(value);\r\n    }\r\n\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(\r\n            value >= type(int8).min && value <= type(int8).max,\r\n            \"SafeCast: value doesn't fit in 8 bits\"\r\n        );\r\n        return int8(value);\r\n    }\r\n\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(\r\n            value <= uint256(type(int256).max),\r\n            \"SafeCast: value doesn't fit in an int256\"\r\n        );\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\ncontract SOCIAL is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Counters for Counters.Counter;\r\n\r\n    string private constant _name = \"Social Bull\";\r\n    string private constant _symbol = \"SOCIAL\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 1e12 * 10**18;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    bool private tradingOpen = false;\r\n    uint256 private launchBlock = 0;\r\n    address private uniswapV2Pair;\r\n\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n    mapping(address => bool) public isExcludeFromFee;\r\n    mapping(address => bool) public isBlacklist;\r\n    mapping(address => bool) public isBot;\r\n    mapping(address => bool) public isExcludeFromMaxWalletAmount;\r\n    mapping(address => bool) public isExcludeFromMaxTxAmount;\r\n\r\n    uint256 public maxWalletAmount;\r\n    uint256 public maxTxAmount;\r\n\r\n    uint256 public baseBuyTax = 7;\r\n    uint256 public baseSellTax = 7;\r\n\r\n    uint256 private autoLP = 15;\r\n    uint256 private devFee = 30;\r\n    uint256 private utilityFee = 55;\r\n\r\n    uint256 public minContractTokensToSwap = 2e9 * 10**18;\r\n\r\n    struct PriceImpactRangeTax {\r\n        uint256 from;\r\n        uint256 to;\r\n        uint256 tax;\r\n    }\r\n\r\n    mapping(address => uint256) public initialBuyTimestamp;\r\n    mapping(uint256 => PriceImpactRangeTax) public priceImpactRangeTaxes;\r\n    uint8 public maxIndexImpactRange;\r\n\r\n    address private devWalletAddress;\r\n    address private utilityWalletAddress;\r\n\r\n    mapping(address => uint256) public lastTransfer;\r\n\r\n    uint256 public pendingTokensForReward;\r\n    uint256 public minRewardTokensToSwap = 10000 * 10**18;\r\n\r\n    uint256 public pendingEthReward;\r\n\r\n\r\n    Counters.Counter private claimedHistoryIds;\r\n\r\n    event BuyFees(address from, address to, uint256 amountTokens);\r\n    event SellFees(address from, address to, uint256 amountTokens);\r\n    event AddLiquidity(uint256 amountTokens, uint256 amountEth);\r\n    event SwapTokensForEth(uint256 sentTokens, uint256 receivedEth);\r\n    event SwapEthForTokens(uint256 sentEth, uint256 receivedTokens);\r\n    event DistributeFees(uint256 devEth, uint256 remarketingEth);\r\n\r\n    event SendUtilityDividends(uint256 amount);\r\n\r\n    constructor(\r\n        address _devWalletAddress,\r\n        address _utilityWalletAddress\r\n    ) ERC20(_name, _symbol) {\r\n        devWalletAddress = _devWalletAddress;\r\n        utilityWalletAddress = _utilityWalletAddress;\r\n\r\n        maxTxAmount = (_tTotal * 5) / 10000; // 0.05% maxTransactionAmount (initial limit)\r\n        maxWalletAmount = (_tTotal * 5) / 10000; // 0.05% maxWalletAmount (initial limit)\r\n\r\n        isExcludeFromFee[owner()] = true;\r\n        isExcludeFromFee[address(this)] = true;\r\n        isExcludeFromFee[devWalletAddress] = true;\r\n        isExcludeFromFee[utilityWalletAddress] = true;\r\n        isExcludeFromMaxWalletAmount[owner()] = true;\r\n        isExcludeFromMaxWalletAmount[address(this)] = true;\r\n        isExcludeFromMaxWalletAmount[address(uniswapV2Router)] = true;\r\n        isExcludeFromMaxWalletAmount[devWalletAddress] = true;\r\n        isExcludeFromMaxWalletAmount[utilityWalletAddress] = true;\r\n        isExcludeFromMaxTxAmount[owner()] = true;\r\n        isExcludeFromMaxTxAmount[address(this)] = true;\r\n        isExcludeFromMaxTxAmount[address(uniswapV2Router)] = true;\r\n        isExcludeFromMaxTxAmount[devWalletAddress] = true;\r\n        isExcludeFromMaxTxAmount[utilityWalletAddress] = true;\r\n        priceImpactRangeTaxes[1].from = 0;\r\n        priceImpactRangeTaxes[1].to = 199;\r\n        priceImpactRangeTaxes[1].tax = 0;\r\n        priceImpactRangeTaxes[2].from = 200;\r\n        priceImpactRangeTaxes[2].to = 5000;\r\n        priceImpactRangeTaxes[2].tax = 13;\r\n\r\n        maxIndexImpactRange = 2;\r\n\r\n        _mint(owner(), _tTotal);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to recover any ETH sent to Contract by Mistake.\r\n    */\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{ value: address(this).balance }(\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Function to recover any ERC20 Tokens sent to Contract by Mistake.\r\n    */\r\n    function recoverAnyERC20TokensFromContract(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"SOCIAL: Trading is already open\");\r\n        uint256 _launchTime;\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n        isExcludeFromMaxWalletAmount[address(uniswapV2Pair)] = true;\r\n        isExcludeFromMaxTxAmount[address(uniswapV2Pair)] = true;\r\n\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n\r\n        addLiquidity(balanceOf(address(this)), address(this).balance);\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n\r\n        tradingOpen = true;\r\n        _launchTime = block.timestamp;\r\n        launchBlock = block.number;\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        uint256 totalTokens = balanceOf(address(this)).sub(\r\n            pendingTokensForReward\r\n        );\r\n\r\n        swapTokensForEth(totalTokens);\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        uint256 totalEth = address(this).balance.sub(pendingEthReward);\r\n\r\n        uint256 devFeesToSend = totalEth.mul(devFee).div(\r\n            uint256(100).sub(autoLP)\r\n        );\r\n        uint256 utilityFeesToSend = totalEth.mul(utilityFee).div(\r\n            uint256(100).sub(autoLP)\r\n        );\r\n        uint256 remainingEthForFees = totalEth.sub(devFeesToSend).sub(\r\n            utilityFeesToSend);\r\n        devFeesToSend = devFeesToSend.add(remainingEthForFees);\r\n\r\n        sendEthToWallets(devFeesToSend, utilityFeesToSend);\r\n    }\r\n\r\n    function getPriceImpactTax(address _ad, uint256 _amount) public view returns (uint256) {\r\n        uint256 tax = baseSellTax;\r\n\r\n        uint256 priceImpact = UniswapV2PriceImpactCalculator.calculateSellPriceImpact(address(_ad), uniswapV2Pair, _amount);\r\n\r\n        for (uint8 x =1; x <= maxIndexImpactRange; x++) {\r\n            if (\r\n                (priceImpact >= priceImpactRangeTaxes[x].from &&\r\n                    priceImpact <= priceImpactRangeTaxes[x].to)\r\n            ) {\r\n                tax = priceImpactRangeTaxes[x].tax;\r\n                return tax;\r\n            }\r\n        }\r\n        return tax;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal virtual override {\r\n        require(!isBot[_from] && !isBot[_to]);\r\n        require(!isBlacklist[_from] && !isBlacklist[_to]);\r\n\r\n        uint256 transferAmount = _amount;\r\n        if (\r\n            tradingOpen &&\r\n            (automatedMarketMakerPairs[_from] ||\r\n                automatedMarketMakerPairs[_to]) &&\r\n            !isExcludeFromFee[_from] &&\r\n            !isExcludeFromFee[_to]\r\n        ) {\r\n            if(!isExcludeFromMaxTxAmount[_from] && !isExcludeFromMaxTxAmount[_to]) {\r\n                require(_amount <= maxTxAmount, \"Transfer amount exceeds the max transaction amount\");\r\n            }\r\n             \r\n            transferAmount = takeFees(_from, _to, _amount);\r\n        }\r\n\r\n        if (initialBuyTimestamp[_to] == 0) {\r\n            initialBuyTimestamp[_to] = block.timestamp;\r\n        }\r\n\r\n        if (!automatedMarketMakerPairs[_to] && !isExcludeFromMaxWalletAmount[_to]) {\r\n            require(balanceOf(_to) + transferAmount <= maxWalletAmount,\r\n                \"SOCIAL: Wallet balance limit reached\"\r\n            );\r\n        }\r\n\r\n        super._transfer(_from, _to, transferAmount);\r\n\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address _pair, bool _value) private {\r\n        require(\r\n            automatedMarketMakerPairs[_pair] != _value,\r\n            \"SOCIAL: Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n    }\r\n\r\n    function setBlacklist(address _address, bool _isBlaklist)\r\n        external onlyOwner {\r\n        isBlacklist[_address] = _isBlaklist;\r\n    }\r\n\r\n\r\n    function setExcludeFromFee(address _address, bool _isExludeFromFee)\r\n        external onlyOwner {\r\n        isExcludeFromFee[_address] = _isExludeFromFee;\r\n    }\r\n\r\n    function setExcludeFromMaxWalletAmount(address _address, bool _isExludeFromMaxWalletAmount)\r\n        external onlyOwner {\r\n        isExcludeFromMaxWalletAmount[_address] = _isExludeFromMaxWalletAmount;\r\n    }\r\n\r\n    function setExcludeFromMaxTxAmount(address _address, bool _isExludeFromMaxTxAmount)\r\n        external onlyOwner {\r\n        isExcludeFromMaxTxAmount[_address] = _isExludeFromMaxTxAmount;\r\n    }\r\n\r\n    function setMaxWallet(uint256 newMaxWallet) external onlyOwner {\r\n        require(newMaxWallet >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set maxWallet lower than 0.1%\");\r\n        maxWalletAmount = newMaxWallet * (10**18);\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 newMaxTxAmount) external onlyOwner {\r\n        require(newMaxTxAmount >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set maxWallet lower than 0.1%\");\r\n        maxTxAmount = newMaxTxAmount * (10**18);\r\n    }\r\n\r\n    function setTaxes(\r\n        uint256 _baseBuyTax,\r\n        uint256 _baseSellTax,\r\n        uint256 _autoLP,\r\n        uint256 _devFee,\r\n        uint256 _utilityFee\r\n    ) external onlyOwner {\r\n        require(_baseBuyTax <= 10 && _baseSellTax <= 10 && _devFee >= 15);\r\n\r\n        baseBuyTax = _baseBuyTax;\r\n        baseSellTax = _baseSellTax;\r\n        autoLP = _autoLP;\r\n        devFee = _devFee;\r\n        utilityFee = _utilityFee;\r\n    }\r\n\r\n    function setMinContractTokensToSwap(uint256 _numToken) public onlyOwner {\r\n        minContractTokensToSwap = _numToken;\r\n    }\r\n\r\n    function setMinRewardTokensToSwap(uint256 _numToken) public onlyOwner {\r\n        minRewardTokensToSwap = _numToken;\r\n    }\r\n\r\n    function setPriceImpactRangeTax(\r\n        uint8 _index,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _tax\r\n    ) external onlyOwner {\r\n        priceImpactRangeTaxes[_index].from = _from;\r\n        priceImpactRangeTaxes[_index].to = _to;\r\n        priceImpactRangeTaxes[_index].tax = _tax;\r\n    }\r\n\r\n    function setMaxIndexImpactRange(uint8 _maxIndex) external onlyOwner {\r\n        maxIndexImpactRange = _maxIndex;\r\n    }\r\n\r\n    function setBots(address[] calldata _bots) public onlyOwner {\r\n        for (uint256 i = 0; i < _bots.length; i++) {\r\n            if (\r\n                _bots[i] != uniswapV2Pair &&\r\n                _bots[i] != address(uniswapV2Router)\r\n            ) {\r\n                isBot[_bots[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setWalletAddress(address _utilityWalletAddress) external onlyOwner {\r\n        utilityWalletAddress = _utilityWalletAddress;\r\n    }\r\n\r\n    function takeFees(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) private returns (uint256) {\r\n        uint256 fees;\r\n        uint256 remainingAmount;\r\n        require(\r\n            automatedMarketMakerPairs[_from] || automatedMarketMakerPairs[_to],\r\n            \"SOCIAL: No market makers found\"\r\n        );\r\n\r\n        if (automatedMarketMakerPairs[_from]) {\r\n            uint256 totalBuyTax;\r\n            if (block.number == launchBlock) {\r\n                totalBuyTax = 90;\r\n            } else if (block.number == launchBlock + 1) {\r\n                totalBuyTax = 70;\r\n            } else if (block.number == launchBlock + 2) {\r\n                totalBuyTax = 40;\r\n            } else if (block.number == launchBlock + 3) {\r\n                totalBuyTax = 35;\r\n            } else {\r\n                totalBuyTax = baseBuyTax;\r\n            }\r\n\r\n            fees = _amount.mul(totalBuyTax).div(100);\r\n\r\n            remainingAmount = _amount.sub(fees);\r\n\r\n            super._transfer(_from, address(this), fees);\r\n\r\n            emit BuyFees(_from, address(this), fees);\r\n        } else {\r\n            uint256 totalSellTax;\r\n            if (block.number == launchBlock) {\r\n                totalSellTax = 90;\r\n            } else if (block.number == launchBlock + 1) {\r\n                totalSellTax = 35;\r\n            } else if (block.number == launchBlock + 2) {\r\n                totalSellTax = 35;\r\n            } else if (block.number == launchBlock + 3) {\r\n                totalSellTax = 30;\r\n            } else {\r\n                uint256 increaseSellFee = getPriceImpactTax(address(this), _amount);\r\n\r\n                totalSellTax = baseSellTax + increaseSellFee;\r\n\r\n                if(totalSellTax > 30) {\r\n                    totalSellTax = 30;\r\n                }\r\n            }\r\n\r\n            fees = _amount.mul(totalSellTax).div(100);\r\n            uint256 rewardTokens = _amount\r\n                .mul(totalSellTax.sub(baseSellTax))\r\n                .div(100);\r\n            pendingTokensForReward = pendingTokensForReward.add(rewardTokens);\r\n\r\n            remainingAmount = _amount.sub(fees);\r\n\r\n            super._transfer(_from, address(this), fees);\r\n            uint256 tokensToSwap = balanceOf(address(this)).sub(\r\n                pendingTokensForReward);\r\n\r\n            if (tokensToSwap > minContractTokensToSwap) {\r\n                distributeTokensEth(tokensToSwap);\r\n            }\r\n            if (pendingTokensForReward > minRewardTokensToSwap) {\r\n                swapAndSendUtilityDividends(pendingTokensForReward);\r\n            }\r\n\r\n            emit SellFees(_from, address(this), fees);\r\n        }\r\n\r\n        return remainingAmount;\r\n    }\r\n\r\n    function distributeTokensEth(uint256 _tokenAmount) private {\r\n        uint256 tokensForLiquidity = _tokenAmount.mul(autoLP).div(100);\r\n\r\n        uint256 halfLiquidity = tokensForLiquidity.div(2);\r\n        uint256 tokensForSwap = _tokenAmount.sub(halfLiquidity);\r\n\r\n        uint256 totalEth = swapTokensForEth(tokensForSwap);\r\n\r\n        uint256 ethForAddLP = totalEth.mul(autoLP).div(100);\r\n        uint256 devFeesToSend = totalEth.mul(devFee).div(100);\r\n        uint256 utilityFeesToSend = totalEth.mul(utilityFee).div(100);\r\n        uint256 remainingEthForFees = totalEth\r\n            .sub(ethForAddLP)\r\n            .sub(devFeesToSend)\r\n            .sub(utilityFeesToSend);\r\n        devFeesToSend = devFeesToSend.add(remainingEthForFees);\r\n\r\n        sendEthToWallets(devFeesToSend, utilityFeesToSend);\r\n\r\n        if (halfLiquidity > 0 && ethForAddLP > 0) {\r\n            addLiquidity(halfLiquidity, ethForAddLP);\r\n        }\r\n    }\r\n\r\n    function sendEthToWallets(uint256 _devFees, uint256 _utilityFees)\r\n        private\r\n    {\r\n        if (_devFees > 0) {\r\n            payable(devWalletAddress).transfer(_devFees);\r\n        }\r\n        if (_utilityFees > 0) {\r\n            payable(utilityWalletAddress).transfer(_utilityFees);\r\n        }\r\n        emit DistributeFees(_devFees, _utilityFees);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 _tokenAmount) private returns (uint256) {\r\n        uint256 initialEthBalance = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 receivedEth = address(this).balance.sub(initialEthBalance);\r\n\r\n        emit SwapTokensForEth(_tokenAmount, receivedEth);\r\n        return receivedEth;\r\n    }\r\n\r\n    function swapEthForTokens(uint256 _ethAmount, address _to)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 initialTokenBalance = balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: _ethAmount\r\n        }(0, path, _to, block.timestamp);\r\n\r\n        uint256 receivedTokens = balanceOf(address(this)).sub(\r\n            initialTokenBalance\r\n        );\r\n\r\n        emit SwapEthForTokens(_ethAmount, receivedTokens);\r\n        return receivedTokens;\r\n    }\r\n\r\n    function addLiquidity(uint256 _tokenAmount, uint256 _ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: _ethAmount}(\r\n            address(this),\r\n            _tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        emit AddLiquidity(_tokenAmount, _ethAmount);\r\n    }\r\n\r\n    function swapAndSendUtilityDividends(uint256 _tokenAmount) private {\r\n        uint256 dividends = swapTokensForEth(_tokenAmount);\r\n\r\n        pendingTokensForReward = pendingTokensForReward.sub(_tokenAmount);\r\n        uint256 totalEthToSend = dividends.add(pendingEthReward);\r\n\r\n        (bool success, ) = address(utilityWalletAddress).call{value: totalEthToSend}(\r\n            \"\"\r\n        );\r\n\r\n        if (success) {\r\n            emit SendUtilityDividends(dividends);\r\n        } else {\r\n            pendingEthReward = pendingEthReward.add(dividends);\r\n        }\r\n    }\r\n\r\n    function availableContractTokenBalance() public view returns (uint256) {\r\n        return balanceOf(address(this)).sub(pendingTokensForReward);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilityWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"BuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remarketingEth\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"SellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendUtilityDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedTokens\",\"type\":\"uint256\"}],\"name\":\"SwapEthForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedEth\",\"type\":\"uint256\"}],\"name\":\"SwapTokensForEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceImpactTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialBuyTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromMaxTxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromMaxWalletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIndexImpactRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minContractTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRewardTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEthReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTokensForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceImpactRangeTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAnyERC20TokensFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlaklist\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bots\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExludeFromFee\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExludeFromMaxTxAmount\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExludeFromMaxWalletAmount\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxIndex\",\"type\":\"uint8\"}],\"name\":\"setMaxIndexImpactRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numToken\",\"type\":\"uint256\"}],\"name\":\"setMinContractTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numToken\",\"type\":\"uint256\"}],\"name\":\"setMinRewardTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setPriceImpactRangeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_utilityFee\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utilityWalletAddress\",\"type\":\"address\"}],\"name\":\"setWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SOCIAL","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000018e474ee31ed4ece9466eada38282e1c75b88dc2000000000000000000000000196ea38f190b21f113dd2528decd593e4b67d1de","EVMVersion":"Default","Library":"UniswapV2PriceImpactCalculator:723004300852b7047093a5e4e7a43ec854418cdd","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e080e8218ef86770f43121d226e72b969e557f21524ce1f2f7241057b139838f"}]}