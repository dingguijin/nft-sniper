{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nlibrary OperatorManagerLibrary {\r\n    struct OperatorAuthorization {\r\n        uint256 operatorRole;\r\n    }\r\n\r\n    struct OperatorManager {\r\n        mapping(address => OperatorAuthorization[]) authorizationsByOperator;\r\n    }\r\n\r\n    event NewOperator(address _by, address _operator, uint256 _operatorRole);\r\n    event RevokeOperator(address _by, address _operator, uint256 _operatorRole);\r\n\r\n    function authorizeOperator(\r\n        OperatorManager storage operatorManager,\r\n        uint256 _operatorRole,\r\n        address _operator\r\n    ) external {\r\n        OperatorAuthorization memory operatorAuthorization;\r\n        operatorAuthorization.operatorRole = _operatorRole;\r\n        operatorManager.authorizationsByOperator[_operator].push(\r\n            operatorAuthorization\r\n        );\r\n\r\n        emit NewOperator(msg.sender, _operator, _operatorRole);\r\n    }\r\n\r\n    function isOperatorWithRoleAuthorized(\r\n        OperatorManager storage operatorManager,\r\n        address _operator,\r\n        uint256 _operatorRole\r\n    ) external view returns (bool) {\r\n        OperatorAuthorization[] storage operatorAuthorizations =\r\n            operatorManager.authorizationsByOperator[_operator];\r\n\r\n        for (uint256 i = 0; i < operatorAuthorizations.length; i++) {\r\n            if (operatorAuthorizations[i].operatorRole == _operatorRole) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function revokeOperatorAuthorization(\r\n        OperatorManager storage operatorManager,\r\n        address _operator,\r\n        uint256 _operatorRole\r\n    ) external {\r\n        OperatorAuthorization[] storage operatorAuthorizations =\r\n            operatorManager.authorizationsByOperator[_operator];\r\n\r\n        for (uint256 i = 0; i < operatorAuthorizations.length; i++) {\r\n            if (operatorAuthorizations[i].operatorRole == _operatorRole) {\r\n                delete operatorAuthorizations[i];\r\n                emit RevokeOperator(msg.sender, _operator, _operatorRole);\r\n                return;\r\n            }\r\n        }\r\n\r\n        revert(\"Can not revoke role : target does not have role\");\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorRole\",\"type\":\"uint256\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorRole\",\"type\":\"uint256\"}],\"name\":\"RevokeOperator\",\"type\":\"event\"}]","ContractName":"OperatorManagerLibrary","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f9dc872d98af93ba254cfeeff86edc254faac1c49183b81bc9bc2bb9e8b9fcb8"}]}