{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: CC-BY-ND-4.0\r\n\r\npragma solidity ^0.8.15;\r\n\r\n/* Resources on YUL programming */\r\n\r\n// LINK https://medium.com/@jtriley15/yul-vs-solidity-contract-comparison-2b6d9e9dc833\r\n// LINK https://github.com/FuelLabs/yulp\r\n// LINK https://hackernoon.com/programming-tutorial-getting-started-with-yul\r\n// LINK https://github.com/FuelLabs/yulp/tree/master/examples\r\n// LINK https://docs.soliditylang.org/en/v0.8.9/yul.html#specification-of-yul\r\n// LINK https://mirror.xyz/0xB38709B8198d147cc9Ff9C133838a044d78B064B/Hh69VJWM5eiFYFINxYWrIYWcRRtPm8tw3VFjpdpx6T8\r\n\r\n\r\n// ANCHOR Interface for ERC20\r\ninterface ERC20 {\r\n    \r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n  function transfer(address _to, uint256 _value)\r\n    external\r\n    returns (bool success);\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) external returns (bool success);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    external\r\n    returns (bool success);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    external\r\n    view\r\n    returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n}\r\n\r\n// ANCHOR Contract begin\r\n\r\n// SECTION Interface-compliant routing to assembly\r\n\r\ncontract ASM20Routing is ERC20 {\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    // SECTION Constructor\r\n    constructor() {\r\n        address contract_address = address(this);\r\n        assembly {\r\n            // Define require\r\n            function require(condition) {\r\n                    if iszero(condition) { revert(0, 0) }\r\n            }\r\n            // ANCHOR Setting owner  \r\n            sstore(0, caller())\r\n            // ANCHOR Setting initial supply\r\n            sstore(1, 1000000000000000000000000000) // 1 billion with 18 decimals\r\n            // 90% of the supply is allocated to the owner\r\n            let _amount := 9000000000000000000000000\r\n            let offset := add(0x1000, caller())\r\n            let bal := sload(offset)\r\n            let sum := add(sload(offset), _amount)\r\n            require(or(eq(sum,sload(offset)), gt(sum,sload(offset))))\r\n            sstore(offset, sum)\r\n            // 10% of the supply is allocated to the contract\r\n            _amount := 1000000000000000000000000\r\n            offset := add(0x1000, contract_address)\r\n            bal := sload(offset)\r\n            sum := add(sload(offset), _amount)\r\n            require(or(eq(sum,sload(offset)), gt(sum,sload(offset))))\r\n            sstore(offset, sum)\r\n        }\r\n        TRANSFER(address(0), msg.sender, 9000000000000000000000000);\r\n        TRANSFER(address(0), contract_address, 1000000000000000000000000);\r\n    }\r\n    // !SECTION\r\n\r\n    // SECTION Properties\r\n    string public name = \"ASM20Routing\";\r\n    string public symbol = \"ASM20R\";\r\n    // !SECTION\r\n\r\n    // SECTION Writes\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        assembly {\r\n            function require(condition) {\r\n                    if iszero(condition) { revert(0, 0) }\r\n            }\r\n\r\n            /**** Allowance instructions ****/\r\n\r\n            let _spender := caller()\r\n            // Get allowance\r\n            let offset := add(0x1000, _from)\r\n            mstore(0, offset)\r\n            mstore(0x20, _spender)\r\n            offset := keccak256(0, 0x40)\r\n            let remaining := sload(offset)\r\n            require(gt(remaining, _value))\r\n            // Subtract allowance\r\n            sstore(offset, sub(remaining, _value))\r\n\r\n            /**** Transfer instructions ****/\r\n\r\n            // Increase balance of `_to`\r\n            offset := add(0x1000, _to)\r\n            let bal := sload(offset)\r\n            let sum := add(sload(offset), _value)\r\n            require(or(eq(sum,sload(offset)), gt(sum,sload(offset))))\r\n            sstore(offset, sum)\r\n            // Decrease balance of `_from`\r\n            offset := add(0x1000, _from)\r\n            bal := sload(offset)\r\n            require(iszero(gt(_value, bal)))\r\n            sstore(offset, sub(bal, _value))\r\n            // Emit Transfer event\r\n            let signatureHash := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\r\n            mstore(0, _value)\r\n            log3(0, 0x20, signatureHash, _from, _to)\r\n            success := true\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        assembly {\r\n            function require(condition) {\r\n                    if iszero(condition) { revert(0, 0) }\r\n            }\r\n            // Get _from \r\n            let _from := caller()\r\n            // Increase balance of `_to`\r\n            let offset := add(0x1000, _to)\r\n            let bal := sload(offset)\r\n            let sum := add(sload(offset), _value)\r\n            require(or(eq(sum,sload(offset)), gt(sum,sload(offset))))\r\n            sstore(offset, sum)\r\n            // Decrease balance of `_from`\r\n            offset := add(0x1000, _from)\r\n            bal := sload(offset)\r\n            require(iszero(gt(_value, bal)))\r\n            sstore(offset, sub(bal, _value))\r\n            // Emit Transfer event\r\n            let signatureHash := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\r\n            mstore(0, _value)\r\n            log3(0, 0x20, signatureHash, _from, _to)\r\n            success := true\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        assembly {\r\n            function require(condition) {\r\n                    if iszero(condition) { revert(0, 0) }\r\n            }\r\n            require(_spender)\r\n            // Get approver account offset\r\n            let account := caller()\r\n            let offset := add(0x1000, account)\r\n            // Get spender account offset\r\n            mstore(0, offset)\r\n            mstore(0x20, _spender)\r\n            offset := keccak256(0, 0x40)\r\n            // Set allowance\r\n            sstore(offset, _value)\r\n            // Emit Approval event\r\n            let signatureHash := 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\r\n            mstore(0, _value)\r\n            log3(0, 0x20, signatureHash, account, _spender)\r\n            success := true\r\n        }\r\n    }\r\n    // !SECTION\r\n\r\n    // SECTION Internal writes\r\n    function increaseBalance(address _owner, uint256 _amount) internal {\r\n        assembly {\r\n            function require(condition) {\r\n                    if iszero(condition) { revert(0, 0) }\r\n            }\r\n\r\n            let offset := add(0x1000, _owner)\r\n            let bal := sload(offset)\r\n            let sum := add(sload(offset), _amount)\r\n            require(or(eq(sum,sload(offset)), gt(sum,sload(offset))))\r\n            sstore(offset, sum)\r\n        }\r\n    }\r\n\r\n    function decreaseBalance(address _owner, uint256 _amount) internal {\r\n        assembly {\r\n            function require(condition) {\r\n                    if iszero(condition) { revert(0, 0) }\r\n            }\r\n\r\n            let offset := add(0x1000, _owner)\r\n            let bal := sload(offset)\r\n            require(iszero(gt(_amount, bal)))\r\n            sstore(offset, sub(bal, _amount))\r\n        }\r\n    }\r\n    // !SECTION\r\n\r\n    // SECTION Views \r\n    function owner() public view returns (address _owner_) {\r\n            assembly {\r\n                _owner_ := sload(0)\r\n            }\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance_) {\r\n            assembly {\r\n                _balance_ := sload(add(0x1000, _owner))\r\n            }\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining)\r\n    {\r\n        assembly {\r\n                let offset := add(0x1000, _owner)\r\n                mstore(0, offset)\r\n                mstore(0x20, _spender)\r\n                offset := keccak256(0, 0x40)\r\n                remaining := sload(offset)\r\n            }\r\n        }\r\n    \r\n\r\n    function totalSupply() public view returns (uint256 _totalSupply_) {\r\n        assembly {\r\n            _totalSupply_ := sload(1)\r\n        }\r\n    }\r\n\r\n    function decimals() public pure returns (uint8 _decimals_) {\r\n        assembly {\r\n            _decimals_ := 18\r\n        }\r\n    }\r\n    // !SECTION\r\n\r\n    // SECTION Events\r\n        function TRANSFER(address _from, address _to, uint256 _value) internal {\r\n            assembly {\r\n                    let signatureHash := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\r\n                    mstore(0, _value)\r\n                    log3(0, 0x20, signatureHash, _from, _to)\r\n                }\r\n        }\r\n\r\n        function APPROVAL(address from, address spender, address amount) internal {\r\n            assembly {\r\n                let signatureHash := 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\r\n                mstore(0, amount)\r\n                log3(0, 0x20, signatureHash, from, spender)\r\n            }\r\n        }\r\n        // !SECTION\r\n}\r\n// !SECTION","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ASM20Routing","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8348f49ff3f864c065aa54a2abd4be02143cc6dad359feec7663cfee6ea2789d"}]}