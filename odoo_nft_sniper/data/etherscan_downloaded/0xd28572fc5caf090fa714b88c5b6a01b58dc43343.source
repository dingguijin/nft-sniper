{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.4.2\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/IERC1155.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed account,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC165.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC2981.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\r\n     * @param tokenId - the NFT asset queried for royalty information\r\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\r\n     * @return receiver - address of who should be sent the royalty payment\r\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(\r\n            _initializing ? _isConstructor() : !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {}\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal onlyInitializing {}\r\n\r\n    function __ERC165_init_unchained() internal onlyInitializing {}\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is\r\n    Initializable,\r\n    ContextUpgradeable,\r\n    IAccessControlUpgradeable,\r\n    ERC165Upgradeable\r\n{\r\n    function __AccessControl_init() internal onlyInitializing {}\r\n\r\n    function __AccessControl_init_unchained() internal onlyInitializing {}\r\n\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bytes32)\r\n    {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(\r\n            account == _msgSender(),\r\n            \"AccessControl: can only renounce roles for self\"\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set)\r\n        internal\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol@v4.5.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerableUpgradeable is\r\n    Initializable,\r\n    IAccessControlEnumerableUpgradeable,\r\n    AccessControlUpgradeable\r\n{\r\n    function __AccessControlEnumerable_init() internal onlyInitializing {}\r\n\r\n    function __AccessControlEnumerable_init_unchained()\r\n        internal\r\n        onlyInitializing\r\n    {}\r\n\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet)\r\n        private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId ==\r\n            type(IAccessControlEnumerableUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_grantRole} to track enumerable memberships\r\n     */\r\n    function _grantRole(bytes32 role, address account)\r\n        internal\r\n        virtual\r\n        override\r\n    {\r\n        super._grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_revokeRole} to track enumerable memberships\r\n     */\r\n    function _revokeRole(bytes32 role, address account)\r\n        internal\r\n        virtual\r\n        override\r\n    {\r\n        super._revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File contracts/interfaces/IMarketPlace.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMarketplace {\r\n    /// @notice Type of the tokens that can be listed for sale.\r\n    enum TokenType {\r\n        ERC721,\r\n        ERC1155\r\n    }\r\n\r\n    /**\r\n     *  @notice The two types of listings.\r\n     *          `Direct`: NFTs listed for sale at a fixed price.\r\n     *          `Auction`: NFTs listed for sale in an auction.\r\n     */\r\n    enum ListingType {\r\n        Direct,\r\n        Auction\r\n    }\r\n\r\n    /**\r\n     *  @notice The two types of listings.\r\n     *          `Direct`: NFTs listed for sale at a fixed price.\r\n     *          `Auction`: NFTs listed for sale in an auction.\r\n     */\r\n    enum SaleType {\r\n        Primary,\r\n        Secondary\r\n    }\r\n\r\n    enum AssetType {\r\n        NFT,\r\n        CURRENCY\r\n    }\r\n\r\n    /**\r\n     * @dev For use in `createListing` as a parameter type.\r\n     *\r\n     * @param assetContract         The contract address of the NFT to list for sale.\r\n     * @param tokenId               The tokenId on `assetContract` of the NFT to list for sale.\r\n     *\r\n     * @param quantityToList        The quantity of NFT of ID `tokenId` on the given `assetContract` to list. For\r\n     *                              ERC 721 tokens to list for sale, the contract strictly defaults this to `1`,\r\n     *                              Regardless of the value of `quantityToList` passed.\r\n     *\r\n     * @param currencyToAccept      For direct listings: the currency in which a buyer must pay the listing's fixed price\r\n     *                              to buy the NFT(s). For auctions: the currency in which the bidders must make bids.\r\n     *\r\n     * @param buyoutPrice           For direct listings: interpreted as 'price per token' listed. For auctions: if\r\n     *                              `buyoutPricePerToken` is greater than 0, and a bidder's bid is at least as great as\r\n     *                              `buyoutPricePerToken * quantityToList`, the bidder wins the auction, and the auction\r\n     *                              is closed.\r\n     *\r\n     * @param listingType           The type of listing to create - a direct listing or an auction.\r\n     */\r\n    struct ListingParameters {\r\n        address assetContract;\r\n        uint256 tokenId;\r\n        uint256 quantityToList;\r\n        address currencyToAccept;\r\n        uint256 buyoutPrice;\r\n        ListingType listingType;\r\n        address tokenOwner;\r\n    }\r\n\r\n    /**\r\n     * @notice The information related to a listing; either (1) a direct listing, or (2) an auction listing.\r\n     */\r\n    struct Listing {\r\n        uint256 listingId;\r\n        address tokenOwner;\r\n        address assetContract;\r\n        uint256 tokenId;\r\n        uint256 quantity;\r\n        address currency;\r\n        uint256 buyoutPrice;\r\n        TokenType tokenType;\r\n        ListingType listingType;\r\n        SaleType saleType;\r\n    }\r\n\r\n    /// @dev Emitted when a new listing is created.\r\n    event NewListing(\r\n        uint256 indexed listingId,\r\n        address indexed assetContract,\r\n        uint256 tokenId,\r\n        address indexed lister,\r\n        Listing listing\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a buyer buys from a direct listing, or a lister accepts some\r\n     *      buyer's offer to their direct listing.\r\n     */\r\n    event NewSale(\r\n        uint256 indexed listingId,\r\n        address indexed assetContract,\r\n        uint256 tokenId,\r\n        address indexed lister,\r\n        address buyer,\r\n        uint256 quantityBought,\r\n        uint256 pricePaid\r\n    );\r\n\r\n    event FundsWithdrawn(\r\n        address indexed to,\r\n        address indexed currency,\r\n        uint256 amount\r\n    );\r\n\r\n    event AssetWhitelisted(\r\n        address indexed assetContract,\r\n        AssetType assetType,\r\n        address listedBy,\r\n        bool isWhitelisted\r\n    );\r\n\r\n    /**\r\n     * @notice Lets a token (ERC 721 or ERC 1155) owner list tokens for sale in a direct listing, or an auction.\r\n     * @param _params The parameters that govern the listing to be created.\r\n     * @dev The values of `_params` are passsed to this function in a `ListingParameters` struct, instead of\r\n     *      directly due to Solidity's limit of the no. of local variables that can be used in a function.\r\n     * @dev NFTs to list for sale in an auction are escrowed in Marketplace. For direct listings, the contract\r\n     *      only checks whether the listing's creator owns and has approved Marketplace to transfer the NFTs to list.\r\n     */\r\n    function createListing(ListingParameters memory _params) external;\r\n\r\n    /**\r\n     * @notice Lets someone buy a given quantity of tokens from a direct listing by paying the fixed price.\r\n     *\r\n     * @param _listingId The unique ID of the direct lisitng to buy from.\r\n     *\r\n     * @dev A sale will fail to execute if either:\r\n     *          (1) buyer does not own or has not approved Marketplace to transfer the appropriate\r\n     *              amount of currency (or hasn't sent the appropriate amount of native tokens)\r\n     *\r\n     *          (2) the lister does not own or has removed Markeplace's\r\n     *              approval to transfer the tokens listed for sale.\r\n     */\r\n    function buy(\r\n        uint256 _listingId,\r\n        address _currency,\r\n        uint256 _price,\r\n        uint256 _quantityToBuy,\r\n        bytes32[] memory _proof\r\n    ) external payable;\r\n\r\n    function delegatedBuy(\r\n        uint256 _listingId,\r\n        address _currency,\r\n        uint256 _price,\r\n        uint256 _quantityToBuy,\r\n        address _buyer,\r\n        bytes32[] memory _proof\r\n    ) external payable;\r\n}\r\n\r\n// File contracts/interfaces/IWETH.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File contracts/interfaces/IERC1155Custom.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC1155Custom {\r\n    function maxQuantityToPurchaseLimit()\r\n        external\r\n        view\r\n        returns (uint256 maxQuantityAllowed);\r\n\r\n    struct WhitelistParams {\r\n        bytes32 merkleRoot;\r\n        uint256 endTime; // absolute value in UNIX time, can be used as is for 1155;\r\n        uint256 startTime;\r\n    }\r\n\r\n    struct Collection {\r\n        string title;\r\n        string description;\r\n        string thumbnail;\r\n        string bgImage;\r\n        string bgColor;\r\n        uint256[] tokenIds;\r\n        address owner;\r\n        uint256 createdAt;\r\n        uint256 updatedAt;\r\n        int256 userPurchaseLimit;\r\n        int256 allowedPurchaseLimit;\r\n        uint256 primarySoldCount;\r\n        WhitelistParams[] whitelistParams;\r\n        // mapping(address => uint256) primarySaleUserCount;\r\n    }\r\n\r\n    function getFirstOwner(uint256 _id) external returns (address);\r\n\r\n    function getCollectionData(uint256 _id)\r\n        external\r\n        returns (Collection memory);\r\n\r\n    function getNFTCollectionId(uint256 _id) external returns (uint256);\r\n\r\n    // Different signature for 1155 to update userPurchase and totalAllowedPurchase by quantity\r\n    function updateCollectionAfterPrimarySale(\r\n        address account,\r\n        uint256 _collectionId,\r\n        uint256 _quantity\r\n    ) external returns (bool);\r\n\r\n    function getPrimarySaleUserCount(address account, uint256 _collectionId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File contracts/interfaces/IERC721Custom.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721Custom {\r\n    struct WhitelistParams {\r\n        bytes32 merkleRoot;\r\n        uint256 endTime; // absolute value in UNIX time, can be used as is for 1155;\r\n        uint256 startTime;\r\n    }\r\n\r\n    struct Collection {\r\n        string title;\r\n        string description;\r\n        string thumbnail;\r\n        string bgImage;\r\n        string bgColor;\r\n        uint256[] tokenIds;\r\n        address owner;\r\n        uint256 createdAt;\r\n        uint256 updatedAt;\r\n        int256 userPurchaseLimit;\r\n        int256 allowedPurchaseLimit;\r\n        uint256 primarySoldCount;\r\n        WhitelistParams[] whitelistParams;\r\n        // mapping(address => uint256) primarySaleUserCount;\r\n    }\r\n\r\n    function getFirstOwner(uint256 _id) external returns (address);\r\n\r\n    function getCollectionData(uint256 _id)\r\n        external\r\n        returns (Collection memory);\r\n\r\n    function getNFTCollectionId(uint256 _id) external returns (uint256);\r\n\r\n    function updateCollectionAfterPrimarySale(\r\n        address account,\r\n        uint256 _collectionId\r\n    ) external returns (bool);\r\n\r\n    function getPrimarySaleUserCount(address account, uint256 _collectionId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File contracts/utils/Errors.sol\r\n\r\npragma solidity ^0.8.2;\r\n\r\n// Library\r\n\r\n/**\r\n * @dev Abstarct for managing error messages.\r\n *\r\n */\r\nabstract contract ErrorCodes {\r\n    int32 internal constant ONLY_ADMIN = 0;\r\n    int32 internal constant ONLY_MINTER = 1;\r\n    int32 internal constant ONLY_WHITE_LISTER = 2;\r\n    int32 internal constant ONLY_TOKEN_OWNER = 3;\r\n    int32 internal constant ZERO_ADDRESS = 4;\r\n    int32 internal constant BPS_EXCEEDS_10000 = 5;\r\n    int32 internal constant TOKEN_NOT_EXISTS = 6;\r\n    int32 internal constant URI_QUERY_NON_EXISTENT_TOKEN = 7;\r\n    int32 internal constant URI_NOT_SET = 8;\r\n    int32 internal constant ASSET_NOT_WHITELISTED = 9;\r\n    int32 internal constant CURRENCY_NOT_WHITELISTED = 10;\r\n    int32 internal constant INVALID_TOKEN_AMOUNT = 11;\r\n    int32 internal constant CANT_MODIFY_LISTING_ASSET = 12;\r\n    int32 internal constant CANT_MODIFY_LISTING_TOKEN_ID = 13;\r\n    int32 internal constant CANT_MODIFY_LISTING_TOKEN_TYPE = 14;\r\n    int32 internal constant INVALID_CURRENCY_FROM_LISTING = 15;\r\n    int32 internal constant OWNER_BUYER_CONFLICT = 16;\r\n    int32 internal constant ASSET_INSUFFICIENT_ALLOWANCE_BALANCE = 17;\r\n    int32 internal constant FEES_EXCEEDS_PRICE = 18;\r\n    int32 internal constant TRANSFER_FAILED = 19;\r\n    int32 internal constant BID_AMOUNT_MISMATCH_FROM_LISTING = 20;\r\n    int32\r\n        internal constant INVALID_ASSET_OWNERSHIP_OR_INSUFFICIENT_ALLOWANCE_BALANCE =\r\n        21;\r\n    int32 internal constant INSUFFICIENT_ALLOWANCE_BALANCE_FOR_MARKET = 22;\r\n    int32 internal constant CANT_BUY_LISTING_FROM_AUCTION = 23;\r\n    int32 internal constant BUYING_INVALID_ASSET_AMOUNT = 24;\r\n    int32 internal constant NATIVE_TOKEN_AMOUNT_MISMATCH_FROM_LISTING = 25;\r\n    int32 internal constant TOKEN_INSUFFICIENT_ALLOWANCE_BALANCE = 26;\r\n    int32 internal constant WITHDRAW_ZERO_AMOUNT = 27;\r\n    int32 internal constant WITHDRAW_FAILED = 28;\r\n    int32 internal constant ASSET_ALREADY_WHITELISTED = 29;\r\n    int32 internal constant CURRENCY_ALREADY_WHITELISTED = 30;\r\n    int32 internal constant EITHER_ADMIN_OR_FIRST_OWNER = 31;\r\n    int32 internal constant BURN_AMOUNT_EXCEEDS_BALANCE_OR_ID_NOT_FOUND = 32;\r\n    int32 internal constant INSUFFICIENT_BALANCE_FOR_TRANSFER_OR_ID_NOT_FOUND =\r\n        33;\r\n    int32 internal constant TOKEN_ID_NOT_FOUND = 34;\r\n    int32 internal constant NO_IDS_FOUND = 35;\r\n    int32 internal constant ALREADY_LISTED = 36;\r\n    int32 internal constant SECONDARY_SALE_NOT_SUPPORTED = 37;\r\n    int32 internal constant MARKET_ADDRESS_CANNOT_BE_ZERO_ADDRESS = 38;\r\n    int32 internal constant LISTING_ID_NOT_FOUND = 39;\r\n    int32 internal constant FUNCTION_NOT_EXECUTABLE = 40;\r\n    int32 internal constant UNAUTHORISED_ACCESS = 41;\r\n    int32 internal constant CANNOT_MODIFY_INACTIVE_SALE = 42;\r\n    int32 internal constant QUANTITY_MUST_BE_GREATER_THAN_EQUAL_TO_ONE = 43;\r\n    int32 internal constant TOKEN_ID_DOESNOT_EXIST = 44;\r\n    int32 internal constant MAX_QUANTITY_MUST_BE_GREATER_THAN_ZERO = 45;\r\n    int32 internal constant MAX_QUANTITY_ALLOWANCE_LIMIT_REACHED = 46;\r\n    int32 internal constant ONLY_MAINTAINER = 47;\r\n    int32 internal constant INVALID_TOKEN_OWNER = 48;\r\n    int32 internal constant ADDRESS_NOT_WHITELISTED = 49;\r\n    int32 internal constant EXCEEDED_PRIMARY_PURCHASE_LIMIT = 50;\r\n    int32 internal constant INVALID_COLLECTION_DETAIL = 51;\r\n    int32 internal constant COLLECTION_ID_CANNOT_BE_LESS_THAN_ZERO = 52;\r\n    int32 internal constant INVALID_OWNER = 53;\r\n    int32 internal constant INVALID_WHITELIST_PARAMS = 54;\r\n    int32 internal constant TOKEN_IDS_REQUIRED = 55;\r\n    int32 internal constant SENDER_SHOULD_BE_MARKETPLACE_CONTRACT = 56;\r\n    int32 internal constant INVALID_FUNCTION_PARAMS = 57;\r\n\r\n    function throwError(int32 _errCode) public pure returns (string memory) {\r\n        return Strings.toString(uint32(_errCode));\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/MerkleProof.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(computedHash, proofElement)\r\n                );\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(proofElement, computedHash)\r\n                );\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n}\r\n\r\n// File contracts/TokenTraxxMarket.sol\r\n\r\npragma solidity ^0.8.2;\r\n\r\n// Royalty\r\n\r\n// Security\r\n\r\n// Upgrades\r\n\r\n// Utils\r\n\r\n/**\r\n * @notice\r\n * @dev Removed all auction and ERC1155 functionalites\r\n */\r\n\r\ncontract TokenTraxxMarketplace is\r\n    Initializable,\r\n    IMarketplace,\r\n    AccessControlEnumerableUpgradeable,\r\n    IERC721Receiver,\r\n    ReentrancyGuardUpgradeable,\r\n    ErrorCodes\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 public constant WHITE_LISTER = keccak256(\"WHITE_LISTER\");\r\n\r\n    /// @dev The address of the native token wrapper contract.\r\n    address public nativeTokenWrapper;\r\n\r\n    /// @dev The address of royalty treasury.\r\n    address public royaltyTreasury;\r\n\r\n    /// @dev The max bps of the contract. So, 10_000 == 100 %\r\n    uint64 public constant MAX_BPS = 10_000;\r\n\r\n    /// @dev The marketplace fee.\r\n    uint64 public marketFeeBps;\r\n\r\n    uint64 public primaryFeeBps;\r\n\r\n    /// @dev The address interpreted as native token of the chain.\r\n    address public constant NATIVE_TOKEN =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    /// @dev The address of ERC20 => whitelisted\r\n    mapping(address => bool) public wlistToken;\r\n\r\n    /// @dev The address of NFT => whitelisted\r\n    mapping(address => bool) public wlistAsset;\r\n\r\n    /// @dev listingId => listing info.\r\n    mapping(uint256 => Listing) public listings;\r\n\r\n    /// @dev safe listing token => prevent multiple listings with same token.\r\n    mapping(uint256 => bool) public safeListing;\r\n\r\n    /// @dev Total number of listings on market.\r\n    uint256 public listingIdTracker;\r\n\r\n    /// @dev Check whether the caller is a protocol admin\r\n    modifier onlyAdmin() {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            throwError(ONLY_ADMIN)\r\n        );\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _nativeTokenWrapper,\r\n        uint64 _primaryMarketFeeBps,\r\n        uint64 _marketFeeBps,\r\n        address _initialCurrency\r\n    ) external initializer {\r\n        __ReentrancyGuard_init();\r\n        require(_nativeTokenWrapper != address(0), throwError(ZERO_ADDRESS));\r\n        nativeTokenWrapper = _nativeTokenWrapper;\r\n        primaryFeeBps = _primaryMarketFeeBps;\r\n        marketFeeBps = _marketFeeBps;\r\n        royaltyTreasury = address(this);\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(WHITE_LISTER, msg.sender);\r\n\r\n        wlistToken[_initialCurrency] = true;\r\n    }\r\n\r\n    /// @dev Lets a token owner list tokens for sale: Direct Listing or Auction.\r\n    function createListing(ListingParameters calldata _params)\r\n        external\r\n        override\r\n    {\r\n        // Get values to populate `Listing`.\r\n        //TODO: Remove / modify the condition at the time of Secondary Sale.\r\n        (uint256 totalListing, ) = getTokenListingCount(\r\n            _params.assetContract,\r\n            _params.tokenId\r\n        );\r\n        require(totalListing == 0, throwError(SECONDARY_SALE_NOT_SUPPORTED));\r\n        require(\r\n            wlistAsset[_params.assetContract],\r\n            throwError(ASSET_NOT_WHITELISTED)\r\n        );\r\n        require(\r\n            wlistToken[_params.currencyToAccept],\r\n            throwError(CURRENCY_NOT_WHITELISTED)\r\n        );\r\n        // uint256 listingId = listingIdTracker;\r\n        // tokenOwner :- owner / who posted the nft for sale.\r\n        address tokenOwner = _params.tokenOwner;\r\n        TokenType listTokenType = getTokenType(_params.assetContract);\r\n        if (listTokenType == TokenType.ERC721) {\r\n            tokenOwner = IERC721(_params.assetContract).ownerOf(\r\n                _params.tokenId\r\n            );\r\n        }\r\n        uint256 tokenAmountToList = getSafeQuantity(\r\n            listTokenType,\r\n            _params.quantityToList\r\n        );\r\n\r\n        require(tokenAmountToList > 0, throwError(INVALID_TOKEN_AMOUNT));\r\n\r\n        validateUserOwnershipAndApproval(\r\n            tokenOwner,\r\n            _params.assetContract,\r\n            _params.tokenId,\r\n            tokenAmountToList,\r\n            listTokenType\r\n        );\r\n\r\n        require(\r\n            validateApproval(\r\n                tokenOwner,\r\n                _params.assetContract,\r\n                _params.tokenId,\r\n                listTokenType,\r\n                address(this)\r\n            ),\r\n            throwError(INSUFFICIENT_ALLOWANCE_BALANCE_FOR_MARKET)\r\n        );\r\n\r\n        // Find SaleType\r\n        SaleType saleType = SaleType.Primary;\r\n\r\n        if (_isListedAlready(_params.assetContract, _params.tokenId))\r\n            saleType = SaleType.Secondary;\r\n\r\n        require(\r\n            saleType == SaleType.Primary,\r\n            throwError(SECONDARY_SALE_NOT_SUPPORTED)\r\n        );\r\n\r\n        Listing memory newListing = Listing({\r\n            listingId: listingIdTracker,\r\n            tokenOwner: tokenOwner,\r\n            assetContract: _params.assetContract,\r\n            tokenId: _params.tokenId,\r\n            quantity: _params.quantityToList,\r\n            currency: _params.currencyToAccept,\r\n            buyoutPrice: _params.buyoutPrice,\r\n            tokenType: listTokenType,\r\n            listingType: _params.listingType,\r\n            saleType: saleType\r\n        });\r\n\r\n        listings[listingIdTracker] = newListing;\r\n        // listingIdTracker += 1;\r\n\r\n        _tokenListings[_params.assetContract][_params.tokenId].push(\r\n            listingIdTracker\r\n        );\r\n\r\n        emit NewListing(\r\n            listingIdTracker,\r\n            _params.assetContract,\r\n            _params.tokenId,\r\n            tokenOwner,\r\n            newListing\r\n        );\r\n\r\n        listingIdTracker += 1;\r\n    }\r\n\r\n    function modifyListing(uint256 _listingId, ListingParameters memory _params)\r\n        external\r\n    {\r\n        // TODO: This is a modification to handle the scenario where the minter wants to modify the listing or the owner wants to modify the listing.\r\n        Listing memory listing = listings[_listingId];\r\n        TokenType _tokenType = getTokenType(_params.assetContract);\r\n        address tokenOwner = _params.tokenOwner;\r\n        if (_tokenType == TokenType.ERC721) {\r\n            tokenOwner = IERC721(_params.assetContract).ownerOf(\r\n                _params.tokenId\r\n            );\r\n        }\r\n        require(\r\n            listing.assetContract == _params.assetContract,\r\n            throwError(CANT_MODIFY_LISTING_ASSET)\r\n        );\r\n        require(\r\n            listing.tokenId == _params.tokenId,\r\n            throwError(CANT_MODIFY_LISTING_TOKEN_ID)\r\n        );\r\n        require(\r\n            listing.tokenType == _tokenType,\r\n            throwError(CANT_MODIFY_LISTING_TOKEN_TYPE)\r\n        );\r\n        validateUserOwnershipAndApproval(\r\n            tokenOwner,\r\n            _params.assetContract,\r\n            _params.tokenId,\r\n            _params.quantityToList,\r\n            _tokenType\r\n        );\r\n        require(\r\n            validateApproval(\r\n                tokenOwner,\r\n                _params.assetContract,\r\n                _params.tokenId,\r\n                _tokenType,\r\n                address(this)\r\n            ),\r\n            throwError(INSUFFICIENT_ALLOWANCE_BALANCE_FOR_MARKET)\r\n        );\r\n\r\n        require(listing.quantity > 0, throwError(CANNOT_MODIFY_INACTIVE_SALE));\r\n\r\n        listing.buyoutPrice = _params.buyoutPrice;\r\n        listing.quantity = _params.quantityToList;\r\n        listings[_listingId] = listing;\r\n    }\r\n\r\n    function delegatedBuy(\r\n        uint256 _listingId,\r\n        address _currency,\r\n        uint256 _price,\r\n        uint256 _quantityToBuy,\r\n        address _buyer,\r\n        bytes32[] memory _proof\r\n    ) external payable override nonReentrant {\r\n        // require(\r\n        //     _msgSender() == KMSAddress,\r\n        //     throwError(ONLY_KMS_ACCOUNT_CAN_BUY_USING_THIS_FUNCTION)\r\n        // )\r\n        Listing memory targetListing = listings[_listingId];\r\n        // address buyer = _buyer;\r\n\r\n        // Check whether the settled total price and currency to use are correct.\r\n        require(\r\n            _currency == targetListing.currency &&\r\n                _price == targetListing.buyoutPrice,\r\n            throwError(INVALID_CURRENCY_FROM_LISTING)\r\n        );\r\n\r\n        if (listings[_listingId].tokenType == TokenType.ERC721) {\r\n            //owner can't purchase\r\n            require(\r\n                _buyer != targetListing.tokenOwner,\r\n                throwError(OWNER_BUYER_CONFLICT)\r\n            );\r\n\r\n            //tokenowner at the time of listing is the currennt owner\r\n            require(\r\n                targetListing.tokenOwner ==\r\n                    IERC721(targetListing.assetContract).ownerOf(\r\n                        targetListing.tokenId\r\n                    ),\r\n                throwError(INVALID_TOKEN_OWNER)\r\n            );\r\n\r\n            validateSaleParameters(\r\n                targetListing,\r\n                _proof,\r\n                _buyer,\r\n                _quantityToBuy\r\n            );\r\n        }\r\n\r\n        // if (targetListing.tokenType == TokenType.ERC1155) {\r\n        //     validateMaxQuantityAllowed(\r\n        //         _buyer,\r\n        //         targetListing.assetContract,\r\n        //         targetListing.tokenId,\r\n        //         _quantityToBuy\r\n        //     );\r\n        // }\r\n\r\n        executeSale(\r\n            targetListing,\r\n            _buyer,\r\n            targetListing.currency,\r\n            targetListing.buyoutPrice * _quantityToBuy,\r\n            _quantityToBuy\r\n        );\r\n    }\r\n\r\n    /// TODO: check whitelist here\r\n    function verifyWalletWhitelist(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) public pure returns (bool) {\r\n        return MerkleProof.verify(proof, root, leaf);\r\n    }\r\n\r\n    // TODO : Need to optimize if else\r\n    function validateSaleParameters(\r\n        Listing memory listingData,\r\n        bytes32[] memory proof,\r\n        address buyer,\r\n        uint256 quantityToBuy\r\n    ) internal {\r\n        if (listingData.tokenType == TokenType.ERC721) {\r\n            IERC721Custom erc721ContractInstance = IERC721Custom(\r\n                listingData.assetContract\r\n            );\r\n\r\n            uint256 collectionId = erc721ContractInstance.getNFTCollectionId(\r\n                listingData.tokenId\r\n            );\r\n\r\n            IERC721Custom.Collection\r\n                memory collectionData = erc721ContractInstance\r\n                    .getCollectionData(collectionId);\r\n\r\n            if (\r\n                collectionData.allowedPurchaseLimit != -1 &&\r\n                collectionData.allowedPurchaseLimit > 0\r\n            ) {\r\n                require(\r\n                    (collectionData.primarySoldCount + quantityToBuy) <\r\n                        uint256(collectionData.allowedPurchaseLimit),\r\n                    throwError(EXCEEDED_PRIMARY_PURCHASE_LIMIT)\r\n                );\r\n            }\r\n\r\n            bytes32 merkleRoot = 0x00;\r\n\r\n            for (\r\n                uint256 i = 0;\r\n                i < collectionData.whitelistParams.length;\r\n                i++\r\n            ) {\r\n                if (\r\n                    block.timestamp >\r\n                    collectionData.whitelistParams[i].startTime &&\r\n                    block.timestamp < collectionData.whitelistParams[i].endTime\r\n                ) {\r\n                    merkleRoot = collectionData.whitelistParams[i].merkleRoot;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (merkleRoot != 0x00) {\r\n                require(\r\n                    verifyWalletWhitelist(\r\n                        proof,\r\n                        merkleRoot,\r\n                        keccak256(abi.encodePacked(buyer))\r\n                    ),\r\n                    throwError(ADDRESS_NOT_WHITELISTED)\r\n                );\r\n            }\r\n            if (\r\n                erc721ContractInstance.getFirstOwner(listingData.tokenId) ==\r\n                collectionData.owner\r\n            ) {\r\n                if (collectionData.userPurchaseLimit != -1) {\r\n                    require(\r\n                        erc721ContractInstance.getPrimarySaleUserCount(\r\n                            msg.sender,\r\n                            collectionId\r\n                        ) +\r\n                            quantityToBuy <\r\n                            uint256(collectionData.userPurchaseLimit)\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            IERC1155Custom erc1155ContractInstance = IERC1155Custom(\r\n                listingData.assetContract\r\n            );\r\n\r\n            uint256 collectionId = erc1155ContractInstance.getNFTCollectionId(\r\n                listingData.tokenId\r\n            );\r\n\r\n            IERC1155Custom.Collection\r\n                memory collectionData = erc1155ContractInstance\r\n                    .getCollectionData(collectionId);\r\n\r\n            if (\r\n                collectionData.allowedPurchaseLimit != -1 &&\r\n                collectionData.allowedPurchaseLimit > 0\r\n            ) {\r\n                require(\r\n                    (collectionData.primarySoldCount + quantityToBuy) <\r\n                        uint256(collectionData.allowedPurchaseLimit),\r\n                    throwError(EXCEEDED_PRIMARY_PURCHASE_LIMIT)\r\n                );\r\n            }\r\n\r\n            bytes32 merkleRoot = 0x00;\r\n\r\n            for (\r\n                uint256 i = 0;\r\n                i < collectionData.whitelistParams.length;\r\n                i++\r\n            ) {\r\n                if (\r\n                    block.timestamp >\r\n                    collectionData.whitelistParams[i].startTime &&\r\n                    block.timestamp < collectionData.whitelistParams[i].endTime\r\n                ) {\r\n                    merkleRoot = collectionData.whitelistParams[i].merkleRoot;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (merkleRoot != 0x00) {\r\n                require(\r\n                    verifyWalletWhitelist(\r\n                        proof,\r\n                        merkleRoot,\r\n                        keccak256(abi.encodePacked(buyer))\r\n                    ),\r\n                    \"Address not whitelisted\"\r\n                );\r\n            }\r\n            if (\r\n                erc1155ContractInstance.getFirstOwner(listingData.tokenId) ==\r\n                collectionData.owner\r\n            ) {\r\n                if (collectionData.userPurchaseLimit != -1) {\r\n                    require(\r\n                        erc1155ContractInstance.getPrimarySaleUserCount(\r\n                            msg.sender,\r\n                            collectionId\r\n                        ) +\r\n                            quantityToBuy <\r\n                            uint256(collectionData.userPurchaseLimit)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function buy(\r\n        uint256 _listingId,\r\n        address _currency,\r\n        uint256 _price,\r\n        uint256 _quantityToBuy,\r\n        bytes32[] memory proof\r\n    ) external payable override nonReentrant {\r\n        Listing memory targetListing = listings[_listingId];\r\n        address buyer = _msgSender();\r\n\r\n        // Check whether the settled total price and currency to use are correct.\r\n        require(\r\n            _currency == targetListing.currency &&\r\n                _price == targetListing.buyoutPrice,\r\n            throwError(INVALID_CURRENCY_FROM_LISTING)\r\n        );\r\n\r\n        if (listings[_listingId].tokenType == TokenType.ERC721) {\r\n            //owner can't purchase\r\n            require(\r\n                buyer != targetListing.tokenOwner,\r\n                throwError(OWNER_BUYER_CONFLICT)\r\n            );\r\n\r\n            //tokenowner at the time of listing is the currennt owner\r\n            require(\r\n                targetListing.tokenOwner ==\r\n                    IERC721(targetListing.assetContract).ownerOf(\r\n                        targetListing.tokenId\r\n                    ),\r\n                throwError(ASSET_INSUFFICIENT_ALLOWANCE_BALANCE)\r\n            );\r\n\r\n            validateSaleParameters(targetListing, proof, buyer, _quantityToBuy);\r\n        }\r\n\r\n        // if (targetListing.tokenType == TokenType.ERC1155) {\r\n        //     validateMaxQuantityAllowed(\r\n        //         buyer,\r\n        //         targetListing.assetContract,\r\n        //         targetListing.tokenId,\r\n        //         _quantityToBuy\r\n        //     );\r\n        // }\r\n\r\n        executeSale(\r\n            targetListing,\r\n            buyer,\r\n            targetListing.currency,\r\n            targetListing.buyoutPrice * _quantityToBuy,\r\n            _quantityToBuy\r\n        );\r\n    }\r\n\r\n    /// @dev Lets the contract accept ether.\r\n    receive() external payable {}\r\n\r\n    // function validateMaxQuantityAllowed(\r\n    //     address buyer,\r\n    //     address assetContract,\r\n    //     uint256 tokenId,\r\n    //     uint256 quantityToBuy\r\n    // ) internal view {\r\n    //     try IERC1155Custom(assetContract).maxQuantityToPurchaseLimit() returns (\r\n    //         uint256 maxQuantityAllowed\r\n    //     ) {\r\n    //         if (maxQuantityAllowed > 0) {\r\n    //             require(\r\n    //                 IERC1155(assetContract).balanceOf(buyer, tokenId) +\r\n    //                     quantityToBuy <=\r\n    //                     maxQuantityAllowed,\r\n    //                 throwError(MAX_QUANTITY_ALLOWANCE_LIMIT_REACHED)\r\n    //             );\r\n    //         }\r\n    //     } catch Error(\r\n    //         string memory /*reason*/\r\n    //     ) {\r\n    //         // This is executed in case\r\n    //         // revert was called inside getData\r\n    //         // and a reason string was provided.\r\n    //     } catch (\r\n    //         bytes memory /*lowLevelData*/\r\n    //     ) {\r\n    //         // This is executed in case revert() was used\r\n    //         // or there was a failing assertion, division\r\n    //         // by zero, etc. inside getData.\r\n    //     }\r\n    // }\r\n\r\n    /// @dev Performs a direct listing sale.\r\n    // TODO : Need to optimize if else\r\n    function executeSale(\r\n        Listing memory _targetListing,\r\n        address _buyer,\r\n        address _currency,\r\n        uint256 _currencyAmountToTransfer,\r\n        uint256 _quantity\r\n    ) internal {\r\n        validateDirectListingSale(\r\n            _targetListing,\r\n            _buyer,\r\n            _quantity,\r\n            _currencyAmountToTransfer\r\n        );\r\n\r\n        _targetListing.quantity -= _quantity;\r\n        listings[_targetListing.listingId] = _targetListing;\r\n        if (_currencyAmountToTransfer > 0) {\r\n            payout(\r\n                _buyer,\r\n                _targetListing.tokenOwner,\r\n                _currency,\r\n                _currencyAmountToTransfer,\r\n                _targetListing\r\n            );\r\n        }\r\n        transferListingTokens(_buyer, _quantity, _targetListing);\r\n\r\n        if (_targetListing.tokenType == TokenType.ERC721) {\r\n            IERC721Custom erc721ContractInstance = IERC721Custom(\r\n                _targetListing.assetContract\r\n            );\r\n\r\n            uint256 collectionId = erc721ContractInstance.getNFTCollectionId(\r\n                _targetListing.tokenId\r\n            );\r\n\r\n            IERC721Custom.Collection\r\n                memory collectionData = erc721ContractInstance\r\n                    .getCollectionData(collectionId);\r\n\r\n            if (\r\n                erc721ContractInstance.getFirstOwner(_targetListing.tokenId) ==\r\n                collectionData.owner\r\n            ) {\r\n                erc721ContractInstance.updateCollectionAfterPrimarySale(\r\n                    msg.sender,\r\n                    collectionId\r\n                );\r\n            }\r\n        } else {\r\n            IERC1155Custom erc1155ContractInstance = IERC1155Custom(\r\n                _targetListing.assetContract\r\n            );\r\n\r\n            uint256 collectionId = erc1155ContractInstance.getNFTCollectionId(\r\n                _targetListing.tokenId\r\n            );\r\n\r\n            IERC1155Custom.Collection\r\n                memory collectionData = erc1155ContractInstance\r\n                    .getCollectionData(collectionId);\r\n\r\n            if (\r\n                erc1155ContractInstance.getFirstOwner(_targetListing.tokenId) ==\r\n                collectionData.owner\r\n            ) {\r\n                erc1155ContractInstance.updateCollectionAfterPrimarySale(\r\n                    msg.sender,\r\n                    collectionId,\r\n                    _quantity\r\n                );\r\n            }\r\n        }\r\n        // IERC721Custom erc721ContractInstance = IERC721Custom(\r\n        //     _targetListing.assetContract\r\n        // );\r\n\r\n        // uint256 collectionId = erc721ContractInstance.getNFTCollectionId(\r\n        //     _targetListing.tokenId\r\n        // );\r\n\r\n        // IERC721Custom.Collection memory collectionData = erc721ContractInstance\r\n        //     .getCollectionData(collectionId);\r\n\r\n        // if (\r\n        //     erc721ContractInstance.getFirstOwner(_targetListing.tokenId) ==\r\n        //     collectionData.owner\r\n        // ) {\r\n        //     erc721ContractInstance.updateCollectionAfterPrimarySale(\r\n        //         msg.sender,\r\n        //         collectionId\r\n        //     );\r\n        // }\r\n\r\n        emit NewSale(\r\n            _targetListing.listingId,\r\n            _targetListing.assetContract,\r\n            _targetListing.tokenId,\r\n            _targetListing.tokenOwner,\r\n            _buyer,\r\n            _quantity,\r\n            _currencyAmountToTransfer\r\n        );\r\n    }\r\n\r\n    /// @dev Transfers tokens listed for sale in a direct or auction listing.\r\n    function transferListingTokens(\r\n        address _to,\r\n        uint256 _quantity, // Can be used on ERC1155\r\n        Listing memory _listing\r\n    ) internal {\r\n        require(\r\n            _quantity >= 1,\r\n            throwError(QUANTITY_MUST_BE_GREATER_THAN_EQUAL_TO_ONE)\r\n        );\r\n\r\n        if (_listing.tokenType == TokenType.ERC721) {\r\n            IERC721(_listing.assetContract).safeTransferFrom(\r\n                _listing.tokenOwner,\r\n                _to,\r\n                _listing.tokenId,\r\n                \"\"\r\n            );\r\n        } else if (_listing.tokenType == TokenType.ERC1155) {\r\n            IERC1155(_listing.assetContract).safeTransferFrom(\r\n                _listing.tokenOwner,\r\n                _to,\r\n                _listing.tokenId,\r\n                _quantity,\r\n                \"\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Enforces quantity == 1 if tokenType is TokenType.ERC721.\r\n    function getSafeQuantity(TokenType _tokenType, uint256 _quantityToCheck)\r\n        internal\r\n        pure\r\n        returns (uint256 safeQuantity)\r\n    {\r\n        if (_quantityToCheck == 0) {\r\n            safeQuantity = 0;\r\n        } else {\r\n            safeQuantity = _tokenType == TokenType.ERC721\r\n                ? 1\r\n                : _quantityToCheck;\r\n        }\r\n    }\r\n\r\n    // TODO: Decide whether to have it or keep it.\r\n    /// @dev Added this for testing purpose and needful function\r\n    function getMarketCut(uint256 _listingId) external view returns (uint256) {\r\n        return (listings[_listingId].buyoutPrice * marketFeeBps) / MAX_BPS;\r\n    }\r\n\r\n    /// @dev Payout stakeholders on sale\r\n    function payout(\r\n        address _payer,\r\n        address _payee,\r\n        address _currencyToUse,\r\n        uint256 _totalPayoutAmount,\r\n        Listing memory _listing\r\n    ) internal {\r\n        // Collect protocol fee\r\n        uint256 marketCut;\r\n        uint256 _transferAmount;\r\n\r\n        if (_listing.saleType == SaleType.Primary)\r\n            marketCut = (_totalPayoutAmount * primaryFeeBps) / MAX_BPS;\r\n        else marketCut = (_totalPayoutAmount * marketFeeBps) / MAX_BPS;\r\n\r\n        uint256 remainder = _totalPayoutAmount - marketCut;\r\n\r\n        if (_listing.saleType == SaleType.Secondary) {\r\n            // Distribute royalties. See Sushiswap's https://github.com/sushiswap/shoyu/blob/master/contracts/base/BaseExchange.sol#L296\r\n            try\r\n                IERC2981(_listing.assetContract).royaltyInfo(\r\n                    _listing.tokenId,\r\n                    _totalPayoutAmount\r\n                )\r\n            returns (address royaltyFeeRecipient, uint256 royaltyFeeAmount) {\r\n                if (royaltyFeeAmount > 0) {\r\n                    require(\r\n                        royaltyFeeAmount + marketCut <= _totalPayoutAmount,\r\n                        throwError(FEES_EXCEEDS_PRICE)\r\n                    );\r\n                    remainder -= royaltyFeeAmount;\r\n                    _transferAmount += royaltyFeeAmount;\r\n                    tShares[royaltyFeeRecipient][\r\n                        _currencyToUse\r\n                    ] += royaltyFeeAmount;\r\n                }\r\n            } catch {}\r\n        } else {\r\n            remainder = _totalPayoutAmount - marketCut;\r\n            _transferAmount += marketCut;\r\n            tShares[royaltyTreasury][_currencyToUse] += marketCut;\r\n        }\r\n        // Store remaining funds.\r\n        transferCurrency(\r\n            _currencyToUse,\r\n            _payer,\r\n            royaltyTreasury,\r\n            _transferAmount\r\n        );\r\n\r\n        // Distribute price to token owner\r\n        transferCurrency(_currencyToUse, _payer, _payee, remainder);\r\n    }\r\n\r\n    /// @dev Transfers a given amount of currency.\r\n    function transferCurrency(\r\n        address _currency,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_currency == NATIVE_TOKEN) {\r\n            if (_from == address(this)) {\r\n                // withdraw from weth then transfer withdrawn native token to recipient\r\n                IWETH(nativeTokenWrapper).withdraw(_amount);\r\n                safeTransferNativeToken(_to, _amount);\r\n            } else if (_to == address(this)) {\r\n                // store native currency in weth\r\n                require(\r\n                    _amount <= msg.value,\r\n                    throwError(BID_AMOUNT_MISMATCH_FROM_LISTING)\r\n                );\r\n                IWETH(nativeTokenWrapper).deposit{value: _amount}();\r\n            } else {\r\n                // passthrough for native token transfer from buyer to the seller\r\n                safeTransferNativeToken(_to, _amount);\r\n            }\r\n        } else {\r\n            safeTransferERC20(_currency, _from, _to, _amount);\r\n        }\r\n    }\r\n\r\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\r\n    function safeTransferERC20(\r\n        address _currency,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_from == _to) {\r\n            return;\r\n        }\r\n        uint256 balBefore = IERC20(_currency).balanceOf(_to);\r\n        bool success = _from == address(this)\r\n            ? IERC20(_currency).transfer(_to, _amount)\r\n            : IERC20(_currency).transferFrom(_from, _to, _amount);\r\n        uint256 balAfter = IERC20(_currency).balanceOf(_to);\r\n\r\n        require(\r\n            success && balAfter == balBefore + _amount,\r\n            throwError(TRANSFER_FAILED)\r\n        );\r\n    }\r\n\r\n    /// @dev Transfers `amount` of native token to `to`.\r\n    function safeTransferNativeToken(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        if (!success) {\r\n            IWETH(nativeTokenWrapper).deposit{value: value}();\r\n            safeTransferERC20(nativeTokenWrapper, address(this), to, value);\r\n        }\r\n    }\r\n\r\n    ///@dev Validates that `_tokenOwner` owns and has approved to lister / minter to live asset.\r\n    function validateUserOwnershipAndApproval(\r\n        address _tokenOwner,\r\n        address _assetContract,\r\n        uint256 _tokenId,\r\n        uint256 _quantity,\r\n        TokenType _tokenType\r\n    ) internal view {\r\n        // address sender = msg.sender;\r\n        if (_tokenType == TokenType.ERC721) {\r\n            require(\r\n                _tokenOwner == msg.sender ||\r\n                    IERC721(_assetContract).isApprovedForAll(\r\n                        _tokenOwner,\r\n                        msg.sender\r\n                    ) ||\r\n                    IERC721(_assetContract).getApproved(_tokenId) == msg.sender,\r\n                throwError(\r\n                    INVALID_ASSET_OWNERSHIP_OR_INSUFFICIENT_ALLOWANCE_BALANCE\r\n                )\r\n            );\r\n        } else if (_tokenType == TokenType.ERC1155) {\r\n            require(\r\n                IERC1155(_assetContract).balanceOf(_tokenOwner, _tokenId) >=\r\n                    _quantity,\r\n                throwError(\r\n                    INVALID_ASSET_OWNERSHIP_OR_INSUFFICIENT_ALLOWANCE_BALANCE\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function validateApproval(\r\n        address _tokenOwner,\r\n        address _assetContract,\r\n        uint256 _tokenId,\r\n        TokenType _tokenType,\r\n        address operator\r\n    ) internal view returns (bool flag) {\r\n        if (_tokenType == TokenType.ERC721) {\r\n            if (\r\n                IERC721(_assetContract).isApprovedForAll(\r\n                    _tokenOwner,\r\n                    operator\r\n                ) || IERC721(_assetContract).getApproved(_tokenId) == operator\r\n            ) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else if (_tokenType == TokenType.ERC1155) {\r\n            if (\r\n                IERC1155(_assetContract).isApprovedForAll(_tokenOwner, operator)\r\n            ) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Validates conditions of a direct listing sale.\r\n    function validateDirectListingSale(\r\n        Listing memory _listing,\r\n        address _buyer,\r\n        uint256 _quantityToBuy,\r\n        uint256 settledTotalPrice\r\n    ) internal {\r\n        require(\r\n            _listing.listingType == ListingType.Direct,\r\n            throwError(CANT_BUY_LISTING_FROM_AUCTION)\r\n        );\r\n\r\n        // Check whether a valid quantity of listed tokens is being bought.\r\n        require(\r\n            _listing.quantity > 0 &&\r\n                _quantityToBuy > 0 &&\r\n                _quantityToBuy <= _listing.quantity,\r\n            throwError(BUYING_INVALID_ASSET_AMOUNT)\r\n        );\r\n\r\n        // Check: buyer owns and has approved sufficient currency for sale.\r\n        if (_listing.currency == NATIVE_TOKEN) {\r\n            require(\r\n                msg.value == settledTotalPrice,\r\n                throwError(NATIVE_TOKEN_AMOUNT_MISMATCH_FROM_LISTING)\r\n            );\r\n        } else {\r\n            if (settledTotalPrice > 0) {\r\n                validateERC20BalAndAllowance(\r\n                    _buyer,\r\n                    _listing.currency,\r\n                    settledTotalPrice\r\n                );\r\n            }\r\n        }\r\n\r\n        // Check iwhether token owner owns and has approved `quantityToBuy` amount of listing tokens from the listing.\r\n        require(\r\n            validateApproval(\r\n                _listing.tokenOwner,\r\n                _listing.assetContract,\r\n                _listing.tokenId,\r\n                _listing.tokenType,\r\n                address(this)\r\n            ),\r\n            throwError(INSUFFICIENT_ALLOWANCE_BALANCE_FOR_MARKET)\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the interface supported by a contract.\r\n    function getTokenType(address _assetContract)\r\n        internal\r\n        view\r\n        returns (TokenType tokenType)\r\n    {\r\n        if (\r\n            IERC165(_assetContract).supportsInterface(type(IERC721).interfaceId)\r\n        ) {\r\n            tokenType = TokenType.ERC721;\r\n        } else if (\r\n            IERC165(_assetContract).supportsInterface(\r\n                type(IERC1155).interfaceId\r\n            )\r\n        ) {\r\n            tokenType = TokenType.ERC1155;\r\n        } else {\r\n            revert MustImplementERC721();\r\n        }\r\n    }\r\n\r\n    function setRoyaltyTreasury(address _treasury) external onlyAdmin {\r\n        require(_treasury != address(0), throwError(ZERO_ADDRESS));\r\n        royaltyTreasury = _treasury;\r\n    }\r\n\r\n    /// @dev Validates that `_addrToCheck` owns and has approved markeplace to transfer the appropriate amount of currency\r\n    function validateERC20BalAndAllowance(\r\n        address _addrToCheck,\r\n        address _currency,\r\n        uint256 _currencyAmountToCheckAgainst\r\n    ) internal view {\r\n        require(\r\n            IERC20(_currency).balanceOf(_addrToCheck) >=\r\n                _currencyAmountToCheckAgainst &&\r\n                IERC20(_currency).allowance(_addrToCheck, address(this)) >=\r\n                _currencyAmountToCheckAgainst,\r\n            throwError(TOKEN_INSUFFICIENT_ALLOWANCE_BALANCE)\r\n        );\r\n    }\r\n\r\n    /**\r\n     *   ERC 721 Receiver functions.\r\n     **/\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(AccessControlEnumerableUpgradeable)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721Receiver).interfaceId ||\r\n            interfaceId == type(IERC2981).interfaceId;\r\n    }\r\n\r\n    /// @dev Lets a protocol admin withdraw tokens from this contract.\r\n    function withdrawFunds(address to, address currency) external {\r\n        require(to != address(0), throwError(ZERO_ADDRESS));\r\n        uint256 amount = tShares[msg.sender][currency];\r\n        tShares[msg.sender][currency] = 0; // Reset shares after withdrawal.\r\n        _withdraw(to, currency, amount);\r\n    }\r\n\r\n    function withdrawTreasury(address to, address currency) external onlyAdmin {\r\n        uint256 amount = tShares[royaltyTreasury][currency];\r\n        _withdraw(to, currency, amount);\r\n    }\r\n\r\n    function _withdraw(\r\n        address to,\r\n        address currency,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20 _currency = IERC20(currency);\r\n        bool isNativeToken = _isNativeToken(address(_currency));\r\n\r\n        bool transferSuccess;\r\n        require(amount > 0, throwError(WITHDRAW_ZERO_AMOUNT));\r\n\r\n        if (isNativeToken) {\r\n            (transferSuccess, ) = payable(to).call{value: amount}(\"\");\r\n        } else {\r\n            transferSuccess = _currency.transfer(to, amount);\r\n        }\r\n        require(transferSuccess, throwError(WITHDRAW_FAILED));\r\n        emit FundsWithdrawn(to, currency, amount);\r\n    }\r\n\r\n    /// @dev Checks whether an address is to be interpreted as the native token\r\n    function _isNativeToken(address _toCheck) internal pure returns (bool) {\r\n        return _toCheck == NATIVE_TOKEN || _toCheck == address(0);\r\n    }\r\n\r\n    /// @dev Whitelist asset contract [NFT]\r\n    function whiteListAsset(\r\n        address _assetContract,\r\n        AssetType _type,\r\n        bool _value\r\n    ) external {\r\n        require(\r\n            hasRole(WHITE_LISTER, msg.sender),\r\n            throwError(ONLY_WHITE_LISTER)\r\n        );\r\n        if (_type == AssetType.NFT) {\r\n            require(\r\n                !wlistAsset[_assetContract],\r\n                throwError(ASSET_ALREADY_WHITELISTED)\r\n            );\r\n\r\n            wlistAsset[_assetContract] = _value;\r\n        } else {\r\n            require(\r\n                !wlistToken[_assetContract],\r\n                throwError(CURRENCY_ALREADY_WHITELISTED)\r\n            );\r\n\r\n            wlistToken[_assetContract] = _value;\r\n        }\r\n        emit AssetWhitelisted(_assetContract, _type, msg.sender, _value);\r\n    }\r\n\r\n    function removeListing(uint256 listingId) external {\r\n        Listing memory listing = listings[listingId];\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\r\n                listing.tokenOwner == msg.sender ||\r\n                validateApproval(\r\n                    listing.tokenOwner,\r\n                    listing.assetContract,\r\n                    listing.tokenId,\r\n                    listing.tokenType,\r\n                    msg.sender\r\n                ),\r\n            throwError(UNAUTHORISED_ACCESS)\r\n        );\r\n        address assetContract = listing.assetContract;\r\n        uint256 tokenId = listing.tokenId;\r\n        uint256 listedIdsIndex = _listingIdsIndex(\r\n            assetContract,\r\n            tokenId,\r\n            listingId\r\n        );\r\n        _tokenListings[assetContract][tokenId][listedIdsIndex] = _tokenListings[\r\n            assetContract\r\n        ][tokenId][_tokenListings[assetContract][tokenId].length - 1];\r\n        _tokenListings[assetContract][tokenId].pop();\r\n        delete listings[listingId];\r\n    }\r\n\r\n    function _listingIdsIndex(\r\n        address assetContract,\r\n        uint256 tokenId,\r\n        uint256 listingId\r\n    ) internal virtual returns (uint256 index) {\r\n        uint256 length = _tokenListings[assetContract][tokenId].length;\r\n        bool found;\r\n\r\n        for (index = 0; index < length; index++) {\r\n            if (_tokenListings[assetContract][tokenId][index] == listingId) {\r\n                found = true;\r\n                return index;\r\n            }\r\n        }\r\n        require(found, throwError(LISTING_ID_NOT_FOUND));\r\n    }\r\n\r\n    function getTokenListingCount(address _assetContract, uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256 listingCount, uint256 activeCount)\r\n    {\r\n        listingCount = _tokenListings[_assetContract][_tokenId].length;\r\n\r\n        for (uint256 i = 0; i < listingCount; i++) {\r\n            uint256 listingId = _tokenListings[_assetContract][_tokenId][i];\r\n            Listing memory currentListing = listings[listingId];\r\n            if (currentListing.quantity > 0) {\r\n                activeCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns latest active listings of the given tokenId, assetContract.\r\n     * @param _assetContract Address of the asset contract.\r\n     * @param _tokenId TokenId of the asset.\r\n     */\r\n    function getTokenListing(address _assetContract, uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (Listing[] memory activeListings)\r\n    {\r\n        (uint256 totalListing, uint256 activeCount) = getTokenListingCount(\r\n            _assetContract,\r\n            _tokenId\r\n        );\r\n        // If there are no listing, return empty array.\r\n        // If there are no active listings, return last completed index.\r\n        // Else return all the active listings array.\r\n        if (totalListing == 0) return activeListings;\r\n        else if (activeCount == 0) activeListings = new Listing[](1);\r\n        else activeListings = new Listing[](activeCount);\r\n\r\n        uint256 validIndex;\r\n\r\n        for (\r\n            uint256 i = 0;\r\n            i < _tokenListings[_assetContract][_tokenId].length;\r\n            i++\r\n        ) {\r\n            Listing memory currentListing = listings[\r\n                _tokenListings[_assetContract][_tokenId][i]\r\n            ];\r\n            if (currentListing.quantity > 0) {\r\n                activeListings[validIndex] = currentListing;\r\n                validIndex++;\r\n            } else {\r\n                activeListings[validIndex] = currentListing;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isListedAlready(address _assetContract, uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (bool isListed)\r\n    {\r\n        if (_tokenListings[_assetContract][tokenId].length >= 1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Error message - Market: must implement ERC 721.\r\n     * @notice You can use this for reverting when condition fails for ERC721 Implementation required\r\n     */\r\n    error MustImplementERC721();\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[48] private __gap;\r\n\r\n    mapping(address => mapping(address => uint256)) public tShares;\r\n\r\n    /// @dev safe listing token => prevent multiple listings with same token.\r\n    mapping(address => mapping(uint256 => bool)) private _safeListing;\r\n\r\n    // TODO : Keep only active listings in this and listing details in db.\r\n    mapping(address => mapping(uint256 => uint256[])) private _tokenListings;\r\n}","ABI":"[{\"inputs\":[],\"name\":\"MustImplementERC721\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"listedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"AssetWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.SaleType\",\"name\":\"saleType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IMarketplace.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"NewListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITE_LISTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityToBuy\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityToList\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyToAccept\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"internalType\":\"struct IMarketplace.ListingParameters\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityToBuy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"delegatedBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"}],\"name\":\"getMarketCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.SaleType\",\"name\":\"saleType\",\"type\":\"uint8\"}],\"internalType\":\"struct IMarketplace.Listing[]\",\"name\":\"activeListings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenListingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeTokenWrapper\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_primaryMarketFeeBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_marketFeeBps\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_initialCurrency\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingIdTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.SaleType\",\"name\":\"saleType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeBps\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityToList\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyToAccept\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"internalType\":\"struct IMarketplace.ListingParameters\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"modifyListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryFeeBps\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeListing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setRoyaltyTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"_errCode\",\"type\":\"int32\"}],\"name\":\"throwError\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"verifyWalletWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetContract\",\"type\":\"address\"},{\"internalType\":\"enum IMarketplace.AssetType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"whiteListAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"withdrawTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wlistAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wlistToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenTraxxMarketplace","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://528a1b558985b0eafb0ec35f27470673746d04e34150be601af618aad79126b7"}]}