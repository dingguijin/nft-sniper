{"status":"1","message":"OK","result":[{"SourceCode":"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: contracts/CryptoCloudPunks.sol\r\n\r\n\r\n\r\npragma solidity ^ 0.8.7;\r\n\r\n\r\n\r\n\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#########################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&####################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#################################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&########################################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#############################################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###############################################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##BBBBBBB#####&&#############&&&####BBBBBBBB#####&#######BGGGGGBBBBBBBBBBBB####&&#########################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##BPY?7!~~~!7?JJJYPGGP55B###########GPY?7!~~~!7??JJYPGGP55B####G~^~~~!!7?JJYPGPPYJ??7777J5B#######################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BB5JJJJJYY55PPGGGGGGBBGGY~P#######BG5JJJJJYY55PPGGGGGGBBGBY~G###GJ^Y5PGGGGBBBBBBBBBGGGP5Y?7~~75#####################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&GYPBBGGBBBB#BBBBBBBBBBBBG55~?55&&#GYPBBGGBBBBBBBBBBBGBGBBBG55~7P5&G5!JGPGBBBBGGGGGGGGGBBBBBBBBG5Y??G###################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&P?JPBBBBBBBGGGPPPPPPP5PPPP55!.5JP&P?JPBBBBBBBGGGPPPPPPPPPPPP557.5J5#PPJGGGGGGGGPPG5YYYY55PPPPPGGBBGGG5B##################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&B7~JGGB#BBGGGPPP55Y55555YYYYYJ.~PYG7~JGGBBBBGGGPP555Y55555YYYYYJ.~PJ#BBPBBGGPPPPPGGP??J?!^755555PPGBGGBY55B################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&P:^YPGBBBGGGP5J7!?Y5GBBBGP5Y?7!~PGY:^YPGBBBGGGP5Y7!7Y5PBBBGP5Y?7!~5GG##Y5BGGGPPPPGGBGYG##B!.J5PP5PPPGPPG??YG################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&G^^YPBBBGGGP5J~:7PBG5JJ?JY5PB#BBG#P^^YPGBBGGGP5J~:?5GG5YJJJ5PPB#BGG####P!5BGGGGGGGGBPJ5GGGJ:~Y5GPPPPPGP5Y^JPG################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&#?~5PGBBGGGG5J:^PB5JJY5PPGGGPG#####?~5PGBBGGGG5Y^~PB5YJY55PGGGPG######BB!!PGBBGGGGGGG5???777JPGBGGPPPPPYJ:^P5B################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&G7YGGBBGGGGP5!~G#5G#&&&&&######B##G7YGGBBGGGGP57!G#PYG###B########BB##G?.?PPGGGGGGBGGGGGPPBBB##BGGGPP5J7:!PY5#################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&Y!PGGBBGGGGP5~7B##############BB##5!PGGBBGGGGPP?YB##PB###PB#######BB#BP^^5PGGGGGGBBBB#B#PGBBBBGGGGPPY?775P?J##################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&Y!PGGBBBBBBPP77B&#############BB##Y!PGGBBBBBBGG55BBBGBBBB5BBBB####BB#BY~JPGBBBBBGGG5YJ????JJJJYY5PGGPPGPJ?P###################\r\n// &&&&&&&&&&&&&&&&&&&&&&#&G75GGBBBBB#BGGPPGBBBBBGGGPPP5PPG##G75GGBBBBBBBBBGGGGPGPPPY5PPPGBBBBGBBYYGGBBBBBGGGJ!!~~~~~!7?J5PB#BBP5YYP#####################\r\n// &&&&&&&&&&&&&&&&&&&&#####?!PPGBBBB##BBBBPJJ?7!!~~~~!!~?G###JJGGBBBBBGGGP55YYYYYJJ7??JJY5PGGPBBPBBBBBBBBGBGYYGBBBBB######BGP5PGB#######################\r\n// &&&&&&&&&&&&&&&&&&#######P:~Y5GBBB######BBGGGGGGGGGG57YYB##GJYGGGPP5555Y????7??7777777?J5P5YBBBBBBBBBBBB#GBB#BBBBBB#B#################################\r\n// &&&&&&&&&&&&&&&&&########BP^:?5GBB###############BBBPP5JBBBBPJYYJJ?7?JJJJ?7?7777??????JJ5P5JGGBBBBBBBBB#BJG#####BB####################################\r\n// &&&&&&&&&&&&&&&&#########GGBY77YGGBBBBBB##BB##BBBB#BG#P5BBG5J7!!777!!7????777?7?????JJJYYPY?GGGBBBGGPPPGJ?B#####BB####################################\r\n// &&&&&&&&&&&&&&&###########P5B#G5GGP555555YYJJJJJJYYJPBPPBPJ!~!!!!!7!!!!7???7?JJJJ?????JY55YJGGPPPGG5YJJJJP######BB####################################\r\n// &&&&&&&&&&&&&&&############B5Y5GB#BPYJJ7!!~^~~!7?Y5GBBPPP!^^~~~~^^~!7!~!7?J??JJJJJJJYY55PP5YGPPP5PGGGGBBBB######BB####################################\r\n// &&&&&&&&&&&&&&&##############B5J??JYPPGPPPPGBB#####BBBGY~::^^^^^^^^!!~!7?JY?JJ55YYY55PPPPPP5GGP55PGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&&&################&&#BP5YYYYYY5G###BBBBBBB5~:::^^^:^^^~~~!7?JJYJ5Y555JY555555555P55YYPGBBBBBBB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&&####################################BBBBG7^::::^^^^~~!~!!?JJJYJY5YYY5GGGGGPP55YYJJYY5GBBBB#BG#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&&####################################BBBBG?~^::^^^^^~~~~~7YYYYYYYYY?J5GGGGGGGGGP555YYPPGBBB#BP#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&#####################################BBBBB5~~^^~^^:^~^~!!?55PPGGGGP5PGGGGGGBBBGGGGP5YPGBBBB#BP##BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&####################################BBBBBB5~^^^~^^:^~~~~!!?YGBBBBBBBBBBBBBBBBBBGBBGPPGBBBBB#BG#B##########################################\r\n// &&&&&&&&&&&######################################BBBBBJ:::^^~7!77!~~!!7J5PGBBBBBBBBBBBBBBBGGBBBBBBBBBBB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&#######################################BBBBPJJ7~?YPJ5P5YY55PGGGPPGBBBBBBBBBBGP5PBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&########################################BBBBGPGGG5JPY5GBBBBGGBBGGGGGBBBBBBBGPY5GBBBBBBBBBBB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&########################################BBBBBBBP5PJJYYGBGGBPPGGPYGGGPPPPGGGGGGBBBBBBBBBBBGB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&######################################B####BBBBBBY7!7J?JY55GP555J5GPPGGBBBBBBBBBBBBBBBBB#BGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&#######################################BB####BBBBB57?JYJJ777JJJYJPGPGGBBBBBBBBBBBGBBBBBBB#BPBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&#######################################BB######BBBGPGGPY5YY55YYPGGGGBBBBBBBBBBBBGGGBBBBBB#BPB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&#######################################BB######BBBBBBBGGPGGPP55BBBBBBBBBBBBBBBBBBBGBBBBBB#B5B#BB#BBBBBBBB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&######################################BB######BB#BBBBPPBGPPY5PGGGBBBBBBBBBBBBBBBBGGGB#BB#BJB#BB#BBBBBBBB#BB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&###############################BB#####BB######BB##BBBGJ5Y5YJYP5GGGBBBBBBBBBBBBBBBGGPB#BB#B?G#BB#BBBBBBBB#GG#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&##############################BB#####GB######BB###BBBP5YYJYYGGPBBBBBBGBBGGBBBBBGGBGBBBB#BJB#BB#BBBBB#BB#PP#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&##############################BB#####GG######B#####BBB5YY5PPGBBBBBBBGPGGGBGBBBBBBBBBBBB#B5B#GG#BBBBBBBB#GG#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&#############################BB#####PPB#####BB#####BBBGBBBGGBBBBBGGPYGBBBGBBB###BGG#BBBBPB#PP#B#BGB#BB#BB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&#########################B###GG#####55B#####BB######B##BGGGGGGBGGPPPPBBBBGB#####BGG#BBBBGB#GG#B#BGB#BB#BB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&########################G###GP#####YJB#####BB#########BBBGGGGPPGGGPPBB#BGB######PG#BBBBGB#BB#B#GPB#B##BB#BBBB#BBB#BBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&&#######################B###P5####BJ?GBBBB#GB#BBB####BBGG5Y55Y5PGGP5BBBGPBBBBBBBJYBBBBBBB#BB###G5BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&&################BBBBBBBBBBBYJBBBGGJJGBGGPP?JYYJ???JYYYYJ?JYYYYJJ57~?Y5Y75P5YJYY~7P5PPPPGBGPPPGY7GBBBGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&&&##############BBBBBBBGGGGP7!55YY?:.~~!??7^~!!77?7!::~!~^~7Y5PJ!7~:~YPY~YYJ??J7:.^^^~~~~~^!?JJ!^?JJJYYY5YPPPGGGBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n// &&&&&&&&#####################BBBGGP5YJ??!!?7!77~~7!:^7J~?555YYYJJJ?JJJJJJJJJJJJJJJJ7:?JJJJJJ^~777!~!??7!~^:..^^:^~7JYJPGGBBBBBB#########BBBBBBBBBBBBBB\r\n// &&&&&&&#########BBBBBBBBGGGGPPP555YJ7!~^..^:^!7?YP5YYYJ^~7?JJJJYYY55555PPPPPPPPPPPPJ~Y55YYYJ~~J?JJJ?JJJJ??J7~JYJ?777!^~7??JYY55PPPGGGBBBBBBBBBBBBBB###\r\n// &&&&&&&&&&&&&######BBBBGGGPP555Y?!?J5PPPJ?Y5PP5??JJ??J?^7J5PGGGBBBBBBB#############GYBBBBBBGY5P55YJ????JYYY7!YYJ!~^^:.....:~!7??JY55PPGGGGBBBBBBBBB###\r\n// ###############BBBBBGGGP55YJJ7~^~7J??7?PPPGP55Y????JY5P?55GBB######################BPB#####BGGBBGGGP5YJ???J7~?5PPY!:~!??7^.~??JYY55PPPGGGGGBBBBBBBBBBB\r\n// #########BBBBBBBBBGGGGGPPP55J!:?5YJ7~:?GP55?JYJ?7!J5PPG5P5G########################BGB######BBBBBBGGP5Y?7????YY5PGGY~!!7?7^.^7?JYY55PPPGGGGGGGGGBBBBBB\r\n// &&&&&############BBBGGP55YJ?~..^7!~:. ~PGPPYJYYJJ77JY5PYP5GBBBB####################BB######BBBBBGGPP5J???JJ?!?YPGGP5PGGGBGJ:!YPPPGGGBBBBBBB###########\r\n// &&&&&&&&&&#####BBGGP5YYJ7!~^^: .!YPP5Y~7YPGBGP5YY7?JJJ?7??YPPPPGBBBBBBB#BB#######BBBGBBBBGGGP555YJJ???JJYJJJYPGPY7^^~!??7!^^!?JJYY55PPGGGGBBBBB#######\r\n// &&&&&&&######BBBBGGPPP55YJJ???7!^^7YPGJ5J7!!7J5PGJ5P55Y???JJJ?!JYYYYY5555?555555555YJYYYYJJJ??JJJJJY555PPP5Y5P5J7!!~:.:. .:^~!77?JYY55PPPGGGGBBBBBB###\r\n// &&&##########BBBBBBBBGGGP55YJ?77!!^:^^::!7JJJY5YJ~!?JY5Y55PPPY755YYYYYYYY7YYYJJYYYYYJY55Y55555PPPPPGGGGP5?!::^7??77!~!7??77!!!!!7?JY55PPGGGGGBBBBBBBBB\r\n// &###############BBBBGGGGGGPPPPPPP5555YJJYJ?7!!^:..:~~^^:!?Y5PY7PPPGGGGGPYJYYYYPGGGP5J??J??7!!?YPPPPPPPP55Y?7~. ::^^!7JJYY55PPPPPPPPPPPPGGGGGBBBBBBBBBB\r\n// &&&&&&&&&&################BBBBBGGGGGP5?7~^:^~!!!~:::~!77?JYYYJ?PPGBBBBPJ. ^~J~JGGGPY!: ::^~^..^~!7!~^:.^JYYY555YJ??JYY5PPGGGGPPGGGGGBBBBBBBBBBBBBBBB##\r\n// &&&&&&&&&&&&&&&&&############BBBGGP5YJJYY555YJJ?JJY55YYYYYJJJJJPGBBBGPY!.:!JYY~75P5Y?!^. :^~~~~^::^!77!7JYPGGBBBBBBGGPPPPPGGBBBBBBBBBGGGGBBBBBBBBBBBBB\r\n// &&&&&&&&&&&&&&&&&&&#########BBBBGGBBBBBGGPPPPGGGGPPPGGGGGGGGBBB#####BGPY?JPPPG7!5GGGPPYJ!!?JJY555J??JY5PGGGGGBBB########BBBBGGBBBB########BBBBBBBBBBBB\r\n// &&&&&&&&&&&&&&&&&&&&&&###########BBBGGGBBBB#BBBBBBBB##BB############BBGPPPGBGB5J5BBBBBBGP5555PGGBBGGPP5PGBB#######################BBBBB#############BB\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&####BBBBBBB#################################BBGGBBBB#G5PB######BBGGGGBBBBBBBBBBGGGBB#########################################\r\n// &&&&&&&&&&&&&&&&&&&&&&####BBBB#######################################BBGBB####BGGB#########BBBBB##########BBBBBB######################################\r\n// &&&&&&&&&&&&&&&&&&&############&&&&&&&&&&&###########################BBBB#####BGGB############################BBBB####################################\r\n// &&&&&&&&&&&&&&&&&&&#&&&&&&&&&&&&&&&&&&&&&&&&&########################BBB######BBBB####################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&################################BBB####################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###################################################################################################\r\n// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&################################################################################################\r\n\r\ncontract CryptoCloudPunks is ERC1155, Ownable {\r\n    // editing section starts below here\r\n    string public name = \"Crypto Cloud Punks\"; //name your NFT collection\r\n    string public symbol = \"CCPS\"; //few letters to represent the symbol of your collection\r\n    string private ipfsCID = \"QmWAE7eWhf1Mq8jeRGuE7brP3186Vpv28QLTDhhrYJVgCU\"; // ipfs metadata folder CID as the starting or hidden NFT\r\n    uint256 public collectionTotal = 8888; // total number of NFTs to start your collection\r\n    uint256 public cost = 0.01 ether;  // Phase 1 price per mint\r\n    uint256 public maxMintAmount = 20; // max amount a user other than owner can mint at in one session\r\n    uint256 public maxBatchMintAmount = 20;  // max batch amount a user other than owner can mint at in one session\r\n    uint256 public whitelisterLimit = 88; // max amount a whitelisted user can mint during presale \r\n    // editing section end\r\n\r\n    bool public paused = false;\r\n    bool public revealed = false;\r\n    bool public mintInOrder = true;\r\n\r\n    uint256 public ogCollectionTotal; // the original collection total\r\n    uint256 public tokenNextToMint; //next token index to mint\r\n    mapping(uint => string) private tokenURI;\r\n    mapping(uint256 => uint256) private currentSupply;\r\n    mapping(uint256 => bool) private hasMaxSupply;\r\n    mapping(uint256 => uint256) public maxSupply;\r\n    mapping(uint256 => bool) private createdToken; // if true token has been minted at least one time or was updated into the collection total\r\n\r\n    bool public onlyWhitelisted = true;\r\n    address[] public whitelistedAddresses;\r\n    mapping(address => uint256) public whitelisterMintedBalance;\r\n\r\n    address payable public payments; //0xCc4e40f98C507501F5DF1BCc8BAE21b4637d6f7b the payout address for the withdraw function\r\n    address public admin_1 = 0x522ee4130B819355e10218E40d6Ab0c495219690;\r\n\r\n    constructor() ERC1155(\"\"){\r\n        ogCollectionTotal = collectionTotal;\r\n        maxSupply[1] = 1;\r\n        hasMaxSupply[1] = true;\r\n        createdToken[1] = true;\r\n        currentSupply[1] = 1; //sets current supply to the amount minted on deploy\r\n        tokenNextToMint = 2; //sets the next token index to mint on deploy\r\n        _mint(msg.sender, 1, 1, \"\"); //sends Owner, NFT id 1, amount 1\r\n    }\r\n\r\n    /**\r\n     * @dev The contract developer's website.\r\n     */\r\n    function contractDev() public pure returns(string memory){\r\n        string memory dev = unicode\"? HalfSuperShop.com ?\";\r\n        return dev;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set the PAUSE state.\r\n     * true = closed to Admin Only\r\n     * false = open for Presale or Public\r\n     */\r\n    function pause(bool _state) public onlyAdmins {\r\n        paused = _state;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows Admins, Whitelisters, and Public to Mint NFTs in Order from 1-ogCollectionTotal.\r\n     * Can only be called by the Public when onlyWhitelisted is false.\r\n     */\r\n    function _mintInOrder(uint _numberOfTokensToMint) public payable {\r\n        require(mintInOrder, \"This Can Only Be Used When mintInOrder is True\");\r\n        require(!paused, \"Contract Paused\");\r\n        require(!exists(8888), \"Collection Minted Out\");\r\n        require(_numberOfTokensToMint + tokenNextToMint <= ogCollectionTotal + 1, \"Exceeds Collection Total, Please Lower Amount\");\r\n\r\n        if (!checkIfAdmin()) {\r\n            if (onlyWhitelisted) {\r\n                require(isWhitelisted(msg.sender), \"Not Whitelisted\");\r\n                uint256 whitelisterMintedCount = whitelisterMintedBalance[msg.sender];\r\n                require(whitelisterMintedCount + _numberOfTokensToMint <= whitelisterLimit, \"Exceeded Max Whitelist Mint Limit\");\r\n            }\r\n            require(msg.value >= (_numberOfTokensToMint * costPhase()), \"Insufficient Funds\");\r\n        }\r\n\r\n        whitelisterMintedBalance[msg.sender] += _numberOfTokensToMint;\r\n\r\n        uint256[] memory _ids = new uint256[](_numberOfTokensToMint);\r\n        uint256[] memory _amounts = new uint256[](_numberOfTokensToMint);\r\n        for (uint256 i = 0; i < _numberOfTokensToMint; i++) {\r\n            uint256 _id = tokenNextToMint;\r\n            if (!exists(_id)) {\r\n                createdToken[_id] = true;\r\n                maxSupply[_id] = 1;\r\n                hasMaxSupply[_id] = true;\r\n                currentSupply[_id] = 1;\r\n            }\r\n\r\n            _ids[i] = tokenNextToMint;\r\n            _amounts[i] = 1;\r\n            tokenNextToMint++;\r\n        }\r\n\r\n        _mintBatch(msg.sender, _ids, _amounts, \"\");\r\n    }\r\n\r\n    function costPhase() public view returns(uint256){\r\n        if (tokenNextToMint <= 100){\r\n            return 10000000000000000;\r\n        }\r\n        if (tokenNextToMint >= 101 && tokenNextToMint <= 300){\r\n            return 30000000000000000;\r\n        }\r\n        if (tokenNextToMint >= 301 && tokenNextToMint <= 8888){\r\n            return 60000000000000000;\r\n        }\r\n        return cost;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows Owner, Whitelisters, and Public to Mint a single NFT.\r\n     * Can only be called by the Public when onlyWhitelisted is false.\r\n     */\r\n    function mint(address _to, uint _id, uint _amount) public payable {\r\n        require(!mintInOrder, \"Only Can Use the Mint In Order Function At This Time\");\r\n        require(!paused, \"Contract Paused\");\r\n        require(canMintChecker(_id, _amount), \"CANNOT MINT\");\r\n        if (_id <= ogCollectionTotal){\r\n            require(oneOfOneOnly(_id, _amount), \"Amount must be 1 for this NFT\");\r\n            require(!createdToken[_id], \"Token Already Minted\");\r\n            maxSupply[_id] = 1;\r\n            hasMaxSupply[_id] = true;\r\n        }\r\n\r\n        if (!checkIfAdmin()) {\r\n            if (onlyWhitelisted == true) {\r\n                require(isWhitelisted(msg.sender), \"Not Whitelisted\");\r\n                uint256 whitelisterMintedCount = whitelisterMintedBalance[msg.sender];\r\n                require(whitelisterMintedCount + _amount <= whitelisterLimit, \"Exceeded Max Whitelist Mint Limit\");\r\n            }\r\n            require(msg.value >= (_amount * cost), \"Insufficient Funds\");\r\n        }\r\n\r\n        whitelisterMintedBalance[msg.sender] += _amount;\r\n        currentSupply[_id] += _amount;\r\n        if (!exists(_id)) {\r\n            createdToken[_id] = true;            \r\n        }\r\n        _mint(_to, _id, _amount, \"\");\r\n    }\r\n\r\n    function canMintChecker(uint _id, uint _amount) private view returns(bool){\r\n        if (hasMaxSupply[_id]) {\r\n            if (_amount > 0 && _amount <= maxMintAmount && _id > 0 && _id <= collectionTotal && currentSupply[_id] + _amount <= maxSupply[_id]) {\r\n                // CAN MINT\r\n            }\r\n            else {\r\n                // CANNOT MINT \r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            if (_amount > 0 && _amount <= maxMintAmount && _id > 0 && _id <= collectionTotal) {\r\n                // CAN MINT\r\n            }\r\n            else {\r\n                // CANNOT MINT \r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows Owner, Whitelisters, and Public to Mint multiple NFTs.\r\n     * Can only be called by the Public when onlyWhitelisted is false.\r\n     * Note: Only mint a max of {mintMaxAmount} or less NFT IDs with a totaling amount of {maxBatchMintAmount} at a time.\r\n     * Example to Mint 3 of each Token IDs 1, 2, 3, 4:\r\n     * _ids = [1,2,3,4]\r\n     * _amounts = [3,3,3,3]\r\n     * 4 seperate NFTs with a quantity of 3 each has a totaling amount of 12.\r\n     */\r\n    function mintBatch(address _to, uint[] memory _ids, uint[] memory _amounts) public payable {\r\n        require(!mintInOrder, \"Only Can Use the Mint In Order Function At This Time\");\r\n        require(!paused, \"Contract Paused\");\r\n        require(_ids.length <= maxMintAmount, \"Batch Token IDs Limit Exceeded\");\r\n        require(_ids.length == _amounts.length, \"IDs Array Not Equal To Amounts Array\");\r\n        require(canMintBatchChecker(_ids, _amounts), \"CANNOT MINT BATCH\");\r\n\r\n        uint256 _totalBatchAmount;\r\n        for (uint256 i = 0; i < _amounts.length; i++) {\r\n            uint256 _id = _ids[i];\r\n            uint256 _amount = _amounts[i];\r\n            if (_id <= ogCollectionTotal){\r\n                require(oneOfOneOnly(_id, _amount), \"Amount must be 1 for this NFT\");\r\n                require(!createdToken[_id], \"Token Already Minted\");\r\n                maxSupply[_id] = 1;\r\n                hasMaxSupply[_id] = true;\r\n            }\r\n            _totalBatchAmount += _amounts[i];\r\n        }\r\n        require(_totalBatchAmount <= maxBatchMintAmount, \"Batch Amount Limit Exceeded\");\r\n\r\n        if (!checkIfAdmin()) {\r\n            if (onlyWhitelisted) {\r\n                require(isWhitelisted(msg.sender), \"Not Whitelisted\");\r\n                uint256 whitelisterMintedCount = whitelisterMintedBalance[msg.sender];\r\n                require(whitelisterMintedCount + _totalBatchAmount <= whitelisterLimit, \"Exceeded Max Whitelist Mint Limit\");\r\n            }\r\n            require(msg.value >= (_totalBatchAmount * cost), \"Insufficient Funds\");\r\n        }\r\n\r\n        whitelisterMintedBalance[msg.sender] += _totalBatchAmount;\r\n\r\n        for (uint256 k = 0; k < _ids.length; k++) {\r\n            currentSupply[_ids[k]] += _amounts[k];\r\n            uint256 _id = _ids[k];\r\n            if (!exists(_id)) {\r\n                createdToken[_id] = true;\r\n            }\r\n        }\r\n\r\n        _mintBatch(_to, _ids, _amounts, \"\");\r\n    }\r\n\r\n    function canMintBatchChecker(uint[] memory _ids, uint[] memory _amounts)private view returns(bool){\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            uint256 _id = _ids[i];\r\n            uint256 _amount = _amounts[i];\r\n            if (hasMaxSupply[_id]) {\r\n                if (_amount > 0 && _amount <= maxMintAmount && _id > 0 && _id <= collectionTotal && currentSupply[_id] + _amount <= maxSupply[_id]) {\r\n                    // CAN MINT\r\n                }\r\n                else {\r\n                    // CANNOT MINT\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (_amount > 0 && _amount <= maxMintAmount && _id > 0 && _id <= collectionTotal) {\r\n                    // CAN MINT\r\n                }\r\n                else {\r\n                    // CANNOT MINT\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows Admin to Mint a single NEW NFT.\r\n     * Can only be called by the current owner.\r\n     * Note: NEW NFT means above and beyond the original collection total.\r\n     */\r\n    function adminMint(address _to, uint _id, uint _amount) external onlyAdmins {\r\n        require(_id > ogCollectionTotal, \"ID Must Not Be From Original Collection\");\r\n        if (!exists(_id)) {\r\n            createdToken[_id] = true;\r\n            collectionTotal++;\r\n        }\r\n        currentSupply[_id] += _amount;\r\n        _mint(_to, _id, _amount, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Allows Admin to Mint multiple NEW NFTs.\r\n     * Can only be called by the current owner.\r\n     * Note: NEW NFT means above and beyond the original collection total.\r\n     * Ideally it's best to only mint a max of 70 or less NFT IDs at a time.\r\n     * Example to Mint 3 of each Token IDs 1, 2, 3, 4:\r\n     * _ids = [1,2,3,4]\r\n     * _amounts = [3,3,3,3]\r\n     */\r\n    function adminMintBatch(address _to, uint[] memory _ids, uint[] memory _amounts) external onlyAdmins {\r\n        require(!checkIfOriginal(_ids), \"ID Must Not Be From Original Collection\");\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            uint256 _id = _ids[i];\r\n            if (!exists(_id)) {\r\n                createdToken[_id] = true;\r\n                collectionTotal++;\r\n            }\r\n            currentSupply[_id] += _amounts[i];\r\n        }\r\n        _mintBatch(_to, _ids, _amounts, \"\");\r\n    }\r\n\r\n    /**\r\n    * @dev Allows User to DESTROY a single token they own.\r\n    */\r\n    function burn(uint _id, uint _amount) external {\r\n        currentSupply[_id] -= _amount;\r\n        _burn(msg.sender, _id, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows User to DESTROY multiple tokens they own.\r\n    */\r\n    function burnBatch(uint[] memory _ids, uint[] memory _amounts) external {\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            uint256 _id = _ids[i];\r\n            currentSupply[_id] -= _amounts[i];\r\n        }\r\n        _burnBatch(msg.sender, _ids, _amounts);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows Admin to REVEAL the original collection.\r\n    * Can only be called by the current owner once.\r\n    * WARNING: Please ensure the CID is 100% correct before execution.\r\n    */\r\n    function reveal(string memory _uri) external onlyAdmins {\r\n        require(!revealed, \"Already set to Revealed\");\r\n        ipfsCID = _uri;\r\n        revealed = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows Admin to set the URI of a single token.\r\n    * Note: Original Token URIs cannot be changed.\r\n    *       Set _isIpfsCID to true if using only IPFS CID for the _uri.\r\n    */\r\n    function setURI(uint _id, string memory _uri, bool _isIpfsCID) external onlyAdmins {\r\n        require(_id > ogCollectionTotal, \"ID Must Not Be From Original Collection\");\r\n        if (_isIpfsCID) {\r\n            string memory _uriIPFS = string(abi.encodePacked(\r\n                \"ipfs://\",\r\n                _uri,\r\n                \"/\",\r\n                Strings.toString(_id),\r\n                \".json\"\r\n            ));\r\n\r\n            tokenURI[_id] = _uriIPFS;\r\n            emit URI(_uriIPFS, _id);\r\n        }\r\n        else {\r\n            tokenURI[_id] = _uri;\r\n            emit URI(_uri, _id);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows Admin to set the URI of multiple tokens.\r\n    * Note: Original Token URIs cannot be changed.\r\n    *       Set _isIpfsCID to true if using only IPFS CID for the _uri.\r\n    */\r\n    function setBatchURI(uint[] memory _ids, string memory _uri, bool _isIpfsCID) external onlyAdmins {\r\n        require(_ids.length > 1, \"Must have at least 2 ids\");\r\n        require(!checkIfOriginal(_ids), \"ID Must Not Be From Original Collection\");\r\n\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            uint256 _id = _ids[i];\r\n            if (_isIpfsCID) {\r\n                string memory _uriIPFS = string(abi.encodePacked(\r\n                    \"ipfs://\",\r\n                    _uri,\r\n                    \"/\",\r\n                    Strings.toString(_id),\r\n                    \".json\"\r\n                ));\r\n\r\n                tokenURI[_id] = _uriIPFS;\r\n                emit URI(_uriIPFS, _id);\r\n            }\r\n            else {\r\n                tokenURI[_id] = _uri;\r\n                emit URI(_uri, _id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uri(uint256 _id) override public view returns(string memory){\r\n        if (_id > 0 && _id <= ogCollectionTotal) {\r\n            if(!revealed){\r\n                return (\r\n                string(abi.encodePacked(\r\n                    \"ipfs://\",\r\n                    ipfsCID,\r\n                    \"/\",\r\n                    \"hidden\",\r\n                    \".json\"\r\n                )));\r\n            }\r\n            else{\r\n                return (\r\n                string(abi.encodePacked(\r\n                    \"ipfs://\",\r\n                    ipfsCID,\r\n                    \"/\",\r\n                    Strings.toString(_id),\r\n                    \".json\"\r\n                )));\r\n            }\r\n                \r\n        }\r\n        else {\r\n            return tokenURI[_id];\r\n        }\r\n    }\r\n\r\n    function checkIfOriginal(uint[] memory _ids) private view returns(bool){\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            uint256 _id = _ids[i];\r\n            if (_id <= ogCollectionTotal) {\r\n                // original\r\n            }\r\n            else {\r\n                // new\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function oneOfOneOnly (uint _id, uint _amount) private view returns (bool){\r\n        if (_id <= ogCollectionTotal && _amount == 1){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Total amount of tokens in with a given id.\r\n    */\r\n    function totalSupply(uint256 _id) public view returns(uint256) {\r\n        return currentSupply[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev Indicates whether any token exist with a given id, or not.\r\n     */\r\n    function exists(uint256 _id) public view returns(bool) {\r\n        return createdToken[_id];\r\n    }\r\n\r\n    /**\r\n    * @dev Checks max supply of token with the given id.\r\n    */\r\n    function checkMaxSupply(uint256 _id) public view returns(uint256) {\r\n        if(_id <= ogCollectionTotal){\r\n            return 1;\r\n        }\r\n        else{\r\n            return maxSupply[_id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set a supply limit.\r\n     * Note: If supply amount is set to 0 that will make the supply limitless.\r\n     */\r\n    function setMaxSupplies(uint[] memory _ids, uint[] memory _supplies) external onlyAdmins {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            uint256 _id = _ids[i];\r\n            maxSupply[_id] += _supplies[i];\r\n            if (_supplies[i] > 0) {\r\n                // has a max limit\r\n                hasMaxSupply[i] = true;\r\n            }\r\n            else {\r\n                // infinite supply, because you wouldn't create a token max supply with an amount of zero \r\n                hasMaxSupply[i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can update the collection total to allow minting the newly added NFTs.\r\n     */\r\n    function updateCollectionTotal(uint _amountToAdd) external onlyAdmins {\r\n        collectionTotal += _amountToAdd;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if address is whitelisted.\r\n     */\r\n    function isWhitelisted(address _user) public view returns(bool) {\r\n        for (uint256 i = 0; i < whitelistedAddresses.length; i++) {\r\n            if (whitelistedAddresses[i] == _user) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set the amount of NFTs a user can mint in one session.\r\n     */\r\n    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyAdmins {\r\n        maxMintAmount = _newmaxMintAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set the max amount of NFTs a whitelister can mint during presale.\r\n     */\r\n    function setNftPerWhitelisterLimit(uint256 _limit) public onlyAdmins {\r\n        whitelisterLimit = _limit;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set the PRESALE state.\r\n     * true = presale ongoing for whitelisters only\r\n     * false = sale open to public\r\n     */\r\n    function setOnlyWhitelisted(bool _state) public onlyAdmins {\r\n        onlyWhitelisted = _state;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set the addresses as whitelisters.\r\n     * Example: [\"0xADDRESS1\", \"0xADDRESS2\", \"0xADDRESS3\"]\r\n     */\r\n    function whitelistUsers(address[] calldata _users) public onlyAdmins {\r\n        delete whitelistedAddresses;\r\n        whitelistedAddresses = _users;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set the new cost in WEI.\r\n     * 1 ETH = 10^18 WEI\r\n     * Use https://coinguides.org/ethereum-unit-converter-gwei-ether/ for conversions.\r\n     */\r\n    function setCost(uint256 _newCost) public onlyAdmins {\r\n        cost = _newCost;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set the payout address.\r\n     */\r\n    function setPayoutAddress(address _address) external onlyOwner{\r\n        payments = payable(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can pull funds to the payout address.\r\n     */\r\n    function withdraw() public payable onlyAdmins {\r\n        require(payments != 0x0000000000000000000000000000000000000000, \"Payout Address Must Be Set First\");\r\n        (bool success, ) = payable(payments).call{ value: address(this).balance } (\"\");\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @dev Auto send funds to the payout address.\r\n        Triggers only if funds were sent directly to this address.\r\n     */\r\n    receive() payable external {\r\n        require(payments != 0x0000000000000000000000000000000000000000, \"Payout Address Must Be Set First\");\r\n        uint256 payout = msg.value;\r\n        payments.transfer(payout);\r\n    }\r\n\r\n     /**\r\n     * @dev Throws if called by any account other than the owner or admin.\r\n     */\r\n    modifier onlyAdmins() {\r\n        _checkAdmins();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner or admin.\r\n     */\r\n    function _checkAdmins() internal view virtual {\r\n        require(msg.sender == owner() || msg.sender == admin_1, \"Admin Only: caller is not an admin\");\r\n    }\r\n\r\n    function checkIfAdmin() public view returns(bool) {\r\n        if (msg.sender == owner() || msg.sender == admin_1){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokensToMint\",\"type\":\"uint256\"}],\"name\":\"_mintInOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"adminMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"checkMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDev\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintInOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogCollectionTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isIpfsCID\",\"type\":\"bool\"}],\"name\":\"setBatchURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplies\",\"type\":\"uint256[]\"}],\"name\":\"setMaxSupplies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setNftPerWhitelisterLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setOnlyWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isIpfsCID\",\"type\":\"bool\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenNextToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToAdd\",\"type\":\"uint256\"}],\"name\":\"updateCollectionTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelisterLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisterMintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CryptoCloudPunks","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8d52f78b1d96e6308725cb3f1beff8e214a51b9fe9d048848e815a6eece2597b"}]}