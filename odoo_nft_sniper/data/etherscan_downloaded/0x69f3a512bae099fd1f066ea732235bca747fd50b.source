{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address, uint256) external;\r\n    function balanceOf(address) external view returns(uint256);\r\n}\r\n\r\n/// @title The Invoice contract sends all tokens to the receiver and destructs himself\r\n/// @author davy42\r\n/// @dev The rest of ETH on the wallet will be sent to the receiver even if it's a contract without receive function\r\ncontract Invoice {\r\n\r\n    /// @notice Constructor\r\n    /// @dev The Invoice contract has only constructor.\r\n    /// @param token The address of the erc20 token contract\r\n    /// @param receiver The address to which tokens will be sent\r\n    /// @param amount amount of tokens\r\n    constructor(IERC20 token, address payable receiver, uint256 amount) {\r\n        token.transfer(receiver, amount);\r\n        selfdestruct(receiver);\r\n    }\r\n}\r\n\r\n/// @title The Invoice contract sends all tokens to the receiver and destructs himself\r\n/// @author davy42\r\n/// @dev The rest of ETH on the wallet will be sent to the receiver even if it's a contract without receive function\r\ncontract SimpleInvoice {\r\n\r\n    /// @notice Constructor\r\n    /// @dev The Invoice contract has only constructor.\r\n    /// @param token The address of the erc20 token contract\r\n    /// @param receiver The address to which tokens will be sent\r\n    constructor(IERC20 token, address payable receiver) {\r\n        token.transfer(receiver, token.balanceOf(address(this)));\r\n        selfdestruct(receiver);\r\n    }\r\n}\r\n\r\ncontract Factory  {\r\n\r\n    bytes constant private invoiceCreationCode = type(SimpleInvoice).creationCode;\r\n\r\n    function withdraw(uint256 salt, address token, address receiver) external returns (address wallet) {\r\n        bytes memory bytecode = getByteCode(token, receiver);\r\n        assembly {\r\n            wallet := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(wallet != address(0), \"Create2: Failed on deploy\");\r\n    }\r\n\r\n    function computeAddress(uint256 salt, address token, address receiver) external view returns (address) {\r\n        bytes memory bytecode = getByteCode(token, receiver);\r\n        return computeAddress(bytes32(salt), bytecode, address(this));\r\n    }\r\n\r\n    function computeAddress(bytes32 salt, bytes memory bytecodeHash, address deployer) internal pure returns (address) {\r\n        bytes32 bytecodeHashHash = keccak256(bytecodeHash);\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHashHash)\r\n        );\r\n        return address(bytes20(_data << 96));\r\n    }\r\n    \r\n    \r\n    function getByteCode(address token, address receiver) private pure returns (bytes memory bytecode) {\r\n        bytecode = abi.encodePacked(invoiceCreationCode, abi.encode(token, receiver));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Factory","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e041498929e773b81a5a3264301658582c1af911c0ded3fb066a80b29017efbf"}]}