{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/SoulStakerNew.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\ninterface ISoulSplicers {\r\n    function safeTransferFrom(address,address,uint256,bytes memory) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\nerror IncorrectOwner();\r\nerror IncorrectStakePeriod();\r\nerror StakingNotComplete();\r\nerror NotStaked();\r\nerror NotBeenStaked();\r\nerror WrongSpender();\r\nerror StakingUnavailable();\r\nerror NotEnoughRewards();\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract SoulStaker is IERC721Receiver, Ownable{\r\n    ISoulSplicers public splicerContract;\r\n    SoulStaker public oldStakerContract;\r\n\r\n    struct StakedNFTData {\r\n        address owner;     \r\n        uint32 releaseTimestamp;\r\n        uint8 t1Rewards;\r\n        uint8 t2Rewards;\r\n        uint8 t3Rewards;        \r\n    }\r\n\r\n    bool t2StakingClosed = false;\r\n    bool t3StakingClosed = false;\r\n    bool earlyReleaseActive = false;\r\n    address spendingContract = address(0);\r\n    mapping(uint256 => StakedNFTData) public stakedNFTs;\r\n    mapping(address => uint256) public ownerTokenCount;\r\n\r\n    constructor() {\r\n        splicerContract = ISoulSplicers(0xfD4BfE64fea2ce11898c4b931AFAF728778a90b4);\r\n        oldStakerContract = SoulStaker(0xf80faba16B4757598c6FaD1Fe4134039649cB099);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) override pure external returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function stake(uint256[] calldata _tokenIds, uint8[] calldata _months) public {\r\n        uint256 tokenCount = ownerTokenCount[msg.sender];\r\n        bool isT2StakingClosed = t2StakingClosed;\r\n        bool isT3StakingClosed = t3StakingClosed;\r\n        if (earlyReleaseActive) revert StakingUnavailable();\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++){\r\n            uint8 months = _months[i];\r\n            uint256 tokenID = _tokenIds[i];\r\n\r\n            if (months != 1 && months != 3 && months != 5) revert IncorrectStakePeriod();\r\n            StakedNFTData memory nftData; \r\n            if (stakedNFTs[tokenID].t1Rewards > 0) nftData = stakedNFTs[tokenID];\r\n            if (months == 3 && (isT2StakingClosed || nftData.t2Rewards > 0)) revert IncorrectStakePeriod();\r\n            if (months == 5 && (isT3StakingClosed || nftData.t3Rewards > 0)) revert IncorrectStakePeriod();\r\n            \r\n            splicerContract.safeTransferFrom(msg.sender, address(this), tokenID, \"0x00\");\r\n            addRewards(nftData, months, tokenID);\r\n            stakedNFTs[tokenID].releaseTimestamp = uint32(block.timestamp) + (months * 2592000);\r\n            stakedNFTs[tokenID].owner = msg.sender;\r\n            tokenCount += 1;\r\n        }\r\n        ownerTokenCount[msg.sender] = tokenCount;\r\n    }\r\n\r\n    function restake(uint256[] calldata _tokenIds, uint8[] calldata _months) public {\r\n        bool isT2StakingClosed = t2StakingClosed;\r\n        if (earlyReleaseActive) revert StakingUnavailable();\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++){\r\n            uint8 months = _months[i];\r\n            uint256 tokenID = _tokenIds[i];\r\n            StakedNFTData memory nftData = stakedNFTs[tokenID];\r\n\r\n            if (nftData.owner != msg.sender) revert IncorrectOwner();\r\n            if (block.timestamp < nftData.releaseTimestamp) revert StakingNotComplete();\r\n            if (months != 1 && months != 3) revert IncorrectStakePeriod();\r\n            if (months == 3 && (isT2StakingClosed || nftData.t2Rewards > 0)) revert IncorrectStakePeriod();\r\n            \r\n            addRewards(nftData, months, tokenID);\r\n            stakedNFTs[tokenID].releaseTimestamp = uint32(block.timestamp) + (months * 2592000);\r\n        }\r\n    }\r\n\r\n    function stakeFromOldContract(uint256[] calldata _tokenIds) public {\r\n        if (block.timestamp > 1661983740) revert StakingUnavailable();\r\n        uint256 tokenCount = ownerTokenCount[msg.sender];\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++){\r\n            uint256 tokenID = _tokenIds[i];\r\n            (, uint32 releaseTimestamp, , , ) = oldStakerContract.stakedNFTs(tokenID);\r\n            uint8 months = 0;\r\n\r\n            if (releaseTimestamp > 1669846140) months = 5;\r\n            else if (releaseTimestamp > 1664662140) months = 3;\r\n            else if (releaseTimestamp > 1659478140) months = 1;\r\n            else revert NotBeenStaked();\r\n\r\n            StakedNFTData memory nftData;\r\n            splicerContract.safeTransferFrom(msg.sender, address(this), tokenID, \"0x00\");\r\n\r\n            addRewards(nftData, months, tokenID);\r\n            stakedNFTs[tokenID].releaseTimestamp = releaseTimestamp;\r\n            stakedNFTs[tokenID].owner = msg.sender;\r\n            tokenCount += 1;\r\n        }\r\n        ownerTokenCount[msg.sender] = tokenCount;\r\n    }     \r\n\r\n    function unstake(uint256[] calldata _tokenIds) public {\r\n        bool isEarlyRealeaseActive = earlyReleaseActive;\r\n        uint256 ownerCount = ownerTokenCount[msg.sender];\r\n        for (uint256 i = 0; i < _tokenIds.length; i++){\r\n            uint256 tokenID = _tokenIds[i];\r\n            StakedNFTData memory nftData = stakedNFTs[tokenID];\r\n            if (stakedNFTs[tokenID].owner != msg.sender) revert IncorrectOwner();\r\n            if (!isEarlyRealeaseActive && block.timestamp < nftData.releaseTimestamp) revert StakingNotComplete();\r\n            splicerContract.safeTransferFrom(address(this), msg.sender, tokenID, \"0x00\");\r\n            delete stakedNFTs[tokenID].owner;\r\n            ownerCount -= 1;\r\n        }\r\n        ownerTokenCount[msg.sender] = ownerCount;\r\n    }    \r\n\r\n    function spendRewards(uint256 _tokenID, uint8 _t1, uint8 _t2, uint8 _t3) public {\r\n        if (msg.sender != spendingContract) revert WrongSpender();\r\n        StakedNFTData memory nftRewards = stakedNFTs[_tokenID];\r\n        if (_t1 > nftRewards.t1Rewards || _t2 > nftRewards.t2Rewards || _t3 > nftRewards.t3Rewards) revert NotEnoughRewards();\r\n\r\n        nftRewards.t1Rewards -= _t1;\r\n        nftRewards.t2Rewards -= _t2;        \r\n        nftRewards.t3Rewards -= _t3;\r\n        stakedNFTs[_tokenID] = nftRewards;\r\n    }    \r\n\r\n    function setEarlyRelease(bool _earlyRelease) public onlyOwner {\r\n        earlyReleaseActive = _earlyRelease;\r\n    }\r\n\r\n    function setT2End(bool _ended) public onlyOwner {\r\n        t2StakingClosed = _ended;\r\n    }\r\n\r\n    function SetT3End(bool _ended) public onlyOwner {\r\n        t3StakingClosed = _ended;\r\n    }\r\n\r\n    function setSpendingContract(address _contractAddress) public onlyOwner {\r\n        spendingContract = _contractAddress;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return ownerTokenCount[owner] + splicerContract.balanceOf(owner) + oldStakerContract.ownerTokenCount(owner);\r\n    }\r\n\r\n    function getTimeRemaining(uint256 _tokenID) public view returns (uint256) {\r\n        StakedNFTData memory nftData = stakedNFTs[_tokenID];\r\n        if (nftData.owner == address(0)) revert NotStaked();\r\n        if (block.timestamp >= nftData.releaseTimestamp) return 0;\r\n        return nftData.releaseTimestamp - block.timestamp;\r\n    }\r\n\r\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\r\n        uint256 tokenCount = ownerTokenCount[_owner];\r\n        uint256 currentTokenId = 0;\r\n        uint256 arrIndex = 0;\r\n        uint256[] memory tokenIds = new uint256[](tokenCount);\r\n\r\n        while (arrIndex < tokenCount && currentTokenId <= 2600)\r\n        {\r\n            if (stakedNFTs[currentTokenId].owner == _owner)\r\n            {\r\n                tokenIds[arrIndex] = currentTokenId;\r\n                arrIndex++;\r\n            }\r\n            currentTokenId++;\r\n        }       \r\n        return tokenIds;\r\n    }\r\n\r\n    function addRewards(StakedNFTData memory _nftData, uint8 months, uint256 id) internal {\r\n        if (months == 1) {\r\n            if (_nftData.t1Rewards < 4) _nftData.t1Rewards += 1;\r\n            stakedNFTs[id].t1Rewards = _nftData.t1Rewards;\r\n            return;\r\n        }\r\n        if (months == 3) {\r\n            _nftData.t1Rewards += 2;\r\n            stakedNFTs[id].t2Rewards = 1;\r\n            stakedNFTs[id].t1Rewards = _nftData.t1Rewards;\r\n            return;\r\n        }\r\n        if (months == 5) {\r\n            stakedNFTs[id].t3Rewards = 1;\r\n            stakedNFTs[id].t2Rewards = 2;\r\n            stakedNFTs[id].t1Rewards = 4;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectStakePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBeenStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotComplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ended\",\"type\":\"bool\"}],\"name\":\"SetT3End\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldStakerContract\",\"outputs\":[{\"internalType\":\"contract SoulStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_months\",\"type\":\"uint8[]\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_earlyRelease\",\"type\":\"bool\"}],\"name\":\"setEarlyRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setSpendingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ended\",\"type\":\"bool\"}],\"name\":\"setT2End\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_t1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_t2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_t3\",\"type\":\"uint8\"}],\"name\":\"spendRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splicerContract\",\"outputs\":[{\"internalType\":\"contract ISoulSplicers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_months\",\"type\":\"uint8[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeFromOldContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedNFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"releaseTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"t1Rewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"t2Rewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"t3Rewards\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SoulStaker","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d1a870f05cfa7677c7f8f01d46b25ca947c77a20f2bd48cca0b8c01df61292ad"}]}