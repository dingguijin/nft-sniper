{"status":"1","message":"OK","result":[{"SourceCode":"{\"DomainServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright (C) 2022 Spanning Labs Inc.\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ISpanningDelegate.sol\\\";\\n\\n/**\\n * DomainServer provides a delegate interface that correctly\\n * returns a given operational domain. It has pass throughs or\\n * no-ops for typical SpanningDelegate functionality.\\n */\\ncontract DomainServer is ISpanningDelegate {\\n    // A unique identifier for the delegate.\\n    bytes4 private domain_;\\n\\n    /**\\n     * @dev Initializes a Domain Server.\\n     *\\n     * @param domain - Unique identifier for the delegate\\n     */\\n    constructor(bytes4 domain) {\\n        domain_ = domain;\\n    }\\n\\n    /**\\n     * @return bytes4 - Domain of the delegate.\\n     */\\n    function getDomain() public view override returns (bytes4) {\\n        return domain_;\\n    }\\n\\n    modifier domainServerOnly() {\\n        require(false, \\\"Domain Server Only\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev No-op\\n     */\\n    function makeDeployable() external pure override domainServerOnly {\\n        return;\\n    }\\n\\n    /**\\n     * @dev No-op\\n     */\\n    function revokeDeployable() external pure override domainServerOnly {\\n        return;\\n    }\\n\\n    /**\\n     * @return bool - Deployable status of the domain server is always false\\n     */\\n    function isDeployable() external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev No-op\\n     */\\n    function updateSpan(address) external pure override domainServerOnly {\\n        return;\\n    }\\n\\n    /**\\n     * @return bool - Domain server never has valid message data\\n     */\\n    function isValidData() external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev No-op\\n     */\\n    function enableGasTank() external pure override {\\n        return;\\n    }\\n\\n    /**\\n     * @return bytes32 - no-op\\n     */\\n    function currentSenderAddress()\\n        external\\n        pure\\n        override\\n        domainServerOnly\\n        returns (bytes32)\\n    {\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @return bytes32 - no-op\\n     */\\n    function currentTxnSenderAddress()\\n        external\\n        pure\\n        override\\n        domainServerOnly\\n        returns (bytes32)\\n    {\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @dev No-op\\n     */\\n    function spanningCall(\\n        bytes32,\\n        bytes32,\\n        bytes32,\\n        bytes calldata\\n    ) external pure override domainServerOnly {\\n        return;\\n    }\\n\\n    /**\\n     * @dev No-op\\n     */\\n    function makeRequest(bytes32, bytes calldata)\\n        external\\n        pure\\n        override\\n        domainServerOnly\\n    {\\n        return;\\n    }\\n}\\n\"},\"ISpanningDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright (C) 2022 Spanning Labs Inc.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of a Delegate in the Spanning Protocol.\\n */\\ninterface ISpanningDelegate {\\n    /**\\n     * @return bytes4 - Domain of the delegate.\\n     */\\n    function getDomain() external view returns (bytes4);\\n\\n    /**\\n     * @dev Sets the deployable status to true.\\n     */\\n    function makeDeployable() external;\\n\\n    /**\\n     * @dev Sets the deployable status to false.\\n     */\\n    function revokeDeployable() external;\\n\\n    /**\\n     * @return bool - Deployable status of the delegate.\\n     */\\n    function isDeployable() external view returns (bool);\\n\\n    /**\\n     * @dev Updates SPAN\\u0027s legacy (local) address.\\n     *\\n     * @param newSpanLegacyAddress - Desired legacy (local) address\\n     */\\n    function updateSpan(address newSpanLegacyAddress) external;\\n\\n    /**\\n     * @return bool - If the current stack has set Spanning Info correctly\\n     */\\n    function isValidData() external view returns (bool);\\n\\n    /**\\n     * @return bytes32 - Address of the entity that contacted the delegate.\\n     */\\n    function currentSenderAddress() external view returns (bytes32);\\n\\n    /**\\n     * @return bytes32 - Address of the originator of the transaction.\\n     */\\n    function currentTxnSenderAddress() external view returns (bytes32);\\n\\n    /**\\n     * @dev Enables the gas tank for the program to use.\\n     */\\n    function enableGasTank() external;\\n\\n    /**\\n     * @dev Used by authorized middleware to run a transaction on this domain.\\n     *\\n     * Note: We currently we assume the contract owner == authorized address\\n     *\\n     * @param programAddress - Address to be called\\n     * @param msgSenderAddress - Address of the entity that contacted the delegate\\n     * @param txnSenderAddress - Address of the originator of the transaction\\n     * @param payload - ABI-encoding of the desired function call\\n     */\\n    function spanningCall(\\n        bytes32 programAddress,\\n        bytes32 msgSenderAddress,\\n        bytes32 txnSenderAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    /**\\n     * @dev Allows a user to request a call over authorized middleware nodes.\\n     *\\n     * Note: This can result in either a local or cross-domain transaction.\\n     * Note: Dispatch uses EVM Events as a signal to our middleware.\\n     *\\n     * @param programAddress - Address to be called\\n     * @param payload - ABI-encoding of the desired function call\\n     */\\n    function makeRequest(bytes32 programAddress, bytes calldata payload)\\n        external;\\n\\n    /**\\n     * @dev Emitted when payment is received in local gas coin.\\n     *\\n     * @param addr - Legacy (local) address that sent payment\\n     * @param value - Value (in wei) that was sent\\n     */\\n    event Received(address addr, uint256 value);\\n\\n    /**\\n     * @dev Emitted when a Spanning transaction stays on the current domain.\\n     *\\n     * @param programAddress - Address to be called\\n     * @param msgSenderAddress - Address of the entity that contacted the delegate\\n     * @param txnSenderAddress - Address of the originator of the transaction\\n     * @param payload - ABI-encoding of the desired function call\\n     * @param returnData - Information from the result of the function call\\n     */\\n    event LocalRequest(\\n        bytes32 indexed programAddress,\\n        bytes32 indexed msgSenderAddress,\\n        bytes32 indexed txnSenderAddress,\\n        bytes payload,\\n        bytes returnData\\n    );\\n\\n    /**\\n     * @dev Emitted when a Spanning transaction must leave the current domain.\\n     *\\n     * Note: Spanning\\u0027s middleware nodes are subscribed to this event.\\n     *\\n     * @param programAddress - Address to be called\\n     * @param msgSenderAddress - Address of the entity that contacted the delegate\\n     * @param txnSenderAddress - Address of the originator of the transaction\\n     * @param payload - ABI-encoding of the desired function call\\n     */\\n    event SpanningRequest(\\n        bytes32 indexed programAddress,\\n        bytes32 indexed msgSenderAddress,\\n        bytes32 indexed txnSenderAddress,\\n        bytes payload\\n    );\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"domain\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"programAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgSenderAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txnSenderAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"LocalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"programAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgSenderAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txnSenderAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"SpanningRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentSenderAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTxnSenderAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableGasTank\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomain\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeployable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isValidData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeDeployable\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"makeRequest\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeDeployable\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"spanningCall\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"updateSpan\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"DomainServer","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000100000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://82317f7c63f1e25975fc17dca5d7b21d1610f877dadd02f2ea6a106e62a08b32"}]}