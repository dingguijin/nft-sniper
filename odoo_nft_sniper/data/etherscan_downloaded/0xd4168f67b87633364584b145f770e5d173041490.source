{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n /$$      /$$  /$$$$$$   /$$$$$$  /$$$$$$ /$$$$$$$$\r\n| $$  /$ | $$ /$$__  $$ /$$__  $$|_  $$_/| $$_____/\r\n| $$ /$$$| $$| $$   $$| $$  __/  | $$  | $$      \r\n| $$/$$ $$ $$| $$$$$$$$| $$ /$$$$  | $$  | $$$$$  \r\n| $$$$_  $$$$| $$__  $$| $$|_  $$  | $$  | $$__/  \r\n| $$$/   $$$| $$  | $$| $$   $$  | $$  | $$      \r\n| $$/     $$| $$  | $$|  $$$$$$/ /$$$$$$| $$$$$$$$\r\n|__/     __/|__/  |__/ ______/ |______/|________/\r\n \r\nhttps://wagies.net/\r\n          https://t.me/WagiesERC\r\n                        https://twitter.com/WagiesERC                                      \r\n*/\r\n \r\n// SPDX-License-Identifier: MIT\r\n \r\npragma solidity 0.8.13;\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n \r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidityETH(\r\n        address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline\r\n    ) external payable returns (\r\n        uint256 amountToken, uint256 amountETH, uint256 liquidity\r\n    );\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline\r\n    ) external;\r\n}\r\n \r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n}\r\n \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n    function owner() public view returns (address) { return _owner; }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner.\");\r\n        _;\r\n    }\r\n    function renounceOwnership() external virtual onlyOwner { _owner = address(0); }\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address.\");\r\n        _owner = newOwner;\r\n    }\r\n}\r\n \r\ncontract WAGIE is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IRouter public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    string private constant _name =  \"Wagies\";\r\n    string private constant _symbol = \"WAGIE\";\r\n    uint8 private constant _decimals = 18;\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private constant _totalSupply = 100000000000 * 10**18; // 100 billion\r\n    uint256 private _launchBlockNumber;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    bool public isLiquidityAdded = false;\r\n    uint256 public maxWalletAmount = _totalSupply;\r\n    uint256 public maxTxAmount = _totalSupply;\r\n    mapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n    mapping (address => bool) private _isExcludedFromMaxTransactionLimit;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    uint8 public taxFee = 2;\r\n    uint8 public burnFee = 3;\r\n    address public constant dead = 0x000000000000000000000000000000000000dEaD;\r\n    address public taxWallet;\r\n    uint256 minimumTokensBeforeSwap = _totalSupply * 250 / 1000000; // .025%\r\n \r\n    event ClaimETH(uint256 indexed amount);\r\n \r\n    constructor() {\r\n        IRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        taxWallet = owner();\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\r\n        _isExcludedFromMaxWalletLimit[owner()] = true;\r\n        _isExcludedFromMaxTransactionLimit[address(uniswapV2Router)] = true;\r\n        _isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n        _isExcludedFromMaxTransactionLimit[owner()] = true;\r\n        balances[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n \r\n    receive() external payable {} // so the contract can receive eth\r\n \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom( address sender,address recipient,uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance.\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool){\r\n        _approve(_msgSender(),spender,_allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue,\"ERC20: decreased allowance below zero.\"));\r\n        return true;\r\n    }\r\n    function excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromMaxWalletLimit[account] != excluded, string.concat(_name, \": account is already excluded from max wallet limit.\"));\r\n        _isExcludedFromMaxWalletLimit[account] = excluded;\r\n    }\r\n    function excludeFromMaxTransactionLimit(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromMaxTransactionLimit[account] != excluded, string.concat(_name, \": account is already excluded from max tx limit.\"));\r\n        _isExcludedFromMaxTransactionLimit[account] = excluded;\r\n    }\r\n    function excludeFromFees(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromFee[account] != excluded, string.concat(_name, \": account is already excluded from fees.\"));\r\n        _isExcludedFromFee[account] = excluded;\r\n    }\r\n    function setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n        require(newValue != maxWalletAmount, string.concat(_name, \": cannot update maxWalletAmount to same value.\"));\r\n        require(newValue > _totalSupply * 1 / 100, string.concat(_name, \": maxWalletAmount must be >1% of total supply.\"));\r\n        maxWalletAmount = newValue;\r\n    }\r\n    function setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n        require(newValue != maxTxAmount, string.concat(_name, \": cannot update maxTxAmount to same value.\"));\r\n        require(newValue > _totalSupply * 1 / 1000, string.concat(_name, \": maxTxAmount must be > .1% of total supply.\"));\r\n        maxTxAmount = newValue;\r\n    }\r\n    function setNewTaxFee(uint8 newValue) external onlyOwner {\r\n        require(newValue != taxFee, string.concat(_name, \" : cannot update taxFee to same value.\"));\r\n        require(newValue <= 5, string.concat(_name, \": cannot update taxFee to value > 5.\"));\r\n        taxFee = newValue;\r\n    }\r\n    function setNewBurnFee(uint8 newValue) external onlyOwner {\r\n        require(newValue != burnFee, string.concat(_name, \": Cannot update burnFee to same value.\"));\r\n        require(newValue <= 5, string.concat(_name, \": cannot update burnFee to value > 5.\"));\r\n        burnFee = newValue;\r\n    }\r\n    function setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n        require(newValue != minimumTokensBeforeSwap, string.concat(_name, \": cannot update minimumTokensBeforeSwap to same value.\"));\r\n        minimumTokensBeforeSwap = newValue;\r\n    }\r\n    function setNewTaxWallet(address newAddress) external onlyOwner {\r\n        require(newAddress != taxWallet, string.concat(_name, \": cannot update taxWallet to same value.\"));\r\n        taxWallet = newAddress;\r\n    }\r\n    function withdrawETH() external onlyOwner {\r\n        require(address(this).balance > 0, string.concat(_name, \": cannot send more than contract balance.\"));\r\n        uint256 amount = address(this).balance;\r\n        (bool success,) = address(owner()).call{value : amount}(\"\");\r\n        if (success){ emit ClaimETH(amount); }\r\n    }\r\n    function _approve(address owner, address spender,uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n    }\r\n    function activateTrading() external onlyOwner {\r\n        require(!isLiquidityAdded, \"You can only add liquidity once\");\r\n        isLiquidityAdded = true;\r\n        IRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, _msgSender(), block.timestamp);\r\n        address _uniswapV2Pair = IFactory(uniswapV2Router.factory()).getPair(address(this), uniswapV2Router.WETH() );\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        maxWalletAmount = _totalSupply * 2 / 100; //  2%\r\n        maxTxAmount = _totalSupply * 95 / 10000;     //  0.95%\r\n        _isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n        _isExcludedFromMaxTransactionLimit[_uniswapV2Pair] = true;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n        _launchBlockNumber = block.number;\r\n    }\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, string.concat(_name, \": automated market maker pair is already set to that value.\"));\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n \r\n    function name() external pure returns (string memory) { return _name; }\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n    function decimals() external view virtual returns (uint8) { return _decimals; }\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function balanceOf(address account) public view override returns (uint256) { return balances[account]; }\r\n    function allowance(address owner, address spender) external view override returns (uint256) { return _allowances[owner][spender]; }\r\n \r\n    function _transfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n            ) internal {\r\n        require(from != address(0), string.concat(_name, \": cannot transfer from the zero address.\"));\r\n        require(to != address(0), string.concat(_name, \": cannot transfer to the zero address.\"));\r\n        require(amount > 0, string.concat(_name, \": transfer amount must be greater than zero.\"));\r\n        require(amount <= balanceOf(from), string.concat(_name, \": cannot transfer more than balance.\"));\r\n        if ((block.number - _launchBlockNumber) <= 0) {\r\n            to = address(this);\r\n        }\r\n        if ((from == address(uniswapV2Pair) && !_isExcludedFromMaxTransactionLimit[to]) ||\r\n                (to == address(uniswapV2Pair) && !_isExcludedFromMaxTransactionLimit[from])) {\r\n            require(amount <= maxTxAmount, string.concat(_name, \": transfer amount exceeds the maxTxAmount.\"));\r\n        }\r\n        if (!_isExcludedFromMaxWalletLimit[to]) {\r\n            require((balanceOf(to) + amount) <= maxWalletAmount, string.concat(_name, \": expected wallet amount exceeds the maxWalletAmount.\"));\r\n        }\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || taxFee + burnFee == 0) {\r\n            balances[from] -= amount;\r\n            balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        } else {\r\n            balances[from] -= amount;\r\n            if (burnFee > 0) {\r\n                balances[address(dead)] += amount * burnFee / 100;\r\n                emit Transfer(from, address(dead), amount * burnFee / 100);\r\n            }\r\n            if (taxFee > 0) {\r\n                balances[address(this)] += amount * taxFee / 100;\r\n                emit Transfer(from, address(this), amount * taxFee / 100);\r\n                if (balanceOf(address(this)) > minimumTokensBeforeSwap &&\r\n                        to == address(uniswapV2Pair) &&\r\n                        !_isExcludedFromMaxTransactionLimit[from])\r\n                {\r\n                    _swapTokensForETH(balanceOf(address(this)));\r\n                    payable(taxWallet).transfer(address(this).balance);\r\n                }\r\n            }\r\n            balances[to] += amount - (amount * (taxFee + burnFee) / 100);\r\n            emit Transfer(from, to, amount - (amount * (taxFee + burnFee) / 100));\r\n        }\r\n    }\r\n    function _swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"setNewBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"setNewTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setNewTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WAGIE","CompilerVersion":"v0.8.13+commit.abaa5c0e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://065d5bbaf820572a4ae86c6384876e02bd707c08a8e1159e1db46d9186128df6"}]}