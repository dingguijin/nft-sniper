{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/*\r\n * TITLE: CollectionNFTCloneableV2\r\n *\r\n * AUTHOR: Dex Labs & Cooki.eth\r\n *\r\n * NOTES: This contract is a cloneable template for Hashes Collections.\r\n *        It is an ERC-721 contract which is preconfigured to work within\r\n *        the Hashes ecosystem. Creation logic has been moved to an initialization\r\n *        function so it works with the cloneable factory pattern. \r\n *        \r\n *        Cooki.eth has modified the initialization function and internal logic \r\n *        from the V1 contract to allow for on-chain construction of the \r\n *        \"TokenURI\" metadata. This allows for purely on-chain NFT collections\r\n *        without the need for external dependencies.\r\n *\r\n */\r\n\r\n\r\n//*********\r\n//Libraries\r\n//*********\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n//**********\r\n//Interfaces\r\n//**********\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IOwnable {\r\n    function renounceOwnership() external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function owner() external view returns (address);\r\n}\r\n\r\ninterface IHashes is IERC721Enumerable {\r\n    function deactivateTokens(\r\n        address _owner,\r\n        uint256 _proposalId,\r\n        bytes memory _signature\r\n    ) external returns (uint256);\r\n\r\n    function deactivated(uint256 _tokenId) external view returns (bool);\r\n\r\n    function activationFee() external view returns (uint256);\r\n\r\n    function verify(\r\n        uint256 _tokenId,\r\n        address _minter,\r\n        string memory _phrase\r\n    ) external view returns (bool);\r\n\r\n    function getHash(uint256 _tokenId) external view returns (bytes32);\r\n\r\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);\r\n}\r\n\r\ninterface IERC2981Royalties {\r\n    /// @notice Called with the sale price to determine how much royalty\r\n    //          is owed and to whom.\r\n    /// @param _tokenId - the NFT asset queried for royalty information\r\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\r\n    /// @return _receiver - address of who should be sent the royalty payment\r\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\r\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\r\n        external\r\n        view\r\n        returns (address _receiver, uint256 _royaltyAmount);\r\n}\r\n\r\ninterface ICollectionNFTMintFeePredicate {\r\n    function getTokenMintFee(uint256 _tokenId, uint256 _hashesTokenId) external view returns (uint256);\r\n}\r\n\r\ninterface ICollectionNFTEligibilityPredicate {\r\n    function isTokenEligibleToMint(uint256 _tokenId, uint256 _hashesTokenId) external view returns (bool);\r\n}\r\n\r\ninterface ICollectionNFTTokenURIPredicate {\r\n    function getTokenURI(uint256 _tokenId, uint256 _hashesTokenId, bytes32 _hashesHash) external view returns (string memory);\r\n}\r\n\r\ninterface ICollectionNFTCloneableV2 {\r\n    function mint(uint256 _hashesTokenId) external payable;\r\n\r\n    function burn(uint256 _tokenId) external;\r\n\r\n    function completeSignatureBlock() external;\r\n\r\n    //function setTokenURI(string memory _baseTokenURI) external;\r\n\r\n    function setRoyaltyBps(uint16 _royaltyBps) external;\r\n\r\n    function transferCreator(address _creatorAddress) external;\r\n\r\n    function setSignatureBlockAddress(address _signatureBlockAddress) external;\r\n\r\n    function withdraw() external;\r\n}\r\n\r\ninterface ICollectionCloneable {\r\n    function initialize(\r\n        IHashes _hashesToken,\r\n        address _factoryMaintainerAddress,\r\n        address _createCollectionCaller,\r\n        bytes memory _initializationData\r\n    ) external;\r\n}\r\n\r\ninterface ICollection {\r\n    function verifyEcosystemSettings(bytes memory _settings) external pure returns (bool);\r\n}\r\n\r\ninterface ICollectionFactory {\r\n    function addImplementationAddress(\r\n        bytes32 _hashedEcosystemName,\r\n        address _implementationAddress,\r\n        bool cloneable\r\n    ) external;\r\n\r\n    function createCollection(address _implementationAddress, bytes memory _initializationData) external;\r\n\r\n    function setFactoryMaintainerAddress(address _factoryMaintainerAddress) external;\r\n\r\n    function removeImplementationAddresses(\r\n        bytes32[] memory _hashedEcosystemNames,\r\n        address[] memory _implementationAddresses,\r\n        uint256[] memory _indexes\r\n    ) external;\r\n\r\n    function removeCollection(\r\n        address _implementationAddress,\r\n        address _collectionAddress,\r\n        uint256 _index\r\n    ) external;\r\n\r\n    function createEcosystemSettings(string memory _ecosystemName, bytes memory _settings) external;\r\n\r\n    function updateEcosystemSettings(bytes32 _hashedEcosystemName, bytes memory _settings) external;\r\n\r\n    function getEcosystemSettings(bytes32 _hashedEcosystemName, uint64 _blockNumber)\r\n        external\r\n        view\r\n        returns (bytes memory);\r\n\r\n    function getEcosystems() external view returns (bytes32[] memory);\r\n\r\n    function getEcosystems(uint256 _start, uint256 _end) external view returns (bytes32[] memory);\r\n\r\n    function getCollections(address _implementationAddress) external view returns (address[] memory);\r\n\r\n    function getCollections(\r\n        address _implementationAddress,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) external view returns (address[] memory);\r\n\r\n    function getImplementationAddresses(bytes32 _hashedEcosystemName) external view returns (address[] memory);\r\n\r\n    function getImplementationAddresses(\r\n        bytes32 _hashedEcosystemName,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) external view returns (address[] memory);\r\n}\r\n\r\n//******************************\r\n//Abstract/Preliminary Contracts\r\n//******************************\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\nabstract contract OwnableCloneable is Context {\r\n    bool ownableInitialized;\r\n    address private _owner;\r\n\r\n    modifier ownershipInitialized() {\r\n        require(ownableInitialized, \"OwnableCloneable: hasn't been initialized yet.\");\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the initialize caller as the initial owner.\r\n     */\r\n    function initializeOwnership(address initialOwner) public virtual {\r\n        require(!ownableInitialized, \"OwnableCloneable: already initialized.\");\r\n        ownableInitialized = true;\r\n        _setOwner(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual ownershipInitialized returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"OwnableCloneable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual ownershipInitialized onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual ownershipInitialized onlyOwner {\r\n        require(newOwner != address(0), \"OwnableCloneable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    // This is set to internal so overriden versions of renounce/transfer ownership\r\n    // can also be carried out by DAO address.\r\n    function _setOwner(address newOwner) internal ownershipInitialized {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n//************************\r\n//CollectionNFTCloneableV2\r\n//************************\r\n\r\ncontract CollectionNFTCloneableV2 is\r\n    ICollection,\r\n    ICollectionCloneable,\r\n    ICollectionNFTCloneableV2,\r\n    OwnableCloneable,\r\n    ERC721Enumerable,\r\n    IERC2981Royalties,\r\n    ReentrancyGuard\r\n{\r\n    using SafeMath for uint16;\r\n    using SafeMath for uint64;\r\n    using SafeMath for uint128;\r\n    using SafeMath for uint256;\r\n\r\n    bool _initialized;\r\n\r\n    /// @notice A structure for storing a token ID in a map.\r\n    struct TokenIdEntry {\r\n        bool exists;\r\n        uint128 tokenId;\r\n    }\r\n\r\n    /// @notice A structure for storing the relationship between Collection Id, Hashes Id, and the Hashes hash used in mint\r\n    //This allows the draw function to work, even after original minter has transfered NFT\r\n    struct idToHash {\r\n        bool exists;\r\n        uint256 hashesId;\r\n        bytes32 hashesHash;\r\n    }\r\n\r\n    /// @notice A structure for decoding and storing data from the factory initializer\r\n    struct InitializerSettings {\r\n        string tokenName;\r\n        string tokenSymbol;\r\n        ICollectionNFTTokenURIPredicate TokenURIPredicateContract;\r\n        uint256 cap;\r\n        ICollectionNFTEligibilityPredicate mintEligibilityPredicateContract;\r\n        ICollectionNFTMintFeePredicate mintFeePredicateContract;\r\n        uint16 royaltyBps;\r\n        address signatureBlockAddress;\r\n    }\r\n\r\n    /// @notice nonce Monotonically-increasing number (token ID).\r\n    uint256 public nonce;\r\n\r\n    /// @notice cap The supply cap for this token. Set to 0 for unlimited.\r\n    uint256 public cap;\r\n\r\n    /// @notice tokenName The name of the ERC-721 token.\r\n    string private tokenName;\r\n\r\n    /// @notice tokenSymbol The symbol of the ERC-721 token.\r\n    string private tokenSymbol;\r\n\r\n    /// @notice creatorAddress The address of the collection creator.\r\n    address public creatorAddress;\r\n\r\n    /// @notice signatureBlockAddress An optional address which (when set) will cause all tokens to be\r\n    ///         minted from this address and then immediately transfered to the mint message sender.\r\n    address public signatureBlockAddress;\r\n\r\n    // Interface for contract which contains a function isTokenEligibleToMint(tokenId, hashesTokenId)\r\n    // used for determining mint eligibility for a Hashes token.\r\n    ICollectionNFTEligibilityPredicate public mintEligibilityPredicateContract;\r\n\r\n    // Interface for contract which contains a function getTokenMintFee(tokenId, hashesTokenId)\r\n    // used for determining the mint fee for a Hashes token.\r\n    ICollectionNFTMintFeePredicate public mintFeePredicateContract;\r\n\r\n    // Interface for contract which contains a function getTokenURI(tokenId, uint256 _hashesTokenId)\r\n    // Used for determining the token URI for this token.\r\n    ICollectionNFTTokenURIPredicate public TokenURIPredicateContract;\r\n\r\n    /// @notice hashesIdToCollectionTokenIdMapping Mapping of Hashes ID to collection token ID.\r\n    mapping(uint256 => TokenIdEntry) public hashesIdToCollectionTokenIdMapping;\r\n\r\n    //And the inverse\r\n    /// @notice tokenCollectionIdToHashesIdMapping Mapping of collection token ID to Hashes ID.\r\n    mapping(uint256 => idToHash) public tokenCollectionIdToHashesIdMapping;\r\n\r\n    /// @notice royaltyBps The sales royalty amount (in hundredths of a percent).\r\n    uint16 public royaltyBps;\r\n\r\n    uint16 private _hashesDAOMintFeePercent;\r\n\r\n    uint16 private _hashesDAORoyaltyFeePercent;\r\n\r\n    uint16 private _maximumCollectionRoyaltyPercent;\r\n\r\n    /// @notice isSignatureBlockCompleted Whether the signature block address has interacted with this\r\n    ///         contract to verify their support of this contract and establish provenance.\r\n    bool public isSignatureBlockCompleted;\r\n\r\n    IHashes hashesToken;\r\n\r\n    /// @notice CollectionInitialized Emitted when a Collection is initialized.\r\n    event CollectionInitialized(\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        address TokenURIPredicateAddress,\r\n        uint256 cap,\r\n        address mintEligibilityPredicateAddress,\r\n        address mintFeePredicateAddress,\r\n        uint16 royaltyBps,\r\n        address signatureBlockAddress,\r\n        uint64 indexed initializationBlock\r\n    );\r\n\r\n    /// @notice Minted Emitted when a Hashes Collection is minted.\r\n    event Minted(address indexed minter, uint256 indexed tokenId, uint256 indexed hashesTokenId);\r\n\r\n    /// @notice Withdraw Emitted when a withdraw event is triggered.\r\n    event Withdraw(uint256 indexed creatorAmount, uint256 indexed hashesDAOAmount);\r\n\r\n    /// @notice CreatorTransferred Emitted when the creator address is transferred.\r\n    event CreatorTransferred(address indexed previousCreator, address indexed newCreator);\r\n\r\n    /// @notice RoyaltyBpsSet Emitted when the royalty bps is set.\r\n    event RoyaltyBpsSet(uint16 royaltyBps);\r\n\r\n    /// @notice Burned Emitted when a token is burned.\r\n    event Burned(address indexed burner, uint256 indexed tokenId);\r\n\r\n    /// @notice SignatureBlockCompleted Emitted when the signature block is completed.\r\n    event SignatureBlockCompleted(address indexed signatureBlockAddress);\r\n\r\n    /// @notice SignatureBlockAddressSet Emitted when the signature block address is set.\r\n    event SignatureBlockAddressSet(address indexed signatureBlockAddress);\r\n\r\n    modifier initialized() {\r\n        require(_initialized, \"CollectionNFTCloneableV2: hasn't been initialized yet.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrHashesDAO() {\r\n        require(\r\n            _msgSender() == owner() || _msgSender() == IOwnable(address(hashesToken)).owner(),\r\n            \"CollectionNFTCloneableV2: must be contract owner or HashesDAO\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(_msgSender() == creatorAddress, \"CollectionNFTCloneableV2: must be contract creator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor for the cloneable Hashes Collection contract. The ERC-721 token\r\n     *         name and symbol aren't used since they are provided in the initialize function.\r\n     */\r\n    constructor() ERC721(\"TOKEN_NAME_PLACEHOLDER\", \"TOKEN_SYMBOL_PLACEHOLDER\") {}\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice This function is used by the Factory to verify the format of ecosystem settings\r\n     * @param _settings ABI encoded ecosystem settings data. This expected encoding for\r\n     *        ecosystem name 'NFT_v1' is the following:\r\n     *\r\n     *        'uint16' hashesDAOMintFeePercent - The percentage of mint fees owable to HashesDAO.\r\n     *        'uint16' hashesDAORoyaltyFeePercent - The percentage of royalties owable to HashesDAO. This will\r\n     *                 be the percentage of the royalties percent set by the creator.\r\n     *        'uint16' maximumCollectionRoyaltyPercent - The highest allowable royalty percentage\r\n     *                 settable by creators for cloned instances of this contract.\r\n     * @return The boolean result of the validation.\r\n     */\r\n    function verifyEcosystemSettings(bytes memory _settings) external pure override returns (bool) {\r\n        (\r\n            uint16 _settingsHashesDAOMintFeePercent,\r\n            uint16 _settingsHashesDAORoyaltyFeePercent,\r\n            uint16 _settingsMaximumCollectionRoyaltyPercent\r\n        ) = abi.decode(_settings, (uint16, uint16, uint16));\r\n\r\n        return\r\n            _settingsHashesDAOMintFeePercent <= 10000 &&\r\n            _settingsHashesDAORoyaltyFeePercent <= 10000 &&\r\n            _settingsMaximumCollectionRoyaltyPercent <= 10000;\r\n    }\r\n\r\n    /**\r\n     * @notice This function initializes a cloneable implementation contract.\r\n     * @param _hashesToken The Hashes NFT contract address.\r\n     * @param _factoryMaintainerAddress The address of the current factory maintainer\r\n     *        which will be the Owner role of this collection.\r\n     * @param _createCollectionCaller The address which has called createCollection on the factory.\r\n     *        This will be the Creator role of this collection.\r\n     * @param _initializationData ABI encoded initialization data. This expected encoding is a struct\r\n     *        with the following properties:\r\n     *\r\n     *        'string' tokenName - The name of the resulting ERC-721 token.\r\n     *        'string' tokenSymbol - The symbol of the resulting ERC-721 token.\r\n     *        'address' TokenURIPredicateContract - The address of a contract which contains a\r\n     *                  function getTokenURI(uint256 _tokenId, uint256 _hashesTokenId, bytes32 _hashesHash) used to\r\n     *                  draw/define the chosen Hashes token URI. Contracts\r\n     *                  which define this logic should implement the interface ICollectionNFTTokenURIPredicate.\r\n     *        'uint256' cap - The maximum token supply of the resulting ERC-721 token. Set 0 for no limit.\r\n     *        'address' mintEligibilityPredicateContract - The address of a contract which contains a\r\n     *                  function isTokenEligibleToMint(uint256 tokenId, uint256 hashesTokenId) used to\r\n     *                  determine whether the chosen Hashes token ID is eligible for minting. Contracts\r\n     *                  which define this logic should implement the interface ICollectionNFTEligibilityPredicate.\r\n     *        'address' mintFeePredicateContract - The address of a contract which contains a function\r\n     *                  getTokenMintFee(tokenId, hashesTokenId) used to determine the mint fee for the\r\n     *                  chosen Hashes token ID. Contracts which define this logic should implement the\r\n     *                  interface ICollectionNFTMintFeePredicate.\r\n     *        'uint16' royaltyBps - The sales royalty that should be collected. A percentage of this\r\n     *                 will be allocated for the HashesDAO to withdraw.\r\n     *        'address' signatureBlockAddress - An optional address which can be used to establish\r\n     *                  creator provenance. When set, the specified address (could be the artist for example)\r\n     *                  can call completeSignatureBlock to establish provenance and sign off on the contract\r\n     *                  values. To skip using this mechanism, set the value of this field to the 0x0 address.\r\n     */\r\n    function initialize(\r\n        IHashes _hashesToken,\r\n        address _factoryMaintainerAddress,\r\n        address _createCollectionCaller,\r\n        bytes memory _initializationData\r\n    ) external override {\r\n        require(!_initialized, \"CollectionNFTCloneableV2: already inititialized.\");\r\n\r\n        initializeOwnership(_factoryMaintainerAddress);\r\n        creatorAddress = _createCollectionCaller;\r\n\r\n        // Use this struct workaround to get around Stack Too Deep issues\r\n        InitializerSettings memory _initializerSettings;\r\n        (_initializerSettings) = abi.decode(_initializationData, (InitializerSettings));\r\n        tokenName = _initializerSettings.tokenName;\r\n        tokenSymbol = _initializerSettings.tokenSymbol;\r\n        TokenURIPredicateContract = _initializerSettings.TokenURIPredicateContract;\r\n        cap = _initializerSettings.cap;\r\n        mintEligibilityPredicateContract = _initializerSettings.mintEligibilityPredicateContract;\r\n        mintFeePredicateContract = _initializerSettings.mintFeePredicateContract;\r\n        royaltyBps = _initializerSettings.royaltyBps;\r\n        signatureBlockAddress = _initializerSettings.signatureBlockAddress;\r\n\r\n        uint64 _initializationBlock = safe64(block.number, \"CollectionNFTCloneableV2: exceeds 64 bits.\");\r\n        bytes memory settingsBytes = ICollectionFactory(_msgSender()).getEcosystemSettings(\r\n            keccak256(abi.encodePacked(\"NFT_v1\")),\r\n            _initializationBlock\r\n        );\r\n\r\n        (_hashesDAOMintFeePercent, _hashesDAORoyaltyFeePercent, _maximumCollectionRoyaltyPercent) = abi.decode(\r\n            settingsBytes,\r\n            (uint16, uint16, uint16)\r\n        );\r\n\r\n        require(\r\n            royaltyBps <= _maximumCollectionRoyaltyPercent,\r\n            \"CollectionNFTCloneableV2: royalty percentage must be less than or equal to maximum allowed setting\"\r\n        );\r\n\r\n        _initialized = true;\r\n\r\n        hashesToken = _hashesToken;\r\n\r\n        emit CollectionInitialized(\r\n            tokenName,\r\n            tokenSymbol,\r\n            address(TokenURIPredicateContract),\r\n            cap,\r\n            address(mintEligibilityPredicateContract),\r\n            address(mintFeePredicateContract),\r\n            royaltyBps,\r\n            signatureBlockAddress,\r\n            _initializationBlock\r\n        );\r\n    }\r\n\r\n    //This function draws the URI from the TokenURIPredicateContract\r\n    function draw(uint256 tokenId) public view returns (string memory) {\r\n\r\n        //The mapping must exist\r\n        require(\r\n            tokenCollectionIdToHashesIdMapping[tokenId].exists,\r\n            \"CollectionNFTCloneableV2: Invalid Token Id\"\r\n        );\r\n\r\n        //Pulls the token URI from the predicate contract\r\n        return TokenURIPredicateContract.getTokenURI(tokenId, tokenCollectionIdToHashesIdMapping[tokenId].hashesId, tokenCollectionIdToHashesIdMapping[tokenId].hashesHash);\r\n    } \r\n\r\n    /**\r\n     * @notice The function used to mint instances of this Hashes Collection ERC-721 token.\r\n     *         Minting requires passing in a specific Hashes token id which is owned by the minter.\r\n     *         Each Hashes token id may only be used to mint once towards a specific collection.\r\n     *         The minting eligibility and fee structure are determined per Hashes token id\r\n     *         by the Hashes Collection owner through predicate functions. The Hashes DAO will receive\r\n     *         a minting fee percentage of each mint, unless a DAO hash was used to mint.\r\n     * @param _hashesTokenId The Hashes token Id being used to mint.\r\n     */\r\n    function mint(uint256 _hashesTokenId) external payable override initialized nonReentrant {\r\n        require(cap == 0 || nonce < cap, \"CollectionNFTCloneableV2: supply cap has been reached\");\r\n        require(\r\n            _msgSender() == hashesToken.ownerOf(_hashesTokenId),\r\n            \"CollectionNFTCloneableV2: must be owner of supplied hashes token ID to mint\"\r\n        );\r\n        require(\r\n            !hashesIdToCollectionTokenIdMapping[_hashesTokenId].exists,\r\n            \"CollectionNFTCloneableV2: supplied token ID has already been used to mint with this collection\"\r\n        );\r\n\r\n        // get mint eligibility through static call\r\n        bool isHashesTokenIdEligibleToMint = mintEligibilityPredicateContract.isTokenEligibleToMint(\r\n            nonce,\r\n            _hashesTokenId\r\n        );\r\n        require(isHashesTokenIdEligibleToMint, \"CollectionNFTCloneableV2: supplied token ID is ineligible to mint\");\r\n\r\n        // get mint fee through static call\r\n        uint256 currentMintFee = mintFeePredicateContract.getTokenMintFee(nonce, _hashesTokenId);\r\n        require(msg.value >= currentMintFee, \"CollectionNFTCloneableV2: must pass sufficient mint fee.\");\r\n\r\n        hashesIdToCollectionTokenIdMapping[_hashesTokenId] = TokenIdEntry({\r\n            exists: true,\r\n            tokenId: safe128(nonce, \"CollectionNFTCloneableV2: exceeds 128 bits.\")\r\n        });\r\n\r\n        uint256 feeForHashesDAO = (currentMintFee.mul(_hashesDAOMintFeePercent)) / 10000;\r\n        uint256 authorFee = currentMintFee.sub(feeForHashesDAO);\r\n\r\n        uint256 mintFeePaid;\r\n        if (authorFee > 0) {\r\n            // If the minting fee is non-zero\r\n            mintFeePaid = mintFeePaid.add(authorFee);\r\n\r\n            (bool sent, ) = creatorAddress.call{ value: authorFee }(\"\");\r\n            require(sent, \"CollectionNFTCloneableV2: failed to send ETH to creator address\");\r\n        }\r\n\r\n        // Only apply the minting tax for non-DAO hashes (tokenID >= 1000 or deactivated DAO tokens)\r\n        if (feeForHashesDAO > 0 && (_hashesTokenId >= 1000 || hashesToken.deactivated(_hashesTokenId))) {\r\n            // If the hashes DAO minting fee is non-zero\r\n\r\n            // Send minting tax to HashesDAO\r\n            (bool sent, ) = IOwnable(address(hashesToken)).owner().call{ value: feeForHashesDAO }(\"\");\r\n            require(sent, \"CollectionNFTCloneableV2: failed to send ETH to HashesDAO\");\r\n\r\n            mintFeePaid = mintFeePaid.add(feeForHashesDAO);\r\n        }\r\n\r\n        if (msg.value > mintFeePaid) {\r\n            // If minter passed ETH value greater than the minting\r\n            // fee paid/computed above\r\n\r\n            // Refund the remaining ether balance to the sender. Since there are no\r\n            // other payable functions, this remainder will always be the senders.\r\n            (bool sent, ) = _msgSender().call{ value: msg.value.sub(mintFeePaid) }(\"\");\r\n            require(sent, \"CollectionNFTCloneableV2: failed to refund ETH.\");\r\n        }\r\n\r\n        // get hashes hash through static call\r\n        // I tried to pull this data from the URI predicate contracts I made but I couldn't figure out how, so here we are...\r\n        bytes32 _hashesHash = hashesToken.getHash(_hashesTokenId);\r\n\r\n        // map collection NFT id to the minting hashes id\r\n        // this is important for the draw function\r\n        tokenCollectionIdToHashesIdMapping[nonce] = idToHash({\r\n            exists: true,\r\n            hashesId: _hashesTokenId,\r\n            hashesHash: _hashesHash\r\n        });\r\n\r\n        _safeMint(_msgSender(), nonce++);\r\n\r\n        emit Minted(_msgSender(), nonce - 1, _hashesTokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice The function allows the token owner or approved address to burn the token.\r\n     * @param _tokenId The token Id to be burned.\r\n     */\r\n    function burn(uint256 _tokenId) external override initialized {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), _tokenId),\r\n            \"CollectionNFTCloneableV2: caller is not owner nor approved.\"\r\n        );\r\n        _burn(_tokenId);\r\n\r\n        emit Burned(_msgSender(), _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice The signatureBlockAddress can call this function to establish provenance and effectively\r\n     *         sign off on the contract. Can be useful in cases where the creator address is different\r\n     *         from the artist address.\r\n     */\r\n    function completeSignatureBlock() external override initialized {\r\n        require(!isSignatureBlockCompleted, \"CollectionNFTCloneableV2: signature block has already been completed\");\r\n        require(\r\n            signatureBlockAddress != address(0),\r\n            \"CollectionNFTCloneableV2: signature block address has not been set.\"\r\n        );\r\n        require(\r\n            _msgSender() == signatureBlockAddress,\r\n            \"CollectionNFTCloneableV2: only signature block address can complete signature block\"\r\n        );\r\n        isSignatureBlockCompleted = true;\r\n\r\n        emit SignatureBlockCompleted(signatureBlockAddress);\r\n    }\r\n\r\n    /// @inheritdoc IERC2981Royalties\r\n    function royaltyInfo(uint256, uint256 value)\r\n        external\r\n        view\r\n        override\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        // Send royalties to this contract address. Note: this will only work for\r\n        // marketplaces which implement the ERC2981 royalty standard. Off-chain\r\n        // configuration may be required for certain marketplaces.\r\n        return (address(this), (value.mul(royaltyBps)).div(10000));\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to renounce contract ownership. This can be performed\r\n     *         by either the Owner or HashesDAO. This departs slightly from the traditional\r\n     *         implementation where only the Owner has this permission. HashesDAO may\r\n     *         need to perform this actions in the case of the factory maintainer changing,\r\n     *         getting lost, or being taken over by a bad actor.\r\n     */\r\n    function renounceOwnership() public override ownershipInitialized onlyOwnerOrHashesDAO {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to transfer contract ownership. This can be performed by\r\n     *         either the owner or HashesDAO. This departs slightly from the traditional\r\n     *         implementation where only the Owner has this permission. HashesDAO may\r\n     *         need to perform this actions in the case of the factory maintainer changing,\r\n     *         getting lost, or being taken over by a bad actor.\r\n     * @param newOwner The new owner address.\r\n     */\r\n    function transferOwnership(address newOwner) public override ownershipInitialized onlyOwnerOrHashesDAO {\r\n        require(newOwner != address(0), \"CollectionNFTCloneableV2: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to set the sales royalty bps. Only collection creator may call.\r\n     * @param _royaltyBps The sales royalty percent in hundredths of a percent.\r\n     */\r\n    function setRoyaltyBps(uint16 _royaltyBps) external override initialized onlyCreator {\r\n        require(\r\n            _royaltyBps <= _maximumCollectionRoyaltyPercent,\r\n            \"CollectionNFTCloneableV2: royalty percentage must be less than or equal to maximum allowed setting\"\r\n        );\r\n        royaltyBps = _royaltyBps;\r\n        emit RoyaltyBpsSet(_royaltyBps);\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to transfer the creator address. Only collection creator may call.\r\n     *         This is especially important since this concerns withdrawl permissions.\r\n     * @param _creatorAddress The new creator address.\r\n     */\r\n    function transferCreator(address _creatorAddress) external override initialized onlyCreator {\r\n        address oldCreator = creatorAddress;\r\n        creatorAddress = _creatorAddress;\r\n        emit CreatorTransferred(oldCreator, _creatorAddress);\r\n    }\r\n\r\n    function setSignatureBlockAddress(address _signatureBlockAddress) external override initialized onlyCreator {\r\n        require(!isSignatureBlockCompleted, \"CollectionNFTCloneableV2: signature block has already been completed\");\r\n        signatureBlockAddress = _signatureBlockAddress;\r\n        emit SignatureBlockAddressSet(_signatureBlockAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to withdraw funds to the Collection creator and HashesDAO addresses.\r\n     *         The balance of the contract is equal to the royalties and gifts owed to the creator and HashesDAO.\r\n     */\r\n    function withdraw() external override initialized {\r\n        // The contract balance is equal to the royalties or gifts which need to be allocated\r\n        // to both the creator and HashesDAO.\r\n        uint256 _contractBalance = address(this).balance;\r\n\r\n        // The amount owed to the DAO will be the total royalties times the royalty\r\n        // fee percent value (in bps).\r\n        uint256 _daoRoyaltiesOwed = (_contractBalance.mul(_hashesDAORoyaltyFeePercent)).div(10000);\r\n\r\n        // The amount owed to the creator will then be the total balance of the contract minus the DAO\r\n        // royalties owed.\r\n        uint256 _creatorRoyaltiesOwed = _contractBalance.sub(_daoRoyaltiesOwed);\r\n\r\n        if (_creatorRoyaltiesOwed > 0) {\r\n            (bool sent, ) = creatorAddress.call{ value: _creatorRoyaltiesOwed }(\"\");\r\n            require(sent, \"CollectionNFTCloneableV2: failed to send ETH to creator address\");\r\n        }\r\n\r\n        if (_daoRoyaltiesOwed > 0) {\r\n            (bool sent, ) = IOwnable(address(hashesToken)).owner().call{ value: _daoRoyaltiesOwed }(\"\");\r\n            require(sent, \"CollectionNFTCloneableV2: failed to send ETH to HashesDAO\");\r\n        }\r\n\r\n        emit Withdraw(_creatorRoyaltiesOwed, _daoRoyaltiesOwed);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable) returns (bool) {\r\n        return interfaceId == type(IERC2981Royalties).interfaceId || ERC721Enumerable.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to get the Hashes Collection token URI.\r\n     * @param _tokenId The Hashes Collection token Id.\r\n     */\r\n    function tokenURI(uint256 _tokenId) public view override initialized returns (string memory) {\r\n        // Ensure that the token ID is valid and that the hash isn't empty.\r\n        require(_tokenId < nonce, \"CollectionNFTCloneableV2: Can't provide a token URI for a non-existent collection.\");\r\n\r\n        return draw(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to get the name of the Hashes Collection token\r\n     */\r\n    function name() public view override initialized returns (string memory) {\r\n        return tokenName;\r\n    }\r\n\r\n    /**\r\n     * @notice The function used to get the symbol of the Hashes Collection token\r\n     */\r\n    function symbol() public view override initialized returns (string memory) {\r\n        return tokenSymbol;\r\n    }\r\n\r\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\r\n        require(n < 2**64, errorMessage);\r\n        return uint64(n);\r\n    }\r\n\r\n    function safe128(uint256 n, string memory errorMessage) internal pure returns (uint128) {\r\n        require(n < 2**128, errorMessage);\r\n        return uint128(n);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenURIPredicateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintEligibilityPredicateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintFeePredicateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatureBlockAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"initializationBlock\",\"type\":\"uint64\"}],\"name\":\"CollectionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"CreatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hashesTokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"}],\"name\":\"RoyaltyBpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signatureBlockAddress\",\"type\":\"address\"}],\"name\":\"SignatureBlockAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signatureBlockAddress\",\"type\":\"address\"}],\"name\":\"SignatureBlockCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"creatorAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hashesDAOAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TokenURIPredicateContract\",\"outputs\":[{\"internalType\":\"contract ICollectionNFTTokenURIPredicate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeSignatureBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashesIdToCollectionTokenIdMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHashes\",\"name\":\"_hashesToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryMaintainerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_createCollectionCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initializationData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initializeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSignatureBlockCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hashesTokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEligibilityPredicateContract\",\"outputs\":[{\"internalType\":\"contract ICollectionNFTEligibilityPredicate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeePredicateContract\",\"outputs\":[{\"internalType\":\"contract ICollectionNFTMintFeePredicate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_royaltyBps\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signatureBlockAddress\",\"type\":\"address\"}],\"name\":\"setSignatureBlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureBlockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCollectionIdToHashesIdMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hashesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashesHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorAddress\",\"type\":\"address\"}],\"name\":\"transferCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_settings\",\"type\":\"bytes\"}],\"name\":\"verifyEcosystemSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CollectionNFTCloneableV2","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9f34258a0da970955e1a1db94d7ede3b04660022acc3dd1f0b8c71bdc333a299"}]}