{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value,gas:5000}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestVault.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev Defines methods for Nest Vault\r\ninterface INestVault {\r\n\r\n    /// @dev Approve allowance amount to target contract address\r\n    /// @dev target Target contract address\r\n    /// @dev limit Amount limit can transferred once\r\n    function approve(address target, uint limit) external;\r\n\r\n    /// @dev Transfer to by allowance\r\n    /// @param to Target receive address\r\n    /// @param amount Transfer amount\r\n    function transferTo(address to, uint amount) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestProbability.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev Defines methods for NestProbability\r\ninterface INestProbability {\r\n\r\n    // Roll dice44 information view\r\n    struct DiceView44 {\r\n        uint index;\r\n        address owner;\r\n        uint32 n;\r\n        uint32 m;\r\n        uint32 openBlock;\r\n        uint gained;\r\n    }\r\n\r\n    /// @dev Find the dices44 of the target address (in reverse order)\r\n    /// @param start Find forward from the index corresponding to the given contract address \r\n    /// (excluding the record corresponding to start)\r\n    /// @param count Maximum number of records returned\r\n    /// @param maxFindCount Find records at most\r\n    /// @param owner Target address\r\n    /// @return diceArray44 Matched dice44 array\r\n    function find44(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view returns (DiceView44[] memory diceArray44);\r\n\r\n    /// @dev List dice44\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return diceArray44 Matched dice44 array\r\n    function list44(\r\n        uint offset, \r\n        uint count, \r\n        uint order\r\n    ) external view returns (DiceView44[] memory diceArray44);\r\n\r\n    /// @dev Obtain the number of dices44 that have been opened\r\n    /// @return Number of dices44 opened\r\n    function getDiceCount44() external view returns (uint);\r\n\r\n    /// @dev start a roll dice44\r\n    /// @param n shares to roll, 4 decimals, it will pay 1.01n NEST\r\n    /// @param m times, 4 decimals\r\n    function roll44(uint n, uint m) external;\r\n\r\n    /// @dev Claim gained NEST\r\n    /// @param index index of bet\r\n    function claim44(uint index) external;\r\n\r\n    /// @dev Batch claim gained NEST\r\n    /// @param indices Indices of bets\r\n    function batchClaim44(uint[] calldata indices) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for nest builtin contract address mapping\r\ninterface INestMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    );\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() external view returns (address);\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() external view returns (address);\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() external view returns (address);\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface INestGovernance is INestMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/NestBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of nest\r\ncontract NestBase {\r\n\r\n    /// @dev INestGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance INestGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"NEST:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance INestGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"NEST:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/custom/NestFrequentlyUsed.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This contract include frequently used data\r\ncontract NestFrequentlyUsed is NestBase {\r\n\r\n    // ETH:\r\n    // Address of nest token\r\n    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n    // Address of NestOpenPrice contract\r\n    address constant NEST_OPEN_PRICE = 0xE544cF993C7d477C7ef8E91D28aCA250D135aa03;\r\n    // Address of nest vault\r\n    address constant NEST_VAULT_ADDRESS = 0x12858F7f24AA830EeAdab2437480277E92B0723a;\r\n\r\n    // // BSC:\r\n    // // Address of nest token\r\n    // address constant NEST_TOKEN_ADDRESS = 0x98f8669F6481EbB341B522fCD3663f79A3d1A6A7;\r\n    // // Address of NestOpenPrice contract\r\n    // address constant NEST_OPEN_PRICE = 0x09CE0e021195BA2c1CDE62A8B187abf810951540;\r\n    // // Address of nest vault\r\n    // address constant NEST_VAULT_ADDRESS = 0x65e7506244CDdeFc56cD43dC711470F8B0C43beE;\r\n\r\n    // // Polygon:\r\n    // // Address of nest token\r\n    // address constant NEST_TOKEN_ADDRESS = 0x98f8669F6481EbB341B522fCD3663f79A3d1A6A7;\r\n    // // Address of NestOpenPrice contract\r\n    // address constant NEST_OPEN_PRICE = 0x09CE0e021195BA2c1CDE62A8B187abf810951540;\r\n    // // Address of nest vault\r\n    // address constant NEST_VAULT_ADDRESS;\r\n\r\n    // // KCC:\r\n    // // Address of nest token\r\n    // address constant NEST_TOKEN_ADDRESS = 0x98f8669F6481EbB341B522fCD3663f79A3d1A6A7;\r\n    // // Address of NestOpenPrice contract\r\n    // address constant NEST_OPEN_PRICE = 0x7DBe94A4D6530F411A1E7337c7eb84185c4396e6;\r\n    // // Address of nest vault\r\n    // address constant NEST_VAULT_ADDRESS;\r\n\r\n    // USDT base\r\n    uint constant USDT_BASE = 1 ether;\r\n}\r\n\r\n\r\n// File contracts/NestProbability.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev NestProbability\r\ncontract NestProbability is NestFrequentlyUsed, INestProbability {\r\n\r\n    // Roll dice44 structure\r\n    struct Dice44 {\r\n        address owner;\r\n        uint32 n;\r\n        uint32 m;\r\n        uint32 openBlock;\r\n    }\r\n\r\n    // Roll cost rate\r\n    uint constant ROLL_COST_RATE = 1.01 ether;\r\n\r\n    // The span from current block to hash block\r\n    uint constant OPEN_BLOCK_SPAN44 = 1;\r\n\r\n    // 4 decimals for M\r\n    uint constant M_BASE44 = 10000;\r\n\r\n    // 4 decimals for N\r\n    uint constant N_BASE44 = 10000;\r\n    \r\n    // MAX M. [1.0000, 100.0000]\r\n    uint constant MAX_M44 = 100 * M_BASE44;\r\n    \r\n    // MAX N, [0.0001, 1000.0000]\r\n    uint constant MAX_N44 = 1000 * N_BASE44;\r\n\r\n    // Roll dice44 array\r\n    Dice44[] _dices44;\r\n\r\n    /// @dev Find the dices44 of the target address (in reverse order)\r\n    /// @param start Find forward from the index corresponding to the given contract address \r\n    /// (excluding the record corresponding to start)\r\n    /// @param count Maximum number of records returned\r\n    /// @param maxFindCount Find records at most\r\n    /// @param owner Target address\r\n    /// @return diceArray44 Matched dice44 array\r\n    function find44(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view override returns (DiceView44[] memory diceArray44) {\r\n        diceArray44 = new DiceView44[](count);\r\n        // Calculate search region\r\n        Dice44[] storage dices44 = _dices44;\r\n        // Loop from start to end\r\n        uint end = 0;\r\n        // start is 0 means Loop from the last item\r\n        if (start == 0) {\r\n            start = dices44.length;\r\n        }\r\n        // start > maxFindCount, so end is not 0\r\n        if (start > maxFindCount) {\r\n            end = start - maxFindCount;\r\n        }\r\n        \r\n        // Loop lookup to write qualified records to the buffer\r\n        for (uint index = 0; index < count && start > end;) {\r\n            Dice44 memory dice44 = dices44[--start];\r\n            if (dice44.owner == owner) {\r\n                diceArray44[index++] = _toDiceView44(dice44, start);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev List dice44\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return diceArray44 Matched dice44 array\r\n    function list44(\r\n        uint offset, \r\n        uint count, \r\n        uint order\r\n    ) external view override returns (DiceView44[] memory diceArray44) {\r\n\r\n        // Load dices44\r\n        Dice44[] storage dices44 = _dices44;\r\n        // Create result array\r\n        diceArray44 = new DiceView44[](count);\r\n        uint length = dices44.length;\r\n        uint i = 0;\r\n\r\n        // Reverse order\r\n        if (order == 0) {\r\n            uint index = length - offset;\r\n            uint end = index > count ? index - count : 0;\r\n            while (index > end) {\r\n                Dice44 memory gi = dices44[--index];\r\n                diceArray44[i++] = _toDiceView44(gi, index);\r\n            }\r\n        } \r\n        // Positive order\r\n        else {\r\n            uint index = offset;\r\n            uint end = index + count;\r\n            if (end > length) {\r\n                end = length;\r\n            }\r\n            while (index < end) {\r\n                diceArray44[i++] = _toDiceView44(dices44[index], index);\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Obtain the number of dices44 that have been opened\r\n    /// @return Number of dices44 opened\r\n    function getDiceCount44() external view override returns (uint) {\r\n        return _dices44.length;\r\n    }\r\n\r\n    /// @dev start a roll dice44\r\n    /// @param n shares to roll, 4 decimals, it will pay 1.01n NEST\r\n    /// @param m times, 4 decimals\r\n    function roll44(uint n, uint m) external override {\r\n        require(n > 0 && n <= MAX_N44  && m >= M_BASE44 && m <= MAX_M44, \"NP:n or m not valid\");\r\n\r\n        //_burn(msg.sender, n * 1 ether / N_BASE44);\r\n        TransferHelper.safeTransferFrom(\r\n            NEST_TOKEN_ADDRESS, \r\n            msg.sender, \r\n            NEST_VAULT_ADDRESS,\r\n            n * ROLL_COST_RATE / N_BASE44\r\n        );\r\n\r\n        _dices44.push(Dice44(msg.sender, uint32(n), uint32(m), uint32(block.number)));\r\n    }\r\n\r\n    /// @dev Claim gained NEST\r\n    /// @param index index of bet\r\n    function claim44(uint index) external override {\r\n        Dice44 memory dice44 = _dices44[index];\r\n        uint gain = _gained44(dice44, index);\r\n        if (gain > 0) {\r\n            //DCU(DCU_TOKEN_ADDRESS).mint(dice44.owner, gain);\r\n            INestVault(NEST_VAULT_ADDRESS).transferTo(dice44.owner, gain);\r\n        }\r\n\r\n        _dices44[index].n = uint32(0);\r\n    }\r\n\r\n    /// @dev Batch claim gained NEST\r\n    /// @param indices Indices of bets\r\n    function batchClaim44(uint[] calldata indices) external override {\r\n        \r\n        address owner = address(0);\r\n        uint gain = 0;\r\n\r\n        for (uint i = indices.length; i > 0;) {\r\n            uint index = indices[--i];\r\n            Dice44 memory dice44 = _dices44[index];\r\n            if (owner == address(0)) {\r\n                owner = dice44.owner;\r\n            } else {\r\n                require(owner == dice44.owner, \"NP:different owner\");\r\n            }\r\n            gain += _gained44(dice44, index);\r\n            _dices44[index].n = uint32(0);\r\n        }\r\n\r\n        if (owner > address(0)) {\r\n            //DCU(DCU_TOKEN_ADDRESS).mint(owner, gain);\r\n            INestVault(NEST_VAULT_ADDRESS).transferTo(owner, gain);\r\n        }\r\n    }\r\n\r\n    // Calculate gained number of NEST\r\n    function _gained44(Dice44 memory dice44, uint index) private view returns (uint gain) {\r\n        uint hashBlock = uint(dice44.openBlock) + OPEN_BLOCK_SPAN44;\r\n        require(block.number > hashBlock, \"NP:!hashBlock\");\r\n\r\n        // Ethereum miners may affect the blockhash value, thus changing the random results and submitting only blocks \r\n        // of blockhash that are beneficial to them. Considering this, by limiting the number and magnification of each\r\n        // lottery, users' profits after winning the lottery are limited to a maximum value, so it is considered that\r\n        // the rewards obtained by Ethereum miners after cheating are not enough to cover their costs\r\n        uint hashValue = uint(blockhash(hashBlock));\r\n        if (hashValue > 0) {\r\n            hashValue = uint(keccak256(abi.encodePacked(hashValue, index)));\r\n            if (hashValue % uint(dice44.m) < M_BASE44) {\r\n                gain = uint(dice44.n) * uint(dice44.m) * 1 ether / M_BASE44 / N_BASE44;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Convert Dice44 to DiceView44\r\n    function _toDiceView44(Dice44 memory dice44, uint index) private view returns (DiceView44 memory div) {\r\n        div = DiceView44(\r\n            index,\r\n            dice44.owner,\r\n            dice44.n,\r\n            dice44.m,\r\n            dice44.openBlock,\r\n            block.number > uint(dice44.openBlock) + OPEN_BLOCK_SPAN44 ? _gained44(dice44, index) : 0\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"batchClaim44\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim44\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFindCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"find44\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"m\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"openBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gained\",\"type\":\"uint256\"}],\"internalType\":\"struct INestProbability.DiceView44[]\",\"name\":\"diceArray44\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiceCount44\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list44\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"m\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"openBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gained\",\"type\":\"uint256\"}],\"internalType\":\"struct INestProbability.DiceView44[]\",\"name\":\"diceArray44\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"roll44\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NestProbability","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"8888","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dcfef99a3dbe0312684fdb41286b125d1441c53e648dd7bd8f9fd6c292e59019"}]}