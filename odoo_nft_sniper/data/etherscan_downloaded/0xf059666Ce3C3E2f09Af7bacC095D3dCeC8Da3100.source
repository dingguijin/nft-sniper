{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.5.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.5.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeCast.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/strategies/IStrategy.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IStrategy {\r\n    function deposit() external payable returns (bool);\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function harvest() external returns (uint256);\r\n\r\n    function shutdown() external;\r\n\r\n    function setCommunityReserve(address _communityReserve) external;\r\n\r\n    function setStrategist(address strategist_) external;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function harvestable() external view returns (uint256);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    function hasPendingFunds() external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IVault.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @title Interface for a Vault\r\n */\r\n\r\ninterface IVault {\r\n    event StrategyActivated(address indexed strategy);\r\n\r\n    event StrategyDeactivated(address indexed strategy);\r\n\r\n    /**\r\n     * @dev 'netProfit' is the profit after all fees have been deducted\r\n     */\r\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\r\n\r\n    function initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) external;\r\n\r\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAvailableToPool() external;\r\n\r\n    function initializeStrategy(address strategy_) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function withdrawFromReserve(uint256 amount) external;\r\n\r\n    function updateStrategy(address newStrategy) external;\r\n\r\n    function activateStrategy() external returns (bool);\r\n\r\n    function deactivateStrategy() external returns (bool);\r\n\r\n    function updatePerformanceFee(uint256 newPerformanceFee) external;\r\n\r\n    function updateStrategistFee(uint256 newStrategistFee) external;\r\n\r\n    function updateDebtLimit(uint256 newDebtLimit) external;\r\n\r\n    function updateTargetAllocation(uint256 newTargetAllocation) external;\r\n\r\n    function updateReserveFee(uint256 newReserveFee) external;\r\n\r\n    function updateBound(uint256 newBound) external;\r\n\r\n    function withdrawFromStrategy(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAllFromStrategy() external returns (bool);\r\n\r\n    function harvest() external returns (bool);\r\n\r\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\r\n\r\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalUnderlying() external view returns (uint256);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function strategy() external view returns (IStrategy);\r\n}\r\n\r\n\r\n// File interfaces/pool/ILiquidityPool.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ILiquidityPool {\r\n    event Deposit(address indexed minter, uint256 depositAmount, uint256 mintedLpTokens);\r\n\r\n    event DepositFor(\r\n        address indexed minter,\r\n        address indexed mintee,\r\n        uint256 depositAmount,\r\n        uint256 mintedLpTokens\r\n    );\r\n\r\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    event LpTokenSet(address indexed lpToken);\r\n\r\n    event StakerVaultSet(address indexed stakerVault);\r\n\r\n    event Shutdown();\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\r\n\r\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount) external payable returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\r\n\r\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\r\n\r\n    function depositFor(\r\n        address account,\r\n        uint256 depositAmount,\r\n        uint256 minTokenAmount\r\n    ) external payable returns (uint256);\r\n\r\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function handleLpTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function updateVault(address _vault) external;\r\n\r\n    function setLpToken(address _lpToken) external;\r\n\r\n    function setStaker() external;\r\n\r\n    function shutdownPool(bool shutdownStrategy) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function updateRequiredReserves(uint256 _newRatio) external;\r\n\r\n    function updateReserveDeviation(uint256 newRatio) external;\r\n\r\n    function updateMinWithdrawalFee(uint256 newFee) external;\r\n\r\n    function updateMaxWithdrawalFee(uint256 newFee) external;\r\n\r\n    function updateWithdrawalFeeDecreasePeriod(uint256 newPeriod) external;\r\n\r\n    function rebalanceVault() external;\r\n\r\n    function getNewCurrentFees(\r\n        uint256 timeToWait,\r\n        uint256 lastActionTimestamp,\r\n        uint256 feeRatio\r\n    ) external view returns (uint256);\r\n\r\n    function vault() external view returns (IVault);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function getLpToken() external view returns (address);\r\n\r\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function totalUnderlying() external view returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function isShutdown() external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IGasBank.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IGasBank {\r\n    event Deposit(address indexed account, uint256 value);\r\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\r\n\r\n    function depositFor(address account) external payable;\r\n\r\n    function withdrawUnused(address account) external;\r\n\r\n    function withdrawFrom(address account, uint256 amount) external;\r\n\r\n    function withdrawFrom(\r\n        address account,\r\n        address payable to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/oracles/IOracleProvider.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IOracleProvider {\r\n    /// @notice Checks whether the asset is supported\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return true if the asset is supported\r\n    function isAssetSupported(address baseAsset) external view returns (bool);\r\n\r\n    /// @notice Quotes the USD price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the USD price of the asset\r\n    function getPriceUSD(address baseAsset) external view returns (uint256);\r\n\r\n    /// @notice Quotes the ETH price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the ETH price of the asset\r\n    function getPriceETH(address baseAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderMeta.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\nlibrary AddressProviderMeta {\r\n    struct Meta {\r\n        bool freezable;\r\n        bool frozen;\r\n    }\r\n\r\n    function fromUInt(uint256 value) internal pure returns (Meta memory) {\r\n        Meta memory meta;\r\n        meta.freezable = (value & 1) == 1;\r\n        meta.frozen = ((value >> 1) & 1) == 1;\r\n        return meta;\r\n    }\r\n\r\n    function toUInt(Meta memory meta) internal pure returns (uint256) {\r\n        uint256 value;\r\n        value |= meta.freezable ? 1 : 0;\r\n        value |= meta.frozen ? 1 << 1 : 0;\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IAddressProvider.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IAddressProvider {\r\n    event KnownAddressKeyAdded(bytes32 indexed key);\r\n    event StakerVaultListed(address indexed stakerVault);\r\n    event StakerVaultDelisted(address indexed stakerVault);\r\n    event ActionListed(address indexed action);\r\n    event PoolListed(address indexed pool);\r\n    event VaultUpdated(address indexed previousVault, address indexed newVault);\r\n    event FeeHandlerAdded(address feeHandler);\r\n    event FeeHandlerRemoved(address feeHandler);\r\n\r\n    /** Key functions */\r\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\r\n\r\n    function freezeAddress(bytes32 key) external;\r\n\r\n    /** Pool functions */\r\n\r\n    function allPools() external view returns (address[] memory);\r\n\r\n    function addPool(address pool) external;\r\n\r\n    function poolsCount() external view returns (uint256);\r\n\r\n    function getPoolAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isPool(address pool) external view returns (bool);\r\n\r\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\r\n\r\n    function safeGetPoolForToken(address token) external view returns (address);\r\n\r\n    /** Vault functions  */\r\n\r\n    function updateVault(address previousVault, address newVault) external;\r\n\r\n    function allVaults() external view returns (address[] memory);\r\n\r\n    function vaultsCount() external view returns (uint256);\r\n\r\n    function getVaultAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isVault(address vault) external view returns (bool);\r\n\r\n    /** Action functions */\r\n\r\n    function allActions() external view returns (address[] memory);\r\n\r\n    function addAction(address action) external returns (bool);\r\n\r\n    function isAction(address action) external view returns (bool);\r\n\r\n    /** Address functions */\r\n    function initializeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function initializeAddress(\r\n        bytes32 key,\r\n        address initialAddress,\r\n        bool frezable\r\n    ) external;\r\n\r\n    function initializeAndFreezeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function getAddress(bytes32 key) external view returns (address);\r\n\r\n    function getAddress(bytes32 key, bool checkExists) external view returns (address);\r\n\r\n    function getAddressMeta(bytes32 key) external view returns (AddressProviderMeta.Meta memory);\r\n\r\n    function updateAddress(bytes32 key, address newAddress) external;\r\n\r\n    /** Staker vault functions */\r\n    function allStakerVaults() external view returns (address[] memory);\r\n\r\n    function tryGetStakerVault(address token) external view returns (bool, address);\r\n\r\n    function getStakerVault(address token) external view returns (address);\r\n\r\n    function addStakerVault(address stakerVault) external;\r\n\r\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\r\n\r\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\r\n\r\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\r\n\r\n    /** Fee Handler function */\r\n    function addFeeHandler(address feeHandler) external;\r\n\r\n    function removeFeeHandler(address feeHandler) external;\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IInflationManager.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IInflationManager {\r\n    event KeeperGaugeListed(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeListed(address indexed token, address indexed ammGauge);\r\n    event KeeperGaugeDelisted(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeDelisted(address indexed token, address indexed ammGauge);\r\n\r\n    /** Pool functions */\r\n\r\n    function setKeeperGauge(address pool, address _keeperGauge) external returns (bool);\r\n\r\n    function setAmmGauge(address token, address _ammGauge) external returns (bool);\r\n\r\n    function setMinter(address _minter) external;\r\n\r\n    function advanceKeeperGaugeEpoch(address pool) external;\r\n\r\n    function whitelistGauge(address gauge) external;\r\n\r\n    function removeStakerVaultFromInflation(address lpToken) external;\r\n\r\n    function removeAmmGauge(address token) external returns (bool);\r\n\r\n    function addGaugeForVault(address lpToken) external;\r\n\r\n    function checkpointAllGauges() external;\r\n\r\n    function mintRewards(address beneficiary, uint256 amount) external;\r\n\r\n    function getAllAmmGauges() external view returns (address[] memory);\r\n\r\n    function getLpRateForStakerVault(address stakerVault) external view returns (uint256);\r\n\r\n    function getKeeperRateForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmRateForToken(address token) external view returns (uint256);\r\n\r\n    function getLpPoolWeight(address pool) external view returns (uint256);\r\n\r\n    function getKeeperGaugeForPool(address pool) external view returns (address);\r\n\r\n    function getAmmGaugeForToken(address token) external view returns (address);\r\n\r\n    /** Weight setter functions **/\r\n\r\n    function updateLpPoolWeight(address lpToken, uint256 newPoolWeight) external;\r\n\r\n    function updateAmmTokenWeight(address token, uint256 newTokenWeight) external;\r\n\r\n    function updateKeeperPoolWeight(address pool, uint256 newPoolWeight) external;\r\n\r\n    function batchUpdateLpPoolWeights(address[] calldata lpTokens, uint256[] calldata weights)\r\n        external;\r\n\r\n    function batchUpdateAmmTokenWeights(address[] calldata tokens, uint256[] calldata weights)\r\n        external;\r\n\r\n    function batchUpdateKeeperPoolWeights(address[] calldata pools, uint256[] calldata weights)\r\n        external;\r\n\r\n    function deactivateWeightBasedKeeperDistribution() external;\r\n}\r\n\r\n\r\n// File interfaces/IController.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IController {\r\n    function addressProvider() external view returns (IAddressProvider);\r\n\r\n    function inflationManager() external view returns (IInflationManager);\r\n\r\n    function addStakerVault(address stakerVault) external;\r\n\r\n    function shutdownPool(ILiquidityPool pool, bool shutdownStrategy) external returns (bool);\r\n\r\n    /** Keeper functions */\r\n    function updateKeeperRequiredStakedMERO(uint256 amount) external;\r\n\r\n    function canKeeperExecuteAction(address keeper) external view returns (bool);\r\n\r\n    /** Miscellaneous functions */\r\n\r\n    function getTotalEthRequiredForGas(address payer) external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.5.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File interfaces/ILpToken.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ILpToken is IERC20Upgradeable {\r\n    function mint(address account, uint256 lpTokens) external;\r\n\r\n    function burn(address account, uint256 burnAmount) external returns (uint256);\r\n\r\n    function burn(uint256 burnAmount) external;\r\n\r\n    function minter() external view returns (address);\r\n\r\n    function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 _decimals,\r\n        address _minter\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IStakerVault.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IStakerVault {\r\n    event Staked(address indexed account, uint256 amount);\r\n    event Unstaked(address indexed account, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function initialize(address _token) external;\r\n\r\n    function initializeLpGauge(address _lpGauge) external;\r\n\r\n    function stake(uint256 amount) external;\r\n\r\n    function stakeFor(address account, uint256 amount) external;\r\n\r\n    function unstake(uint256 amount) external;\r\n\r\n    function unstakeFor(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function approve(address spender, uint256 amount) external;\r\n\r\n    function transfer(address account, uint256 amount) external;\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function increaseActionLockedBalance(address account, uint256 amount) external;\r\n\r\n    function decreaseActionLockedBalance(address account, uint256 amount) external;\r\n\r\n    function updateLpGauge(address _lpGauge) external;\r\n\r\n    function poolCheckpoint() external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function getToken() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function stakedAndActionLockedBalanceOf(address account) external view returns (uint256);\r\n\r\n    function actionLockedBalanceOf(address account) external view returns (uint256);\r\n\r\n    function getStakedByActions() external view returns (uint256);\r\n\r\n    function getPoolTotalStaked() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function lpGauge() external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/IVaultReserve.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IVaultReserve {\r\n    event Deposit(address indexed vault, address indexed token, uint256 amount);\r\n    event Withdraw(address indexed vault, address indexed token, uint256 amount);\r\n    event VaultListed(address indexed vault);\r\n\r\n    function deposit(address token, uint256 amount) external payable;\r\n\r\n    function withdraw(address token, uint256 amount) external;\r\n\r\n    function getBalance(address vault, address token) external view returns (uint256);\r\n\r\n    function canWithdraw(address vault) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IRoleManager.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IRoleManager {\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function addGovernor(address newGovernor) external;\r\n\r\n    function renounceGovernance() external;\r\n\r\n    function addGaugeZap(address zap) external;\r\n\r\n    function removeGaugeZap(address zap) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/IFeeBurner.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IFeeBurner {\r\n    function burnToTarget(address[] memory tokens, address targetLpToken)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IMeroToken.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IMeroToken is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function cap() external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/ISwapperRouter.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ISwapperRouter {\r\n    function swapAll(address fromToken, address toToken) external payable returns (uint256);\r\n\r\n    function setSlippageTolerance(uint256 slippageTolerance_) external;\r\n\r\n    function setCurvePool(address token_, address curvePool_) external;\r\n\r\n    function swap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn\r\n    ) external payable returns (uint256);\r\n\r\n    function getAmountOut(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderKeys.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\nlibrary AddressProviderKeys {\r\n    bytes32 internal constant _TREASURY_KEY = \"treasury\";\r\n    bytes32 internal constant _REWARD_HANDLER_KEY = \"rewardHandler\";\r\n    bytes32 internal constant _GAS_BANK_KEY = \"gasBank\";\r\n    bytes32 internal constant _VAULT_RESERVE_KEY = \"vaultReserve\";\r\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \"oracleProvider\";\r\n    bytes32 internal constant _POOL_FACTORY_KEY = \"poolFactory\";\r\n    bytes32 internal constant _CONTROLLER_KEY = \"controller\";\r\n    bytes32 internal constant _MERO_LOCKER_KEY = \"meroLocker\";\r\n    bytes32 internal constant _FEE_BURNER_KEY = \"feeBurner\";\r\n    bytes32 internal constant _ROLE_MANAGER_KEY = \"roleManager\";\r\n    bytes32 internal constant _SWAPPER_ROUTER_KEY = \"swapperRouter\";\r\n}\r\n\r\n\r\n// File libraries/AddressProviderHelpers.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary AddressProviderHelpers {\r\n    /**\r\n     * @return The address of the treasury.\r\n     */\r\n    function getTreasury(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._TREASURY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the reward handler.\r\n     */\r\n    function getRewardHandler(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._REWARD_HANDLER_KEY);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns zero address if no reward handler is set.\r\n     * @return The address of the reward handler.\r\n     */\r\n    function getSafeRewardHandler(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._REWARD_HANDLER_KEY, false);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the fee burner.\r\n     */\r\n    function getFeeBurner(IAddressProvider provider) internal view returns (IFeeBurner) {\r\n        return IFeeBurner(provider.getAddress(AddressProviderKeys._FEE_BURNER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The gas bank.\r\n     */\r\n    function getGasBank(IAddressProvider provider) internal view returns (IGasBank) {\r\n        return IGasBank(provider.getAddress(AddressProviderKeys._GAS_BANK_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the vault reserve.\r\n     */\r\n    function getVaultReserve(IAddressProvider provider) internal view returns (IVaultReserve) {\r\n        return IVaultReserve(provider.getAddress(AddressProviderKeys._VAULT_RESERVE_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The oracleProvider.\r\n     */\r\n    function getOracleProvider(IAddressProvider provider) internal view returns (IOracleProvider) {\r\n        return IOracleProvider(provider.getAddress(AddressProviderKeys._ORACLE_PROVIDER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the address of the MERO locker\r\n     */\r\n    function getMEROLocker(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._MERO_LOCKER_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the MERO locker\r\n     */\r\n    function getRoleManager(IAddressProvider provider) internal view returns (IRoleManager) {\r\n        return IRoleManager(provider.getAddress(AddressProviderKeys._ROLE_MANAGER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the controller\r\n     */\r\n    function getController(IAddressProvider provider) internal view returns (IController) {\r\n        return IController(provider.getAddress(AddressProviderKeys._CONTROLLER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the swapper router\r\n     */\r\n    function getSwapperRouter(IAddressProvider provider) internal view returns (ISwapperRouter) {\r\n        return ISwapperRouter(provider.getAddress(AddressProviderKeys._SWAPPER_ROUTER_KEY));\r\n    }\r\n}\r\n\r\n\r\n// File libraries/Errors.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Error {\r\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\r\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\r\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\r\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\r\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\r\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\r\n    string internal constant UNAUTHORIZED_PAUSE = \"not authorized to pause\";\r\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\r\n    string internal constant INVALID_INDEX = \"invalid index\";\r\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\r\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\r\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\r\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\r\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\r\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\r\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_POOL_IMPLEMENTATION =\r\n        \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\r\n        \"invalid LP Token implementation for given coin\";\r\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\r\n        \"invalid vault implementation for given coin\";\r\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\r\n        \"invalid stakerVault implementation for given coin\";\r\n    string internal constant INSUFFICIENT_ALLOWANCE = \"insufficient allowance\";\r\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\r\n    string internal constant INSUFFICIENT_AMOUNT_OUT = \"Amount received less than min amount\";\r\n    string internal constant INSUFFICIENT_AMOUNT_IN = \"Amount spent more than max amount\";\r\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\r\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\r\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\r\n    string internal constant ADDRESS_DOES_NOT_EXIST = \"address does not exist\";\r\n    string internal constant ADDRESS_FROZEN = \"address is frozen\";\r\n    string internal constant ROLE_EXISTS = \"role already exists\";\r\n    string internal constant CANNOT_REVOKE_ROLE = \"cannot revoke role\";\r\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\r\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\r\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\r\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\r\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\r\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\r\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\r\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\r\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\r\n    string internal constant CANNOT_EXECUTE_IN_SAME_BLOCK = \"cannot execute action in same block\";\r\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\r\n    string internal constant TOP_UP_FAILED = \"top up failed\";\r\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\r\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\r\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\r\n        \"not enough funds were withdrawn from the pool\";\r\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\r\n    string internal constant FAILED_MINT = \"mint failed\";\r\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\r\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\r\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\r\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\r\n    string internal constant INVALID_MINTER =\r\n        \"the minter address of the LP token and the pool address do not match\";\r\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\r\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\r\n    string internal constant NOTHING_PENDING = \"no pending change to reset\";\r\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\r\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\r\n    string internal constant DELAY_TOO_SHORT = \"delay must be at least 3 days\";\r\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\r\n        \"insufficient funds for updating the position\";\r\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\r\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\r\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\r\n    string internal constant ALREADY_SHUTDOWN = \"the pool is already shutdown\";\r\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\r\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\r\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\r\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\r\n    string internal constant GAUGE_KILLED = \"gauge killed\";\r\n    string internal constant INVALID_TARGET = \"Invalid Target\";\r\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\r\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\r\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\r\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\r\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\r\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\r\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\r\n        \"pool does not support additional underlying coins to be withdrawn\";\r\n    string internal constant STRATEGY_SHUTDOWN = \"Strategy is shutdown\";\r\n    string internal constant POOL_SHUTDOWN = \"Pool is shutdown\";\r\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\r\n    string internal constant GAUGE_STILL_ACTIVE = \"Gauge still active\";\r\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\r\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\r\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\r\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\r\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\r\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\r\n    string internal constant INVALID_MAX_FEE = \"invalid max fee\";\r\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\r\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\r\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\r\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\r\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\r\n    string internal constant PREPARED_WITHDRAWAL =\r\n        \"Cannot relock funds when withdrawal is being prepared\";\r\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\r\n    string internal constant STALE_PRICE = \"Price is stale\";\r\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\r\n    string internal constant ROUND_NOT_COMPLETE = \"Round not complete\";\r\n    string internal constant NOT_ENOUGH_MERO_STAKED = \"Not enough MERO tokens staked\";\r\n    string internal constant RESERVE_ACCESS_EXCEEDED = \"Reserve access exceeded\";\r\n}\r\n\r\n\r\n// File libraries/ScaledMath.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n/*\r\n * @dev To use functions of this contract, at least one of the numbers must\r\n * be scaled to `DECIMAL_SCALE`. The result will scaled to `DECIMAL_SCALE`\r\n * if both numbers are scaled to `DECIMAL_SCALE`, otherwise to the scale\r\n * of the number not scaled by `DECIMAL_SCALE`\r\n */\r\nlibrary ScaledMath {\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant DECIMAL_SCALE = 1e18;\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant ONE = 1e18;\r\n\r\n    /**\r\n     * @notice Performs a multiplication between two scaled numbers\r\n     */\r\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * b) / DECIMAL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two scaled numbers\r\n     */\r\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, rounding up the result\r\n     */\r\n    function scaledDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE + b - 1) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, ignoring any scaling and rounding up the result\r\n     */\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a + b - 1) / b;\r\n    }\r\n}\r\n\r\n\r\n// File libraries/Roles.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Roles {\r\n    bytes32 internal constant GOVERNANCE = \"governance\";\r\n    bytes32 internal constant ADDRESS_PROVIDER = \"address_provider\";\r\n    bytes32 internal constant POOL_FACTORY = \"pool_factory\";\r\n    bytes32 internal constant CONTROLLER = \"controller\";\r\n    bytes32 internal constant GAUGE_ZAP = \"gauge_zap\";\r\n    bytes32 internal constant MAINTENANCE = \"maintenance\";\r\n    bytes32 internal constant INFLATION_MANAGER = \"inflation_manager\";\r\n    bytes32 internal constant POOL = \"pool\";\r\n    bytes32 internal constant VAULT = \"vault\";\r\n}\r\n\r\n\r\n// File contracts/access/AuthorizationBase.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n/**\r\n * @notice Provides modifiers for authorization\r\n */\r\nabstract contract AuthorizationBase {\r\n    /**\r\n     * @notice Only allows a sender with `role` to perform the given action\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        require(_roleManager().hasRole(role, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with GOVERNANCE role to perform the given action\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_roleManager().hasRole(Roles.GOVERNANCE, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles2(bytes32 role1, bytes32 role2) {\r\n        require(_roleManager().hasAnyRole(role1, role2, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles3(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _roleManager().hasAnyRole(role1, role2, role3, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    function roleManager() external view virtual returns (IRoleManager) {\r\n        return _roleManager();\r\n    }\r\n\r\n    function _roleManager() internal view virtual returns (IRoleManager);\r\n}\r\n\r\n\r\n// File contracts/access/Authorization.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ncontract Authorization is AuthorizationBase {\r\n    IRoleManager internal immutable __roleManager;\r\n\r\n    constructor(IRoleManager roleManager) {\r\n        __roleManager = roleManager;\r\n    }\r\n\r\n    function _roleManager() internal view override returns (IRoleManager) {\r\n        return __roleManager;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Pausable.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\nabstract contract Pausable {\r\n    bool public isPaused;\r\n\r\n    modifier notPaused() {\r\n        require(!isPaused, Error.CONTRACT_PAUSED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedToPause() {\r\n        require(_isAuthorizedToPause(msg.sender), Error.UNAUTHORIZED_PAUSE);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Pause the contract.\r\n     */\r\n    function pause() external onlyAuthorizedToPause {\r\n        isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause the contract.\r\n     */\r\n    function unpause() external onlyAuthorizedToPause {\r\n        isPaused = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is authorized to pause the contract\r\n     * @dev This should be implemented in contracts inheriting `Pausable`\r\n     * to provide proper access control\r\n     */\r\n    function _isAuthorizedToPause(address account) internal view virtual returns (bool);\r\n}\r\n\r\n\r\n// File contracts/pool/LiquidityPool.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Pausing/unpausing the pool will disable/re-enable deposits.\r\n */\r\nabstract contract LiquidityPool is ILiquidityPool, Authorization, Pausable, Initializable {\r\n    using AddressProviderHelpers for IAddressProvider;\r\n    using ScaledMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeCast for uint256;\r\n\r\n    struct WithdrawalFeeMeta {\r\n        uint64 timeToWait;\r\n        uint64 feeRatio;\r\n        uint64 lastActionTimestamp;\r\n    }\r\n\r\n    IVault public vault;\r\n    uint256 public reserveDeviation = 0.005e18;\r\n    uint256 public requiredReserves = ScaledMath.ONE;\r\n    uint256 public maxWithdrawalFee = 0.03e18;\r\n    uint256 public minWithdrawalFee;\r\n    uint256 public withdrawalFeeDecreasePeriod = 1 weeks;\r\n\r\n    /**\r\n     * @notice even through admin votes and later governance, the withdrawal\r\n     * fee will never be able to go above this value\r\n     */\r\n    uint256 internal constant _MAX_WITHDRAWAL_FEE = 0.05e18;\r\n\r\n    /**\r\n     * @notice Keeps track of the withdrawal fees on a per-address basis\r\n     */\r\n    mapping(address => WithdrawalFeeMeta) public withdrawalFeeMetas;\r\n\r\n    IController public immutable controller;\r\n    IAddressProvider public immutable addressProvider;\r\n\r\n    IStakerVault public staker;\r\n    ILpToken public lpToken;\r\n    string public name;\r\n\r\n    bool internal _shutdown;\r\n\r\n    event RequiredReservesUpdated(uint256 requireReserves);\r\n    event ReserveDeviationUpdated(uint256 reserveDeviation);\r\n    event MinWithdrawalFeeUpdated(uint256 minWithdrawalFee);\r\n    event MaxWithdrawalFeeUpdated(uint256 maxWithdrawalFee);\r\n    event WithdrawalFeeDecreasePeriodUpdated(uint256 withdrawalFeeDecreasePeriod);\r\n    event VaultUpdated(address vault);\r\n\r\n    modifier notShutdown() {\r\n        require(!_shutdown, Error.POOL_SHUTDOWN);\r\n        _;\r\n    }\r\n\r\n    constructor(IController _controller)\r\n        Authorization(_controller.addressProvider().getRoleManager())\r\n    {\r\n        controller = IController(_controller);\r\n        addressProvider = IController(_controller).addressProvider();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit funds into liquidity pool and mint LP tokens in exchange.\r\n     * @param depositAmount Amount of the underlying asset to supply.\r\n     * @return The actual amount minted.\r\n     */\r\n    function deposit(uint256 depositAmount) external payable override returns (uint256) {\r\n        return depositFor(msg.sender, depositAmount, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit funds into liquidity pool and mint LP tokens in exchange.\r\n     * @param depositAmount Amount of the underlying asset to supply.\r\n     * @param minTokenAmount Minimum amount of LP tokens that should be minted.\r\n     * @return The actual amount minted.\r\n     */\r\n    function deposit(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return depositFor(msg.sender, depositAmount, minTokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit funds into liquidity pool and stake LP Tokens in Staker Vault.\r\n     * @param depositAmount Amount of the underlying asset to supply.\r\n     * @param minTokenAmount Minimum amount of LP tokens that should be minted.\r\n     * @return The actual amount minted and staked.\r\n     */\r\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 amountMinted_ = depositFor(address(this), depositAmount, minTokenAmount);\r\n        staker.stakeFor(msg.sender, amountMinted_);\r\n        return amountMinted_;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws all funds from vault.\r\n     * @dev Should be called in case of emergencies.\r\n     */\r\n    function shutdownStrategy() external override onlyGovernance {\r\n        vault.shutdownStrategy();\r\n    }\r\n\r\n    /**\r\n     * @notice permanently shuts down the pool\r\n     * @param _shutdownStrategy if true, will also shut down the strategy\r\n     * and withdraw all the funds back to the pool\r\n     */\r\n    function shutdownPool(bool _shutdownStrategy) external onlyRole(Roles.CONTROLLER) {\r\n        require(!_shutdown, Error.ALREADY_SHUTDOWN);\r\n\r\n        _shutdown = true;\r\n        maxWithdrawalFee = 0;\r\n        minWithdrawalFee = 0;\r\n\r\n        if (_shutdownStrategy) {\r\n            vault.shutdownStrategy();\r\n        } else {\r\n            vault.withdrawAvailableToPool();\r\n        }\r\n\r\n        emit Shutdown();\r\n    }\r\n\r\n    function setLpToken(address _lpToken)\r\n        external\r\n        override\r\n        onlyRoles2(Roles.GOVERNANCE, Roles.POOL_FACTORY)\r\n    {\r\n        require(address(lpToken) == address(0), Error.ADDRESS_ALREADY_SET);\r\n        require(ILpToken(_lpToken).minter() == address(this), Error.INVALID_MINTER);\r\n        lpToken = ILpToken(_lpToken);\r\n        _approveStakerVaultSpendingLpTokens();\r\n        emit LpTokenSet(_lpToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Checkpoint function to update a user's withdrawal fees on deposit and redeem\r\n     * @param from Address sending from\r\n     * @param to Address sending to\r\n     * @param amount Amount to redeem or deposit\r\n     */\r\n    function handleLpTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external override {\r\n        require(\r\n            msg.sender == address(lpToken) || msg.sender == address(staker),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        if (\r\n            addressProvider.isStakerVault(to, address(lpToken)) ||\r\n            addressProvider.isStakerVault(from, address(lpToken)) ||\r\n            addressProvider.isAction(to) ||\r\n            addressProvider.isAction(from) ||\r\n            addressProvider.isWhiteListedFeeHandler(to) ||\r\n            addressProvider.isWhiteListedFeeHandler(from)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (to != address(0)) {\r\n            _updateUserFeesOnDeposit(to, from, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update required reserve ratio.\r\n     * @param requireReserves_ New required reserve ratio.\r\n     */\r\n    function updateRequiredReserves(uint256 requireReserves_) external override onlyGovernance {\r\n        require(requireReserves_ <= ScaledMath.ONE, Error.INVALID_AMOUNT);\r\n        requiredReserves = requireReserves_;\r\n        _rebalanceVault();\r\n        emit RequiredReservesUpdated(requireReserves_);\r\n    }\r\n\r\n    /**\r\n     * @notice Update reserve deviation ratio.\r\n     * @param reserveDeviation_ New reserve deviation ratio.\r\n     */\r\n    function updateReserveDeviation(uint256 reserveDeviation_) external override onlyGovernance {\r\n        require(reserveDeviation_ <= (ScaledMath.DECIMAL_SCALE * 50) / 100, Error.INVALID_AMOUNT);\r\n        reserveDeviation = reserveDeviation_;\r\n        _rebalanceVault();\r\n        emit ReserveDeviationUpdated(reserveDeviation_);\r\n    }\r\n\r\n    /**\r\n     * @notice Update min withdrawal fee.\r\n     * @param minWithdrawalFee_ New min withdrawal fee.\r\n     */\r\n    function updateMinWithdrawalFee(uint256 minWithdrawalFee_) external override onlyGovernance {\r\n        _checkFeeInvariants(minWithdrawalFee_, maxWithdrawalFee);\r\n        minWithdrawalFee = minWithdrawalFee_;\r\n        emit MinWithdrawalFeeUpdated(minWithdrawalFee_);\r\n    }\r\n\r\n    /**\r\n     * @notice Update max withdrawal fee.\r\n     * @param maxWithdrawalFee_ New max withdrawal fee.\r\n     */\r\n    function updateMaxWithdrawalFee(uint256 maxWithdrawalFee_) external override onlyGovernance {\r\n        _checkFeeInvariants(minWithdrawalFee, maxWithdrawalFee_);\r\n        maxWithdrawalFee = maxWithdrawalFee_;\r\n        emit MaxWithdrawalFeeUpdated(maxWithdrawalFee_);\r\n    }\r\n\r\n    /**\r\n     * @notice Update withdrawal fee decrease period.\r\n     * @param withdrawalFeeDecreasePeriod_ New withdrawal fee decrease period.\r\n     */\r\n    function updateWithdrawalFeeDecreasePeriod(uint256 withdrawalFeeDecreasePeriod_)\r\n        external\r\n        override\r\n        onlyGovernance\r\n    {\r\n        withdrawalFeeDecreasePeriod = withdrawalFeeDecreasePeriod_;\r\n        emit WithdrawalFeeDecreasePeriodUpdated(withdrawalFeeDecreasePeriod_);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the staker vault for this pool's LP token\r\n     * @dev Staker vault and LP token pairs are immutable and the staker vault can only be set once for a pool.\r\n     *      Only one vault exists per LP token. This information will be retrieved from the controller of the pool.\r\n     */\r\n    function setStaker() external override onlyRoles2(Roles.GOVERNANCE, Roles.POOL_FACTORY) {\r\n        require(address(staker) == address(0), Error.ADDRESS_ALREADY_SET);\r\n        address stakerVault = addressProvider.getStakerVault(address(lpToken));\r\n        require(stakerVault != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n        staker = IStakerVault(stakerVault);\r\n        _approveStakerVaultSpendingLpTokens();\r\n        emit StakerVaultSet(stakerVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Update vault.\r\n     * @param vault_ Address of new Vault contract.\r\n     */\r\n    function updateVault(address vault_) external override onlyGovernance {\r\n        IVault oldVault = IVault(vault);\r\n        if (address(oldVault) != address(0)) oldVault.shutdownStrategy();\r\n        vault = IVault(vault_);\r\n        addressProvider.updateVault(address(oldVault), vault_);\r\n        emit VaultUpdated(vault_);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the underlying asset by burning LP tokens.\r\n     * @param redeemLpTokens Number of tokens to burn for redeeming the underlying.\r\n     * @return Actual amount of the underlying redeemed.\r\n     */\r\n    function redeem(uint256 redeemLpTokens) external override returns (uint256) {\r\n        return redeem(redeemLpTokens, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Rebalance vault according to required underlying backing reserves.\r\n     */\r\n    function rebalanceVault() external override onlyGovernance {\r\n        _rebalanceVault();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit funds for an address into liquidity pool and mint LP tokens in exchange.\r\n     * @param account Account to deposit for.\r\n     * @param depositAmount Amount of the underlying asset to supply.\r\n     * @return Actual amount minted.\r\n     */\r\n    function depositFor(address account, uint256 depositAmount)\r\n        external\r\n        payable\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return depositFor(account, depositAmount, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the underlying asset by burning LP tokens, unstaking any LP tokens needed.\r\n     * @param redeemLpTokens Number of tokens to unstake and/or burn for redeeming the underlying.\r\n     * @param minRedeemAmount Minimum amount of underlying that should be received.\r\n     * @return Actual amount of the underlying redeemed.\r\n     */\r\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 lpBalance_ = lpToken.balanceOf(msg.sender);\r\n        require(\r\n            lpBalance_ + staker.balanceOf(msg.sender) >= redeemLpTokens,\r\n            Error.INSUFFICIENT_BALANCE\r\n        );\r\n        if (lpBalance_ < redeemLpTokens) {\r\n            staker.unstakeFor(msg.sender, msg.sender, redeemLpTokens - lpBalance_);\r\n        }\r\n        return redeem(redeemLpTokens, minRedeemAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the address of the LP token of this pool\r\n     * @return The address of the LP token\r\n     */\r\n    function getLpToken() external view override returns (address) {\r\n        return address(lpToken);\r\n    }\r\n\r\n    /**\r\n     * @return whether the pool is shut down or not\r\n     */\r\n    function isShutdown() external view override returns (bool) {\r\n        return _shutdown;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the amount of LP tokens that need to be redeemed to get a certain amount of underlying (includes fees and exchange rate)\r\n     * @param account Address of the account redeeming.\r\n     * @param underlyingAmount The amount of underlying desired.\r\n     * @return Amount of LP tokens that need to be redeemed.\r\n     */\r\n    function calcRedeem(address account, uint256 underlyingAmount)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(underlyingAmount > 0, Error.INVALID_AMOUNT);\r\n        ILpToken lpToken_ = lpToken;\r\n        require(lpToken_.balanceOf(account) > 0, Error.INSUFFICIENT_BALANCE);\r\n\r\n        uint256 currentExchangeRate = exchangeRate();\r\n        uint256 withoutFeesLpAmount = underlyingAmount.scaledDiv(currentExchangeRate);\r\n        if (withoutFeesLpAmount == lpToken_.totalSupply()) {\r\n            return withoutFeesLpAmount;\r\n        }\r\n\r\n        WithdrawalFeeMeta memory meta = withdrawalFeeMetas[account];\r\n\r\n        uint256 currentFeeRatio;\r\n        if (!addressProvider.isAction(account)) {\r\n            currentFeeRatio = getNewCurrentFees(\r\n                meta.timeToWait,\r\n                meta.lastActionTimestamp,\r\n                meta.feeRatio\r\n            );\r\n        }\r\n        uint256 scalingFactor = currentExchangeRate.scaledMul((ScaledMath.ONE - currentFeeRatio));\r\n        uint256 neededLpTokens = underlyingAmount.scaledDivRoundUp(scalingFactor);\r\n\r\n        return neededLpTokens;\r\n    }\r\n\r\n    function getUnderlying() external view virtual override returns (address);\r\n\r\n    /**\r\n     * @notice Deposit funds for an address into liquidity pool and mint LP tokens in exchange.\r\n     * @param account Account to deposit for.\r\n     * @param depositAmount Amount of the underlying asset to supply.\r\n     * @param minTokenAmount Minimum amount of LP tokens that should be minted.\r\n     * @return Actual amount minted.\r\n     */\r\n    function depositFor(\r\n        address account,\r\n        uint256 depositAmount,\r\n        uint256 minTokenAmount\r\n    ) public payable override notPaused notShutdown returns (uint256) {\r\n        if (depositAmount == 0) return 0;\r\n        uint256 rate = exchangeRate();\r\n\r\n        _doTransferInFromSender(depositAmount);\r\n        uint256 mintedLp = depositAmount.scaledDiv(rate);\r\n        require(mintedLp >= minTokenAmount && mintedLp > 0, Error.INVALID_AMOUNT);\r\n\r\n        lpToken.mint(account, mintedLp);\r\n\r\n        _rebalanceVault();\r\n\r\n        if (msg.sender == account || address(this) == account) {\r\n            emit Deposit(msg.sender, depositAmount, mintedLp);\r\n        } else {\r\n            emit DepositFor(msg.sender, account, depositAmount, mintedLp);\r\n        }\r\n        return mintedLp;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the underlying asset by burning LP tokens.\r\n     * @param redeemLpTokens Number of tokens to burn for redeeming the underlying.\r\n     * @param minRedeemAmount Minimum amount of underlying that should be received.\r\n     * @return Actual amount of the underlying redeemed.\r\n     */\r\n    function redeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        public\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(redeemLpTokens > 0, Error.INVALID_AMOUNT);\r\n        ILpToken lpToken_ = lpToken;\r\n        require(lpToken_.balanceOf(msg.sender) >= redeemLpTokens, Error.INSUFFICIENT_BALANCE);\r\n\r\n        uint256 withdrawalFee = addressProvider.isAction(msg.sender)\r\n            ? 0\r\n            : getWithdrawalFee(msg.sender, redeemLpTokens);\r\n        uint256 redeemMinusFees = redeemLpTokens - withdrawalFee;\r\n        // Pay no fees on the last withdrawal (avoid locking funds in the pool)\r\n        if (redeemLpTokens == lpToken_.totalSupply()) {\r\n            redeemMinusFees = redeemLpTokens;\r\n        }\r\n        uint256 redeemUnderlying = redeemMinusFees.scaledMul(exchangeRate());\r\n        require(redeemUnderlying >= minRedeemAmount, Error.NOT_ENOUGH_FUNDS_WITHDRAWN);\r\n\r\n        if (!_shutdown) {\r\n            _rebalanceVault(redeemUnderlying);\r\n        }\r\n\r\n        lpToken_.burn(msg.sender, redeemLpTokens);\r\n        _doTransferOut(payable(msg.sender), redeemUnderlying);\r\n        emit Redeem(msg.sender, redeemUnderlying, redeemLpTokens);\r\n        return redeemUnderlying;\r\n    }\r\n\r\n    /**\r\n     * @notice Compute current exchange rate of LP tokens to underlying scaled to 1e18.\r\n     * @dev Exchange rate means: underlying = LP token * exchangeRate\r\n     * @return Current exchange rate.\r\n     */\r\n    function exchangeRate() public view override returns (uint256) {\r\n        uint256 totalUnderlying_ = totalUnderlying();\r\n        uint256 totalSupply = lpToken.totalSupply();\r\n        if (totalSupply == 0 || totalUnderlying_ == 0) {\r\n            return ScaledMath.ONE;\r\n        }\r\n\r\n        return totalUnderlying_.scaledDiv(totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Compute total amount of underlying tokens for this pool.\r\n     * @return Total amount of underlying in pool.\r\n     */\r\n    function totalUnderlying() public view override returns (uint256) {\r\n        IVault vault_ = vault;\r\n        if (address(vault_) == address(0)) {\r\n            return _getBalanceUnderlying();\r\n        }\r\n        uint256 investedUnderlying = vault_.getTotalUnderlying();\r\n        return investedUnderlying + _getBalanceUnderlying();\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the withdrawal fee for `account`\r\n     * @param account Address to get the withdrawal fee for\r\n     * @param amount Amount to calculate the withdrawal fee for\r\n     * @return Withdrawal fee in LP tokens\r\n     */\r\n    function getWithdrawalFee(address account, uint256 amount)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        WithdrawalFeeMeta memory meta = withdrawalFeeMetas[account];\r\n\r\n        if (lpToken.balanceOf(account) == 0) {\r\n            return 0;\r\n        }\r\n        uint256 currentFee = getNewCurrentFees(\r\n            meta.timeToWait,\r\n            meta.lastActionTimestamp,\r\n            meta.feeRatio\r\n        );\r\n        return amount.scaledMul(currentFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the withdrawal fee a user would currently need to pay on currentBalance.\r\n     * @param timeToWait The total time to wait until the withdrawal fee reached the min. fee\r\n     * @param lastActionTimestamp Timestamp of the last fee update\r\n     * @param feeRatio Fees that would currently be paid on the user's entire balance\r\n     * @return Updated fee amount on the currentBalance\r\n     */\r\n    function getNewCurrentFees(\r\n        uint256 timeToWait,\r\n        uint256 lastActionTimestamp,\r\n        uint256 feeRatio\r\n    ) public view override returns (uint256) {\r\n        uint256 timeElapsed = _getTime() - lastActionTimestamp;\r\n        uint256 minFeePercentage = minWithdrawalFee;\r\n        if (timeElapsed >= timeToWait || minFeePercentage > feeRatio) {\r\n            return minFeePercentage;\r\n        }\r\n        uint256 elapsedShare = timeElapsed.scaledDiv(timeToWait);\r\n        return feeRatio - (feeRatio - minFeePercentage).scaledMul(elapsedShare);\r\n    }\r\n\r\n    function _rebalanceVault() internal {\r\n        _rebalanceVault(0);\r\n    }\r\n\r\n    function _initialize(string calldata name_, address vault_) internal initializer {\r\n        name = name_;\r\n        vault = IVault(vault_);\r\n    }\r\n\r\n    function _approveStakerVaultSpendingLpTokens() internal {\r\n        address staker_ = address(staker);\r\n        address lpToken_ = address(lpToken);\r\n        if (staker_ == address(0) || lpToken_ == address(0)) return;\r\n        if (IERC20(lpToken_).allowance(address(this), staker_) > 0) return;\r\n        IERC20(lpToken_).safeApprove(staker_, type(uint256).max);\r\n    }\r\n\r\n    function _doTransferInFromSender(uint256 amount) internal virtual;\r\n\r\n    function _doTransferOut(address payable to, uint256 amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Rebalances the pool's allocations to the vault\r\n     * @param underlyingToWithdraw Amount of underlying to withdraw such that after the withdrawal the pool and vault allocations are correctly balanced.\r\n     */\r\n    function _rebalanceVault(uint256 underlyingToWithdraw) internal {\r\n        IVault vault_ = vault;\r\n\r\n        if (address(vault_) == address(0)) return;\r\n        uint256 lockedLp = staker.getStakedByActions();\r\n        uint256 totalUnderlyingStaked = lockedLp.scaledMul(exchangeRate());\r\n\r\n        uint256 underlyingBalance = _getBalanceUnderlying(true);\r\n        uint256 maximumDeviation = totalUnderlyingStaked.scaledMul(reserveDeviation);\r\n\r\n        uint256 nextTargetBalance = totalUnderlyingStaked.scaledMul(requiredReserves);\r\n\r\n        if (\r\n            underlyingToWithdraw > underlyingBalance ||\r\n            (underlyingBalance - underlyingToWithdraw) + maximumDeviation < nextTargetBalance\r\n        ) {\r\n            uint256 requiredDeposits = nextTargetBalance + underlyingToWithdraw - underlyingBalance;\r\n            vault_.withdraw(requiredDeposits);\r\n        } else {\r\n            uint256 nextBalance = underlyingBalance - underlyingToWithdraw;\r\n            if (nextBalance > nextTargetBalance + maximumDeviation) {\r\n                uint256 excessDeposits = nextBalance - nextTargetBalance;\r\n                _doTransferOut(payable(address(vault_)), excessDeposits);\r\n                vault_.deposit();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updateUserFeesOnDeposit(\r\n        address account,\r\n        address from,\r\n        uint256 amountAdded\r\n    ) internal {\r\n        WithdrawalFeeMeta storage meta = withdrawalFeeMetas[account];\r\n        uint256 balance = lpToken.balanceOf(account) +\r\n            staker.stakedAndActionLockedBalanceOf(account);\r\n        uint256 newCurrentFeeRatio = getNewCurrentFees(\r\n            meta.timeToWait,\r\n            meta.lastActionTimestamp,\r\n            meta.feeRatio\r\n        );\r\n        uint256 shareAdded = amountAdded.scaledDiv(amountAdded + balance);\r\n        uint256 shareExisting = ScaledMath.ONE - shareAdded;\r\n        uint256 feeOnDeposit;\r\n        if (from == address(0)) {\r\n            feeOnDeposit = maxWithdrawalFee;\r\n            meta.lastActionTimestamp = _getTime().toUint64();\r\n        } else {\r\n            WithdrawalFeeMeta memory fromMeta = withdrawalFeeMetas[from];\r\n            feeOnDeposit = getNewCurrentFees(\r\n                fromMeta.timeToWait,\r\n                fromMeta.lastActionTimestamp,\r\n                fromMeta.feeRatio\r\n            );\r\n            uint256 minTime_ = _getTime() - meta.timeToWait;\r\n            if (meta.lastActionTimestamp < minTime_) {\r\n                meta.lastActionTimestamp = minTime_.toUint64();\r\n            }\r\n            meta.lastActionTimestamp = ((shareExisting *\r\n                uint256(meta.lastActionTimestamp) +\r\n                shareAdded *\r\n                _getTime()) / (shareExisting + shareAdded)).toUint64();\r\n        }\r\n\r\n        uint256 newFeeRatio = shareExisting.scaledMul(newCurrentFeeRatio) +\r\n            shareAdded.scaledMul(feeOnDeposit);\r\n\r\n        meta.feeRatio = newFeeRatio.toUint64();\r\n        meta.timeToWait = withdrawalFeeDecreasePeriod.toUint64();\r\n    }\r\n\r\n    function _getBalanceUnderlying() internal view virtual returns (uint256);\r\n\r\n    function _getBalanceUnderlying(bool transferInDone) internal view virtual returns (uint256);\r\n\r\n    function _isAuthorizedToPause(address account) internal view override returns (bool) {\r\n        return _roleManager().hasRole(Roles.GOVERNANCE, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overridden for testing\r\n     */\r\n    function _getTime() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function _checkFeeInvariants(uint256 minFee, uint256 maxFee) internal pure {\r\n        require(maxFee >= minFee, Error.INVALID_AMOUNT);\r\n        require(maxFee <= _MAX_WITHDRAWAL_FEE, Error.INVALID_AMOUNT);\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/pool/IEthPool.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IEthPool {\r\n    function initialize(string calldata name_, address vault_) external;\r\n}\r\n\r\n\r\n// File contracts/pool/EthPool.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\ncontract EthPool is LiquidityPool, IEthPool {\r\n    constructor(IController _controller) LiquidityPool(_controller) {}\r\n\r\n    receive() external payable {}\r\n\r\n    function initialize(string calldata name_, address vault_) external override {\r\n        _initialize(name_, vault_);\r\n    }\r\n\r\n    function getUnderlying() public pure override returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    function _doTransferInFromSender(uint256 amount) internal override {\r\n        require(msg.value == amount, Error.INVALID_AMOUNT);\r\n    }\r\n\r\n    function _doTransferOut(address payable to, uint256 amount) internal override {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = to.call{value: amount}(\"\");\r\n        require(success, Error.FAILED_TRANSFER);\r\n    }\r\n\r\n    function _getBalanceUnderlying() internal view override returns (uint256) {\r\n        return _getBalanceUnderlying(false);\r\n    }\r\n\r\n    function _getBalanceUnderlying(bool transferInDone) internal view override returns (uint256) {\r\n        uint256 balance = address(this).balance;\r\n        if (!transferInDone) {\r\n            balance -= msg.value;\r\n        }\r\n        return balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedLpTokens\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedLpTokens\",\"type\":\"uint256\"}],\"name\":\"DepositFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"MaxWithdrawalFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"MinWithdrawalFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requireReserves\",\"type\":\"uint256\"}],\"name\":\"RequiredReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveDeviation\",\"type\":\"uint256\"}],\"name\":\"ReserveDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerVault\",\"type\":\"address\"}],\"name\":\"StakerVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFeeDecreasePeriod\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFeeDecreasePeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"calcRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeToWait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"}],\"name\":\"getNewCurrentFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"handleLpTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract ILpToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRedeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemLpTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"setLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shutdownStrategy\",\"type\":\"bool\"}],\"name\":\"shutdownPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"contract IStakerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRedeemAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeAndRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalFee_\",\"type\":\"uint256\"}],\"name\":\"updateMaxWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minWithdrawalFee_\",\"type\":\"uint256\"}],\"name\":\"updateMinWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requireReserves_\",\"type\":\"uint256\"}],\"name\":\"updateRequiredReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveDeviation_\",\"type\":\"uint256\"}],\"name\":\"updateReserveDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeDecreasePeriod_\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawalFeeDecreasePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeeDecreasePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalFeeMetas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"timeToWait\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feeRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastActionTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EthPool","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000093deb2af65c78eccf853d736f07b84c221391800","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b946bf3babfe9602f63cfe44d0d99ac357a01b54206c66ca9d2bd718ae2c74ec"}]}