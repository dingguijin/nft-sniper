{"status":"1","message":"OK","result":[{"SourceCode":"{\"erc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n    }\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n        if (b \\u003e a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n    }\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n    }\\r\\n\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n    }\\r\\n\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n    }\\r\\n\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n   \\r\\n    string   public name;\\r\\n    string   public symbol;\\r\\n    uint8    public decimals;\\r\\n    uint256  public totalSupply;\\r\\n \\r\\n    mapping (address =\\u003e uint256) private balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private allowances;\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    \\r\\n    constructor (string memory _name, string memory _symbol, uint8 _decimals) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return balances[owner];\\r\\n    }\\r\\n    \\r\\n    function allowance(address owner, address spender) public view returns(uint256) {\\r\\n        return allowances[owner][spender];\\r\\n    }\\r\\n    \\r\\n    function approve(address spender, uint256 amount) external returns(bool) {\\r\\n        allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool) {\\r\\n        _transfer(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address owner, address to, uint256 amount) external returns(bool) {\\r\\n        require(allowances[owner][msg.sender] \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        allowances[owner][msg.sender] = allowances[owner][msg.sender].sub(amount);\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal {\\r\\n        require(to != address(0), \\\"to address cannot be 0\\\");\\r\\n        balances[from] = balances[from].sub(amount);\\r\\n        balances[to] =  balances[to].add(amount);\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n    \\r\\n    function _mint(address to, uint256 amount) internal {\\r\\n        require(to != address(0), \\\"to address cannot be 0\\\");\\r\\n        balances[to] = balances[to].add(amount);\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 amount) internal {\\r\\n        balances[msg.sender] = balances[msg.sender].sub(amount);\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        emit Transfer(msg.sender, address(0), amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"wluca.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./erc20.sol\\\";\\r\\ncontract WLUCA is ERC20{\\r\\n    address public owner;\\r\\n    address public minter;\\r\\n\\r\\n    constructor() ERC20(\\\"wrap luca\\\", \\\"WLUCA\\\",  18){\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    function setOwner(address user) external{\\r\\n        require(msg.sender == owner, \\\"WLUCA: only owner\\\");\\r\\n        require(user != address(0), \\\"user address cannot be 0\\\");\\r\\n        owner = user;\\r\\n    }\\r\\n    \\r\\n    function setMinter(address user) external{\\r\\n        require(msg.sender == owner, \\\"WLUCA: only owner\\\");\\r\\n        require(user != address(0), \\\"user address cannot be 0\\\");\\r\\n        minter = user;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 value) external{\\r\\n        require(msg.sender == minter, \\\"WLUCA: only minter\\\");\\r\\n        _mint(to, value);\\r\\n    }\\r\\n    \\r\\n    function burn(uint256 amount) external {\\r\\n        _burn(amount);\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WLUCA","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://db0013d190a42734c109e4f82892fc4e277d098dcc8fefe874964eed498f2f8c"}]}