{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GenArtSharingToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./GenArtAccess.sol\\\";\\nimport \\\"./IGenArtInterface.sol\\\";\\n\\n/**\\n * @title GenArtSharingToken\\n * @notice It handles the distribution of $GENART tokens\\n * @notice forked from https://etherscan.io/address/0xbcd7254a1d759efa08ec7c3291b2e85c5dcc12ce#code\\n */\\ncontract GenArtSharingToken is ReentrancyGuard, GenArtAccess {\\n    using SafeERC20 for IERC20;\\n    struct UserInfo {\\n        uint256 shares; // shares of memberships staked\\n        uint256[] membershipIds;\\n        uint256 userRewardPerTokenPaid; // user reward per share paid\\n        uint256 rewards; // pending rewards\\n    }\\n\\n    // Precision factor for calculating rewards and exchange rate\\n    uint256 public constant PRECISION_FACTOR = 10**18;\\n\\n    // Reward rate (block)\\n    uint256 public currentRewardPerBlock;\\n\\n    // Last update block for rewards\\n    uint256 public lastUpdateBlock;\\n\\n    // Current end block for the current reward period\\n    uint256 public periodEndBlock;\\n\\n    // Reward per token stored\\n    uint256 public rewardPerTokenStored;\\n\\n    // Total existing shares\\n    uint256 public totalShares;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    IERC20 public immutable genartToken;\\n\\n    address public genartInterface;\\n\\n    address public genartMembership;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Harvest(address indexed user, uint256 harvestedAmount);\\n    event NewRewardPeriod(\\n        uint256 numberBlocks,\\n        uint256 rewardPerBlock,\\n        uint256 reward\\n    );\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _genartToken address of the token staked (GRNART)\\n     */\\n    constructor(\\n        address _genartMembership,\\n        address _genartToken,\\n        address _genartInterace\\n    ) {\\n        genartToken = IERC20(_genartToken);\\n        genartInterface = _genartInterace;\\n        genartMembership = _genartMembership;\\n    }\\n\\n    /**\\n     * @notice Deposit staked tokens (and collect reward tokens if requested)\\n     */\\n    function deposit(uint256[] memory membershipIds) external nonReentrant {\\n        // revert if no memberships passed\\n        require(\\n            membershipIds.length > 0,\\n            \\\"GenArtSharing: minimum 1 membership required\\\"\\n        );\\n        _deposit(membershipIds);\\n    }\\n\\n    function _deposit(uint256[] memory membershipIds) internal {\\n        // Update reward for user\\n        _updateReward(msg.sender);\\n\\n        uint256 shares;\\n        // send memberships to this contract\\n        for (uint256 i; i < membershipIds.length; i++) {\\n            IERC721(genartMembership).transferFrom(\\n                msg.sender,\\n                address(this),\\n                membershipIds[i]\\n            );\\n\\n            // 5 shares per gold membership. 1 share for standard memberships\\n            shares += IGenArtInterface(genartInterface).isGoldToken(\\n                membershipIds[i]\\n            )\\n                ? 5\\n                : 1;\\n            // save the membership token Ids\\n            userInfo[msg.sender].membershipIds.push(membershipIds[i]);\\n        }\\n\\n        // adjust internal shares\\n        userInfo[msg.sender].shares += shares;\\n        totalShares += shares;\\n\\n        emit Deposit(msg.sender, shares);\\n    }\\n\\n    function harvest() external nonReentrant {\\n        // // If pending rewards are null, revert\\n        uint256 amount = _harvest();\\n        require(amount > 0, \\\"GenArtSharing: zero rewards to harvest\\\");\\n    }\\n\\n    /**\\n     * @notice Harvest reward tokens that are pending\\n     */\\n    function _harvest() internal returns (uint256) {\\n        // Update reward for user\\n        _updateReward(msg.sender);\\n\\n        // Retrieve pending rewards\\n        uint256 pendingRewards = userInfo[msg.sender].rewards;\\n\\n        if (pendingRewards == 0) return 0;\\n        // Adjust user rewards and transfer\\n        userInfo[msg.sender].rewards = 0;\\n\\n        // Transfer reward token to sender\\n        genartToken.safeTransfer(msg.sender, pendingRewards);\\n\\n        emit Harvest(msg.sender, pendingRewards);\\n\\n        return pendingRewards;\\n    }\\n\\n    /**\\n     * @notice Withdraw all staked tokens (and collect reward tokens if requested)\\n     */\\n    function withdraw() external nonReentrant {\\n        require(userInfo[msg.sender].shares > 0, \\\"GenArtSharing: zero shares\\\");\\n        _withdraw();\\n    }\\n\\n    /**\\n     * @notice Update the reward per block (in rewardToken)\\n     * @dev Only callable by owner. Owner is meant to be another smart contract.\\n     */\\n    function updateRewards(\\n        uint256 rewardDurationInBlocks,\\n        address treasury,\\n        uint256 rewards\\n    ) external onlyAdmin {\\n        // Adjust the current reward per block\\n        if (block.number >= periodEndBlock) {\\n            currentRewardPerBlock = rewards / rewardDurationInBlocks;\\n        } else {\\n            currentRewardPerBlock =\\n                (rewards +\\n                    ((periodEndBlock - block.number) * currentRewardPerBlock)) /\\n                rewardDurationInBlocks;\\n        }\\n\\n        lastUpdateBlock = block.number;\\n        periodEndBlock = block.number + rewardDurationInBlocks;\\n\\n        genartToken.transferFrom(treasury, address(this), rewards);\\n\\n        emit NewRewardPeriod(\\n            rewardDurationInBlocks,\\n            currentRewardPerBlock,\\n            rewards\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards (WETH) for a user\\n     * @param user address of the user\\n     */\\n    function calculatePendingRewards(address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calculatePendingRewards(user);\\n    }\\n\\n    /**\\n     * @notice Return last block where trading rewards were distributed\\n     */\\n    function lastRewardBlock() external view returns (uint256) {\\n        return _lastRewardBlock();\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards for a user\\n     * @param user address of the user\\n     */\\n    function _calculatePendingRewards(address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ((userInfo[user].shares *\\n                (_rewardPerToken() - (userInfo[user].userRewardPerTokenPaid))) /\\n                PRECISION_FACTOR) + userInfo[user].rewards;\\n    }\\n\\n    /**\\n     * @notice Return last block where rewards must be distributed\\n     */\\n    function _lastRewardBlock() internal view returns (uint256) {\\n        return block.number < periodEndBlock ? block.number : periodEndBlock;\\n    }\\n\\n    /**\\n     * @notice Return reward per token\\n     */\\n    function _rewardPerToken() internal view returns (uint256) {\\n        if (totalShares == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            ((_lastRewardBlock() - lastUpdateBlock) *\\n                (currentRewardPerBlock * PRECISION_FACTOR)) /\\n            totalShares;\\n    }\\n\\n    /**\\n     * @notice Update reward for a user account\\n     * @param _user address of the user\\n     */\\n    function _updateReward(address _user) internal {\\n        if (block.number != lastUpdateBlock) {\\n            rewardPerTokenStored = _rewardPerToken();\\n            lastUpdateBlock = _lastRewardBlock();\\n        }\\n\\n        userInfo[_user].rewards = _calculatePendingRewards(_user);\\n        userInfo[_user].userRewardPerTokenPaid = rewardPerTokenStored;\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens and collect rewards\\n     */\\n    function _withdraw() internal {\\n        // harvest rewards\\n        _harvest();\\n\\n        uint256 shares = userInfo[msg.sender].shares;\\n        uint256[] memory memberships = userInfo[msg.sender].membershipIds;\\n\\n\\n        // adjust internal shares\\n        userInfo[msg.sender].shares = 0;\\n        totalShares -= shares;\\n\\n        for (uint256 i = memberships.length; i >= 1; i--) {\\n            userInfo[msg.sender].membershipIds.pop();\\n            IERC721(genartMembership).transferFrom(\\n                address(this),\\n                msg.sender,\\n                memberships[i - 1]\\n            );\\n        }\\n\\n        emit Withdraw(msg.sender, shares);\\n    }\\n\\n    function emergencyWithdraw(uint256 amount) public onlyOwner {\\n        address owner_ = owner();\\n        payable(owner_).transfer(address(this).balance);\\n        genartToken.transfer(owner_, amount);\\n    }\\n\\n    receive() external payable {\\n        payable(owner()).transfer(msg.value);\\n    }\\n\\n    function getMembershipsOf(address user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return userInfo[user].membershipIds;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/GenArtAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev This implements access control for owner and admins\\n */\\nabstract contract GenArtAccess is Ownable {\\n    mapping(address => bool) public admins;\\n    address public genartAdmin;\\n\\n    constructor() Ownable() {\\n        genartAdmin = _msgSender();\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyAdmin() {\\n        address sender = _msgSender();\\n        require(\\n            owner() == sender || admins[sender],\\n            \\\"GenArtAccess: caller is not the owner nor admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the GEN.ART admin.\\n     */\\n    modifier onlyGenArtAdmin() {\\n        address sender = _msgSender();\\n        require(\\n            genartAdmin == sender,\\n            \\\"GenArtAccess: caller is not genart admin\\\"\\n        );\\n        _;\\n    }\\n\\n    function setGenArtAdmin(address admin) public onlyGenArtAdmin {\\n        genartAdmin = admin;\\n    }\\n\\n    function setAdminAccess(address admin, bool access) public onlyGenArtAdmin {\\n        admins[admin] = access;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtInterface {\\n    function isGoldToken(uint256 _membershipId) external view returns (bool);\\n\\n    function getAvailableMintsForAccount(address collection, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMembershipsOf(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function ownerOfMembership(uint256 _membershipId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GenArtInterfaceV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./GenArtAccess.sol\\\";\\nimport \\\"./IGenArtMembership.sol\\\";\\nimport \\\"./IGenArtERC721V2.sol\\\";\\nimport \\\"./IGenArtInterface.sol\\\";\\nimport \\\"./GenArtDutchAuctionHouse.sol\\\";\\n\\n/**\\n * Interface to the GEN.ART Membership\\n */\\n\\ncontract GenArtInterfaceV4 is GenArtAccess, IGenArtInterface {\\n    IGenArtMembership private _genArtMembership;\\n    GenArtDutchAuctionHouse private _genartDA;\\n\\n    constructor(address genArtMembershipAddress_, address genartDA_) {\\n        _genArtMembership = IGenArtMembership(genArtMembershipAddress_);\\n        _genartDA = GenArtDutchAuctionHouse(payable(genartDA_));\\n    }\\n\\n    function isGoldToken(uint256 _membershipId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _genArtMembership.isGoldToken(_membershipId);\\n    }\\n\\n    function getMembershipsOf(address account)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _genArtMembership.getTokensByOwner(account);\\n    }\\n\\n    function ownerOfMembership(uint256 _membershipId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _genArtMembership.ownerOf(_membershipId);\\n    }\\n\\n    /**\\n     *@dev Get available mints for an account\\n     */\\n    function getAvailableMintsForAccount(address collection, address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256[] memory memberships = getMembershipsOf(account);\\n        uint256 availableMints;\\n        for (uint256 i; i < memberships.length; i++) {\\n            availableMints += _genartDA.getAvailableMintsByMembership(\\n                collection,\\n                memberships[i]\\n            );\\n        }\\n        return availableMints;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtMembership.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtMembership {\\n    function getTokensByOwner(address owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function isGoldToken(uint256 _tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtERC721V2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtERC721V2 {\\n    function getAvailableMintsForMembership(uint256 membershipId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/GenArtDutchAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"./GenArtAccess.sol\\\";\\nimport \\\"./IGenArtDutchAuctionHouse.sol\\\";\\nimport \\\"./MintStateDA.sol\\\";\\nimport \\\"./IGenArtInterface.sol\\\";\\nimport \\\"./IGenArtSharing.sol\\\";\\nimport \\\"./IGenArtDARefund.sol\\\";\\n\\ncontract GenArtDutchAuctionHouse is GenArtAccess, IGenArtDutchAuctionHouse {\\n    using MintStateDA for MintStateDA.State;\\n\\n    struct Mint {\\n        uint256 amount;\\n        uint256 eth;\\n    }\\n\\n    mapping(address => MintStateDA.State) public _mintstate;\\n\\n    // maps collections to auctions\\n    mapping(address => Auction) public _auctions;\\n\\n    // maps the auctions to memberships mints by phase\\n    mapping(address => mapping(address => mapping(uint256 => uint256)))\\n        public _mints;\\n\\n    // maps total funds earned by an auction\\n    mapping(address => uint256) public _auctionFunds;\\n\\n    // marks if artist funds for an auction have been withdrawn\\n    mapping(address => bool) public _artistsWithdrawHistory;\\n\\n    // maps total funds earned by an auction split by phase\\n    mapping(address => mapping(uint256 => uint256)) public _auctionFundsByPhase;\\n\\n    // uint256 public constant BLOCKS_PER_HOUR = 260;\\n    uint256 public constant BLOCKS_PER_HOUR = 1;\\n    uint256 public constant DECAY = 20;\\n    uint256 public constant DECAY_PER_BLOCKS = BLOCKS_PER_HOUR * 12;\\n    uint256 public constant BLOCKS_TO_PUBLIC_MINT = BLOCKS_PER_HOUR * 72;\\n    uint256 public constant AUCTION_BLOCK_DURATION = BLOCKS_PER_HOUR * 336;\\n    address public _genartInterface;\\n\\n    /**\\n     @dev Shares according to GIP# #0001\\n          Artist | GEN.ART | GEN.ART Token stakers\\n     */\\n    uint256[3] public _salesShares = [700, 175, 125];\\n\\n    // GEN.ART | GenArtSharing (GENART Staking contract) | GenArtDARefund\\n    address[3] public _payoutAddresses = [owner(), address(0), address(0)];\\n\\n    modifier onlyCollection(address collection) {\\n        require(\\n            _auctions[collection].startBlock > 0,\\n            \\\"GenArtDutchAuctionHouse: only collection contract allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyArtist(address collection) {\\n        require(\\n            _auctions[collection].artist == msg.sender,\\n            \\\"GenArtDutchAuctionHouse: only artist allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    function addAuction(\\n        address collection,\\n        address artist,\\n        uint256 supply,\\n        uint256 startPrice,\\n        uint256 startBlock\\n    ) public override onlyAdmin {\\n        _auctions[collection] = Auction({\\n            artist: artist,\\n            startBlock: startBlock,\\n            startPrice: startPrice,\\n            supply: supply,\\n            endBlock: startBlock + AUCTION_BLOCK_DURATION,\\n            distributed: false\\n        });\\n        _mintstate[collection].init();\\n    }\\n\\n    function getAuction(address collection)\\n        public\\n        view\\n        override\\n        returns (Auction memory)\\n    {\\n        Auction memory auction = _auctions[collection];\\n        require(\\n            auction.startBlock > 0,\\n            \\\"GenArtDutchAuctionHouse: auction not found\\\"\\n        );\\n        return auction;\\n    }\\n\\n    /**\\n    @dev Get status of an auction\\n    - 0 : ended\\n    - 1 : open for GEN.ART members\\n    - 2 : open for public\\n    */\\n    function getAuctionStatus(address collection)\\n        public\\n        view\\n        override\\n        returns (uint8)\\n    {\\n        Auction memory auction = getAuction(collection);\\n        return\\n            block.number > auction.endBlock\\n                ? 0\\n                : block.number > (auction.startBlock + BLOCKS_TO_PUBLIC_MINT)\\n                ? 2\\n                : 1;\\n    }\\n\\n    /**\\n     * @notice An auction has 4 phases which are determinted by amount of blocks passed since start of auction\\n     */\\n    function getAuctionPhase(address collection) public view returns (uint256) {\\n        uint256 lambda = ((block.number - getAuction(collection).startBlock) /\\n            DECAY_PER_BLOCKS) + 1;\\n        // Maximum 4 phases\\n        return lambda > 4 ? 4 : lambda;\\n    }\\n\\n    function getAuctionPriceByPhase(address collection, uint256 phase)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Auction memory auction = getAuction(collection);\\n        return\\n            (auction.startPrice * ((100 - DECAY)**(phase - 1))) /\\n            (100**(phase - 1));\\n    }\\n\\n    function getAuctionPrice(address collection)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Auction memory auction = getAuction(collection);\\n\\n        // revert if auction is closed\\n        require(\\n            block.number >= auction.startBlock &&\\n                block.number <= auction.endBlock,\\n            \\\"GenArtDutchAuctionHouse: auction closed\\\"\\n        );\\n\\n        uint8 status = getAuctionStatus(collection);\\n\\n        // return the price based on the auction status\\n        return\\n            status == 2\\n                ? calcAvgPrice(collection)\\n                : getAuctionPriceByPhase(\\n                    collection,\\n                    getAuctionPhase(collection)\\n                );\\n    }\\n\\n    function calcAvgPrice(address collection) public view returns (uint256) {\\n        uint256 supply = IERC721Enumerable(collection).totalSupply();\\n\\n        if (supply <= 1) {\\n            // in case no items were sold during the auction there is no avg price\\n            // but the price of the last phase\\n            return getAuctionPriceByPhase(collection, 4);\\n        }\\n        // caclulate the average price and exclude the reserved mint\\n        return _auctionFunds[collection] / (supply - 1);\\n    }\\n\\n    function getMintsByMembership(address collection, uint256 membershipId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _mintstate[collection].getMints(\\n                membershipId,\\n                IGenArtInterface(_genartInterface).isGoldToken(membershipId),\\n                getAuctionPhase(collection)\\n            );\\n    }\\n\\n    function getAvailableMintsByMembership(\\n        address collection,\\n        uint256 membershipId\\n    ) external view override returns (uint256) {\\n        return\\n            _mintstate[collection].getAvailableMints(\\n                membershipId,\\n                IGenArtInterface(_genartInterface).isGoldToken(membershipId),\\n                getAuctionPhase(collection),\\n                getAuction(collection).supply,\\n                IERC721Enumerable(collection).totalSupply()\\n            );\\n    }\\n\\n    /**\\n        @dev Calculate the total revenue shares of an auction \\n        - `index`: index of `_salesShares`\\n     */\\n    function calcShares(address collection, uint8 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 value = ((_auctionFunds[collection] -\\n            calcTotalDARefundAmount(collection)) * _salesShares[index]) / 1000;\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Calculate total ETH amount to be refunded\\n     */\\n    function calcTotalDARefundAmount(address collection)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 refundPhasesEth;\\n        uint256 refundPhasesSales;\\n        uint256 currentPhase = 1;\\n        // get avg price and exclude the reserved mint\\n        uint256 avgPriceDA = calcAvgPrice(collection);\\n\\n        while (currentPhase <= 4) {\\n            uint256 price = getAuctionPriceByPhase(collection, currentPhase);\\n            if (price > avgPriceDA) {\\n                refundPhasesEth += _auctionFundsByPhase[collection][\\n                    currentPhase\\n                ];\\n                refundPhasesSales +=\\n                    _auctionFundsByPhase[collection][currentPhase] /\\n                    price;\\n            }\\n            currentPhase++;\\n        }\\n\\n        uint256 totalDARefunds = refundPhasesEth -\\n            (refundPhasesSales * avgPriceDA);\\n\\n        return totalDARefunds;\\n    }\\n\\n    /**\\n     * @notice Whenever a token is minted in `GenArtERC721DA` this function is been called\\n     */\\n    function saveMint(\\n        uint256 membershipId,\\n        address minter,\\n        uint256 amount\\n    ) external onlyCollection(msg.sender) {\\n        uint256 phase = getAuctionPhase(msg.sender);\\n\\n        // calculate amount of ETH minter has spend\\n        uint256 value = amount * getAuctionPriceByPhase(msg.sender, phase);\\n\\n        // save amount per collection, minter and phase\\n        _mints[msg.sender][minter][phase] += amount;\\n\\n        // update mint state\\n        _mintstate[msg.sender].update(\\n            membershipId,\\n            IGenArtInterface(_genartInterface).isGoldToken(membershipId),\\n            phase,\\n            amount\\n        );\\n\\n        // adjust auction funds\\n        _auctionFundsByPhase[msg.sender][phase] += value;\\n    }\\n\\n    /**\\n     * @notice External function called by GenArtERC721DA contract to send funds to the auction house\\n     */\\n    function sendFunds() external payable onlyCollection(msg.sender) {\\n        _auctionFunds[msg.sender] += msg.value;\\n    }\\n\\n    /**\\n     * @notice Determine the phases that need to be refunded\\n     */\\n    function calcRefundPhase(address collection)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 refundPhase;\\n        uint256 currentPhase = 4;\\n        // get average price\\n        uint256 avgPriceDA = calcAvgPrice(collection);\\n\\n        // loop through all phases\\n        while (currentPhase >= 1) {\\n            if (getAuctionPriceByPhase(collection, currentPhase) > avgPriceDA) {\\n                refundPhase = currentPhase;\\n                // break the loop since remaining phases must be refunded too\\n                break;\\n            }\\n            currentPhase--;\\n        }\\n        return refundPhase;\\n    }\\n\\n    /**\\n     * @notice function for artists to withdraw their shares\\n     */\\n    function withdrawArtist(address collection) public onlyArtist(collection) {\\n        Auction memory auction = getAuction(collection);\\n\\n        // revert if auction not ended yet\\n        require(\\n            block.number > auction.endBlock + 1,\\n            \\\"GenArtDutchAuctionHouse: auction not ended yet\\\"\\n        );\\n\\n        // revert if funds for collection were already withdrawn\\n        require(\\n            !_artistsWithdrawHistory[collection],\\n            \\\"GenArtDutchAuctionHouse: already widthdrawn\\\"\\n        );\\n\\n        _artistsWithdrawHistory[collection] = true;\\n\\n        // send fund to artist\\n        payable(auction.artist).transfer(calcShares(collection, 0));\\n    }\\n\\n    function distributeRewards(address collection) external onlyAdmin {\\n        Auction memory auction = getAuction(collection);\\n\\n        // revert if auction not ended yet\\n        require(\\n            block.number > auction.endBlock,\\n            \\\"GenArtDutchAuctionHouse: auction not finished yet\\\"\\n        );\\n\\n        // revert if funds for collection were already distributed\\n        require(\\n            !auction.distributed,\\n            \\\"GenArtDutchAuctionHouse: already distributed\\\"\\n        );\\n\\n        // check if payout addresses were set\\n        require(\\n            _payoutAddresses[0] != address(0) &&\\n                _payoutAddresses[1] != address(0) &&\\n                _payoutAddresses[2] != address(0),\\n            \\\"GenArtDutchAuctionHouse: payout addresses not set\\\"\\n        );\\n\\n        // calculate rewards for token stakers\\n        uint256 stakingRewards = calcShares(collection, 2);\\n\\n        // calculate DA refund\\n        uint256 daRefunds = calcTotalDARefundAmount(collection);\\n\\n        _auctions[collection].distributed = true;\\n\\n        // send rewards to staking contact\\n        IGenArtSharing(_payoutAddresses[1]).updateRewards{\\n            value: stakingRewards\\n        }(BLOCKS_PER_HOUR * 24 * 30);\\n\\n        // send funds to DA refund contract\\n        IGenArtDARefund(_payoutAddresses[2]).receiveFunds{value: daRefunds}(\\n            collection\\n        );\\n\\n        // send fund to GA admin\\n        payable(_payoutAddresses[0]).transfer(calcShares(collection, 1));\\n    }\\n\\n    /**\\n     * @notice set payout addresses\\n     */\\n    function setSalesShares(uint256[3] memory newShares) public onlyGenArtAdmin {\\n        uint256 totalShares;\\n        for (uint8 i; i < newShares.length; i++) {\\n            totalShares += newShares[i];\\n        }\\n        require(\\n            totalShares == 1000,\\n            \\\"GenArtDutchAuctionHouse: total shares must be 1000\\\"\\n        );\\n        _salesShares = newShares;\\n    }\\n\\n    /**\\n    @dev set the payout address for ETH distribution\\n    - `index`: 0 (GEN.ART) | 1 (Staking contract) | 2 (Refund contract)\\n    - `payoutAddress`: new address\\n */\\n    function setPayoutAddress(uint8 index, address payoutAddress)\\n        public\\n        onlyGenArtAdmin\\n    {\\n        _payoutAddresses[index] = payoutAddress;\\n    }\\n\\n    /**\\n     *@dev Set Interface contract address\\n     */\\n    function setInterface(address interfaceAddress) public onlyAdmin {\\n        _genartInterface = interfaceAddress;\\n    }\\n\\n    receive() external payable {\\n        payable(owner()).transfer(msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtDutchAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nstruct Auction {\\n    uint256 startBlock;\\n    uint256 endBlock;\\n    uint256 startPrice;\\n    uint256 supply;\\n    address artist;\\n    bool distributed;\\n}\\n\\ninterface IGenArtDutchAuctionHouse {\\n    function addAuction(\\n        address collection,\\n        address artist,\\n        uint256 supply,\\n        uint256 startPrice,\\n        uint256 startBlock\\n    ) external;\\n\\n    function getAuction(address collection)\\n        external\\n        view\\n        returns (Auction memory);\\n\\n    function getAuctionStatus(address collection) external view returns (uint8);\\n\\n    function getAuctionPrice(address collection)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAvailableMintsByMembership(\\n        address collection,\\n        uint256 membershipId\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/MintStateDA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary MintStateDA {\\n    struct State {\\n        uint8 allowedMintGoldPhase1;\\n        uint8 allowedMintGoldPhasesOtherEach;\\n        uint8 allowedMintStandardPhase1;\\n        uint8 allowedMintStandardPhasesOtherAccu;\\n        // maps membershipIds to the amount of mints\\n        mapping(uint256 => mapping(uint256 => uint256)) _mints;\\n    }\\n\\n    function init(State storage state) internal {\\n        state.allowedMintStandardPhase1 = 1;\\n        state.allowedMintStandardPhasesOtherAccu = 1;\\n        state.allowedMintGoldPhase1 = 3;\\n        state.allowedMintGoldPhasesOtherEach = 1;\\n    }\\n\\n    function getMints(\\n        State storage state,\\n        uint256 membershipId,\\n        bool isGold,\\n        uint256 daPhase\\n    ) internal view returns (uint256) {\\n        uint256 key = isGold ? daPhase : daPhase > 1 ? 2 : daPhase;\\n        return state._mints[membershipId][key];\\n    }\\n\\n    function getAllowedMints(\\n        State storage state,\\n        bool isGold,\\n        uint256 daPhase\\n    ) internal view returns (uint256) {\\n        uint256 key = isGold ? daPhase : daPhase > 1 ? 2 : daPhase;\\n        return\\n            isGold\\n                ? (\\n                    key > 1\\n                        ? state.allowedMintGoldPhasesOtherEach\\n                        : state.allowedMintGoldPhase1\\n                )\\n                : (\\n                    key > 1\\n                        ? state.allowedMintStandardPhasesOtherAccu\\n                        : state.allowedMintStandardPhase1\\n                );\\n    }\\n\\n    function getAvailableMints(\\n        State storage state,\\n        uint256 membershipId,\\n        bool isGold,\\n        uint256 daPhase,\\n        uint256 collectionSupply,\\n        uint256 currentSupply\\n    ) internal view returns (uint256) {\\n        uint256 availableMints = collectionSupply - currentSupply;\\n\\n        return\\n            availableMints > 0\\n                ? getAllowedMints(state, isGold, daPhase) -\\n                    getMints(state, membershipId, isGold, daPhase)\\n                : 0;\\n    }\\n\\n    function update(\\n        State storage state,\\n        uint256 membershipId,\\n        bool isGold,\\n        uint256 daPhase,\\n        uint256 value\\n    ) internal {\\n        uint256 key = isGold ? daPhase : daPhase > 1 ? 2 : daPhase;\\n        unchecked {\\n            state._mints[membershipId][key] += value;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtSharing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtSharing {\\n    function updateRewards(uint256 rewardDurationInBlocks) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtDARefund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtDARefund {\\n    function receiveFunds(address collection) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/GenArtSharing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./GenArtAccess.sol\\\";\\nimport \\\"./IGenArtInterfaceV3.sol\\\";\\nimport \\\"./GenArtDutchAuctionHouse.sol\\\";\\n\\n/**\\n * @title GenArtSharing\\n * @notice It handles the distribution of ETH revenues\\n * @notice forked from https://etherscan.io/address/0xbcd7254a1d759efa08ec7c3291b2e85c5dcc12ce#code\\n */\\ncontract GenArtSharing is ReentrancyGuard, GenArtAccess {\\n    using SafeERC20 for IERC20;\\n    struct UserInfo {\\n        uint256 shares; // shares of token staked\\n        uint256[] membershipIds;\\n        uint256 userRewardPerTokenPaid; // user reward per token paid\\n        uint256 rewards; // pending rewards\\n    }\\n\\n    // Precision factor for calculating rewards and exchange rate\\n    uint256 public constant PRECISION_FACTOR = 10**18;\\n\\n    // Reward rate (block)\\n    uint256 public currentRewardPerBlock;\\n\\n    // Last update block for rewards\\n    uint256 public lastUpdateBlock;\\n\\n    // Current end block for the current reward period\\n    uint256 public periodEndBlock;\\n\\n    // Reward per token stored\\n    uint256 public rewardPerTokenStored;\\n\\n    // Total existing shares\\n    uint256 public totalShares;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    IERC20 public immutable genartToken;\\n\\n    address public genartDA;\\n\\n    address public genartInterface;\\n\\n    address public genartMembership;\\n\\n    mapping(uint256 => address) public membershipOwners;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Harvest(address indexed user, uint256 harvestedAmount);\\n    event NewRewardPeriod(\\n        uint256 numberBlocks,\\n        uint256 rewardPerBlock,\\n        uint256 reward\\n    );\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _genartToken address of the token staked (GRNART)\\n     */\\n    constructor(\\n        address _genartMembership,\\n        address _genartToken,\\n        address _genartInterace,\\n        address _genartDA\\n    ) {\\n        genartToken = IERC20(_genartToken);\\n        genartInterface = _genartInterace;\\n        genartMembership = _genartMembership;\\n        genartDA = _genartDA;\\n    }\\n\\n    /**\\n     * @dev modifier to only allow DA contract to call functions\\n     */\\n    modifier onlyDAContract() {\\n        require(\\n            genartDA == msg.sender,\\n            \\\"GenArtSharing: only DA contract allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * checks requirements for depositing a stake\\n     */\\n    function checkDeposit(uint256[] memory membershipIds, uint256 amount)\\n        internal\\n        view\\n    {\\n        // check required amount of tokens\\n        require(\\n            amount >=\\n                (\\n                    userInfo[msg.sender].shares == 0\\n                        ? 4000 * PRECISION_FACTOR\\n                        : PRECISION_FACTOR\\n                ),\\n            \\\"GenArtSharing: amount too small\\\"\\n        );\\n\\n        if (userInfo[msg.sender].shares == 0) {\\n            // if no tokens and memberships staked yet check if required memberships are passed\\n            if (membershipIds.length == 1) {\\n                // in case 1 memeberships was passed it has to be a gold one\\n                require(\\n                    IGenArtInterfaceV3(genartInterface).isGoldToken(\\n                        membershipIds[0]\\n                    ),\\n                    \\\"GenArtSharing: 5 Standard or 1 Gold membership required\\\"\\n                );\\n            } else {\\n                require(\\n                    membershipIds.length == 5,\\n                    \\\"GenArtSharing: 5 Standard or 1 Gold membership required\\\"\\n                );\\n            }\\n        } else {\\n            // revent if there is an active stake and memberships were passed\\n            require(\\n                membershipIds.length == 0,\\n                \\\"GenArtSharing: no memberships required\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit staked tokens (and collect reward tokens if requested)\\n     * @param amount amount to deposit (in GENART)\\n     */\\n    function deposit(uint256[] memory membershipIds, uint256 amount)\\n        external\\n        nonReentrant\\n    {\\n        checkDeposit(membershipIds, amount);\\n        _deposit(membershipIds, amount);\\n    }\\n\\n    function _deposit(uint256[] memory membershipIds, uint256 amount) internal {\\n        // Update reward for user\\n        _updateReward(msg.sender);\\n\\n        // send memberships to this contract\\n        for (uint256 i; i < membershipIds.length; i++) {\\n            IERC721(genartMembership).transferFrom(\\n                msg.sender,\\n                address(this),\\n                membershipIds[i]\\n            );\\n            // save the membership token Ids\\n            userInfo[msg.sender].membershipIds.push(membershipIds[i]);\\n            membershipOwners[membershipIds[i]] = msg.sender;\\n        }\\n\\n        // Transfer GENART tokens to this address\\n        genartToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Adjust internal shares\\n        userInfo[msg.sender].shares += amount;\\n        totalShares += amount;\\n\\n        emit Deposit(msg.sender, amount);\\n    }\\n\\n    function harvest() external nonReentrant {\\n        // // If pending rewards are null, revert\\n        uint256 amount = _harvest();\\n        require(amount > 0, \\\"GenArtSharing: zero rewards to harvest\\\");\\n    }\\n\\n    /**\\n     * @notice Harvest reward tokens that are pending\\n     */\\n    function _harvest() internal returns (uint256) {\\n        // Update reward for user\\n        _updateReward(msg.sender);\\n\\n        // Retrieve pending rewards\\n        uint256 pendingRewards = userInfo[msg.sender].rewards;\\n\\n        if (pendingRewards == 0) return 0;\\n        // Adjust user rewards and transfer\\n        userInfo[msg.sender].rewards = 0;\\n\\n        // Transfer reward token to sender\\n        payable(msg.sender).transfer(pendingRewards);\\n\\n        emit Harvest(msg.sender, pendingRewards);\\n\\n        return pendingRewards;\\n    }\\n\\n    /**\\n     * @notice Withdraw all staked tokens (and collect reward tokens if requested)\\n     */\\n    function withdraw() external nonReentrant {\\n        require(userInfo[msg.sender].shares > 0, \\\"GenArtSharing: zero shares\\\");\\n        _withdraw();\\n    }\\n\\n    /**\\n     * @notice Update the reward per block (in rewardToken)\\n     * @dev Only callable by owner. Owner is meant to be another smart contract.\\n     */\\n    function updateRewards(uint256 rewardDurationInBlocks)\\n        external\\n        payable\\n        onlyDAContract\\n    {\\n        // Adjust the current reward per block\\n        if (block.number >= periodEndBlock) {\\n            currentRewardPerBlock = msg.value / rewardDurationInBlocks;\\n        } else {\\n            currentRewardPerBlock =\\n                (msg.value +\\n                    ((periodEndBlock - block.number) * currentRewardPerBlock)) /\\n                rewardDurationInBlocks;\\n        }\\n\\n        lastUpdateBlock = block.number;\\n        periodEndBlock = block.number + rewardDurationInBlocks;\\n\\n        emit NewRewardPeriod(\\n            rewardDurationInBlocks,\\n            currentRewardPerBlock,\\n            msg.value\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards (WETH) for a user\\n     * @param user address of the user\\n     */\\n    function calculatePendingRewards(address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calculatePendingRewards(user);\\n    }\\n\\n    /**\\n     * @notice Return last block where trading rewards were distributed\\n     */\\n    function lastRewardBlock() external view returns (uint256) {\\n        return _lastRewardBlock();\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards for a user\\n     * @param user address of the user\\n     */\\n    function _calculatePendingRewards(address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ((userInfo[user].shares *\\n                (_rewardPerToken() - (userInfo[user].userRewardPerTokenPaid))) /\\n                PRECISION_FACTOR) + userInfo[user].rewards;\\n    }\\n\\n    /**\\n     * @notice Return last block where rewards must be distributed\\n     */\\n    function _lastRewardBlock() internal view returns (uint256) {\\n        return block.number < periodEndBlock ? block.number : periodEndBlock;\\n    }\\n\\n    /**\\n     * @notice Return reward per share\\n     */\\n    function _rewardPerToken() internal view returns (uint256) {\\n        if (totalShares == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            ((_lastRewardBlock() - lastUpdateBlock) *\\n                (currentRewardPerBlock * PRECISION_FACTOR)) /\\n            totalShares;\\n    }\\n\\n    /**\\n     * @notice Update reward for a user account\\n     * @param _user address of the user\\n     */\\n    function _updateReward(address _user) internal {\\n        if (block.number != lastUpdateBlock) {\\n            rewardPerTokenStored = _rewardPerToken();\\n            lastUpdateBlock = _lastRewardBlock();\\n        }\\n\\n        userInfo[_user].rewards = _calculatePendingRewards(_user);\\n        userInfo[_user].userRewardPerTokenPaid = rewardPerTokenStored;\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens and memberships and collect rewards\\n     */\\n    function _withdraw() internal {\\n        // harvest rewards\\n        _harvest();\\n\\n        uint256 shares = userInfo[msg.sender].shares;\\n        uint256[] memory memberships = userInfo[msg.sender].membershipIds;\\n\\n        // adjust internal shares\\n        userInfo[msg.sender].shares = 0;\\n        totalShares -= shares;\\n\\n        // Transfer GRNART tokens to sender\\n        genartToken.safeTransfer(msg.sender, shares);\\n        for (uint256 i = memberships.length; i >= 1; i--) {\\n            userInfo[msg.sender].membershipIds.pop();\\n            membershipOwners[memberships[i - 1]] = address(0);\\n            IERC721(genartMembership).transferFrom(\\n                address(this),\\n                msg.sender,\\n                memberships[i - 1]\\n            );\\n        }\\n\\n        emit Withdraw(msg.sender, shares);\\n    }\\n\\n    function emergencyWithdraw(uint256 amount) public onlyOwner {\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    receive() external payable {\\n        payable(owner()).transfer(msg.value);\\n    }\\n\\n    function getMembershipsOf(address user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return userInfo[user].membershipIds;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtInterfaceV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtInterfaceV3 {\\n    function isGoldToken(uint256 _membershipId) external view returns (bool);\\n\\n    function getAvailableMintsForAccount(address collection, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMembershipsOf(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function ownerOfMembership(uint256 _membershipId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/GenArtPaymentProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract GenArtPaymentProxy {\\n    struct Payment {\\n        address[] payees;\\n        uint256[] shares;\\n    }\\n\\n    event IncomingPayment(address payee, uint256 amount);\\n    mapping(address => mapping(uint256 => uint256)) public receivedTokens;\\n    Payment private _payment;\\n\\n    constructor(address[] memory payeeAddresses, uint256[] memory payeeShares) {\\n        require(\\n            payeeAddresses.length == payeeShares.length,\\n            \\\"GenArtPaymentProxy: Invalid payees\\\"\\n        );\\n        _payment = Payment(payeeAddresses, payeeShares);\\n    }\\n\\n    function withdrawTokens(address tokenAddress, uint256 payeeIndex)\\n        public\\n        payable\\n    {\\n        address payee = _payment.payees[payeeIndex];\\n        require(\\n            payee == msg.sender,\\n            \\\"GenArtPaymentProxy: Sender must be payee\\\"\\n        );\\n        uint256 totalShares = getTotalShares();\\n        uint256 totalTokenBalance = getTotalTokenBalance(tokenAddress);\\n        uint256 tokenAmount = (totalTokenBalance *\\n            _payment.shares[payeeIndex]) /\\n            totalShares -\\n            receivedTokens[tokenAddress][payeeIndex];\\n        require(tokenAmount > 0, \\\"GenArtPaymentProxy: zero balance\\\");\\n        receivedTokens[tokenAddress][payeeIndex] += tokenAmount;\\n        IERC20(tokenAddress).transfer(payee, tokenAmount);\\n        emit IncomingPayment(payee, tokenAmount);\\n    }\\n\\n    /**\\n     *@dev Get total shares\\n     */\\n    function getTotalShares() public view returns (uint256) {\\n        uint256 totalShares;\\n        for (uint8 i; i < _payment.shares.length; i++) {\\n            unchecked {\\n                totalShares += _payment.shares[i];\\n            }\\n        }\\n        return totalShares;\\n    }\\n\\n    function getTotalTokenBalance(address tokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalTokenBalance = IERC20(tokenAddress).balanceOf(\\n            address(this)\\n        );\\n        for (uint8 i; i < _payment.payees.length; i++) {\\n            unchecked {\\n                totalTokenBalance += receivedTokens[tokenAddress][i];\\n            }\\n        }\\n        return totalTokenBalance;\\n    }\\n\\n    function updatePayee(uint256 payeeIndex, address newPayee) public {\\n        address oldPayee = _payment.payees[payeeIndex];\\n        require(\\n            oldPayee == msg.sender,\\n            \\\"GenArtPaymentProxy: sender is not current payee\\\"\\n        );\\n        _payment.payees[payeeIndex] = newPayee;\\n    }\\n\\n    receive() external payable {\\n        uint256 totalShares = getTotalShares();\\n        for (uint8 i; i < _payment.payees.length; i++) {\\n            address payee = _payment.payees[i];\\n            uint256 ethAmount = (msg.value * _payment.shares[i]) / totalShares;\\n            payable(payee).transfer(ethAmount);\\n            emit IncomingPayment(payee, ethAmount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"contracts/GenArtERC721DA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./GenArtAccess.sol\\\";\\nimport \\\"./IGenArtMembership.sol\\\";\\nimport \\\"./IGenArtPaymentSplitterV2.sol\\\";\\nimport \\\"./IGenArtInterface.sol\\\";\\nimport \\\"./GenArtDutchAuctionHouse.sol\\\";\\n\\n/**\\n * @dev GEN.ART ERC721 V2\\n * Implements the extentions {IERC721Enumerable} and {IERC2981}.\\n * Inherits access control from {GenArtAccess}.\\n * Sends all ETH to a {PaymentSplitter} contract.\\n * Restricts minting to GEN.ART Membership holders.\\n * IMPORTANT: This implementation requires the royalties to be send to the contracts address\\n * in order to split the funds between payees automatically.\\n */\\ncontract GenArtERC721DA is ERC721Enumerable, GenArtAccess, IERC2981 {\\n    using Strings for uint256;\\n    using MintStateDA for MintStateDA.State;\\n\\n    uint256 public _mintSupply;\\n    address public _royaltyReceiver = address(this);\\n    uint256 public _royaltyPoints;\\n    uint256 public _collectionId;\\n    bool private _reservedMinted;\\n    address public _genartInterface;\\n    address public _wethAddress;\\n    GenArtDutchAuctionHouse public _genartDA;\\n    string private _uri;\\n    string private _script;\\n    bool public _paused = true;\\n\\n    /**\\n     *@dev Emitted on mint\\n     */\\n    event Mint(\\n        uint256 tokenId,\\n        uint256 collectionId,\\n        uint256 membershipId,\\n        address to\\n    );\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory uri_,\\n        string memory script_,\\n        uint256 collectionId_,\\n        uint256 mintSupply_,\\n        address genartInterface_,\\n        address wethAddress_,\\n        address genartDA_\\n    ) ERC721(name_, symbol_) GenArtAccess() {\\n        _uri = uri_;\\n        _script = script_;\\n        _collectionId = collectionId_;\\n        _mintSupply = mintSupply_;\\n        _genartInterface = genartInterface_;\\n        _wethAddress = wethAddress_;\\n        _genartDA = GenArtDutchAuctionHouse(payable(genartDA_));\\n        _mintOne(genartAdmin, 0);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Enumerable, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     *@dev Get amount of mints for a membershipId\\n     */\\n    function getMembershipMints(uint256 membershipId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _genartDA.getMintsByMembership(address(this), membershipId);\\n    }\\n\\n    /**\\n     *@dev Get available mints for a membershipId\\n     */\\n    function getAvailableMintsForMembership(uint256 membershipId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _genartDA.getAvailableMintsByMembership(\\n                address(this),\\n                membershipId\\n            );\\n    }\\n\\n    /**\\n     *@dev Check if minter has available mint slots and has sent the required amount of ETH\\n     * Revert in case minting is paused or checks fail.\\n     */\\n    function checkMint(\\n        uint256 amount,\\n        uint256 availableMints,\\n        uint256 auctionStatus\\n    ) internal view {\\n        require(!_paused, \\\"GenArtERC721DA: minting is paused\\\");\\n        require(\\n            availableMints > 0 && totalSupply() + amount <= _mintSupply,\\n            \\\"GenArtERC721DA: no mints available\\\"\\n        );\\n        require(\\n            _genartDA.getAuctionStatus(address(this)) == auctionStatus,\\n            \\\"GenArtERC721DA: not allowed to mint\\\"\\n        );\\n        require(\\n            availableMints >= amount,\\n            \\\"GenArtERC721DA: amount exceeds availableMints\\\"\\n        );\\n        uint256 ethAmount;\\n        unchecked {\\n            ethAmount = _genartDA.getAuctionPrice(address(this)) * amount;\\n        }\\n        require(ethAmount == msg.value, \\\"GenArtERC721DA: wrong amount sent\\\");\\n    }\\n\\n    /**\\n     *@dev Public function to mint the desired amount of tokens\\n     * Requirments:\\n     * - sender must be GEN.ART Membership owner\\n     */\\n    function mint(address to, uint256 amount) public payable {\\n        // get all available mints for sender\\n        uint256 availableMints = IGenArtInterface(_genartInterface)\\n            .getAvailableMintsForAccount(address(this), _msgSender());\\n        checkMint(amount, availableMints, 1);\\n        // get all memberships for sender\\n        uint256[] memory memberships = IGenArtInterface(_genartInterface)\\n            .getMembershipsOf(_msgSender());\\n        uint256 minted;\\n        uint256 i;\\n        // loop until the desired amount of tokens was minted\\n        while (minted < amount && i < memberships.length) {\\n            // get available mints for membership\\n            uint256 mints = getAvailableMintsForMembership(memberships[i]);\\n            // mint tokens with membership and stop if desired amount reached\\n            uint256 j;\\n            for (j = 0; j < mints && minted < amount; j++) {\\n                mintForMembership(to, memberships[i]);\\n                // update mint state once membership minted a token\\n                minted++;\\n            }\\n            _genartDA.saveMint(memberships[i], msg.sender, j);\\n            i++;\\n        }\\n        _genartDA.sendFunds{value: msg.value}();\\n    }\\n\\n    /**\\n     *@dev Public function to mint one token for a GEN.ART Membership\\n     * Requirments:\\n     * - sender must own the membership\\n     */\\n    function mintOne(address to, uint256 membershipId) public payable {\\n        // check if sender is owner of membership\\n        require(\\n            IGenArtInterface(_genartInterface).ownerOfMembership(\\n                membershipId\\n            ) == _msgSender(),\\n            \\\"GenArtERC721DA: sender is not membership owner\\\"\\n        );\\n        // get available mints for membership\\n        uint256 availableMints = getAvailableMintsForMembership(membershipId);\\n\\n        checkMint(1, availableMints, 1);\\n        // mint token\\n        mintForMembership(to, membershipId);\\n        // update mint state once membership minted a token\\n        _genartDA.saveMint(membershipId, msg.sender, 1);\\n        _genartDA.sendFunds{value: msg.value}();\\n    }\\n\\n    function mintPublic(address to, uint8 amount) public payable {\\n        // get available mints for membership\\n        uint256 availableMints = _genartDA.getAuction(address(this)).supply -\\n            totalSupply();\\n        checkMint(amount, availableMints, 2);\\n        // mint token\\n        for (uint8 i; i < amount; i++) {\\n            _mintOne(to, 0);\\n        }\\n        // update mint state once membership minted a token\\n        _genartDA.sendFunds{value: msg.value}();\\n    }\\n\\n    /**\\n     *@dev Mint token for membership\\n     */\\n    function mintForMembership(address to, uint256 membershipId) internal {\\n        _mintOne(to, membershipId);\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     * Emits a {Mint} event.\\n     */\\n    function _mintOne(address to, uint256 membershipId) internal virtual {\\n        uint256 tokenId = _collectionId * 100_000 + totalSupply() + 1;\\n        _safeMint(to, tokenId);\\n        emit Mint(tokenId, _collectionId, membershipId, to);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        address owner = ERC721.ownerOf(tokenId);\\n        // check if sender is owner of token\\n        require(\\n            _msgSender() == owner,\\n            \\\"GenArtERC721DA: burn caller is not owner\\\"\\n        );\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev Get royalty info see {IERC2981}\\n     */\\n    function royaltyInfo(uint256, uint256 salePrice_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        return (_royaltyReceiver, (_royaltyPoints * salePrice_) / 10_000);\\n    }\\n\\n    /**\\n     *@dev Get all tokens owned by an address\\n     */\\n    function getTokensByOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](tokenCount);\\n        for (uint256 i; i < tokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    /**\\n     *@dev Pause and unpause minting\\n     */\\n    function setPaused(bool paused) public onlyAdmin {\\n        _paused = paused;\\n    }\\n\\n    /**\\n     *@dev Set receiver of royalties\\n     */\\n    function setRoyaltyInfo(address receiver, uint256 royaltyPoints)\\n        public\\n        onlyGenArtAdmin\\n    {\\n        _royaltyReceiver = receiver;\\n        _royaltyPoints = royaltyPoints;\\n    }\\n\\n    /**\\n     * @dev Set base uri\\n     */\\n    function setBaseURI(string memory uri) public onlyGenArtAdmin {\\n        _uri = uri;\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtPaymentSplitterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtPaymentSplitterV2 {\\n    function addCollectionPayment(\\n        address collection,\\n        address[] memory payees,\\n        uint256[] memory shares\\n    ) external;\\n\\n    function addCollectionPaymentRoyalty(\\n        address collection,\\n        address[] memory payees,\\n        uint256[] memory shares\\n    ) external;\\n\\n    function splitPayment(address collection) external payable;\\n\\n    function splitPaymentRoyalty(address collection) external payable;\\n\\n    function splitPaymentRoyaltyWETH(address collection, uint256 wethAmount)\\n        external\\n        payable;\\n\\n    function getTotalSharesOfCollection(address collection, uint8 _payment)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function release(address account) external;\\n\\n    function updatePayee(\\n        address collection,\\n        uint8 paymentType,\\n        uint256 payeeIndex,\\n        address newPayee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GenArtDARefund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./GenArtAccess.sol\\\";\\nimport \\\"./GenArtDutchAuctionHouse.sol\\\";\\n\\ncontract GenArtDARefund is GenArtAccess {\\n    GenArtDutchAuctionHouse public _genartDA;\\n    mapping(address => uint256) public _refundsEth;\\n    address[] public _fundedCollections;\\n    // collection => user => bool\\n    mapping(address => mapping(address => bool)) public _claimedCollections;\\n\\n    constructor(address genartDA_) {\\n        _genartDA = GenArtDutchAuctionHouse(payable(genartDA_));\\n    }\\n\\n    /**\\n     * @dev modifier to only allow DA contract to call functions\\n     */\\n    modifier onlyDAContract() {\\n        require(\\n            address(_genartDA) == msg.sender,\\n            \\\"GenArtDARefund: only DA contract allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    function claim(address collection) public {\\n        uint256 amount = _getClaimableAmount(collection, msg.sender);\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function claimCollections(address[] memory collections) public {\\n        uint256 amount;\\n        for (uint256 i; i < collections.length; i++) {\\n            amount += _getClaimableAmount(collections[i], msg.sender);\\n        }\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function claimAll() public {\\n        _claim(msg.sender);\\n    }\\n\\n    function _claim(address user) internal {\\n        uint256 amount;\\n\\n        // claim all funden collections for user\\n        for (uint256 i; i < _fundedCollections.length; i++) {\\n            amount += _getClaimableAmount(_fundedCollections[i], user);\\n        }\\n        payable(user).transfer(amount);\\n    }\\n\\n    function _getClaimableAmount(address collection, address user)\\n        internal\\n        returns (uint256)\\n    {\\n        if (_claimedCollections[collection][user]) return 0;\\n        uint256 refunds = calcDARefunds(collection, user);\\n        _claimedCollections[collection][user] = true;\\n        return refunds;\\n    }\\n\\n    function calcDARefunds(address collection, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalRefund;\\n        uint256 refundPhase = _genartDA.calcRefundPhase(collection);\\n        uint256 avgPrice = _genartDA.calcAvgPrice(collection);\\n\\n        for (uint256 i = 1; i <= refundPhase; i++) {\\n            uint256 mints = _genartDA._mints(collection, user, refundPhase);\\n            uint256 price = _genartDA.getAuctionPriceByPhase(\\n                collection,\\n                refundPhase\\n            );\\n            totalRefund += (price - avgPrice) * mints;\\n        }\\n\\n        return totalRefund;\\n    }\\n\\n    function receiveFunds(address collection) external payable onlyDAContract {\\n        _refundsEth[collection] += msg.value;\\n        _fundedCollections.push(collection);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payeeAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payeeShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncomingPayment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payeeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newPayee\",\"type\":\"address\"}],\"name\":\"updatePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payeeIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GenArtPaymentProxy","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000aa31c09dcee863cffebf4f46e1d85fdc44718b90000000000000000000000007c228e74d601ee9414277a674abf9b58950e87cc000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://095dcf6067590b196071bfe115e3265be9740c5f52892810d7b7ed3f2de7418d"}]}