{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: IBaseFee.sol\r\n\r\ninterface IBaseFee {\r\n    function isCurrentBaseFeeAcceptable() external view returns (bool);\r\n}\r\n\r\n// File: IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: IMaker.sol\r\n\r\ninterface GemLike {\r\n    function approve(address, uint256) external;\r\n\r\n    function transfer(address, uint256) external;\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n\r\n    function dai() external returns (GemLike);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint256);\r\n\r\n    function ilks(bytes32)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function dai(address) external view returns (uint256);\r\n\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function hope(address) external;\r\n\r\n    function move(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint256);\r\n\r\n    function gem() external returns (GemLike);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface OasisLike {\r\n    function sellAllAmount(\r\n        address pay_gem,\r\n        uint256 pay_amt,\r\n        address buy_gem,\r\n        uint256 min_fill_amount\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(\r\n        address,\r\n        uint256,\r\n        address\r\n    ) external view returns (uint256);\r\n\r\n    function ilks(uint256) external view returns (bytes32);\r\n\r\n    function owns(uint256) external view returns (address);\r\n\r\n    function urns(uint256) external view returns (address);\r\n\r\n    function vat() external view returns (address);\r\n\r\n    function open(bytes32, address) external returns (uint256);\r\n\r\n    function give(uint256, address) external;\r\n\r\n    function cdpAllow(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function urnAllow(address, uint256) external;\r\n\r\n    function frob(\r\n        uint256,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function flux(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function move(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function exit(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function quit(uint256, address) external;\r\n\r\n    function enter(address, uint256) external;\r\n\r\n    function shift(uint256, uint256) external;\r\n}\r\n\r\ninterface SpotLike {\r\n    function live() external view returns (uint256);\r\n\r\n    function par() external view returns (uint256);\r\n\r\n    function vat() external view returns (address);\r\n\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n}\r\n\r\ninterface DssAutoLine {\r\n    function exec(bytes32 _ilk) external returns (uint256);\r\n}\r\n\r\ninterface OracleSecurityModule {\r\n    function peek() external view returns (uint256, bool);\r\n\r\n    function peep() external view returns (uint256, bool);\r\n\r\n    function users(address) external view returns (bool);\r\n\r\n    function bud(address) external view returns (bool);\r\n\r\n    function oracle() external view returns (address);\r\n}\r\n\r\n// File: IOSMedianizer.sol\r\n\r\ninterface IOSMedianizer {\r\n    function foresight() external view returns (uint256 price, bool osm);\r\n\r\n    function read() external view returns (uint256 price, bool osm);\r\n\r\n  \tfunction setAuthorized(address _authorized) external;\r\n}\r\n\r\n// File: Math.sol\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: GUniPool.sol\r\n\r\ninterface GUniPool is IERC20 {\r\n\r\n    /// @notice mint fungible G-UNI tokens, fractional shares of a Uniswap V3 position\r\n    /// @dev to compute the amouint of tokens necessary to mint `mintAmount` see getMintAmounts\r\n    /// @param mintAmount The number of G-UNI tokens to mint\r\n    /// @param receiver The account to receive the minted tokens\r\n    /// @return amount0 amount of token0 transferred from msg.sender to mint `mintAmount`\r\n    /// @return amount1 amount of token1 transferred from msg.sender to mint `mintAmount`\r\n    /// @return liquidityMinted amount of liquidity added to the underlying Uniswap V3 position\r\n    // solhint-disable-next-line function-max-lines, code-complexity\r\n    function mint(uint256 mintAmount, address receiver)\r\n        external\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            uint128 liquidityMinted\r\n        );\r\n\r\n    /// @notice burn G-UNI tokens (fractional shares of a Uniswap V3 position) and receive tokens\r\n    /// @param burnAmount The number of G-UNI tokens to burn\r\n    /// @param receiver The account to receive the underlying amounts of token0 and token1\r\n    /// @return amount0 amount of token0 transferred to receiver for burning `burnAmount`\r\n    /// @return amount1 amount of token1 transferred to receiver for burning `burnAmount`\r\n    /// @return liquidityBurned amount of liquidity removed from the underlying Uniswap V3 position\r\n    // solhint-disable-next-line function-max-lines\r\n    function burn(uint256 burnAmount, address receiver)\r\n        external\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            uint128 liquidityBurned\r\n        );\r\n\r\n    // View functions\r\n\r\n    /// @notice compute maximum G-UNI tokens that can be minted from `amount0Max` and `amount1Max`\r\n    /// @param amount0Max The maximum amount of token0 to forward on mint\r\n    /// @param amount0Max The maximum amount of token1 to forward on mint\r\n    /// @return amount0 actual amount of token0 to forward when minting `mintAmount`\r\n    /// @return amount1 actual amount of token1 to forward when minting `mintAmount`\r\n    /// @return mintAmount maximum number of G-UNI tokens to mint\r\n    function getMintAmounts(uint256 amount0Max, uint256 amount1Max)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            uint256 mintAmount\r\n        );\r\n\r\n    /// @notice compute total underlying holdings of the G-UNI token supply\r\n    /// includes current liquidity invested in uniswap position, current fees earned\r\n    /// and any uninvested leftover (but does not include manager or gelato fees accrued)\r\n    /// @return amount0Current current total underlying balance of token0\r\n    /// @return amount1Current current total underlying balance of token1\r\n    function getUnderlyingBalances()\r\n        external\r\n        view\r\n        returns (uint256 amount0Current, uint256 amount1Current);\r\n\r\n}\r\n\r\n// File: SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: BaseStrategy.sol\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n/**\r\n * This interface is here for the keeper bot to use.\r\n */\r\ninterface StrategyAPI {\r\n    function name() external view returns (string memory);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function want() external view returns (address);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function isActive() external view returns (bool);\r\n\r\n    function delegatedAssets() external view returns (uint256);\r\n\r\n    function estimatedTotalAssets() external view returns (uint256);\r\n\r\n    function tendTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function tend() external;\r\n\r\n    function harvestTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function harvest() external;\r\n\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n}\r\n\r\ninterface HealthCheck {\r\n    function check(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 debtPayment,\r\n        uint256 debtOutstanding,\r\n        uint256 totalDebt\r\n    ) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    string public metadataURI;\r\n\r\n    // health checks\r\n    bool public doHealthCheck;\r\n    address public healthCheck;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.4.3\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external view virtual returns (string memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\r\n     *  towards Yearn's TVL calculations.\r\n     * @dev\r\n     *  You can override this field to set it to a non-zero value if some of the assets of this\r\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\r\n     *  Note that this value must be strictly less than or equal to the amount provided by\r\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\r\n     *  Also note that this value is used to determine the total assets under management by this\r\n     *  strategy, for the purposes of computing the management fee in `Vault`\r\n     * @return\r\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\r\n     *  Locked (TVL) calculation across it's ecosystem.\r\n     */\r\n    function delegatedAssets() external view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedMinReportDelay(uint256 delay);\r\n\r\n    event UpdatedMaxReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    event EmergencyExitEnabled();\r\n\r\n    event UpdatedMetadataURI(string metadataURI);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay;\r\n\r\n    // The maximum number of seconds between harvest calls. See\r\n    // `setMaxReportDelay()` for more details.\r\n    uint256 public maxReportDelay;\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyEmergencyAuthorized() {\r\n        require(\r\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(\r\n            msg.sender == keeper ||\r\n                msg.sender == strategist ||\r\n                msg.sender == governance() ||\r\n                msg.sender == vault.guardian() ||\r\n                msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyVaultManagers() {\r\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     * @param _strategist The address to assign as `strategist`.\r\n     * The strategist is able to change the reward address\r\n     * @param _rewards  The address to use for pulling rewards.\r\n     * @param _keeper The adddress of the _keeper. _keeper\r\n     * can harvest and tend a strategy.\r\n     */\r\n    function _initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) internal {\r\n        require(address(want) == address(0), \"Strategy already initialized\");\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = _strategist;\r\n        rewards = _rewards;\r\n        keeper = _keeper;\r\n\r\n        // initialize variables\r\n        minReportDelay = 0;\r\n        maxReportDelay = 86400;\r\n        profitFactor = 100;\r\n        debtThreshold = 0;\r\n\r\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\r\n    }\r\n\r\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\r\n        healthCheck = _healthCheck;\r\n    }\r\n\r\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        require(_strategist != address(0));\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        require(_keeper != address(0));\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. EOA or smart contract which has the permission\r\n     *  to pull rewards from the vault.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for pulling rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        require(_rewards != address(0));\r\n        vault.approve(rewards, 0);\r\n        rewards = _rewards;\r\n        vault.approve(rewards, uint256(-1));\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of seconds to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedMinReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the maximum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The maximum number of seconds to wait between harvests.\r\n     */\r\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\r\n        maxReportDelay = _delay;\r\n        emit UpdatedMaxReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\r\n     * of the file describing the strategy.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _metadataURI The URI that describe the strategy.\r\n     */\r\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\r\n        metadataURI = _metadataURI;\r\n        emit UpdatedMetadataURI(_metadataURI);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\r\n     *  to `want` (using the native decimal characteristics of `want`).\r\n     * @dev\r\n     *  Care must be taken when working with decimals to assure that the conversion\r\n     *  is compatible. As an example:\r\n     *\r\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\r\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\r\n     *\r\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\r\n     * @return The amount in `want` of `_amtInEth` converted to `want`\r\n     **/\r\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public view virtual returns (uint256);\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an indication of whether this strategy is currently \"active\"\r\n     *  in that it is managing an active position, or will manage a position in\r\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\r\n     *  events can be tracked externally by indexing agents.\r\n     * @return True if the strategy is actively managing a position.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\r\n    }\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\r\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\r\n     * This function should return the amount of `want` tokens made available by the\r\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\r\n     * difference is due to a realized loss, or if there is some other sitution at play\r\n     * (e.g. locked funds) where the amount made available is less than what is needed.\r\n     *\r\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\r\n\r\n    /**\r\n     * Liquidate everything and returns the amount that got freed.\r\n     * This function is used during emergency exit instead of `prepareReturn()` to\r\n     * liquidate all of the Strategy's positions back to the Vault.\r\n     */\r\n\r\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        // If your implementation uses the cost of the call in want, you can\r\n        // use uint256 callCost = ethToWant(callCostInWei);\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        uint256 callCost = ethToWant(callCostInWei);\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should not trigger if we haven't waited long enough since previous harvest\r\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\r\n        //       changes to the value from triggering a harvest directly through user\r\n        //       behavior. This should ensure reasonable resistance to manipulation\r\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            uint256 amountFreed = liquidateAllPositions();\r\n            if (amountFreed < debtOutstanding) {\r\n                loss = debtOutstanding.sub(amountFreed);\r\n            } else if (amountFreed > debtOutstanding) {\r\n                profit = amountFreed.sub(debtOutstanding);\r\n            }\r\n            debtPayment = debtOutstanding.sub(loss);\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        // call healthCheck contract\r\n        if (doHealthCheck && healthCheck != address(0)) {\r\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\r\n        } else {\r\n            doHealthCheck = true;\r\n        }\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     * @return _loss Any realized losses\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\r\n        uint256 amountFreed;\r\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.safeTransfer(msg.sender, amountFreed);\r\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @dev\r\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     *  The migration process should be carefully performed to make sure all\r\n     * the assets are migrated to the new address, which should have never\r\n     * interacted with the vault before.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault));\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyEmergencyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n\r\n        emit EmergencyExitEnabled();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     * ```\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     * ```\r\n     */\r\n    function protectedTokens() internal view virtual returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\nabstract contract BaseStrategyInitializable is BaseStrategy {\r\n    bool public isOriginal = true;\r\n    event Cloned(address indexed clone);\r\n\r\n    constructor(address _vault) public BaseStrategy(_vault) {}\r\n\r\n    function initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) external virtual {\r\n        _initialize(_vault, _strategist, _rewards, _keeper);\r\n    }\r\n\r\n    function clone(address _vault) external returns (address) {\r\n        require(isOriginal, \"!clone\");\r\n        return this.clone(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    function clone(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) external returns (address newStrategy) {\r\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\r\n        bytes20 addressBytes = bytes20(address(this));\r\n\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            newStrategy := create(0, clone_code, 0x37)\r\n        }\r\n\r\n        BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);\r\n\r\n        emit Cloned(newStrategy);\r\n    }\r\n}\r\n\r\n// File: IVault.sol\r\n\r\ninterface IVault is IERC20 {\r\n    function token() external view returns (address);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    //function deposit() external;\r\n    function deposit(uint256) external;\r\n\r\n    function depositAll() external;\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (uint256);\r\n\r\n    function withdraw(\r\n        uint256 amount,\r\n        address account,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    function availableDepositLimit() external view returns (uint256);\r\n}\r\n\r\n// File: MakerDaiDelegateLib.sol\r\n\r\n//OSM\r\n\r\ninterface PSMLike {\r\n    function gemJoin() external view returns (address);\r\n    function sellGem(address usr, uint256 gemAmt) external;\r\n    function buyGem(address usr, uint256 gemAmt) external;\r\n}\r\n\r\ninterface IERC3156FlashLender {\r\n    function maxFlashLoan(\r\n        address token\r\n    ) external view returns (uint256);\r\n    function flashFee(\r\n        address token,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n    function flashLoan(\r\n        //IERC3156FlashBorrower receiver,\r\n        address receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC3156FlashBorrower {\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32);\r\n}\r\n\r\nlibrary MakerDaiDelegateLib {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    //event DebugDelegate(uint256 _number, uint _value);\r\n\r\n    enum Action {WIND, UNWIND}\r\n\r\n    //uint256 public constant otherTokenTo18Conversion = 10 ** (18 - _otherToken.decimals());\r\n    //Strategy specific addresses:\r\n    //dai:\r\n    IERC20 internal constant want = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 internal constant otherToken = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    uint256 public constant otherTokenTo18Conversion = 10 ** 12;\r\n    //usdc:\r\n    //IERC20 internal constant want = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    //IERC20 internal constant otherToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    //uint256 public constant otherTokenTo18Conversion = 1;\r\n\r\n    //GUNIDAIUSDC1 - Gelato Uniswap DAI/USDC LP - 0.05% fee\r\n    GUniPool internal constant yieldBearing = GUniPool(0xAbDDAfB225e10B90D798bB8A886238Fb835e2053);\r\n    bytes32 internal constant ilk_yieldBearing = 0x47554e49563344414955534443312d4100000000000000000000000000000000;\r\n    address internal constant gemJoinAdapter = 0xbFD445A97e7459b0eBb34cfbd3245750Dba4d7a4;\r\n\r\n    //GUNIDAIUSDC2 - Gelato Uniswap DAI/USDC2 LP 2 - 0.01% fee\r\n    //GUniPool internal constant yieldBearing = GUniPool(0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e);\r\n    //bytes32 internal constant ilk_yieldBearing = 0x47554e49563344414955534443322d4100000000000000000000000000000000;\r\n    //address internal constant gemJoinAdapter = 0xA7e4dDde3cBcEf122851A7C8F7A55f23c0Daf335;\r\n\r\n    PSMLike public constant psm = PSMLike(0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A) ;\r\n\r\n    IERC20 internal constant borrowToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    //MAKER Flashmint:\r\n    IERC3156FlashLender public constant flashmint = IERC3156FlashLender(0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853);\r\n\r\n    // Units used in Maker contracts\r\n    uint256 internal constant WAD = 10**18;\r\n    uint256 internal constant RAY = 10**27;\r\n\r\n    // Do not attempt to mint DAI if there are less than MIN_MINTABLE available. Used to be 500kDAI --> reduced to 50kDAI\r\n    uint256 internal constant MIN_MINTABLE = 50000 * WAD;\r\n\r\n    // Maker vaults manager\r\n    ManagerLike internal constant manager = ManagerLike(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\r\n\r\n    // Token Adapter Module for collateral\r\n    DaiJoinLike internal constant daiJoin = DaiJoinLike(0x9759A6Ac90977b93B58547b4A71c78317f391A28);\r\n\r\n    // Liaison between oracles and core Maker contracts\r\n    SpotLike internal constant spotter = SpotLike(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\r\n\r\n    // Part of the Maker Rates Module in charge of accumulating stability fees\r\n    JugLike internal constant jug = JugLike(0x19c0976f590D67707E62397C87829d896Dc0f1F1);\r\n\r\n    // Debt Ceiling Instant Access Module\r\n    DssAutoLine internal constant autoLine = DssAutoLine(0xC7Bdd1F2B16447dcf3dE045C4a039A60EC2f0ba3);\r\n\r\n    // ----------------- PUBLIC FUNCTIONS -----------------\r\n\r\n    // Creates an UrnHandler (cdp) for a specific ilk and allows to manage it via the internal\r\n    // registry of the manager.\r\n    function openCdp(bytes32 ilk) public returns (uint256) {\r\n        return manager.open(ilk, address(this));\r\n    }\r\n\r\n    // Moves cdpId collateral balance and debt to newCdpId.\r\n    function shiftCdp(uint256 cdpId, uint256 newCdpId) public {\r\n        manager.shift(cdpId, newCdpId);\r\n    }\r\n\r\n    // Transfers the ownership of cdp to recipient address in the manager registry.\r\n    function transferCdp(uint256 cdpId, address recipient) public {\r\n        manager.give(cdpId, recipient);\r\n    }\r\n\r\n    // Allow/revoke manager access to a cdp\r\n    function allowManagingCdp(\r\n        uint256 cdpId,\r\n        address user,\r\n        bool isAccessGranted\r\n    ) public {\r\n        manager.cdpAllow(cdpId, user, isAccessGranted ? 1 : 0);\r\n    }\r\n\r\n    // Deposits collateral (gem) and mints DAI\r\n    function lockGemAndDraw(\r\n        address gemJoin,\r\n        uint256 cdpId,\r\n        uint256 collateralAmount,\r\n        uint256 daiToMint,\r\n        uint256 totalDebt\r\n    ) public {\r\n        address urn = manager.urns(cdpId);\r\n        VatLike vat = VatLike(manager.vat());\r\n        bytes32 ilk = manager.ilks(cdpId);\r\n\r\n        if (daiToMint > 0) {\r\n            daiToMint = _forceMintWithinLimits(vat, ilk, daiToMint, totalDebt);\r\n        }\r\n\r\n        // Takes token amount from the strategy and joins into the vat\r\n        if (collateralAmount > 0) {\r\n            GemJoinLike(gemJoin).join(urn, collateralAmount);\r\n        }\r\n\r\n        // Locks token amount into the CDP and generates debt\r\n        manager.frob(\r\n            cdpId,\r\n            int256(convertTo18(gemJoin, collateralAmount)),\r\n            _getDrawDart(vat, urn, ilk, daiToMint)\r\n        );\r\n\r\n        // Moves the DAI amount to the strategy. Need to convert dai from [wad] to [rad]\r\n        manager.move(cdpId, address(this), daiToMint.mul(1e27));\r\n\r\n        // Allow access to DAI balance in the vat\r\n        vat.hope(address(daiJoin));\r\n\r\n        // Exits DAI to the user's wallet as a token\r\n        daiJoin.exit(address(this), daiToMint);\r\n    }\r\n\r\n    // Returns DAI to decrease debt and attempts to unlock any amount of collateral\r\n    function wipeAndFreeGem(\r\n        address gemJoin,\r\n        uint256 cdpId,\r\n        uint256 collateralAmount,\r\n        uint256 daiToRepay\r\n    ) public {\r\n        address urn = manager.urns(cdpId);\r\n\r\n        // Joins DAI amount into the vat\r\n        if (daiToRepay > 0) {\r\n            daiJoin.join(urn, daiToRepay);\r\n        }\r\n\r\n        uint256 wadC = convertTo18(gemJoin, collateralAmount);\r\n\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        manager.frob(\r\n            cdpId,\r\n            -int256(wadC),\r\n            _getWipeDart(\r\n                VatLike(manager.vat()),\r\n                VatLike(manager.vat()).dai(urn),\r\n                urn,\r\n                manager.ilks(cdpId)\r\n            )\r\n        );\r\n\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        manager.flux(cdpId, address(this), collateralAmount);\r\n\r\n        // Exits token amount to the strategy as a token\r\n        GemJoinLike(gemJoin).exit(address(this), collateralAmount);\r\n    }\r\n\r\n    function debtFloor(bytes32 ilk) public view returns (uint256) {\r\n        // uint256 Art;   // Total Normalised Debt     [wad]\r\n        // uint256 rate;  // Accumulated Rates         [ray]\r\n        // uint256 spot;  // Price with Safety Margin  [ray]\r\n        // uint256 line;  // Debt Ceiling              [rad]\r\n        // uint256 dust;  // Urn Debt Floor            [rad]\r\n        (, , , , uint256 dust) = VatLike(manager.vat()).ilks(ilk);\r\n        return dust.div(RAY);\r\n    }\r\n\r\n    function debtForCdp(uint256 cdpId, bytes32 ilk)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address urn = manager.urns(cdpId);\r\n        VatLike vat = VatLike(manager.vat());\r\n\r\n        // Normalized outstanding stablecoin debt [wad]\r\n        (, uint256 art) = vat.urns(ilk, urn);\r\n\r\n        // Gets actual rate from the vat [ray]\r\n        (, uint256 rate, , , ) = vat.ilks(ilk);\r\n\r\n        // Return the present value of the debt with accrued fees\r\n        return art.mul(rate).div(RAY);\r\n    }\r\n\r\n    function balanceOfCdp(uint256 cdpId, bytes32 ilk)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address urn = manager.urns(cdpId);\r\n        VatLike vat = VatLike(manager.vat());\r\n\r\n        (uint256 ink, ) = vat.urns(ilk, urn);\r\n        return ink;\r\n    }\r\n\r\n    // Returns value of DAI in the reference asset (e.g. $1 per DAI)\r\n    function getDaiPar() public view returns (uint256) {\r\n        // Value is returned in ray (10**27)\r\n        return spotter.par();\r\n    }\r\n\r\n    // Liquidation ratio for the given ilk returned in [ray]\r\n    function getLiquidationRatio(bytes32 ilk) public view returns (uint256) {\r\n        (, uint256 liquidationRatio) = spotter.ilks(ilk);\r\n        return liquidationRatio;\r\n    }\r\n\r\n    function getSpotPrice(bytes32 ilk) public view returns (uint256) {\r\n        VatLike vat = VatLike(manager.vat());\r\n\r\n        // spot: collateral price with safety margin returned in [ray]\r\n        (, , uint256 spot, , ) = vat.ilks(ilk);\r\n\r\n        uint256 liquidationRatio = getLiquidationRatio(ilk);\r\n\r\n        // convert ray*ray to wad\r\n        return spot.mul(liquidationRatio).div(RAY * 1e9);\r\n    }\r\n\r\n    function getPessimisticRatioOfCdpWithExternalPrice(\r\n        uint256 cdpId,\r\n        bytes32 ilk,\r\n        uint256 externalPrice,\r\n        uint256 collateralizationRatioPrecision\r\n    ) public view returns (uint256) {\r\n        // Use pessimistic price to determine the worst ratio possible\r\n        uint256 price = Math.min(getSpotPrice(ilk), externalPrice);\r\n        require(price > 0); // dev: invalid price\r\n\r\n        uint256 totalCollateralValue = balanceOfCdp(cdpId, ilk).mul(price).div(WAD);\r\n        uint256 totalDebt = debtForCdp(cdpId, ilk);\r\n\r\n        // If for some reason we do not have debt (e.g: deposits under dust)\r\n        // make sure the operation does not revert\r\n        if (totalDebt == 0) {\r\n            totalDebt = 1;\r\n        }\r\n\r\n        return totalCollateralValue.mul(collateralizationRatioPrecision).div(totalDebt);\r\n    }\r\n\r\n    // Make sure we update some key content in Maker contracts\r\n    // These can be updated by anyone without authenticating\r\n    function keepBasicMakerHygiene(bytes32 ilk) public {\r\n        // Update accumulated stability fees\r\n        jug.drip(ilk);\r\n\r\n        // Update the debt ceiling using DSS Auto Line\r\n        autoLine.exec(ilk);\r\n    }\r\n\r\n    function daiJoinAddress() public view returns (address) {\r\n        return address(daiJoin);\r\n    }\r\n\r\n    // Checks if there is at least MIN_MINTABLE dai available to be minted\r\n    function isDaiAvailableToMint(bytes32 ilk) public view returns (bool) {\r\n        return balanceOfDaiAvailableToMint(ilk) >= MIN_MINTABLE;\r\n    }\r\n\r\n    // Checks amount of Dai mintable\r\n    function balanceOfDaiAvailableToMint(bytes32 ilk) public view returns (uint256) {\r\n        VatLike vat = VatLike(manager.vat());\r\n        (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\r\n\r\n        // Total debt in [rad] (wad * ray)\r\n        uint256 vatDebt = Art.mul(rate);\r\n\r\n        if (vatDebt >= line) {\r\n            return 0;\r\n        }\r\n\r\n        return line.sub(vatDebt).div(RAY);\r\n    }\r\n\r\n    function wind(\r\n        uint256 wantAmountInitial,\r\n        uint256 targetCollateralizationRatio,\r\n        uint256 cdpId\r\n    ) public {\r\n        wantAmountInitial = Math.min(wantAmountInitial, balanceOfWant());\r\n        //Calculate how much borrowToken to mint to leverage up to targetCollateralizationRatio:\r\n        uint256 flashloanAmount = wantAmountInitial.mul(RAY).div(targetCollateralizationRatio.mul(1e9).sub(RAY));\r\n        VatLike vat = VatLike(manager.vat());\r\n        uint256 currentDebt = debtForCdp(cdpId, ilk_yieldBearing);\r\n        flashloanAmount = Math.min(flashloanAmount, _forceMintWithinLimits(vat, ilk_yieldBearing, flashloanAmount, currentDebt));\r\n        //Check if amount of dai to borrow is above debtFloor\r\n        if ( (currentDebt.add(flashloanAmount)) <= debtFloor(ilk_yieldBearing).add(1e15)){\r\n            return;\r\n        }\r\n        bytes memory data = abi.encode(Action.WIND, cdpId, wantAmountInitial, flashloanAmount, targetCollateralizationRatio);\r\n        _initFlashLoan(data, flashloanAmount);\r\n    }\r\n\r\n    function unwind(\r\n        uint256 wantAmountRequested,\r\n        uint256 targetCollateralizationRatio,\r\n        uint256 cdpId\r\n    ) public {\r\n        if (balanceOfCdp(cdpId, ilk_yieldBearing) == 0){\r\n            return;\r\n        }\r\n        //Paying off the full debt it's common to experience Vat/dust reverts: we circumvent this with add 1 Wei to the amount to be paid\r\n        uint256 flashloanAmount = debtForCdp(cdpId, ilk_yieldBearing).add(1);\r\n        bytes memory data = abi.encode(Action.UNWIND, cdpId, wantAmountRequested, flashloanAmount, targetCollateralizationRatio);\r\n        //Always flashloan entire debt to pay off entire debt:\r\n        _initFlashLoan(data, flashloanAmount);\r\n    }\r\n\r\n    function _wind(uint256 cdpId, uint256 flashloanRepayAmount, uint256 wantAmountInitial, uint256) public {\r\n        //repayAmount includes any fees\r\n        uint256 yieldBearingAmountToLock = _swapWantToYieldBearing(balanceOfWant());\r\n        //Check allowance to lock collateral\r\n        _checkAllowance(gemJoinAdapter, address(yieldBearing), yieldBearingAmountToLock);\r\n        //Lock collateral and borrow dai to repay flashmint\r\n        lockGemAndDraw(\r\n            gemJoinAdapter,\r\n            cdpId,\r\n            yieldBearingAmountToLock,\r\n            flashloanRepayAmount,\r\n            debtForCdp(cdpId, ilk_yieldBearing)\r\n        );\r\n    }\r\n\r\n    function _unwind(uint256 cdpId, uint256 flashloanRepayAmount, uint256 wantAmountRequested, uint256 targetCollateralizationRatio) public {\r\n        //Repay entire debt, to then take debt again later:\r\n        //Check allowance for repaying borrowToken Debt\r\n        uint256 currentDebtPlusRounding = debtForCdp(cdpId, ilk_yieldBearing).add(1);\r\n        _checkAllowance(daiJoinAddress(), address(borrowToken), currentDebtPlusRounding);\r\n        wipeAndFreeGem(gemJoinAdapter, cdpId, balanceOfCdp(cdpId, ilk_yieldBearing), currentDebtPlusRounding);\r\n        //All debt paid down, collateral unlocked\r\n        //Calculate leverage+1 to know how much totalRequestedInYieldBearing to swap for borrowToken\r\n        uint256 leveragePlusOne = (RAY.mul(WAD).div((targetCollateralizationRatio.mul(1e9).sub(RAY)))).add(WAD);\r\n        uint256 totalRequestedInYieldBearing = wantAmountRequested.mul(leveragePlusOne).div(getWantPerYieldBearing());\r\n        //Maximum of all yieldBearing can be requested\r\n        totalRequestedInYieldBearing = Math.min(totalRequestedInYieldBearing, balanceOfYieldBearing());\r\n\r\n        _swapYieldBearingToWant(totalRequestedInYieldBearing);\r\n        //Want amount requested now in wallet\r\n\r\n        //Lock collateral and borrow dai equivalent to amount given by targetCollateralizationRatio:\r\n        uint256 yieldBearingBalance = balanceOfYieldBearing();\r\n        uint256 borrowTokenAmountToMint = yieldBearingBalance.mul(getWantPerYieldBearing()).div(targetCollateralizationRatio);\r\n        //Check if amount of dai to borrow is above debtFloor. If not, swap everything to want and return.\r\n        if ( borrowTokenAmountToMint <= debtFloor(ilk_yieldBearing).add(1e15)){\r\n            _swapYieldBearingToWant(balanceOfYieldBearing());\r\n            yieldBearingBalance = balanceOfYieldBearing();\r\n            return;\r\n        }\r\n        //Make sure to always mint enough to repay the flashloan\r\n        borrowTokenAmountToMint = Math.min(borrowTokenAmountToMint, flashloanRepayAmount);\r\n        //Check allowance to lock collateral\r\n        _checkAllowance(gemJoinAdapter, address(yieldBearing), yieldBearingBalance);\r\n        //Lock collateral and mint dai to repay flashmint\r\n        lockGemAndDraw(\r\n            gemJoinAdapter,\r\n            cdpId,\r\n            yieldBearingBalance,\r\n            borrowTokenAmountToMint,\r\n            debtForCdp(cdpId, ilk_yieldBearing)\r\n        );\r\n        //want=dai: nothing further necessary\r\n    }\r\n\r\n    //get amount of Want in Wei that is received for 1 yieldBearing\r\n    function getWantPerYieldBearing() internal view returns (uint256){\r\n        (uint256 wantUnderlyingBalance, uint256 otherTokenUnderlyingBalance) = yieldBearing.getUnderlyingBalances();\r\n        return (wantUnderlyingBalance.mul(WAD).add(otherTokenUnderlyingBalance.mul(WAD).mul(WAD).div(1e6))).div(yieldBearing.totalSupply());\r\n    }\r\n\r\n    function balanceOfWant() internal view returns (uint256) {\r\n        return want.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfYieldBearing() internal view returns (uint256) {\r\n        return yieldBearing.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfOtherToken() internal view returns (uint256) {\r\n        return otherToken.balanceOf(address(this));\r\n    }\r\n\r\n    // ----------------- INTERNAL FUNCTIONS -----------------\r\n\r\n        function _initFlashLoan(bytes memory data, uint256 amount) internal {\r\n        //Flashmint implementation:\r\n        _checkAllowance(address(flashmint), address(borrowToken), amount);\r\n        flashmint.flashLoan(address(this), address(borrowToken), amount, data);\r\n    }\r\n\r\n    function _checkAllowance(\r\n        address _contract,\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (IERC20(_token).allowance(address(this), _contract) < _amount) {\r\n            //IERC20(_token).safeApprove(_contract, 0);\r\n            IERC20(_token).safeApprove(_contract, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function _swapWantToYieldBearing(uint256 _amount) internal returns (uint256) {\r\n        if (_amount == 0) {\r\n            return 0;\r\n        }\r\n        _amount = Math.min(_amount, balanceOfWant());\r\n        (uint256 wantRatio, uint256 otherTokenRatio) = yieldBearing.getUnderlyingBalances();\r\n        wantRatio = wantRatio.mul(WAD).div(yieldBearing.totalSupply());\r\n        otherTokenRatio = otherTokenRatio.mul(WAD).mul(otherTokenTo18Conversion).div(yieldBearing.totalSupply());\r\n        uint256 wantAmountForMint = _amount.mul(wantRatio).div(wantRatio + otherTokenRatio);\r\n        uint256 wantAmountToSwapToOtherTokenForMint = _amount.mul(otherTokenRatio).div(wantRatio + otherTokenRatio);\r\n        //Swap through PSM wantAmountToSwapToOtherTokenForMint --> otherToken\r\n        _checkAllowance(address(psm), address(want), wantAmountToSwapToOtherTokenForMint);\r\n        psm.buyGem(address(this), wantAmountToSwapToOtherTokenForMint.div(otherTokenTo18Conversion));\r\n\r\n        //Mint yieldBearing:\r\n        wantAmountForMint = Math.min(wantAmountForMint, balanceOfWant());\r\n        uint256 otherTokenBalance = balanceOfOtherToken();\r\n        _checkAllowance(address(yieldBearing), address(want), wantAmountForMint);\r\n        _checkAllowance(address(yieldBearing), address(otherToken), otherTokenBalance);\r\n        (,,uint256 mintAmount) = yieldBearing.getMintAmounts(wantAmountForMint, otherTokenBalance);\r\n        yieldBearing.mint(mintAmount, address(this));\r\n        return balanceOfYieldBearing();\r\n    }\r\n\r\n    function _swapYieldBearingToWant(uint256 _amount) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n        //Burn the yieldBearing token to unlock DAI and USDC:\r\n        yieldBearing.burn(Math.min(_amount, balanceOfYieldBearing()), address(this));\r\n\r\n        //Amount of otherToken after burning:\r\n        uint256 otherTokenBalance = balanceOfOtherToken();\r\n\r\n        //Swap through PSM otherToken ---> Want:\r\n        address psmGemJoin = psm.gemJoin();\r\n        _checkAllowance(psmGemJoin, address(otherToken), otherTokenBalance);\r\n        psm.sellGem(address(this), otherTokenBalance);\r\n    }\r\n\r\n    // This function repeats some code from daiAvailableToMint because it needs\r\n    // to handle special cases such as not leaving debt under dust\r\n    function _forceMintWithinLimits(\r\n        VatLike vat,\r\n        bytes32 ilk,\r\n        uint256 desiredAmount,\r\n        uint256 debtBalance\r\n    ) internal view returns (uint256) {\r\n        // uint256 Art;   // Total Normalised Debt     [wad]\r\n        // uint256 rate;  // Accumulated Rates         [ray]\r\n        // uint256 spot;  // Price with Safety Margin  [ray]\r\n        // uint256 line;  // Debt Ceiling              [rad]\r\n        // uint256 dust;  // Urn Debt Floor            [rad]\r\n        (uint256 Art, uint256 rate, , uint256 line, uint256 dust) =\r\n            vat.ilks(ilk);\r\n\r\n        // Total debt in [rad] (wad * ray)\r\n        uint256 vatDebt = Art.mul(rate);\r\n\r\n        // Make sure we are not over debt ceiling (line) or under debt floor (dust)\r\n        if (\r\n            vatDebt >= line || (desiredAmount.add(debtBalance) <= dust.div(RAY))\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 maxMintableDAI = line.sub(vatDebt).div(RAY);\r\n\r\n        // Avoid edge cases with low amounts of available debt\r\n        if (maxMintableDAI < MIN_MINTABLE) {\r\n            return 0;\r\n        }\r\n\r\n        // Prevent rounding errors\r\n        if (maxMintableDAI > WAD) {\r\n            maxMintableDAI = maxMintableDAI - WAD;\r\n        }\r\n\r\n        return Math.min(maxMintableDAI, desiredAmount);\r\n    }\r\n\r\n    function _getDrawDart(\r\n        VatLike vat,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint256 wad\r\n    ) internal returns (int256 dart) {\r\n        // Updates stability fee rate\r\n        uint256 rate = jug.drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = vat.dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < wad.mul(RAY)) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = int256(wad.mul(RAY).sub(dai).div(rate));\r\n            // This is neeeded due to lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\r\n            dart = uint256(dart).mul(rate) < wad.mul(RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function _getWipeDart(\r\n        VatLike vat,\r\n        uint256 dai,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (int256 dart) {\r\n        // Gets actual rate from the vat\r\n        (, uint256 rate, , , ) = vat.ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint256 art) = vat.urns(ilk, urn);\r\n\r\n        // Uses the whole dai balance in the vat to reduce the debt\r\n        dart = int256(dai / rate);\r\n\r\n        // Checks the calculated dart is not higher than urn.art (total debt), otherwise uses its value\r\n        dart = uint256(dart) <= art ? -dart : -int256(art);\r\n    }\r\n\r\n    function convertTo18(address gemJoin, uint256 amt)\r\n        internal\r\n        returns (uint256 wad)\r\n    {\r\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before\r\n        // passing to frob function\r\n        // Adapters will automatically handle the difference of precision\r\n        wad = amt.mul(10**(18 - GemJoinLike(gemJoin).dec()));\r\n    }\r\n\r\n}\r\n\r\n// File: Strategy.sol\r\n\r\ncontract Strategy is BaseStrategy {\r\n    using Address for address;\r\n\r\n    //event Debug(uint256 _number, uint _value);\r\n\r\n    enum Action {WIND, UNWIND}\r\n\r\n    //GUNIDAIUSDC1 - Gelato Uniswap DAI/USDC LP - 0.05% fee\r\n    GUniPool internal constant yieldBearing = GUniPool(0xAbDDAfB225e10B90D798bB8A886238Fb835e2053);\r\n    bytes32 internal constant ilk_yieldBearing = 0x47554e49563344414955534443312d4100000000000000000000000000000000;\r\n    address internal constant gemJoinAdapter = 0xbFD445A97e7459b0eBb34cfbd3245750Dba4d7a4;\r\n    \r\n    //GUNIDAIUSDC2 - Gelato Uniswap DAI/USDC2 LP 2 - 0.01% fee\r\n    //GUniPool internal constant yieldBearing = GUniPool(0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e);\r\n    //bytes32 internal constant ilk_yieldBearing = 0x47554e49563344414955534443322d4100000000000000000000000000000000;\r\n    //address internal constant gemJoinAdapter = 0xA7e4dDde3cBcEf122851A7C8F7A55f23c0Daf335;\r\n\r\n    //Flashmint:\r\n    address internal constant flashmint = 0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853;\r\n\r\n    IERC20 internal constant borrowToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    //----------- MAKER INIT    \r\n    // Units used in Maker contracts\r\n    uint256 internal constant WAD = 10**18;\r\n    uint256 internal constant RAY = 10**27;\r\n\r\n    // maker vault identifier\r\n    uint256 public cdpId;\r\n\r\n    //Desired collaterization ratio\r\n    //Directly affects the leverage multiplier for every investment to leverage up the Maker vault with yieldBearing: \r\n    //Off-chain calculation geometric converging series: sum(1/1.02^n)-1 for n=0-->infinity --> for 102% collateralization ratio = 50x leverage.\r\n    uint256 public collateralizationRatio;\r\n\r\n    // Allow the collateralization ratio to drift a bit in order to avoid cycles\r\n    uint256 public lowerRebalanceTolerance;\r\n    uint256 public upperRebalanceTolerance;\r\n\r\n    bool internal forceHarvestTriggerOnce; // only set this to true when we want to trigger our keepers to harvest for us\r\n    uint256 public creditThreshold; // amount of credit in underlying tokens that will automatically trigger a harvest  \r\n\r\n    // Maximum Single Trade possible\r\n    uint256 public maxSingleTrade;\r\n    // Minimum Single Trade & Minimum Profit to be taken:\r\n    uint256 public minSingleTrade;\r\n\r\n    // Name of the strategy\r\n    string internal strategyName;\r\n\r\n    // ----------------- INIT FUNCTIONS TO SUPPORT CLONING -----------------\r\n\r\n    constructor(\r\n        address _vault,\r\n        string memory _strategyName\r\n    ) public BaseStrategy(_vault) {\r\n        _initializeThis(\r\n            _strategyName\r\n        );\r\n    }\r\n\r\n    function initialize(\r\n        address _vault,\r\n        string memory _strategyName\r\n    ) public {\r\n        address sender = msg.sender;\r\n        // Initialize BaseStrategy\r\n        _initialize(_vault, sender, sender, sender);\r\n        // Initialize cloned instance\r\n        _initializeThis(\r\n            _strategyName\r\n        );\r\n    }\r\n\r\n    function _initializeThis(\r\n        string memory _strategyName\r\n    ) internal {\r\n        strategyName = _strategyName;\r\n\r\n        //10M$ dai or usdc maximum trade\r\n        maxSingleTrade = 10_000_000 * 1e18;\r\n        //10M$ dai or usdc maximum trade\r\n        minSingleTrade = 1 * 1e17;\r\n\r\n        creditThreshold = 1e6 * 1e18;\r\n        maxReportDelay = 21 days; // 21 days in seconds, if we hit this then harvestTrigger = True\r\n\r\n        // Set health check to health.ychad.eth\r\n        healthCheck = 0xDDCea799fF1699e98EDF118e0629A974Df7DF012;\r\n\r\n        cdpId = MakerDaiDelegateLib.openCdp(ilk_yieldBearing);\r\n        require(cdpId > 0); // dev: error opening cdp\r\n\r\n        // Current ratio can drift\r\n        // Allow additional 0.002 = 0.2% in any direction by default ==> 102.5% upper, 102.1% lower\r\n        upperRebalanceTolerance = (20 * WAD) / 10000;\r\n        lowerRebalanceTolerance = (20 * WAD) / 10000;\r\n\r\n        // Minimum collateralization ratio for GUNIV3DAIUSDC is 102.3% == 10230\r\n        collateralizationRatio = (10230 * WAD) / 10000;\r\n\r\n    }\r\n\r\n    // ----------------- SETTERS & MIGRATION -----------------\r\n\r\n    /////////////////// Manual harvest through keepers using KP3R instead of ETH:\r\n    function setForceHarvestTriggerOnce(bool _forceHarvestTriggerOnce)\r\n        external\r\n        onlyVaultManagers\r\n    {\r\n        forceHarvestTriggerOnce = _forceHarvestTriggerOnce;\r\n    }\r\n\r\n    function setCreditThreshold(uint256 _creditThreshold)\r\n        external\r\n        onlyVaultManagers\r\n    {\r\n        creditThreshold = _creditThreshold;\r\n    }\r\n\r\n    function setMinMaxSingleTrade(uint256 _minSingleTrade, uint256 _maxSingleTrade) external onlyVaultManagers {\r\n        minSingleTrade = _minSingleTrade;\r\n        maxSingleTrade = _maxSingleTrade;\r\n    }\r\n\r\n    // Target collateralization ratio to maintain within bounds\r\n    function setCollateralizationRatio(uint256 _collateralizationRatio)\r\n        external\r\n        onlyEmergencyAuthorized\r\n    {\r\n        require(_collateralizationRatio.sub(lowerRebalanceTolerance) > MakerDaiDelegateLib.getLiquidationRatio(ilk_yieldBearing).mul(WAD).div(RAY)); // dev: desired collateralization ratio is too low\r\n        collateralizationRatio = _collateralizationRatio;\r\n    }\r\n\r\n    // Rebalancing bands (collat ratio - tolerance, collat_ratio plus tolerance)\r\n    function setRebalanceTolerance(uint256 _lowerRebalanceTolerance, uint256 _upperRebalanceTolerance)\r\n        external\r\n        onlyEmergencyAuthorized\r\n    {\r\n        require(collateralizationRatio.sub(_lowerRebalanceTolerance) > MakerDaiDelegateLib.getLiquidationRatio(ilk_yieldBearing).mul(WAD).div(RAY)); // dev: desired rebalance tolerance makes allowed ratio too low\r\n        lowerRebalanceTolerance = _lowerRebalanceTolerance;\r\n        upperRebalanceTolerance = _upperRebalanceTolerance;\r\n    }\r\n\r\n    // Required to move funds to a new cdp and use a different cdpId after migration\r\n    // Should only be called by governance as it will move funds\r\n    function shiftToCdp(uint256 newCdpId) external onlyGovernance {\r\n        MakerDaiDelegateLib.shiftCdp(cdpId, newCdpId);\r\n        cdpId = newCdpId;\r\n    }\r\n\r\n    // Allow address to manage Maker's CDP\r\n    function grantCdpManagingRightsToUser(address user, bool allow)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        MakerDaiDelegateLib.allowManagingCdp(cdpId, user, allow);\r\n    }\r\n\r\n    // Allow external debt repayment\r\n    // Attempt to take currentRatio to target c-ratio\r\n    function emergencyDebtRepayment(uint256 repayAmountOfWant)\r\n        external\r\n        onlyVaultManagers\r\n    {\r\n        MakerDaiDelegateLib.unwind(repayAmountOfWant, getCurrentMakerVaultRatio(), cdpId);\r\n    }\r\n\r\n    // ******** OVERRIDEN METHODS FROM BASE CONTRACT ************\r\n\r\n    function name() external view override returns (string memory) {\r\n        return strategyName;\r\n    }\r\n\r\n    function estimatedTotalAssets() public view override returns (uint256) {  //measured in WANT\r\n        return  \r\n                balanceOfWant() //free WANT balance in wallet\r\n                .add(balanceOfYieldBearing().add(balanceOfMakerVault()).mul(getWantPerYieldBearing()).div(WAD))\r\n                .sub(balanceOfDebt());\r\n                //want=usdc:\r\n                //.add(_convertBorrowTokenAmountToWant(balanceOfBorrowToken()))  // free DAI balance in wallet --> WANT\r\n                //.sub(_convertBorrowTokenAmountToWant(balanceOfDebt()));  //DAI debt of maker --> WANT\r\n    }\r\n\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        uint256 totalAssetsAfterProfit = estimatedTotalAssets();\r\n        //Here minSingleTrade represents the minimum profit of want that should be given back to the vault\r\n        _profit = totalAssetsAfterProfit > ( totalDebt + minSingleTrade ) \r\n            ? totalAssetsAfterProfit.sub(totalDebt)\r\n            : 0;\r\n        uint256 _amountFreed;\r\n        (_amountFreed, _loss) = liquidatePosition(Math.min(maxSingleTrade, _debtOutstanding.add(_profit)));\r\n        _debtPayment = Math.min(_debtOutstanding, _amountFreed);\r\n        //Net profit and loss calculation\r\n        if (_loss > _profit) {\r\n            _loss = _loss.sub(_profit);\r\n            _profit = 0;\r\n        } else {\r\n            _profit = _profit.sub(_loss);\r\n            _loss = 0;\r\n        }\r\n\r\n        // we're done harvesting, so reset our trigger if we used it\r\n        forceHarvestTriggerOnce = false;\r\n    }\r\n\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        // Update accumulated stability fees,  Update the debt ceiling using DSS Auto Line\r\n        MakerDaiDelegateLib.keepBasicMakerHygiene(ilk_yieldBearing);\r\n        // If we have enough want to convert and deposit more into the maker vault, we do it\r\n        //Here minSingleTrade represents the minimum investment of want that makes it worth it to loop \r\n        if (balanceOfWant() > _debtOutstanding.add(minSingleTrade) ) {\r\n            MakerDaiDelegateLib.wind(Math.min(maxSingleTrade, balanceOfWant().sub(_debtOutstanding)), collateralizationRatio, cdpId);\r\n        } else {\r\n            //Check if collateralizationRatio needs adjusting\r\n            // Allow the ratio to move a bit in either direction to avoid cycles\r\n            uint256 currentRatio = getCurrentMakerVaultRatio();\r\n            if (currentRatio < collateralizationRatio.sub(lowerRebalanceTolerance)) { //if current ratio is BELOW goal ratio:\r\n                uint256 currentCollateral = balanceOfMakerVault();\r\n                uint256 yieldBearingToRepay = currentCollateral.sub( currentCollateral.mul(currentRatio).div(collateralizationRatio)  );\r\n                uint256 wantAmountToRepay = yieldBearingToRepay.mul(getWantPerYieldBearing()).div(WAD);\r\n                MakerDaiDelegateLib.unwind(wantAmountToRepay, collateralizationRatio, cdpId);\r\n            } else if (currentRatio > collateralizationRatio.add(upperRebalanceTolerance)) { //if current ratio is ABOVE goal ratio:\r\n                // Mint the maximum DAI possible for the locked collateral            \r\n                _lockCollateralAndMintDai(0, _borrowTokenAmountToMint(balanceOfMakerVault()).sub(balanceOfDebt()));\r\n                MakerDaiDelegateLib.wind(Math.min(maxSingleTrade, balanceOfWant().sub(_debtOutstanding)), collateralizationRatio, cdpId);\r\n            }\r\n        }\r\n        //Check safety of collateralization ratio after all actions:\r\n        if (balanceOfMakerVault() > 0) {\r\n            require(getCurrentMakerVaultRatio() > collateralizationRatio.sub(lowerRebalanceTolerance), \"unsafe collateralization\");\r\n        }\r\n\r\n    }\r\n\r\n    function liquidatePosition(uint256 _wantAmountNeeded)\r\n        internal\r\n        override\r\n        returns (uint256 _liquidatedAmount, uint256 _loss)\r\n    {\r\n        uint256 wantBalance = balanceOfWant();\r\n        //Check if we can handle it without swapping free yieldBearing or freeing collateral yieldBearing\r\n        if (wantBalance >= _wantAmountNeeded) {\r\n            return (_wantAmountNeeded, 0);\r\n        }\r\n        //Not enough want to pay _wantAmountNeeded --> unwind position\r\n        MakerDaiDelegateLib.unwind(_wantAmountNeeded.sub(wantBalance), collateralizationRatio, cdpId);\r\n\r\n        //update free want after liquidating\r\n        uint256 looseWant = balanceOfWant();\r\n        //loss calculation and returning liquidated amount\r\n        if (_wantAmountNeeded > looseWant) {\r\n            _liquidatedAmount = looseWant;\r\n            _loss = _wantAmountNeeded.sub(looseWant);\r\n        } else {\r\n            _liquidatedAmount = _wantAmountNeeded;\r\n            _loss = 0;\r\n        }\r\n    }\r\n\r\n    function liquidateAllPositions()\r\n        internal\r\n        override\r\n        returns (uint256 _amountFreed)\r\n    {\r\n        (_amountFreed, ) = liquidatePosition(estimatedTotalAssets());\r\n    }\r\n\r\n    function harvestTrigger(uint256 callCostInWei)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        // Should not trigger if strategy is not active (no assets and no debtRatio). This means we don't need to adjust keeper job.\r\n        if (!isActive()) {\r\n            return false;\r\n        }\r\n\r\n        // check if the base fee gas price is higher than we allow. if it is, block harvests.\r\n        if (!isBaseFeeAcceptable()) {\r\n            return false;\r\n        }\r\n\r\n        // trigger if we want to manually harvest, but only if our gas price is acceptable\r\n        if (forceHarvestTriggerOnce) {\r\n            return true;\r\n        }\r\n\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n        // harvest once we reach our maxDelay if our gas price is okay\r\n        if (block.timestamp.sub(params.lastReport) > maxReportDelay) {\r\n            return true;\r\n        }\r\n\r\n        // harvest our credit if it's above our threshold\r\n        if (vault.creditAvailable() > creditThreshold) {\r\n            return true;\r\n        }\r\n\r\n        // otherwise, we don't harvest\r\n        return false;\r\n    }\r\n\r\n    function tendTrigger(uint256 callCostInWei)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        // Nothing to adjust if there is no collateral locked\r\n        if (balanceOfMakerVault() == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 currentRatio = getCurrentMakerVaultRatio();\r\n        // If we need to repay debt and are outside the tolerance bands,\r\n        // we do it regardless of the call cost\r\n        if (currentRatio < collateralizationRatio.sub(lowerRebalanceTolerance)) {\r\n            return true;\r\n        }\r\n\r\n        // Mint more DAI if possible\r\n        return\r\n            currentRatio > collateralizationRatio.add(upperRebalanceTolerance) &&\r\n            balanceOfDebt() > 0 &&\r\n            isBaseFeeAcceptable() &&\r\n            MakerDaiDelegateLib.isDaiAvailableToMint(ilk_yieldBearing);\r\n    }\r\n\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        // Transfer Maker Vault ownership to the new startegy\r\n        MakerDaiDelegateLib.transferCdp(cdpId, _newStrategy);\r\n    }\r\n\r\n    function protectedTokens()\r\n        internal\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {}\r\n\r\n    // we don't need this anymore since we don't use baseStrategy harvestTrigger\r\n    function ethToWant(uint256 _amtInWei)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {}\r\n\r\n    // ----------------- FLASHLOAN CALLBACK -----------------\r\n    //Flashmint Callback:\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32) {\r\n        require(msg.sender == flashmint);\r\n        require(initiator == address(this));\r\n        (Action action, uint256 _cdpId, uint256 _wantAmountInitialOrRequested, uint256 flashloanAmount, uint256 _collateralizationRatio) = abi.decode(data, (Action, uint256, uint256, uint256, uint256));\r\n        //amount = flashloanAmount, then add fee\r\n        amount = amount.add(fee);\r\n        _checkAllowance(address(flashmint), address(borrowToken), amount);\r\n        if (action == Action.WIND) {\r\n            MakerDaiDelegateLib._wind(_cdpId, amount, _wantAmountInitialOrRequested, _collateralizationRatio);\r\n        } else if (action == Action.UNWIND) {\r\n            MakerDaiDelegateLib._unwind(_cdpId, amount, _wantAmountInitialOrRequested, _collateralizationRatio);\r\n        }\r\n        return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n    }\r\n\r\n    // ----------------- INTERNAL FUNCTIONS SUPPORT -----------------\r\n\r\n    function _borrowTokenAmountToMint(uint256 _amount) internal returns (uint256) {\r\n        return _amount.mul(getWantPerYieldBearing()).mul(WAD).div(collateralizationRatio).div(WAD);\r\n    }\r\n\r\n    function _checkAllowance(\r\n        address _contract,\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (IERC20(_token).allowance(address(this), _contract) < _amount) {\r\n            IERC20(_token).safeApprove(_contract, 0);\r\n            IERC20(_token).safeApprove(_contract, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    // ----------------- PUBLIC BALANCES AND CALCS -----------------\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return want.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfYieldBearing() public view returns (uint256) {\r\n        return yieldBearing.balanceOf(address(this));\r\n    }\r\n\r\n    //get amount of Want in Wei that is received for 1 yieldBearing\r\n    function getWantPerYieldBearing() public view returns (uint256){\r\n        //The returned tuple contains (DAI amount, USDC amount) - for want=dai:\r\n        (uint256 wantUnderlyingBalance, uint256 otherTokenUnderlyingBalance) = yieldBearing.getUnderlyingBalances();\r\n        return wantUnderlyingBalance.add(otherTokenUnderlyingBalance.mul(1e12)).mul(WAD).div(yieldBearing.totalSupply());\r\n    }\r\n\r\n    function balanceOfDebt() public view returns (uint256) {\r\n        return MakerDaiDelegateLib.debtForCdp(cdpId, ilk_yieldBearing);\r\n    }\r\n\r\n    // Returns collateral balance in the vault\r\n    function balanceOfMakerVault() public view returns (uint256) {\r\n        return MakerDaiDelegateLib.balanceOfCdp(cdpId, ilk_yieldBearing);\r\n    }\r\n\r\n    function balanceOfDaiAvailableToMint() public view returns (uint256) {\r\n        return MakerDaiDelegateLib.balanceOfDaiAvailableToMint(ilk_yieldBearing);\r\n    }\r\n\r\n    // Effective collateralization ratio of the vault\r\n    function getCurrentMakerVaultRatio() public view returns (uint256) {\r\n        return MakerDaiDelegateLib.getPessimisticRatioOfCdpWithExternalPrice(cdpId,ilk_yieldBearing,getWantPerYieldBearing(),WAD);\r\n    }\r\n\r\n    function getHypotheticalMakerVaultRatioWithMultiplier(uint256 _wantMultiplier, uint256 _otherTokenMultiplier) public view returns (uint256) {\r\n        //The Multipliers are basispoints 100.01 = +0.01% increase of DAI price. Multipliers of 10000 are returning the CurrentMakerVaultRatio()\r\n        //The returned tuple contains (DAI amount, USDC amount) - for want=dai:\r\n        (uint256 wantUnderlyingBalance, uint256 otherTokenUnderlyingBalance) = yieldBearing.getUnderlyingBalances();\r\n        uint256 hypotheticalWantPerYieldBearing = wantUnderlyingBalance.mul(_wantMultiplier).div(10000).add(otherTokenUnderlyingBalance.mul(_otherTokenMultiplier).div(10000).mul(1e12)).mul(WAD).div(yieldBearing.totalSupply());\r\n        return balanceOfMakerVault().mul(hypotheticalWantPerYieldBearing).div(balanceOfDebt().mul(_wantMultiplier));\r\n    }\r\n\r\n    // check if the current baseFee is below our external target\r\n    function isBaseFeeAcceptable() internal view returns (bool) {\r\n        return IBaseFee(0xb5e1CAcB567d98faaDB60a1fD4820720141f064F).isCurrentBaseFeeAcceptable();\r\n    }\r\n\r\n    // ----------------- INTERNAL CALCS -----------------\r\n\r\n    function _lockCollateralAndMintDai(\r\n        uint256 collateralAmount,\r\n        uint256 daiToMint\r\n    ) internal {\r\n        MakerDaiDelegateLib.lockGemAndDraw(\r\n            gemJoinAdapter,\r\n            cdpId,\r\n            collateralAmount,\r\n            daiToMint,\r\n            balanceOfDebt()\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_strategyName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"UpdatedMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfDaiAvailableToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfMakerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfYieldBearing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHealthCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmountOfWant\",\"type\":\"uint256\"}],\"name\":\"emergencyDebtRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtInWei\",\"type\":\"uint256\"}],\"name\":\"ethToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMakerVaultRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_otherTokenMultiplier\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalMakerVaultRatioWithMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWantPerYieldBearing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"grantCdpManagingRightsToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCostInWei\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_strategyName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerRebalanceTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSingleTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSingleTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralizationRatio\",\"type\":\"uint256\"}],\"name\":\"setCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creditThreshold\",\"type\":\"uint256\"}],\"name\":\"setCreditThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doHealthCheck\",\"type\":\"bool\"}],\"name\":\"setDoHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_forceHarvestTriggerOnce\",\"type\":\"bool\"}],\"name\":\"setForceHarvestTriggerOnce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_healthCheck\",\"type\":\"address\"}],\"name\":\"setHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSingleTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSingleTrade\",\"type\":\"uint256\"}],\"name\":\"setMinMaxSingleTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lowerRebalanceTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperRebalanceTolerance\",\"type\":\"uint256\"}],\"name\":\"setRebalanceTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCdpId\",\"type\":\"uint256\"}],\"name\":\"shiftToCdp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCostInWei\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperRebalanceTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000da816459f1ab5631232fe5e97a05bbbb94970c950000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002653747261746567792d4d616b65722d6c65762d47554e495633444149555344432d302e3035250000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"MakerDaiDelegateLib:3ba75e61f77b71186d6f031571ece6816249a455","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c325a78e7b8b1290485c118951d159ae73cb317ad650e06279eb36249ab0a42c"}]}