{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n}\r\n\r\ninterface IVaultController {\r\n    function repayUSDi(uint96 id, uint192 amount) external;\r\n    function repayAllUSDi(uint96 id) external;\r\n    function vaultBorrowingPower(uint96 id) external view returns (uint192);\r\n    function vaultLiability(uint96 id) external view returns (uint192);\r\n}\r\n\r\ncontract InterestAttachment {\r\n    IERC20 USDi = IERC20(0x2A54bA2964C8Cd459Dc568853F79813a60761B58);\r\n    IVaultController public VC = IVaultController(0x4aaE9823Fb4C70490F1d802fC697F3ffF8D5CbE3);\r\n    address public admin;\r\n    uint96 public _vaultID;\r\n    uint public _minUP;\r\n\r\n    modifier onlyAdmin{\r\n        require(admin == msg.sender, \"admin only\");\r\n        _;\r\n    }\r\n    //// This contract is an attachment that allows you to use interestprotocol.io with a special feature that lets you automatically\r\n    //// pay off your debt when your UP, or \"Utilization Percentage\" reaches a certain amount.\r\n\r\n    constructor(uint96 vaultID_, uint256 minUP_, address admin_) {\r\n        if (admin_ == address(0x0)) {\r\n            admin = msg.sender;\r\n        } else {\r\n            admin = msg.sender;\r\n        }\r\n        _vaultID = vaultID_;\r\n        _minUP = minUP_;\r\n    }\r\n\r\n    function execute() public {\r\n        require(_minUP <= uint(CalculateUP()), \"This function cannot be called yet\");\r\n        // Send all USDi from the admin to this contract\r\n        USDi.transferFrom(admin, address(this), USDi.balanceOf(admin));\r\n        // If you have enough to pay the entire thing do it, if you don't then just pay what you can\r\n        if(VC.vaultLiability(_vaultID) < USDi.balanceOf(address(this))){\r\n            VC.repayAllUSDi(_vaultID);\r\n        } else {\r\n            VC.repayUSDi(_vaultID, uint192(USDi.balanceOf(address(this))));\r\n        }\r\n        // Send any remaining USDi to the admin\r\n        bool success = USDi.transfer(admin, USDi.balanceOf(address(this)));\r\n        require(success, \"erc20 transfer failed\");\r\n    }\r\n\r\n    // You can withdraw extra ETH held by this contract using this function\r\n    function sweep() public onlyAdmin{\r\n        (bool sent,) = admin.call{value: (address(this)).balance}(\"\");\r\n        require(sent, \"transfer failed\");\r\n    }\r\n\r\n    // You can withdraw extra tokens held by this contract using this function\r\n    function sweepToken(IERC20 token_) public onlyAdmin{\r\n        bool success = token_.transfer(admin, token_.balanceOf(address(this)));\r\n        require(success, \"erc20 transfer failed\");\r\n    }\r\n\r\n    // a function that calculates the UP of your vault\r\n    function CalculateUP() public view returns (uint192) {\r\n        uint192 vaultLiability = VC.vaultLiability(_vaultID);\r\n        uint192 vaultBorrowingPower = VC.vaultBorrowingPower(_vaultID);\r\n        // Your UP\r\n        return uint192(uint256(vaultLiability * 100) / vaultBorrowingPower);\r\n    }\r\n\r\n    // Functions that let you change values like the trigger UP or the vault ID this contract reads\r\n\r\n    function EditTriggerUP(uint amount_) public onlyAdmin {\r\n        _minUP = amount_;\r\n    }\r\n    function EditVaultID(uint96 id_) public onlyAdmin{\r\n        _vaultID = id_;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"vaultID_\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minUP_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CalculateUP\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"EditTriggerUP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"id_\",\"type\":\"uint96\"}],\"name\":\"EditVaultID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VC\",\"outputs\":[{\"internalType\":\"contract IVaultController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vaultID\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InterestAttachment","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000005000000000000000000000000072b7448f470d07222dbf038407cd69cc380683f3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2193f39e8c6fe21decf7b3cb2e22dc925dd0ac01179b8e8bc28b6ebcd0545014"}]}