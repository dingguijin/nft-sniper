{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2022-07-21\r\n*/\r\n\r\n/**\r\nhttps://twitter.com/MjollnirERC\r\n\r\nMjÃ¶llnir is the hammer of Thor, the shock waves it releases will dazzle the weakest among us.\r\nIts wrath falls on those who stray from it, so only the bravest will be entitled to its power.\r\n\r\ntaxes\r\n    - 0% BUY\r\n    - 12% SELL\r\nmax tx: 1%\r\nmax wallet: 2%\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Mjollnir is Context, IERC20, Ownable {\r\n    string private constant _name = \"Mjollnir\";\r\n    string private constant _symbol = \"MJOL\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    address payable public marketingWalletAddress =\r\n        payable(0x7CEeE640D0423EE3B831D473d4aF26F771c4B8aF);\r\n    address payable private constant initialLpReceiver =\r\n        payable(0xf4BbC5DAE25DA1F755d90dDb92f4782076A13d9a);\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public isMarketPair;\r\n    mapping(address => bool) public isEarlyBuyer;\r\n    mapping(address => bool) public isTxLimitExempt;\r\n    mapping(address => bool) public isWalletLimitExempt;\r\n\r\n    uint256 public buyTax = 0; \r\n    uint256 public sellTax = 1200; \r\n\r\n    uint256 public lpShare = 400; \r\n    uint256 public autoBurnShare = 400; \r\n    uint256 public marketingShare = 400; \r\n\r\n    uint256 private constant _totalSupply = 1000000 * 10**_decimals; \r\n    uint256 public swapThreshold = 1000 * 10**_decimals;\r\n    uint256 public maxTxAmount = 10000 * 10**_decimals; \r\n    uint256 public walletMax = 20000 * 10**_decimals;\r\n\r\n    IDexRouter public immutable dexRouter;\r\n    address public lpPair;\r\n\r\n    bool private isInSwap;\r\n    bool public swapEnabled = true;\r\n    bool public swapByLimitOnly = false;\r\n    bool public launched = false;\r\n    bool public checkWalletLimit = true;\r\n    bool public snipeBlockExpired = false;\r\n\r\n    uint256 public launchBlock = 0;\r\n    uint256 public snipeBlockAmount = 0;\r\n    uint256 public sellBlockAmount = 0;\r\n\r\n    event SwapSettingsUpdated(\r\n        bool swapEnabled_,\r\n        uint256 swapThreshold_,\r\n        bool swapByLimitOnly_\r\n    );\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    event AccountWhitelisted(\r\n        address account,\r\n        bool feeExempt,\r\n        bool walletLimitExempt,\r\n        bool txLimitExempt\r\n    );\r\n    event RouterVersionChanged(address newRouterAddress);\r\n    event TaxesChanged(uint256 newBuyTax, uint256 newSellTax);\r\n    event TaxDistributionChanged(\r\n        uint256 newLpShare,\r\n        uint256 newMarketingShare,\r\n        uint256 newAutoBurnShare\r\n    );\r\n    event MarketingWalletChanged(address marketingWalletAddress_);\r\n    event EarlyBuyerUpdated(address account, bool isEarlyBuyer_);\r\n    event MarketPairUpdated(address account, bool isMarketPair_);\r\n    event WalletLimitChanged(uint256 walletMax_);\r\n    event MaxTxAmountChanged(uint256 maxTxAmount_);\r\n    event MaxWalletCheckChanged(bool checkWalletLimit_);\r\n\r\n    modifier lockTheSwap() {\r\n        isInSwap = true;\r\n        _;\r\n        isInSwap = false;\r\n    }\r\n\r\n    constructor() payable {\r\n        dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        \r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[address(marketingWalletAddress)] = true;\r\n        isExcludedFromFee[address(initialLpReceiver)] = true;\r\n        isExcludedFromFee[address(dexRouter)] = true;\r\n\r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(marketingWalletAddress)] = true;\r\n        isTxLimitExempt[address(initialLpReceiver)] = true;\r\n        isTxLimitExempt[address(dexRouter)] = true;\r\n\r\n        isWalletLimitExempt[owner()] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[address(marketingWalletAddress)] = true;\r\n        isWalletLimitExempt[address(initialLpReceiver)] = true;\r\n        isWalletLimitExempt[address(dexRouter)] = true;\r\n\r\n        allowances[address(this)][address(dexRouter)] = _totalSupply;\r\n        balances[address(this)] = 700000 * (10 ** decimals());\r\n        emit Transfer(address(0), address(this), balanceOf(address(this)));\r\n        balances[initialLpReceiver] = _totalSupply - balanceOf(address(this));\r\n        emit Transfer(address(0), initialLpReceiver, balanceOf(initialLpReceiver));\r\n    }\r\n\r\n    //to receive ETH from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(address(0xdead));\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowances[owner_][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner_,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setIsEarlyBuyer(address account, bool isEarlyBuyer_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        isEarlyBuyer[account] = isEarlyBuyer_;\r\n        emit EarlyBuyerUpdated(account, isEarlyBuyer_);\r\n    }\r\n\r\n    function massSetIsEarlyBuyer(address[] calldata accounts, bool isEarlyBuyer_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for(uint256 i = 0; i < accounts.length; i++){\r\n            isEarlyBuyer[accounts[i]] = isEarlyBuyer_;\r\n            emit EarlyBuyerUpdated(accounts[i], isEarlyBuyer_);\r\n        }\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool isMarketPair_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        isMarketPair[account] = isMarketPair_;\r\n        emit MarketPairUpdated(account, isMarketPair_);\r\n    }\r\n\r\n    function setTaxes(uint256 newBuyTax, uint256 newSellTax)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(newBuyTax <= 3000, \"Cannot exceed 30%\");\r\n        require(newSellTax <= 3000, \"Cannot exceed 30%\");\r\n        buyTax = newBuyTax;\r\n        sellTax = newSellTax;\r\n        emit TaxesChanged(newBuyTax, newSellTax);\r\n    }\r\n\r\n    function setTaxDistribution(\r\n        uint256 newLpShare,\r\n        uint256 newMarketingShare,\r\n        uint256 newAutoBurnShare\r\n    ) external onlyOwner {\r\n        lpShare = newLpShare;\r\n        marketingShare = newMarketingShare;\r\n        autoBurnShare = newAutoBurnShare;\r\n        emit TaxDistributionChanged(\r\n            newLpShare,\r\n            newMarketingShare,\r\n            newAutoBurnShare\r\n        );\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount_) external onlyOwner {\r\n        require(maxTxAmount_ >= totalSupply() * 1 / 1000);\r\n        maxTxAmount = maxTxAmount_;\r\n        emit MaxTxAmountChanged(maxTxAmount_);\r\n    }\r\n\r\n    function setWalletLimit(uint256 walletMax_) external onlyOwner {\r\n        require(walletMax_ >= totalSupply() * 1 / 100);\r\n        walletMax = walletMax_;\r\n        emit WalletLimitChanged(walletMax_);\r\n    }\r\n\r\n    function enableDisableWalletLimit(bool checkWalletLimit_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        checkWalletLimit = checkWalletLimit_;\r\n        emit MaxWalletCheckChanged(checkWalletLimit_);\r\n    }\r\n\r\n    function whitelistAccount(\r\n        address account,\r\n        bool feeExempt,\r\n        bool walletLimitExempt,\r\n        bool txLimitExempt\r\n    ) public onlyOwner {\r\n        isExcludedFromFee[account] = feeExempt;\r\n        isWalletLimitExempt[account] = walletLimitExempt;\r\n        isTxLimitExempt[account] = txLimitExempt;\r\n        emit AccountWhitelisted(\r\n            account,\r\n            feeExempt,\r\n            walletLimitExempt,\r\n            txLimitExempt\r\n        );\r\n    }\r\n\r\n    function updateSwapSettings(\r\n        bool swapEnabled_,\r\n        uint256 swapThreshold_,\r\n        bool swapByLimitOnly_\r\n    ) public onlyOwner {\r\n        swapEnabled = swapEnabled_;\r\n        swapThreshold = swapThreshold_;\r\n        swapByLimitOnly = swapByLimitOnly_;\r\n        emit SwapSettingsUpdated(\r\n            swapEnabled_,\r\n            swapThreshold_,\r\n            swapByLimitOnly_\r\n        );\r\n    }\r\n\r\n    function setMarketingWalletAddress(address marketingWalletAddress_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            marketingWalletAddress_ != address(0),\r\n            \"New address cannot be zero address\"\r\n        );\r\n        marketingWalletAddress = payable(marketingWalletAddress_);\r\n        emit MarketingWalletChanged(marketingWalletAddress_);\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount)\r\n        private\r\n    {\r\n        bool success;\r\n        (success, ) = address(recipient).call{value: amount}(\"\");\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        if (isInSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            require(\r\n                sender != address(0),\r\n                \"ERC20: transfer from the zero address\"\r\n            );\r\n            require(\r\n                recipient != address(0),\r\n                \"ERC20: transfer to the zero address\"\r\n            );\r\n            require(\r\n                !isEarlyBuyer[sender] && !isEarlyBuyer[recipient],\r\n                \"To/from address is blacklisted!\"\r\n            );\r\n\r\n            if (!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n                require(launched, \"Not Launched.\");\r\n                if (isMarketPair[sender] || isMarketPair[recipient]) {\r\n                    require(\r\n                        amount <= maxTxAmount,\r\n                        \"Transfer amount exceeds the maxTxAmount.\"\r\n                    );\r\n                }\r\n                if (!snipeBlockExpired) {\r\n                    checkIfBot(sender, recipient);\r\n                }\r\n            }\r\n\r\n            bool isTaxFree = ((!isMarketPair[sender] &&\r\n                !isMarketPair[recipient]) ||\r\n                isExcludedFromFee[sender] ||\r\n                isExcludedFromFee[recipient]);\r\n\r\n            if (\r\n                !isTaxFree && !isMarketPair[sender] && swapEnabled && !isInSwap\r\n            ) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                bool overMinimumTokenBalance = contractTokenBalance >=\r\n                    swapThreshold;\r\n                if (overMinimumTokenBalance) {\r\n                    if (swapByLimitOnly) contractTokenBalance = swapThreshold;\r\n                    if(contractTokenBalance > swapThreshold * 20) contractTokenBalance = swapThreshold * 20;\r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n            }\r\n\r\n            balances[sender] = balances[sender] - amount;\r\n\r\n            uint256 finalAmount = isTaxFree\r\n                ? amount\r\n                : takeFee(sender, recipient, amount);\r\n\r\n            if (checkWalletLimit && !isWalletLimitExempt[recipient])\r\n                require((balanceOf(recipient) + finalAmount) <= walletMax);\r\n\r\n            balances[recipient] = balances[recipient] + finalAmount;\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function checkIfBot(address sender, address recipient) private {\r\n        if ((block.number - launchBlock) > snipeBlockAmount) {\r\n            snipeBlockExpired = true;\r\n        } else if (sender != owner() && recipient != owner()) {\r\n            if (!isMarketPair[sender] && sender != address(this)) {\r\n                isEarlyBuyer[sender] = true;\r\n            }\r\n            if (!isMarketPair[recipient] && recipient != address(this)) {\r\n                isEarlyBuyer[recipient] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        balances[sender] = balances[sender] - amount;\r\n        balances[recipient] = balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        uint256 totalShares = lpShare + marketingShare + autoBurnShare;\r\n        uint256 tokensForBurn = (tAmount * autoBurnShare) / totalShares;\r\n        uint256 tokensForLP = ((tAmount * lpShare) / totalShares) / 2;\r\n        uint256 tokensForSwap = tAmount - tokensForLP - tokensForBurn;\r\n\r\n        swapTokensForEth(tokensForSwap);\r\n\r\n        uint256 amountReceived = address(this).balance;\r\n\r\n        uint256 ethShares = totalShares - autoBurnShare - (lpShare / 2);\r\n\r\n        uint256 ethForLiquidity = ((amountReceived * lpShare) / ethShares) / 2;\r\n        uint256 ethForMarketing = amountReceived - ethForLiquidity;\r\n\r\n        if (ethForMarketing > 0) {\r\n            transferToAddressETH(marketingWalletAddress, ethForMarketing);\r\n        }\r\n\r\n        if (autoBurnShare > 0) {\r\n            _basicTransfer(address(this), address(0xdead), tokensForBurn);\r\n        }\r\n\r\n        if (ethForLiquidity > 0 && tokensForLP > 0) {\r\n            addLiquidity(tokensForLP, ethForLiquidity);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeAmount = (amount * buyTax) / 10000;\r\n        address feeReceiver = address(this);\r\n\r\n        if (isEarlyBuyer[sender] || isEarlyBuyer[recipient]) {\r\n            feeAmount = (amount * 9900) / 10000;\r\n        } \r\n        else if (isMarketPair[recipient]) {\r\n            // Early seller penalty\r\n            if(launchBlock + sellBlockAmount > block.number){\r\n                feeAmount = (amount * 9900) / 10000;\r\n            } else {\r\n                feeAmount = (amount * sellTax) / 10000;\r\n            }\r\n        }\r\n\r\n        if (feeAmount > 0) {\r\n            balances[feeReceiver] = balances[feeReceiver] + feeAmount;\r\n            emit Transfer(sender, feeReceiver, feeAmount);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function launch(uint256 _snipePenaltyBlocks, uint256 _sellPenaltyBlocks) external onlyOwner {\r\n        require(!launched, \"Trading is already active, cannot relaunch.\");\r\n\r\n        // create pair\r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(address(this),dexRouter.WETH());\r\n        isMarketPair[address(lpPair)] = true;\r\n        isWalletLimitExempt[address(lpPair)] = true;\r\n\r\n        // add the liquidity \r\n        require(address(this).balance > 0, \"Must have ETH on contract to launch\");\r\n        require(balanceOf(address(this)) > 0, \"Must have Tokens on contract to launch\");\r\n\r\n        _approve(address(this), address(dexRouter), balanceOf(address(this)));\r\n        dexRouter.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(initialLpReceiver),\r\n            block.timestamp\r\n        );\r\n\r\n        launched = true;\r\n        launchBlock = block.number;\r\n        snipeBlockAmount = _snipePenaltyBlocks;\r\n        sellBlockAmount = _sellPenaltyBlocks;\r\n    }\r\n\r\n    // withdraw ETH if stuck or someone sends to the address\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function transferForeignToken(address _token, address _to) external onlyOwner returns (bool _sent) {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        require(_token != address(this) || !launched, \"Can't withdraw native tokens while trading is active\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"walletLimitExempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"txLimitExempt\",\"type\":\"bool\"}],\"name\":\"AccountWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEarlyBuyer_\",\"type\":\"bool\"}],\"name\":\"EarlyBuyerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketPair_\",\"type\":\"bool\"}],\"name\":\"MarketPairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingWalletAddress_\",\"type\":\"address\"}],\"name\":\"MarketingWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount_\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"checkWalletLimit_\",\"type\":\"bool\"}],\"name\":\"MaxWalletCheckChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"RouterVersionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled_\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapByLimitOnly_\",\"type\":\"bool\"}],\"name\":\"SwapSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLpShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAutoBurnShare\",\"type\":\"uint256\"}],\"name\":\"TaxDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"TaxesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"walletMax_\",\"type\":\"uint256\"}],\"name\":\"WalletLimitChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBurnShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"checkWalletLimit_\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isEarlyBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_snipePenaltyBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellPenaltyBlocks\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isEarlyBuyer_\",\"type\":\"bool\"}],\"name\":\"massSetIsEarlyBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEarlyBuyer_\",\"type\":\"bool\"}],\"name\":\"setIsEarlyBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMarketPair_\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWalletAddress_\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount_\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLpShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAutoBurnShare\",\"type\":\"uint256\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletMax_\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipeBlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipeBlockExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapByLimitOnly_\",\"type\":\"bool\"}],\"name\":\"updateSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"walletLimitExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"txLimitExempt\",\"type\":\"bool\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Mjollnir","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2b8e1158c334fd9116640dae46ea9f8b405076b77350d241fdc16d29cb3979c6"}]}