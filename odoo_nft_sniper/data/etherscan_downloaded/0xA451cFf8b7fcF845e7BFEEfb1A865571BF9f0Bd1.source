{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2022-07-26\r\n*/\r\n\r\n// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File contracts/NFTCreator/interfaces/INFTCreatorFactory.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface INFTCreatorFactory {\r\n    event TokenDeployed(address indexed _token, bool _isERC1155, bool _is2FA);\r\n\r\n    function deploy721(\r\n        bool _is2FA,\r\n        uint96 _royalty,\r\n        address _minter,\r\n        uint256 _maxSupply,\r\n        string memory _uri,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) external returns (address);\r\n\r\n    function deploy1155(\r\n        bool _is2FA,\r\n        uint96 _royalty,\r\n        address _minter,\r\n        uint256 _maxSupply,\r\n        string memory _uri\r\n    ) external returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/Proxy.sol@v4.7.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overridden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/NFTCreator/tokens/NFTFairTokenProxy.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract NFTFairTokenProxy is Proxy {\r\n    address private _impl;\r\n\r\n    constructor(address _tokenImpl, bytes memory _data) {\r\n        (bool success, ) = _tokenImpl.delegatecall(_data);\r\n        require(success, \"Token initialization failed\");\r\n        _impl = _tokenImpl;\r\n    }\r\n\r\n    function _implementation() internal view override returns (address) {\r\n        return _impl;\r\n    }\r\n\r\n    function implementation() external view returns (address) {\r\n        return _impl;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFTCreator/NFTCreatorFactory.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract NFTCreatorFactory is INFTCreatorFactory, Ownable {\r\n    enum TokenType {\r\n        ERC1155,\r\n        ERC721\r\n    }\r\n\r\n    mapping(TokenType => mapping(bool => address)) public implementations;\r\n\r\n    event ImplSet(TokenType tokenType, bool is2FA, address impl);\r\n\r\n    function deploy721(\r\n        bool _is2FA,\r\n        uint96 _royalty,\r\n        address _minter,\r\n        uint256 _maxSupply,\r\n        string memory _uri,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) external override returns (address) {\r\n        address impl = implementations[TokenType.ERC721][_is2FA];\r\n        require(impl != address(0), \"NFTCreator: Token impl not configured\");\r\n        bytes memory constructorArgs = abi.encode(_royalty, msg.sender, _minter, _maxSupply, _name, _symbol, _uri);\r\n        return _deploy(impl, false, _is2FA, constructorArgs);\r\n    }\r\n\r\n    function deploy1155(\r\n        bool _is2FA,\r\n        uint96 _royalty,\r\n        address _minter,\r\n        uint256 _maxSupply,\r\n        string memory _uri\r\n    ) external override returns (address) {\r\n        address impl = implementations[TokenType.ERC1155][_is2FA];\r\n        require(impl != address(0), \"NFTCreator: Token impl not configured\");\r\n        bytes memory constructorArgs = abi.encode(_royalty, msg.sender, _minter, _maxSupply, _uri);\r\n        return _deploy(impl, true, _is2FA, constructorArgs);\r\n    }\r\n\r\n    // === RESTRICTED ===\r\n    function setImplementation(\r\n        TokenType tokenType,\r\n        bool is2FA,\r\n        address impl\r\n    ) external onlyOwner {\r\n        implementations[tokenType][is2FA] = impl;\r\n        emit ImplSet(tokenType, is2FA, impl);\r\n    }\r\n\r\n    // === INTERNAL ===\r\n    function _deploy(\r\n        address impl,\r\n        bool isERC1155,\r\n        bool is2FA,\r\n        bytes memory data\r\n    ) private returns (address) {\r\n        address token;\r\n        bytes memory initData = _generateInitData(isERC1155, data);\r\n        bytes memory paramData = abi.encode(impl, initData);\r\n        bytes memory bytecode = abi.encodePacked(type(NFTFairTokenProxy).creationCode, paramData);\r\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, data));\r\n        assembly {\r\n            token := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(token != address(0), \"NFTCreator: Token creation failed\");\r\n        emit TokenDeployed(token, isERC1155, is2FA);\r\n        return token;\r\n    }\r\n\r\n    function _generateInitData(bool isERC1155, bytes memory data) private pure returns (bytes memory res) {\r\n        bytes4 selector;\r\n        if (isERC1155) {\r\n            selector = 0xca6b4cf4;\r\n        } else {\r\n            selector = 0x2158707b;\r\n        }\r\n        res = abi.encodePacked(selector, data);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum NFTCreatorFactory.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"is2FA\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"ImplSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isERC1155\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_is2FA\",\"type\":\"bool\"}],\"name\":\"TokenDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is2FA\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"_royalty\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"deploy1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is2FA\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"_royalty\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"deploy721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTCreatorFactory.TokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTCreatorFactory.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"is2FA\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTCreatorFactory","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://14a42e7f6d7307e13f0cb3b973648b48c7224101f79cde37f3489410bd8475a2"}]}