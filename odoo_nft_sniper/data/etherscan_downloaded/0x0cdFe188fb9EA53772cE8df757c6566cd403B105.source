{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-01-18\r\n*/\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the erc token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERCMint20 is IERC20{\r\n\tfunction farm(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.24 <=0.7.6;\r\n\r\ncontract Initializable {\r\n\r\n  bool private initialized;\r\n\r\n  bool private initializing;\r\n\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  function isConstructor() private view returns (bool) {\r\n    \r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ncontract Context is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IWETHelper {\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract WETHelper {\r\n    receive() external payable {\r\n    }\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, '!WETHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n    function withdraw(address _eth, address _to, uint256 _amount) public {\r\n        IWETHelper(_eth).withdraw(_amount);\r\n        safeTransferETH(_to, _amount);\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract WebPayFarm is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n\t\tuint256 lockType;\r\n\t\tuint256 lockToBlockNumber;\r\n\t\tuint256 lockToTimestamp;\r\n    }\r\n\t\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;       // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHIs to distribute per block.\r\n        uint256 amount;           // User deposit amount\r\n        uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\r\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\r\n    }\r\n\r\n    address public constant ETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // The SUSHI TOKEN!\r\n    IERCMint20 public sushi;\r\n    // Dev address.\r\n    address public devaddr;\r\n    address public treasureaddr;\r\n\t\r\n    // SUSHI tokens created per block.\r\n    uint256 public sushiPerBlock;\r\n    // Halving blocks;\r\n    uint256 public blocksHalving;\r\n    address[] private alluses;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n\t\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when SUSHI mining starts.\r\n    uint256 public startBlock;\r\n    // Block number when bonus SUSHI period ends.\r\n    uint256 public bonusEndBlock;\r\n\tuint256 public tax = 0;\r\n\tuint256 blocksPerDay = 9600;\r\n\tbool farmStarted = false;\r\n\t\r\n    // Bonus muliplier for early sushi makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 2;\r\n    // ETH Helper for the transfer, stateless.\r\n    WETHelper public wethelper;\r\n\t\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 liquidity);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Mint(address indexed user, uint256 amount);\r\n    \r\n    function initialize(\r\n        IERCMint20 _sushi,\r\n        address _devaddr\r\n    ) public initializer {\r\n        Ownable.__Ownable_init();\r\n        sushi = _sushi;\r\n        devaddr = _devaddr;\r\n        treasureaddr = _devaddr;\r\n\t\tsushiPerBlock = 0;\r\n        wethelper = new WETHelper();\r\n    }\r\n    \r\n    function startFarming(uint256 _sushiPerBlock) public{\r\n\t\trequire(msg.sender == owner() || msg.sender == devaddr, \"!dev addr\");\r\n\t\trequire(farmStarted == false);\r\n\t\tfarmStarted = true;\r\n        sushiPerBlock = _sushiPerBlock;\r\n        startBlock = block.number;\r\n        bonusEndBlock = startBlock + blocksPerDay * 30;\r\n    }\r\n\t\r\n    receive() external payable {\r\n        assert(msg.sender == ETH);\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public {\r\n        require(msg.sender == owner() || msg.sender == devaddr, \"!dev addr\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        \r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            amount: 0,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accSushiPerShare: 0\r\n        }));\r\n\r\n    }\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public {\r\n        require(msg.sender == owner() || msg.sender == devaddr, \"!dev addr\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\t\r\n\tfunction setTax(uint256 _tax) public {\r\n\t    require(msg.sender == owner() || msg.sender == devaddr, \"!dev addr\");\r\n\t    tax = _tax;\r\n\t}\r\n\tfunction setSushiPerBlock(uint256 _sushiPerBlock) public {\r\n\t    require(msg.sender == owner() || msg.sender == devaddr, \"!dev addr\");\r\n\t    sushiPerBlock = _sushiPerBlock;\r\n\t}\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n\t\tif(_from < startBlock){\r\n\t\t\t_from = startBlock;\r\n\t\t}\r\n\t\tif(_to < _from){\r\n\t\t\t_to = _from;\r\n\t\t}\r\n\t\tif (_to <= bonusEndBlock) {\r\n\t\t    return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n\t\t} else if (_from >= bonusEndBlock) {\r\n\t\t    return _to.sub(_from);\r\n\t\t} else {\r\n\t\t    return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(_to.sub(bonusEndBlock));\r\n\t\t}\r\n    }\r\n\r\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSushiPerShare = pool.accSushiPerShare;\r\n        uint256 lpSupply = pool.amount;\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accSushiPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    function newUser(address _newUser) internal{\r\n        bool exist = false;\r\n        for(uint i = 0;i<alluses.length;i++){\r\n            address addr = alluses[i];\r\n            if(address(addr) == address(_newUser)){\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n        if(exist == false){\r\n            alluses.push(address(msg.sender));\r\n        }\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        if (block.number >= bonusEndBlock) {\r\n            bonusEndBlock = bonusEndBlock + blocksHalving;\r\n            sushiPerBlock = sushiPerBlock.div(2);\r\n        }\r\n        uint256 lpSupply = pool.amount;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        \r\n        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n    \r\n    function deposit(uint256 _pid, uint256 _amount,uint256 lockIndex) public payable {\r\n        require(lockIndex<=4,\"lockindex\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        newUser(msg.sender);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n\t\t\t\tpending = pending.mul([0,30,50,75,100][user.lockType]).div(1000).add(pending);\r\n                safeSushiTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n        \r\n        if (address(pool.lpToken) == ETH) {\r\n            if(_amount > 0) {\r\n                TransferHelper.safeTransferFrom(address(pool.lpToken),address(msg.sender), address(this), _amount);\r\n            }\r\n            if (msg.value > 0) {\r\n                IWETH(ETH).deposit{value: msg.value}();\r\n                _amount = _amount.add(msg.value);\r\n            }\r\n        } else if(_amount > 0) {\r\n            TransferHelper.safeTransferFrom(address(pool.lpToken),address(msg.sender), address(this), _amount);\r\n        }\r\n\r\n        if(_amount > 0) {\r\n            uint256 newTo = block.number + [0,7,15,30,90][lockIndex] * blocksPerDay;\r\n\t\t\tuser.lockToBlockNumber = newTo>user.lockToBlockNumber?newTo:user.lockToBlockNumber;\r\n\t\t\tuint256 newToTimestamp = getBlockTimestamp().add([0,7 days,15 days,30 days,90 days][lockIndex]);\r\n\t\t\tuser.lockToTimestamp = newToTimestamp>user.lockToTimestamp?newToTimestamp:user.lockToTimestamp;\r\n\t\t\tuser.lockType = user.lockType>lockIndex?user.lockType:lockIndex;\r\n        }\r\n\r\n        if(_amount > 0) {\r\n            pool.amount = pool.amount.add(_amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount, 0);\r\n        \r\n    }\r\n    \r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\t\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n\t\trequire(user.lockToTimestamp < getBlockTimestamp(), \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\r\n        \r\n        if(pending > 0) {\r\n\t\t\tpending = pending.add(pending.mul([0,30,50,75,100][user.lockType]).div(1000));\r\n            safeSushiTransfer(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.amount = pool.amount.sub(_amount);\r\n\t\t\tif (address(pool.lpToken) == ETH) {\r\n                TransferHelper.safeTransfer(ETH, address(wethelper), _amount);\r\n\t\t\t\tif(tax>0)wethelper.withdraw(ETH, address(treasureaddr), _amount * tax / 100);\r\n\t\t        wethelper.withdraw(ETH, address(msg.sender), _amount - _amount * tax / 100);\r\n\t\t\t} else {\r\n\t\t\t    if(tax>0)TransferHelper.safeTransfer(address(pool.lpToken),address(treasureaddr), _amount * tax / 100);\r\n\t\t\t\tTransferHelper.safeTransfer(address(pool.lpToken),address(msg.sender), _amount - _amount * tax / 100);\r\n\t\t\t}\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n        \r\n    }\r\n\t\r\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\r\n        sushi.farm(address(this), _amount);\r\n        sushi.transfer(_to,_amount);\r\n        emit Mint(_to,_amount);\r\n    }\r\n\t\r\n\tfunction endFarm(uint256 _pid) public{\r\n\t\trequire(msg.sender == owner() || msg.sender == devaddr, \"!dev addr\");\r\n\t\tfor(uint i = 0;i<alluses.length;i++){\r\n\t\t    address addr = alluses[i];\r\n\t\t    PoolInfo storage pool = poolInfo[_pid];\r\n\t\t    UserInfo storage user = userInfo[_pid][addr];\r\n\t\t\tif(user.amount==0)continue;\r\n\t\t    uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\r\n\t\t    if(pending > 0) {\r\n\t\t\t\tpending = pending.mul([0,30,50,75,100][user.lockType]).div(1000).add(pending);\r\n\t\t        safeSushiTransfer(addr, pending);\r\n\t\t    }\r\n\t\t\tuint256 _amount = user.amount;\r\n\t\t\t_amount = safeAmount(_pid,_amount);\r\n\t\t    if(_amount > 0) {\r\n\t\t        user.amount = user.amount.sub(_amount);\r\n\t\t        pool.amount = pool.amount.sub(_amount);\r\n                if(tax>0)TransferHelper.safeTransfer(address(pool.lpToken),address(treasureaddr),_amount.mul(tax).div(100));\r\n                TransferHelper.safeTransfer(address(pool.lpToken),address(addr),_amount.sub(_amount.mul(tax).div(100)));\r\n                user.lockType = 0;\r\n                user.lockToBlockNumber = 0;\r\n                user.lockToTimestamp = 0;\r\n            }\r\n\t\t}\r\n\t}\r\n    \r\n\tfunction safeAmount(uint256 _pid,uint256 _amount) internal view returns(uint256){\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tuint256 poolBalance = pool.lpToken.balanceOf(address(this));\r\n\t\treturn _amount<=poolBalance?_amount:poolBalance;\r\n\t}\r\n    \r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n\tfunction getBlockTimestamp() internal view returns (uint) {\r\n\t    return block.timestamp;\r\n\t}\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksHalving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"endFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERCMint20\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"}],\"name\":\"setSushiPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"}],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERCMint20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasureaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockToBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockToTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethelper\",\"outputs\":[{\"internalType\":\"contract WETHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WebPayFarm","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8ad4e872b6efcb2d5d2fb3b47f5643ce395d859e656ff6f3be101c3ce0a4d419"}]}