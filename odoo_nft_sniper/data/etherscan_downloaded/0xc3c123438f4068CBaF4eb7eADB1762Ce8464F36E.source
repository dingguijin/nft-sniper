{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC2362.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.5.0 \\u003c0.9.0;\\n\\n/**\\n* @dev EIP2362 Interface for pull oracles\\n* https://github.com/adoracles/EIPs/blob/erc-2362/EIPS/eip-2362.md\\n*/\\ninterface IERC2362\\n{\\n\\t/**\\n\\t * @dev Exposed function pertaining to EIP standards\\n\\t * @param _id bytes32 ID of the query\\n\\t * @return int,uint,uint returns the value, timestamp, and status code of query\\n\\t */\\n\\tfunction valueFor(bytes32 _id) external view returns(int256,uint256,uint256);\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"IWc3Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IWc3Decorator.sol\\\";\\r\\n\\r\\n/// @title Witty Creatures 3.0 Token only-owner interface.\\r\\n/// @author Otherplane Labs, 2022.\\r\\ninterface IWc3Admin {\\r\\n\\r\\n    /// Sets Opensea-compliant Decorator contract\\r\\n    function setDecorator(\\r\\n        IWc3Decorator\\r\\n    ) external;\\r\\n\\r\\n    /// Set estimated gas units required for minting one single token.\\r\\n    /// @param _estimatedGasLimit Estimated gas units.\\r\\n    function setMintGasOverhead(\\r\\n        uint256 _estimatedGasLimit\\r\\n    ) external;\\r\\n\\r\\n    /// Change batch parameters. Only possible while in \\u0027Batching\\u0027 status.\\r\\n    /// @param _expirationBlocks Number of blocks after Witnet randomness is generated, during which creatures may get minted.\\r\\n    /// @param _totalEggs Max number of tokens that may eventually get minted.\\r\\n    /// @param _percentileMarks Creature-category ordered percentile marks (Legendary first).    \\r\\n    function setSettings(\\r\\n        uint256 _expirationBlocks,\\r\\n        uint256 _totalEggs,\\r\\n        uint8[] calldata _percentileMarks\\r\\n    ) external;\\r\\n\\r\\n    /// Sets Externally Owned Account that is authorized to sign tokens\\u0027 intrinsics before getting minted.\\r\\n    /// @param _signator Externally-owned account to be authorized\\r\\n    function setSignator(address _signator) external;\\r\\n\\r\\n    /// Starts hatching, which means: (a) game settings cannot be altered anymore, (b) a \\r\\n    /// random number will be requested to the Witnet Decentralized Oracle Network, and (c)\\r\\n    /// the contract will automatically turn to the \\u0027Hatching\\u0027 status as soon as the randomness\\r\\n    /// gets solved by the Witnet oracle. While the randomness request gets solved, the contract will \\r\\n    /// remain in \\u0027Randomizing\\u0027 status.\\r\\n    function startHatching() external payable;\\r\\n}\\r\\n\"},\"IWc3Decorator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Wc3Lib.sol\\\";\\r\\n\\r\\n/// @title Witty Creatures 3.0 Decorating interface.\\r\\n/// @author Otherplane Labs, 2022.\\r\\ninterface IWc3Decorator {\\r\\n    function baseURI() external view returns (string memory);\\r\\n    function forged() external view returns (bool);\\r\\n    function guildId() external view returns (uint256);\\r\\n    function randomTraits(bytes32, uint256) external view returns (Wc3Lib.WittyCreatureTraits memory);\\r\\n    function toJSON(bytes32, Wc3Lib.WittyCreature memory) external view returns (string memory);\\r\\n    function version() external view returns (string memory);\\r\\n}\\r\\n\"},\"IWc3Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Witty Creatures 3.0 Token events.\\r\\n/// @author Otherplane Labs, 2022.\\r\\ninterface IWc3Events {\\r\\n    event Decorator(address decorator);\\r\\n    event MintGasOverhead(uint256 gas);\\r\\n    event Settings(uint256 expirationBlocks, uint256 totalEggs, uint8[] percentileMarks);    \\r\\n    event Signator(address signator);\\r\\n}\\r\\n\"},\"IWc3Surrogates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Witty Creatures 3.0 Token surrogating interface.\\r\\n/// @author Otherplane Labs, 2022.\\r\\ninterface IWc3Surrogates {\\r\\n    function mint(\\r\\n        address _tokenOwner,\\r\\n        string calldata _name,\\r\\n        uint256 _globalRanking,\\r\\n        uint256 _guildId,\\r\\n        uint256 _guildPlayers,\\r\\n        uint256 _guildRanking,\\r\\n        uint256 _index,\\r\\n        uint256 _score,\\r\\n        bytes calldata _signature\\r\\n    ) external;\\r\\n}\\r\\n\"},\"IWc3View.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IWitnetPriceRouter.sol\\\";\\r\\nimport \\\"./IWc3Decorator.sol\\\";\\r\\n\\r\\n/// @title Witty Creatures 3.0 Token viewing interface.\\r\\n/// @author Otherplane Labs, 2022.\\r\\ninterface IWc3View {\\r\\n    function decorator() external view returns (IWc3Decorator);\\r\\n    function guildId() external view returns (uint256);\\r\\n    function randomizer() external view returns (IWitnetRandomness);\\r\\n    function router() external view returns (IWitnetPriceRouter);\\r\\n    function signator() external view returns (address);\\r\\n    \\r\\n    function getHatchingBlock() external view returns (uint256);\\r\\n    function getHatchingRandomness() external view returns (bytes32);\\r\\n    function getMintGasOverhead() external view returns (uint256);\\r\\n    function getSettings() external view returns (Wc3Lib.Settings memory);    \\r\\n    function getStatus() external view returns (Wc3Lib.Status);\\r\\n    function getStatusString() external view returns (string memory);\\r\\n    function getTokenIntrinsics(uint256 _tokenId) external view returns (Wc3Lib.WittyCreature memory);\\r\\n    function getTokenRandomTraits(uint256 _tokenId) external view returns (Wc3Lib.WittyCreatureTraits memory);\\r\\n    function getTokenStatus(uint256 _tokenId) external view returns (Wc3Lib.WittyCreatureStatus);\\r\\n    function getTokenStatusString(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function preview(\\r\\n        string calldata _name,\\r\\n        uint256 _globalRanking,\\r\\n        uint256 _guildId,\\r\\n        uint256 _guildPlayers,\\r\\n        uint256 _guildRanking,\\r\\n        uint256 _index,\\r\\n        uint256 _score\\r\\n    ) external view returns (string memory);\\r\\n    \\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function usdPriceAssetId() external view returns (bytes32);\\r\\n    function usdPriceCaption() external view returns (string memory);\\r\\n    function version() external view returns (string memory);\\r\\n}\\r\\n\"},\"IWitnetPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title The Witnet Price Feed basic interface.\\r\\n/// @dev Guides implementation of active price feed polling contracts.\\r\\n/// @author The Witnet Foundation.\\r\\n\\r\\ninterface IWitnetPriceFeed {\\r\\n\\r\\n    /// Signals that a new price update request is being posted to the Witnet Request Board\\r\\n    event PriceFeeding(address indexed from, uint256 queryId, uint256 extraFee);\\r\\n\\r\\n    /// Estimates minimum fee amount in native currency to be paid when \\r\\n    /// requesting a new price update.\\r\\n    /// @dev Actual fee depends on the gas price of the `requestUpdate()` transaction.\\r\\n    /// @param _gasPrice Gas price expected to be paid when calling `requestUpdate()`\\r\\n    function estimateUpdateFee(uint256 _gasPrice) external view returns (uint256);\\r\\n\\r\\n    /// Returns result of the last valid price update request successfully solved by the Witnet oracle.\\r\\n    function lastPrice() external view returns (int256);\\r\\n\\r\\n    /// Returns the EVM-timestamp when last valid price was reported back from the Witnet oracle.\\r\\n    function lastTimestamp() external view returns (uint256);    \\r\\n\\r\\n    /// Returns tuple containing last valid price and timestamp, as well as status code of latest update\\r\\n    /// request that got posted to the Witnet Request Board.\\r\\n    /// @return _lastPrice Last valid price reported back from the Witnet oracle.\\r\\n    /// @return _lastTimestamp EVM-timestamp of the last valid price.\\r\\n    /// @return _lastDrTxHash Hash of the Witnet Data Request that solved the last valid price.\\r\\n    /// @return _latestUpdateStatus Status code of the latest update request.\\r\\n    function lastValue() external view returns (\\r\\n        int _lastPrice,\\r\\n        uint _lastTimestamp,\\r\\n        bytes32 _lastDrTxHash,\\r\\n        uint _latestUpdateStatus\\r\\n    );\\r\\n\\r\\n    /// Returns identifier of the latest update request posted to the Witnet Request Board.\\r\\n    function latestQueryId() external view returns (uint256);\\r\\n\\r\\n    /// Returns hash of the Witnet Data Request that solved the latest update request.\\r\\n    /// @dev Returning 0 while the latest update request remains unsolved.\\r\\n    function latestUpdateDrTxHash() external view returns (bytes32);\\r\\n\\r\\n    /// Returns error message of latest update request posted to the Witnet Request Board.\\r\\n    /// @dev Returning empty string if the latest update request remains unsolved, or\\r\\n    /// @dev if it was succesfully solved with no errors.\\r\\n    function latestUpdateErrorMessage() external view returns (string memory);\\r\\n\\r\\n    /// Returns status code of latest update request posted to the Witnet Request Board:\\r\\n    /// @dev Status codes:\\r\\n    /// @dev   - 200: update request was succesfully solved with no errors\\r\\n    /// @dev   - 400: update request was solved with errors\\r\\n    /// @dev   - 404: update request was not solved yet \\r\\n    function latestUpdateStatus() external view returns (uint256);\\r\\n\\r\\n    /// Returns `true` if latest update request posted to the Witnet Request Board \\r\\n    /// has not been solved yet by the Witnet oracle.\\r\\n    function pendingUpdate() external view returns (bool);\\r\\n\\r\\n    /// Posts a new price update request to the Witnet Request Board. Requires payment of a fee\\r\\n    /// that depends on the value of `tx.gasprice`. See `estimateUpdateFee(uint256)`.\\r\\n    /// @dev If previous update request was not solved yet, calling this method again allows\\r\\n    /// @dev upgrading the update fee if called with a higher `tx.gasprice` value.\\r\\n    function requestUpdate() external payable;\\r\\n\\r\\n    /// Tells whether this contract implements the interface defined by `interfaceId`. \\r\\n    /// @dev See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n    /// @dev to learn more about how these ids are created.\\r\\n    function supportsInterface(bytes4) external view returns (bool);\\r\\n}\\r\\n\"},\"IWitnetPriceRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC2362.sol\\\";\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/// @title The Witnet Price Router basic interface.\\r\\n/// @dev Guides implementation of price feeds aggregation contracts.\\r\\n/// @author The Witnet Foundation.\\r\\nabstract contract IWitnetPriceRouter\\r\\n    is\\r\\n        IERC2362 \\r\\n{\\r\\n    /// Emitted everytime a currency pair is attached to a new price feed contract\\r\\n    /// @dev See https://github.com/adoracles/ADOIPs/blob/main/adoip-0010.md \\r\\n    /// @dev to learn how these ids are created.\\r\\n    event CurrencyPairSet(bytes32 indexed erc2362ID, IERC165 pricefeed);\\r\\n\\r\\n    /// Helper pure function: returns hash of the provided ERC2362-compliant currency pair caption (aka ID).\\r\\n    function currencyPairId(string memory) external pure virtual returns (bytes32);\\r\\n\\r\\n    /// Returns the ERC-165-compliant price feed contract currently serving \\r\\n    /// updates on the given currency pair.\\r\\n    function getPriceFeed(bytes32 _erc2362id) external view virtual returns (IERC165);\\r\\n\\r\\n    /// Returns human-readable ERC2362-based caption of the currency pair being\\r\\n    /// served by the given price feed contract address. \\r\\n    /// @dev Should fail if the given price feed contract address is not currently\\r\\n    /// @dev registered in the router.\\r\\n    function getPriceFeedCaption(IERC165) external view virtual returns (string memory);\\r\\n\\r\\n    /// Returns human-readable caption of the ERC2362-based currency pair identifier, if known.\\r\\n    function lookupERC2362ID(bytes32 _erc2362id) external view virtual returns (string memory);\\r\\n\\r\\n    /// Register a price feed contract that will serve updates for the given currency pair.\\r\\n    /// @dev Setting zero address to a currency pair implies that it will not be served any longer.\\r\\n    /// @dev Otherwise, should fail if the price feed contract does not support the `IWitnetPriceFeed` interface,\\r\\n    /// @dev or if given price feed is already serving another currency pair (within this WitnetPriceRouter instance).\\r\\n    function setPriceFeed(\\r\\n            IERC165 _pricefeed,\\r\\n            uint256 _decimals,\\r\\n            string calldata _base,\\r\\n            string calldata _quote\\r\\n        )\\r\\n        external virtual;\\r\\n\\r\\n    /// Returns list of known currency pairs IDs.\\r\\n    function supportedCurrencyPairs() external view virtual returns (bytes32[] memory);\\r\\n\\r\\n    /// Returns `true` if given pair is currently being served by a compliant price feed contract.\\r\\n    function supportsCurrencyPair(bytes32 _erc2362id) external view virtual returns (bool);\\r\\n\\r\\n    /// Returns `true` if given price feed contract is currently serving updates to any known currency pair. \\r\\n    function supportsPriceFeed(IERC165 _priceFeed) external view virtual returns (bool);\\r\\n}\\r\\n\"},\"IWitnetRandomness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\nimport \\\"./Witnet.sol\\\";\\r\\n\\r\\n/// @title The Witnet Randomness generator interface.\\r\\n/// @author Witnet Foundation.\\r\\ninterface IWitnetRandomness {\\r\\n\\r\\n    /// Thrown every time a new WitnetRandomnessRequest gets succesfully posted to the WitnetRequestBoard.\\r\\n    /// @param from Address from which the randomize() function was called. \\r\\n    /// @param prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\\r\\n    /// @param witnetQueryId Unique query id assigned to this request by the WRB.\\r\\n    /// @param witnetRequestHash SHA-256 hash of the WitnetRandomnessRequest actual bytecode just posted to the WRB.\\r\\n    event Randomized(\\r\\n        address indexed from,\\r\\n        uint256 indexed prevBlock,\\r\\n        uint256 witnetQueryId,\\r\\n        bytes32 witnetRequestHash\\r\\n    );\\r\\n\\r\\n    /// Returns amount of wei required to be paid as a fee when requesting randomization with a \\r\\n    /// transaction gas price as the one given.\\r\\n    function estimateRandomizeFee(uint256 _gasPrice) external view returns (uint256);\\r\\n\\r\\n    /// Retrieves data of a randomization request that got successfully posted to the WRB within a given block.\\r\\n    /// @dev Returns zero values if no randomness request was actually posted within a given block.\\r\\n    /// @param _block Block number whose randomness request is being queried for.\\r\\n    /// @return _from Address from which the latest randomness request was posted.\\r\\n    /// @return _id Unique request identifier as provided by the WRB.\\r\\n    /// @return _prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\\r\\n    /// @return _nextBlock Block number in which a randomness request got posted just after this one, 0 if none.\\r\\n    function getRandomizeData(uint256 _block)\\r\\n        external view returns (address _from, uint256 _id, uint256 _prevBlock, uint256 _nextBlock);\\r\\n\\r\\n    /// Retrieves the randomness generated upon solving a request that was posted within a given block,\\r\\n    /// if any, or to the _first_ request posted after that block, otherwise. Should the intended \\r\\n    /// request happen to be finalized with errors on the Witnet oracle network side, this function \\r\\n    /// will recursively try to return randomness from the next non-faulty randomization request found \\r\\n    /// in storage, if any. \\r\\n    /// @dev Fails if:\\r\\n    /// @dev   i.   no `randomize()` was not called in either the given block, or afterwards.\\r\\n    /// @dev   ii.  a request posted in/after given block does exist, but no result has been provided yet.\\r\\n    /// @dev   iii. all requests in/after the given block were solved with errors.\\r\\n    /// @param _block Block number from which the search will start.\\r\\n    function getRandomnessAfter(uint256 _block) external view returns (bytes32); \\r\\n\\r\\n    /// Tells what is the number of the next block in which a randomization request was posted after the given one. \\r\\n    /// @param _block Block number from which the search will start.\\r\\n    /// @return Number of the first block found after the given one, or `0` otherwise.\\r\\n    function getRandomnessNextBlock(uint256 _block) external view returns (uint256); \\r\\n\\r\\n    /// Gets previous block in which a randomness request was posted before the given one.\\r\\n    /// @param _block Block number from which the search will start.\\r\\n    /// @return First block found before the given one, or `0` otherwise.\\r\\n    function getRandomnessPrevBlock(uint256 _block) external view returns (uint256);\\r\\n\\r\\n    /// Returns `true` only when the randomness request that got posted within given block was already\\r\\n    /// reported back from the Witnet oracle, either successfully or with an error of any kind.\\r\\n    function isRandomized(uint256 _block) external view returns (bool);\\r\\n\\r\\n    /// Returns latest block in which a randomness request got sucessfully posted to the WRB.\\r\\n    function latestRandomizeBlock() external view returns (uint256);\\r\\n\\r\\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \\r\\n    /// the given `_nonce` value and the randomness returned by `getRandomnessAfter(_block)`. \\r\\n    /// @dev Fails under same conditions as `getRandomnessAfter(uint256)` may do.\\r\\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\\r\\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\\r\\n    /// @param _block Block number from which the search will start.\\r\\n    function random(uint32 _range, uint256 _nonce, uint256 _block) external view returns (uint32);\\r\\n\\r\\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \\r\\n    /// the given `_nonce` value and the given `_seed` as a source of entropy.\\r\\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\\r\\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\\r\\n    /// @param _seed Seed value used as entropy source.\\r\\n    function random(uint32 _range, uint256 _nonce, bytes32 _seed) external pure returns (uint32);\\r\\n\\r\\n    /// Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. \\r\\n    /// Only one randomness request per block will be actually posted to the WRB. Should there \\r\\n    /// already be a posted request within current block, it will try to upgrade Witnet fee of current\\u0027s \\r\\n    /// block randomness request according to current gas price. In both cases, all unused funds shall \\r\\n    /// be transfered back to the tx sender.\\r\\n    /// @return _usedFunds Amount of funds actually used from those provided by the tx sender.\\r\\n    function randomize() external payable returns (uint256 _usedFunds);\\r\\n\\r\\n    /// Increases Witnet fee related to a pending-to-be-solved randomness request, as much as it\\r\\n    /// may be required in proportion to how much bigger the current tx gas price is with respect the \\r\\n    /// highest gas price that was paid in either previous fee upgrades, or when the given randomness \\r\\n    /// request was posted. All unused funds shall be transferred back to the tx sender.\\r\\n    /// @return _usedFunds Amount of dunds actually used from those provided by the tx sender.\\r\\n    function upgradeRandomizeFee(uint256 _block) external payable returns (uint256 _usedFunds);\\r\\n}\\r\\n\"},\"IWitnetRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\n/// @title The Witnet Data Request basic interface.\\r\\n/// @author The Witnet Foundation.\\r\\ninterface IWitnetRequest {\\r\\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \\r\\n    /// a well-formed Witnet Data Request using Protocol Buffers.\\r\\n    function bytecode() external view returns (bytes memory);\\r\\n\\r\\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\\r\\n    function hash() external view returns (bytes32);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"Wc3Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IWitnetRandomness.sol\\\";\\r\\n\\r\\n/// @title Wc3Lib Library: data model and helper functions\\r\\n/// @author Otherplane Labs, 2022.\\r\\nlibrary Wc3Lib {\\r\\n\\r\\n    struct Storage {\\r\\n        address decorator;\\r\\n        address signator;\\r\\n        Settings settings;\\r\\n\\r\\n        uint256 mintGasOverhead;\\r\\n        uint256 hatchingBlock;\\r\\n        uint256 totalSupply;\\r\\n\\r\\n        mapping (/* tokenId =\\u003e WittyCreature */ uint256 =\\u003e WittyCreature) intrinsics;\\r\\n    }\\r\\n\\r\\n    struct Settings {        \\r\\n        uint256 expirationBlocks;\\r\\n        uint256 totalEggs;\\r\\n        uint8[] percentileMarks;\\r\\n    }\\r\\n\\r\\n    enum Status {\\r\\n        Batching,\\r\\n        Randomizing,\\r\\n        Hatching,\\r\\n        Frozen\\r\\n    }\\r\\n\\r\\n    struct WittyCreature {\\r\\n        string  eggName;\\r\\n        uint256 eggGlobalRanking;\\r\\n        uint256 eggGuildRanking; /// @dev same as tokenId\\r\\n        uint256 eggIndex;\\r\\n        WittyCreatureRarity eggRarity;\\r\\n        uint256 eggScore;\\r\\n        uint256 mintBlock;\\r\\n        uint256 mintGas;\\r\\n        uint256 mintGasPrice;\\r\\n        uint256 mintTimestamp;\\r\\n        uint256 mintUsdCost6;\\r\\n        bytes32 mintUsdPriceWitnetProof;\\r\\n    }\\r\\n\\r\\n    struct WittyCreatureTraits {\\r\\n        uint8 background;\\r\\n        uint8 eyes;\\r\\n        uint8 head;\\r\\n        uint8 mouth;\\r\\n        uint8 object;\\r\\n        uint8 outfit;  \\r\\n    }\\r\\n\\r\\n    enum WittyCreatureRarity {\\r\\n        Legendary,  // 0\\r\\n        Rare,       // 1\\r\\n        Common      // 2\\r\\n    }\\r\\n\\r\\n    enum WittyCreatureStatus {\\r\\n        Void,        // 0\\r\\n        Incubating,  // 1\\r\\n        Randomizing, // 2\\r\\n        Hatching,    // 3\\r\\n        Minted,      // 4\\r\\n        Frozen       // 5\\r\\n    }\\r\\n\\r\\n    // Calculate length of string-equivalent to given bytes32.\\r\\n    function length(bytes32 _bytes32)\\r\\n        internal pure\\r\\n        returns (uint _length)\\r\\n    {\\r\\n        for (; _length \\u003c 32; _length ++) {\\r\\n            if (_bytes32[_length] == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Generates pseudo-random number uniformly distributed in range [0 .. _range).\\r\\n    function randomUint8(bytes32 _seed, uint256 _index, uint _range)\\r\\n        internal pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        assert(_range \\u003e 0 \\u0026\\u0026 _range \\u003c= 256);\\r\\n        uint8 _flagBits = uint8(255 - _msbDeBruijn32(uint32(_range)));\\r\\n        uint256 _number = uint256(keccak256(abi.encode(_seed, _index))) \\u0026 uint256(2 ** _flagBits - 1);\\r\\n        return uint8((_number * _range) \\u003e\\u003e _flagBits); \\r\\n    }\\r\\n\\r\\n    /// Calculate rarity index based on a creature\\u0027s ranking percentile.\\r\\n    function eggRarity(\\r\\n            Storage storage self,\\r\\n            uint _percentile100\\r\\n        )\\r\\n        internal view\\r\\n        returns (WittyCreatureRarity)\\r\\n    {\\r\\n        uint8 _i; uint8 _cumuled;\\r\\n        if (_percentile100 \\u003e 100) {\\r\\n            _percentile100 = 100;\\r\\n        }\\r\\n        uint _length = self.settings.percentileMarks.length; \\r\\n        for (; _i \\u003c _length; _i ++) {\\r\\n            _cumuled += self.settings.percentileMarks[_i];\\r\\n            if (_percentile100 \\u003c= _cumuled) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return WittyCreatureRarity(_i);\\r\\n    }\\r\\n\\r\\n    /// Recovers address from hash and signature.\\r\\n    function recoverAddr(bytes32 _hash, bytes memory _signature)\\r\\n        internal pure\\r\\n        returns (address)\\r\\n    {\\r\\n        if (_signature.length != 65) {\\r\\n            return (address(0));\\r\\n        }\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            r := mload(add(_signature, 0x20))\\r\\n            s := mload(add(_signature, 0x40))\\r\\n            v := byte(0, mload(add(_signature, 0x60)))\\r\\n        }\\r\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return address(0);\\r\\n        }\\r\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\r\\n            return address(0);\\r\\n        }\\r\\n        return ecrecover(_hash, v, r, s);\\r\\n    }    \\r\\n\\r\\n    /// Gets tender\\u0027s current status.\\r\\n    function status(Storage storage self, IWitnetRandomness _randomizer)\\r\\n        internal view\\r\\n        returns (Status)\\r\\n    {\\r\\n        uint _hatchingBlock = self.hatchingBlock;\\r\\n        uint _expirationBlocks = self.settings.expirationBlocks;\\r\\n        if (_hatchingBlock \\u003e 0) {\\r\\n            if (_randomizer.isRandomized(_hatchingBlock)) {\\r\\n                if (_expirationBlocks \\u003e 0 \\u0026\\u0026 block.number \\u003e _hatchingBlock + _expirationBlocks) {\\r\\n                    return Status.Frozen;\\r\\n                } else {\\r\\n                    return Status.Hatching;\\r\\n                }\\r\\n            } else {\\r\\n                return Status.Randomizing;\\r\\n            }\\r\\n        } else {\\r\\n            return Status.Batching;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Produces revert message when tender is not in expected status.\\r\\n    function statusRevertMessage(Status _status)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_status == Status.Frozen) {\\r\\n            return \\\"Wc3Lib: not in Frozen status\\\";\\r\\n        } else if (_status == Status.Batching) {\\r\\n            return \\\"Wc3Lib: not in Batching status\\\";\\r\\n        } else if (_status == Status.Randomizing) {\\r\\n            return \\\"Wc3Lib: not in Randomizing status\\\";\\r\\n        } else if (_status == Status.Hatching) {\\r\\n            return \\\"Wc3Lib: not in Hatching status\\\";\\r\\n        } else {\\r\\n            return \\\"Wc3Lib: bad mood\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Gets tokens\\u0027s current status.\\r\\n    function tokenStatus(Storage storage self, IWitnetRandomness _randomizer, uint256 _tokenId)\\r\\n        internal view\\r\\n        returns (WittyCreatureStatus)\\r\\n    {\\r\\n        WittyCreature memory _wc3 = self.intrinsics[_tokenId];\\r\\n        if (\\r\\n            _tokenId == 0\\r\\n                || _tokenId \\u003e self.settings.totalEggs\\r\\n        ) {\\r\\n            return WittyCreatureStatus.Void;\\r\\n        }\\r\\n        else if (_wc3.mintTimestamp \\u003e 0) {\\r\\n            return WittyCreatureStatus.Minted;\\r\\n        }\\r\\n        else {\\r\\n            uint _hatchingBlock = self.hatchingBlock;\\r\\n            if (_hatchingBlock \\u003e 0) {\\r\\n                if (_randomizer.isRandomized(_hatchingBlock)) {\\r\\n                    uint _expirationBlocks = self.settings.expirationBlocks;\\r\\n                    if (\\r\\n                        _expirationBlocks \\u003e 0\\r\\n                            \\u0026\\u0026 block.number \\u003e _hatchingBlock + _expirationBlocks\\r\\n                    ) {\\r\\n                        return WittyCreatureStatus.Frozen;\\r\\n                    } else {\\r\\n                        return WittyCreatureStatus.Hatching;\\r\\n                    }\\r\\n                } else {\\r\\n                    return WittyCreatureStatus.Randomizing;\\r\\n                }\\r\\n            } else {\\r\\n                return WittyCreatureStatus.Incubating;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Reduces string into bytes32.\\r\\n    function toBytes32(string memory _string)\\r\\n        internal pure\\r\\n        returns (bytes32 _result)\\r\\n    {\\r\\n        if (bytes(_string).length == 0) {\\r\\n            return 0x0;\\r\\n        } else {\\r\\n            assembly {\\r\\n                _result := mload(add(_string, 32))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Converts bytes32 into hex string.\\r\\n    function toHexString(bytes32 _bytes32)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_bytes32 == 0) {\\r\\n            return \\\"0\\\";\\r\\n        } else {\\r\\n            bytes32 _temp = _bytes32;\\r\\n            uint _length;\\r\\n            while (_temp != 0) {\\r\\n                _length ++;\\r\\n                _temp = _temp \\u003e\\u003e 4;\\r\\n            }\\r\\n            bytes memory _bstr = new bytes(_length);\\r\\n            uint _k = _length;\\r\\n            while (_bytes32 != 0) {\\r\\n                uint _char = uint(_bytes32) \\u0026 0xf;\\r\\n                _bstr[-- _k] = (_char \\u003e 9\\r\\n                    ? bytes1(uint8(87 + _char)) // lower-case letters\\r\\n                    : bytes1(uint8(48 + _char)) // decimal digits\\r\\n                );\\r\\n                _bytes32 = _bytes32 \\u003e\\u003e 4;\\r\\n            }\\r\\n            return string(_bstr);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Converts bytes32 into string.\\r\\n    function toString(bytes32 _bytes32)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes memory _bytes = new bytes(length(_bytes32));\\r\\n        for (uint _i = 0; _i \\u003c _bytes.length; _i ++) {\\r\\n            _bytes[_i] = _bytes32[_i];\\r\\n        }\\r\\n        return string(_bytes);\\r\\n    }\\r\\n\\r\\n    /// Translate rarity index into a literal string.\\r\\n    function toString(WittyCreatureRarity _rarity)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_rarity == WittyCreatureRarity.Legendary) {\\r\\n            return \\\"Legendary\\\";\\r\\n        } else if (_rarity == WittyCreatureRarity.Rare) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else {\\r\\n            return \\\"Common\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Returns contract status string.\\r\\n    function toString(Status _status)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_status == Status.Batching) {\\r\\n            return \\\"Batching\\\";\\r\\n        } else if (_status == Status.Randomizing) {\\r\\n            return \\\"Randomizing\\\";\\r\\n        } else if (_status == Status.Hatching) {\\r\\n            return \\\"Hatching\\\";\\r\\n        } else {\\r\\n            return \\\"Frozen\\\";\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// Returns token status string.\\r\\n    function toString(WittyCreatureStatus _status)\\r\\n        internal pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_status == WittyCreatureStatus.Incubating) {\\r\\n            return \\\"Incubating\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Randomizing) {\\r\\n            return \\\"Randomizing\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Hatching) {\\r\\n            return \\\"Hatching\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Minted) {\\r\\n            return \\\"Minted\\\";\\r\\n        } else if (_status == WittyCreatureStatus.Frozen) {\\r\\n            return \\\"Frozen\\\";\\r\\n        } else {\\r\\n            return \\\"Void\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Returns index of Most Significant Bit of given number, applying De Bruijn O(1) algorithm.\\r\\n    function _msbDeBruijn32(uint32 _v)\\r\\n        private pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        uint8[32] memory _bitPosition = [\\r\\n                0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30,\\r\\n                8, 12, 20, 28, 15, 17, 24, 7, 19, 27, 23, 6, 26, 5, 4, 31\\r\\n            ];\\r\\n        _v |= _v \\u003e\\u003e 1;\\r\\n        _v |= _v \\u003e\\u003e 2;\\r\\n        _v |= _v \\u003e\\u003e 4;\\r\\n        _v |= _v \\u003e\\u003e 8;\\r\\n        _v |= _v \\u003e\\u003e 16;\\r\\n        return _bitPosition[\\r\\n            uint32(_v * uint256(0x07c4acdd)) \\u003e\\u003e 27\\r\\n        ];\\r\\n    }\\r\\n}\\r\\n\"},\"Wc3Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./IWitnetPriceFeed.sol\\\";\\r\\n\\r\\nimport \\\"./IWc3Admin.sol\\\";\\r\\nimport \\\"./IWc3Events.sol\\\";\\r\\nimport \\\"./IWc3Surrogates.sol\\\";\\r\\nimport \\\"./IWc3View.sol\\\";\\r\\n\\r\\n/// @title Witty Creatures 3.0 - ERC721 Token contract\\r\\n/// @author Otherplane Labs, 2022.\\r\\ncontract Wc3Token\\r\\n    is\\r\\n        ERC721,\\r\\n        Ownable,\\r\\n        ReentrancyGuard,\\r\\n        IWc3Admin,\\r\\n        IWc3Events,\\r\\n        IWc3Surrogates,\\r\\n        IWc3View\\r\\n{\\r\\n    using Strings for uint256;\\r\\n    using Wc3Lib for bytes32;\\r\\n    using Wc3Lib for string;\\r\\n    using Wc3Lib for Wc3Lib.Status;\\r\\n    using Wc3Lib for Wc3Lib.Storage;\\r\\n    using Wc3Lib for Wc3Lib.WittyCreatureStatus;\\r\\n\\r\\n    IWitnetRandomness immutable public override randomizer;\\r\\n    IWitnetPriceRouter immutable public override router;\\r\\n    uint256 immutable override public guildId;\\r\\n    bytes32 immutable override public usdPriceAssetId;\\r\\n\\r\\n    bytes32 immutable internal __version;\\r\\n    Wc3Lib.Storage internal __storage;    \\r\\n\\r\\n    modifier inStatus(Wc3Lib.Status _status) {\\r\\n        require(\\r\\n            __storage.status(randomizer) == _status,\\r\\n            Wc3Lib.statusRevertMessage(_status)\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier selfMintUsdCost6(uint _tokenId) {\\r\\n        uint _initGas = gasleft();\\r\\n        {\\r\\n            _;\\r\\n        }\\r\\n        Wc3Lib.WittyCreature storage __wc3 = __storage.intrinsics[_tokenId];\\r\\n        (int _lastPrice, bytes32 _witnetProof) = _estimateUsdPrice6();\\r\\n        __wc3.mintBlock = block.number;\\r\\n        __wc3.mintGasPrice = tx.gasprice;\\r\\n        __wc3.mintTimestamp = block.timestamp;\\r\\n        __wc3.mintUsdPriceWitnetProof = _witnetProof;\\r\\n        uint _mintGas = __storage.mintGasOverhead + _initGas - gasleft();\\r\\n        __wc3.mintGas = _mintGas;\\r\\n        __wc3.mintUsdCost6 = (uint(_lastPrice) * tx.gasprice * _mintGas) / 10 ** 18; \\r\\n    }\\r\\n\\r\\n    modifier tokenExists(uint256 _tokenId) {\\r\\n        require(\\r\\n            _exists(_tokenId),\\r\\n            \\\"Wc3Token: void token\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n            string memory _version,\\r\\n            address _randomizer,\\r\\n            address _router,\\r\\n            address _decorator,\\r\\n            address _signator,\\r\\n            uint8[] memory _percentileMarks,\\r\\n            uint256 _expirationBlocks,\\r\\n            uint256 _totalEggs,\\r\\n            string memory _usdPriceCaption,\\r\\n            uint256 _mintGasOverhead            \\r\\n        )\\r\\n        ERC721(\\\"Witty Creatures EthCC\\u00275\\\", \\\"WC3\\\")\\r\\n    {\\r\\n        assert(_randomizer != address(0));\\r\\n        assert(_router != address(0));\\r\\n\\r\\n        guildId = block.chainid;        \\r\\n        __version = _version.toBytes32();      \\r\\n\\r\\n        randomizer = IWitnetRandomness(_randomizer);\\r\\n        router = IWitnetPriceRouter(_router);\\r\\n\\r\\n        setDecorator(\\r\\n            IWc3Decorator(_decorator)\\r\\n        );\\r\\n        setMintGasOverhead(\\r\\n            _mintGasOverhead\\r\\n        );\\r\\n        setSettings(\\r\\n            _expirationBlocks,\\r\\n            _totalEggs,\\r\\n            _percentileMarks\\r\\n        );\\r\\n        setSignator(\\r\\n            _signator\\r\\n        );        \\r\\n\\r\\n        usdPriceAssetId = router.currencyPairId(_usdPriceCaption);\\r\\n        require(\\r\\n            router.supportsCurrencyPair(usdPriceAssetId),\\r\\n            string(abi.encodePacked(\\r\\n                bytes(\\\"Wc3Token: unsupported currency pair: \\\"),\\r\\n                _usdPriceCaption\\r\\n            ))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Required for receiving unused funds back when calling to `randomizer.randomize()`\\r\\n    receive() external payable {}\\r\\n\\r\\n\\r\\n    // ========================================================================\\r\\n    // --- \\u0027ERC721Metadata\\u0027 overriden functions -------------------------------\\r\\n  \\r\\n    function baseURI()\\r\\n        public view\\r\\n        virtual\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return decorator().baseURI();\\r\\n    }\\r\\n    \\r\\n    function metadata(uint256 _tokenId)\\r\\n        external view \\r\\n        virtual \\r\\n        tokenExists(_tokenId)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return decorator().toJSON(\\r\\n            randomizer.getRandomnessAfter(__storage.hatchingBlock),\\r\\n            __storage.intrinsics[_tokenId]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId)\\r\\n        public view\\r\\n        virtual override\\r\\n        tokenExists(_tokenId)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return string(abi.encodePacked(\\r\\n            baseURI(),\\r\\n            \\\"metadata/\\\",\\r\\n            block.chainid.toString(),\\r\\n            \\\"/\\\",\\r\\n            _tokenId.toString()\\r\\n        ));\\r\\n    }\\r\\n\\r\\n\\r\\n    // ========================================================================\\r\\n    // --- Implementation of \\u0027IWc3Admin\\u0027 --------------------------------------\\r\\n\\r\\n    /// Sets Opensea-compliant Decorator contract\\r\\n    /// @dev Only callable by the owner, when in \\u0027Batching\\u0027 status.\\r\\n    function setDecorator(IWc3Decorator _decorator)\\r\\n        public\\r\\n        override\\r\\n        onlyOwner\\r\\n        inStatus(Wc3Lib.Status.Batching)\\r\\n    {\\r\\n        require(\\r\\n            address(_decorator) != address(0),\\r\\n            \\\"Wc3Token: no decorator\\\"\\r\\n        );\\r\\n        __storage.decorator = address(_decorator);\\r\\n        emit Decorator(address(_decorator));\\r\\n    }\\r\\n\\r\\n    /// Set estimated gas units required for minting one single token.\\r\\n    /// @dev Only callable by the owner, at any time.\\r\\n    function setMintGasOverhead(\\r\\n            uint256 _mintGasOverhead\\r\\n        )\\r\\n        public override\\r\\n        onlyOwner\\r\\n    {\\r\\n        __storage.mintGasOverhead = _mintGasOverhead;\\r\\n        emit MintGasOverhead(_mintGasOverhead);\\r\\n    }\\r\\n\\r\\n    /// Sets Externally Owned Account that is authorized to sign tokens\\u0027 intrinsics before getting minted.\\r\\n    /// @dev Only callable by the owner, at any time.\\r\\n    /// @dev Cannot be set to zero address.\\r\\n    /// @param _signator Externally-owned account to be authorized    \\r\\n    function setSignator(address _signator)\\r\\n        public override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _signator != address(0),\\r\\n            \\\"Wc3Token: no signator\\\"\\r\\n        );\\r\\n        __storage.signator = _signator;\\r\\n        emit Signator(_signator);\\r\\n    }\\r\\n\\r\\n    /// Change batch parameters. Only possible while in \\u0027Batching\\u0027 status.\\r\\n    /// @dev Only callable by the owner, while on \\u0027Batching\\u0027 status.\\r\\n    /// @param _expirationBlocks Number of blocks after Witnet randomness is generated, during which creatures may get minted.\\r\\n    /// @param _totalEggs Max number of tokens that may eventually get minted.\\r\\n    /// @param _percentileMarks Creature-category ordered percentile marks (Legendary first).   \\r\\n    function setSettings(\\r\\n            uint256 _expirationBlocks,\\r\\n            uint256 _totalEggs,\\r\\n            uint8[] memory _percentileMarks\\r\\n        )\\r\\n        public\\r\\n        virtual override\\r\\n        onlyOwner\\r\\n        inStatus(Wc3Lib.Status.Batching)\\r\\n    {\\r\\n        require(\\r\\n            _totalEggs \\u003e 0,\\r\\n            \\\"Wc3Token: zero eggs\\\"\\r\\n        );\\r\\n        require(\\r\\n            _percentileMarks.length == uint8(Wc3Lib.WittyCreatureRarity.Common) + 1,\\r\\n            \\\"Wc3Token: bad percentile marks\\\"\\r\\n        );        \\r\\n\\r\\n        __storage.settings.expirationBlocks = _expirationBlocks;\\r\\n        __storage.settings.totalEggs = _totalEggs;\\r\\n        __storage.settings.percentileMarks = new uint8[](_percentileMarks.length);\\r\\n\\r\\n        uint8 _checkSum; for (uint8 _i = 0; _i \\u003c _percentileMarks.length; _i ++) {\\r\\n            uint8 _mark = _percentileMarks[_i];\\r\\n            __storage.settings.percentileMarks[_i] = _mark;\\r\\n            _checkSum += _mark;\\r\\n        }\\r\\n        require(_checkSum == 100, \\\"Wc3Token: bad percentile checksum\\\");\\r\\n\\r\\n        emit Settings(\\r\\n            _expirationBlocks,\\r\\n            _totalEggs,\\r\\n            _percentileMarks\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// Starts hatching, which means: (a) game settings cannot be altered anymore, (b) a \\r\\n    /// random number will be requested to the Witnet Decentralized Oracle Network, and (c)\\r\\n    /// the contract will automatically turn to the \\u0027Hatching\\u0027 status as soon as the randomness\\r\\n    /// gets solved by the Witnet oracle. While the randomness request gets solved, the contract will \\r\\n    /// remain in \\u0027Randomizing\\u0027 status.\\r\\n    /// @dev Only callable by the owner, while in \\u0027Batching\\u0027 status.\\r\\n    function startHatching()\\r\\n        external payable\\r\\n        virtual\\r\\n        nonReentrant\\r\\n        onlyOwner\\r\\n        inStatus(Wc3Lib.Status.Batching)\\r\\n    {   \\r\\n        // Decorator must be forged first:\\r\\n        require(\\r\\n            decorator().forged(),\\r\\n            \\\"Wc3Token: unforged decorator\\\"\\r\\n        );\\r\\n\\r\\n        // Request randomness from the Witnet oracle:\\r\\n        uint _usedFunds = randomizer.randomize{ value: msg.value }();\\r\\n\\r\\n        // Sets hatching block number:\\r\\n        __storage.hatchingBlock = block.number;\\r\\n        \\r\\n        // Transfer back unused funds:\\r\\n        if (_usedFunds \\u003c msg.value ) {\\r\\n            payable(msg.sender).transfer(msg.value - _usedFunds);   \\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ========================================================================\\r\\n    // --- Implementation of \\u0027IWc3Surrogates\\u0027 -------------------------------\\r\\n\\r\\n    function mint(\\r\\n            address _tokenOwner,\\r\\n            string calldata _name,\\r\\n            uint256 _globalRanking,\\r\\n            uint256 _guildId,\\r\\n            uint256 _guildPlayers,\\r\\n            uint256 _guildRanking,\\r\\n            uint256 _index,\\r\\n            uint256 _score,\\r\\n            bytes calldata _signature\\r\\n        )\\r\\n        external\\r\\n        virtual override\\r\\n        selfMintUsdCost6(_guildRanking)\\r\\n        nonReentrant\\r\\n        inStatus(Wc3Lib.Status.Hatching)\\r\\n    {\\r\\n        // Verify guildfundamental facts:\\r\\n        _verifyGuildFacts(\\r\\n            _guildId,\\r\\n            _guildPlayers,\\r\\n            _guildRanking\\r\\n        );\\r\\n\\r\\n        // Verify signature:\\r\\n        _verifySignature(\\r\\n            _tokenOwner,\\r\\n            _name,\\r\\n            _globalRanking,\\r\\n            _guildId,\\r\\n            _guildPlayers,\\r\\n            _guildRanking,\\r\\n            _index,\\r\\n            _score,            \\r\\n            _signature\\r\\n        );\\r\\n\\r\\n        // Token id will be the same as the achieved guild ranking for this egg during EthCC\\u00275:\\r\\n        uint256 _tokenId = _guildRanking;\\r\\n\\r\\n        // Verify the token has not been already minted:\\r\\n        require(\\r\\n            __storage.intrinsics[_tokenId].mintTimestamp == 0,\\r\\n            \\\"Wc3Token: already minted\\\"\\r\\n        );\\r\\n\\r\\n        // Save token intrinsics to storage:\\r\\n        __mintWittyCreature(\\r\\n            _name,\\r\\n            _globalRanking,\\r\\n            _guildPlayers,\\r\\n            _guildRanking,\\r\\n            _index,\\r\\n            _score\\r\\n        );\\r\\n\\r\\n        // Mint the actual ERC-721 token:\\r\\n        _safeMint(_tokenOwner, _tokenId);\\r\\n\\r\\n        // Increment token supply:\\r\\n        __storage.totalSupply ++;\\r\\n    }\\r\\n\\r\\n\\r\\n    // ========================================================================\\r\\n    // --- Implementation of \\u0027IWc3View\\u0027 ------------------------------------\\r\\n\\r\\n    \\r\\n    function decorator()\\r\\n        public view\\r\\n        override\\r\\n        returns (IWc3Decorator)\\r\\n    {\\r\\n        return IWc3Decorator(__storage.decorator);\\r\\n    }\\r\\n    \\r\\n    function getHatchingBlock()\\r\\n        public view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return __storage.hatchingBlock;\\r\\n    }\\r\\n\\r\\n    function getHatchingRandomness()\\r\\n        public view\\r\\n        override\\r\\n        returns (bytes32 _hatchingRandomness)\\r\\n    {\\r\\n        return randomizer.getRandomnessAfter(__storage.hatchingBlock);\\r\\n    }\\r\\n\\r\\n    function getMintGasOverhead()\\r\\n        public view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return __storage.mintGasOverhead;\\r\\n    }\\r\\n\\r\\n    function getSettings()\\r\\n        external view\\r\\n        override\\r\\n        returns (Wc3Lib.Settings memory)\\r\\n    {\\r\\n        return __storage.settings;\\r\\n    }\\r\\n\\r\\n    function getStatus()\\r\\n        public view\\r\\n        override\\r\\n        returns (Wc3Lib.Status)\\r\\n    {\\r\\n        return __storage.status(randomizer);\\r\\n    }\\r\\n\\r\\n    function getStatusString()\\r\\n        external view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return getStatus().toString();\\r\\n    }\\r\\n\\r\\n    function getTokenIntrinsics(uint256 _tokenId)\\r\\n        external view\\r\\n        override\\r\\n        returns (Wc3Lib.WittyCreature memory)\\r\\n    {\\r\\n        return __storage.intrinsics[_tokenId];\\r\\n    }\\r\\n\\r\\n    function getTokenRandomTraits(uint256 _tokenId)\\r\\n        external view\\r\\n        override\\r\\n        returns (Wc3Lib.WittyCreatureTraits memory _traits)\\r\\n    {\\r\\n        bytes32 _randomness = getHatchingRandomness();\\r\\n        if (_randomness != 0) {\\r\\n            _traits = decorator().randomTraits(\\r\\n                _randomness,\\r\\n                __storage.intrinsics[_tokenId].eggIndex\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenStatus(uint256 _tokenId)\\r\\n        public view\\r\\n        override\\r\\n        returns (Wc3Lib.WittyCreatureStatus)\\r\\n    {\\r\\n        return __storage.tokenStatus(randomizer, _tokenId);\\r\\n    }\\r\\n\\r\\n    function getTokenStatusString(uint256 _tokenId)\\r\\n        external view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return getTokenStatus(_tokenId).toString();\\r\\n    }\\r\\n\\r\\n    function preview(\\r\\n            string memory _name,\\r\\n            uint256 _globalRanking,\\r\\n            uint256 _guildId,\\r\\n            uint256 _guildPlayers,\\r\\n            uint256 _guildRanking,\\r\\n            uint256 _index,\\r\\n            uint256 _score\\r\\n        )\\r\\n        public view\\r\\n        virtual override\\r\\n        inStatus(Wc3Lib.Status.Hatching)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        // Verify guild facts:\\r\\n        _verifyGuildFacts(\\r\\n            _guildId,\\r\\n            _guildPlayers,\\r\\n            _guildRanking\\r\\n        );\\r\\n\\r\\n        // Preview creature image:\\r\\n        return decorator().toJSON(\\r\\n            randomizer.getRandomnessAfter(__storage.hatchingBlock),\\r\\n            Wc3Lib.WittyCreature({\\r\\n                eggName: _name,\\r\\n                eggGlobalRanking: _globalRanking,\\r\\n                eggGuildRanking: _guildRanking,\\r\\n                eggIndex: _index,\\r\\n                eggRarity: __storage.eggRarity((_guildRanking * 100) / _guildPlayers),\\r\\n                eggScore: _score,\\r\\n                mintBlock: 0,\\r\\n                mintGas: 0,\\r\\n                mintGasPrice: 0,\\r\\n                mintTimestamp: 0,\\r\\n                mintUsdCost6: 0,\\r\\n                mintUsdPriceWitnetProof: 0\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function signator()\\r\\n        external view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return __storage.signator;\\r\\n    }\\r\\n\\r\\n    function totalSupply()\\r\\n        public view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return __storage.totalSupply;\\r\\n    }\\r\\n\\r\\n    function usdPriceCaption()\\r\\n        public view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return router.lookupERC2362ID(usdPriceAssetId);\\r\\n    }\\r\\n\\r\\n    function version()\\r\\n        external view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return __version.toString();\\r\\n    }\\r\\n\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // --- INTERNAL VIRTUAL METHODS -------------------------------------------\\r\\n    // ------------------------------------------------------------------------\\r\\n\\r\\n    /// @dev Rely on the Witnet oracle to fetch current USD price, and verification proof\\r\\n    function _estimateUsdPrice6()\\r\\n        internal view\\r\\n        returns (int _lastKnownPrice, bytes32 _priceWitnetProof)\\r\\n    {\\r\\n        IWitnetPriceFeed _pf = IWitnetPriceFeed(address(router.getPriceFeed(usdPriceAssetId)));\\r\\n        if (address(_pf) != address(0)) {\\r\\n            (_lastKnownPrice,, _priceWitnetProof,) = _pf.lastValue();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function __mintWittyCreature(\\r\\n            string calldata _name,\\r\\n            uint256 _globalRanking,\\r\\n            uint256 _guildPlayers,\\r\\n            uint256 _guildRanking,\\r\\n            uint256 _index,\\r\\n            uint256 _score\\r\\n        )\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        // Save intrinsics into storage:\\r\\n        Wc3Lib.WittyCreature storage __wc3 = __storage.intrinsics[_guildRanking];\\r\\n        __wc3.eggName = _name;\\r\\n        __wc3.eggGlobalRanking = _globalRanking;\\r\\n        __wc3.eggGuildRanking = _guildRanking;\\r\\n        __wc3.eggIndex = _index;\\r\\n        __wc3.eggRarity = __storage.eggRarity((_guildRanking * 100) / _guildPlayers);\\r\\n        __wc3.eggScore = _score;\\r\\n    }\\r\\n\\r\\n    function _verifyGuildFacts(\\r\\n            uint _guildId,\\r\\n            uint _guildPlayers,\\r\\n            uint _guildRanking\\r\\n        )\\r\\n        internal view\\r\\n        virtual\\r\\n    {\\r\\n        require(_guildId == guildId, \\\"Wc3Token: bad guild\\\");\\r\\n        \\r\\n        require(_guildPlayers \\u003e 0, \\\"Wc3Token: no players\\\");\\r\\n        require(_guildPlayers \\u003c= __storage.settings.totalEggs, \\\"Wc3Token: bad players\\\");\\r\\n        \\r\\n        require(_guildRanking \\u003e 0, \\\"Wc3Token: no ranking\\\");\\r\\n        require(_guildRanking \\u003c= _guildPlayers, \\\"Wc3Token: bad ranking\\\");\\r\\n    }\\r\\n\\r\\n    function _verifySignature(\\r\\n            address _tokenOwner,\\r\\n            string memory _name,\\r\\n            uint256 _globalRanking,\\r\\n            uint256 _guildId,\\r\\n            uint256 _guildPlayers,\\r\\n            uint256 _guildRanking,\\r\\n            uint256 _index,\\r\\n            uint256 _score,\\r\\n            bytes memory _signature\\r\\n        )\\r\\n        internal view\\r\\n        virtual\\r\\n    {\\r\\n        bytes32 _hash = keccak256(abi.encode(\\r\\n            _tokenOwner,\\r\\n            _name,\\r\\n            _globalRanking,\\r\\n            _guildId,\\r\\n            _guildPlayers,\\r\\n            _guildRanking,\\r\\n            _index,\\r\\n            _score\\r\\n        ));\\r\\n        require(\\r\\n            Wc3Lib.recoverAddr(_hash, _signature) == __storage.signator,\\r\\n            \\\"Wc3Token: bad signature\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"Witnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IWitnetRequest.sol\\\";\\r\\n\\r\\nlibrary Witnet {\\r\\n\\r\\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\\r\\n    /// @param _bytecode CBOR-encoded RADON.\\r\\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\\r\\n        return sha256(_bytecode);\\r\\n    }\\r\\n\\r\\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\\r\\n    struct Query {\\r\\n        Request request;\\r\\n        Response response;\\r\\n        address from;      // Address from which the request was posted.\\r\\n    }\\r\\n\\r\\n    /// Possible status of a Witnet query.\\r\\n    enum QueryStatus {\\r\\n        Unknown,\\r\\n        Posted,\\r\\n        Reported,\\r\\n        Deleted\\r\\n    }\\r\\n\\r\\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\\r\\n    struct Request {\\r\\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\\r\\n        address requester;      // Address from which the request was posted.\\r\\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\\r\\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\\r\\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\\r\\n    }\\r\\n\\r\\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\\r\\n    struct Response {\\r\\n        address reporter;       // Address from which the result was reported.\\r\\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\\r\\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\\r\\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\\r\\n    }\\r\\n\\r\\n    /// Data struct containing the Witnet-provided result to a Data Request.\\r\\n    struct Result {\\r\\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\\r\\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\\r\\n    }\\r\\n\\r\\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\\r\\n    struct CBOR {\\r\\n        Buffer buffer;\\r\\n        uint8 initialByte;\\r\\n        uint8 majorType;\\r\\n        uint8 additionalInformation;\\r\\n        uint64 len;\\r\\n        uint64 tag;\\r\\n    }\\r\\n\\r\\n    /// Iterable bytes buffer.\\r\\n    struct Buffer {\\r\\n        bytes data;\\r\\n        uint32 cursor;\\r\\n    }\\r\\n\\r\\n    /// Witnet error codes table.\\r\\n    enum ErrorCodes {\\r\\n        // 0x00: Unknown error. Something went really bad!\\r\\n        Unknown,\\r\\n        // Script format errors\\r\\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\\r\\n        SourceScriptNotCBOR,\\r\\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\\r\\n        SourceScriptNotArray,\\r\\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\\r\\n        SourceScriptNotRADON,\\r\\n        /// Unallocated\\r\\n        ScriptFormat0x04,\\r\\n        ScriptFormat0x05,\\r\\n        ScriptFormat0x06,\\r\\n        ScriptFormat0x07,\\r\\n        ScriptFormat0x08,\\r\\n        ScriptFormat0x09,\\r\\n        ScriptFormat0x0A,\\r\\n        ScriptFormat0x0B,\\r\\n        ScriptFormat0x0C,\\r\\n        ScriptFormat0x0D,\\r\\n        ScriptFormat0x0E,\\r\\n        ScriptFormat0x0F,\\r\\n        // Complexity errors\\r\\n        /// 0x10: The request contains too many sources.\\r\\n        RequestTooManySources,\\r\\n        /// 0x11: The script contains too many calls.\\r\\n        ScriptTooManyCalls,\\r\\n        /// Unallocated\\r\\n        Complexity0x12,\\r\\n        Complexity0x13,\\r\\n        Complexity0x14,\\r\\n        Complexity0x15,\\r\\n        Complexity0x16,\\r\\n        Complexity0x17,\\r\\n        Complexity0x18,\\r\\n        Complexity0x19,\\r\\n        Complexity0x1A,\\r\\n        Complexity0x1B,\\r\\n        Complexity0x1C,\\r\\n        Complexity0x1D,\\r\\n        Complexity0x1E,\\r\\n        Complexity0x1F,\\r\\n        // Operator errors\\r\\n        /// 0x20: The operator does not exist.\\r\\n        UnsupportedOperator,\\r\\n        /// Unallocated\\r\\n        Operator0x21,\\r\\n        Operator0x22,\\r\\n        Operator0x23,\\r\\n        Operator0x24,\\r\\n        Operator0x25,\\r\\n        Operator0x26,\\r\\n        Operator0x27,\\r\\n        Operator0x28,\\r\\n        Operator0x29,\\r\\n        Operator0x2A,\\r\\n        Operator0x2B,\\r\\n        Operator0x2C,\\r\\n        Operator0x2D,\\r\\n        Operator0x2E,\\r\\n        Operator0x2F,\\r\\n        // Retrieval-specific errors\\r\\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\\r\\n        HTTP,\\r\\n        /// 0x31: Retrieval of at least one of the sources timed out.\\r\\n        RetrievalTimeout,\\r\\n        /// Unallocated\\r\\n        Retrieval0x32,\\r\\n        Retrieval0x33,\\r\\n        Retrieval0x34,\\r\\n        Retrieval0x35,\\r\\n        Retrieval0x36,\\r\\n        Retrieval0x37,\\r\\n        Retrieval0x38,\\r\\n        Retrieval0x39,\\r\\n        Retrieval0x3A,\\r\\n        Retrieval0x3B,\\r\\n        Retrieval0x3C,\\r\\n        Retrieval0x3D,\\r\\n        Retrieval0x3E,\\r\\n        Retrieval0x3F,\\r\\n        // Math errors\\r\\n        /// 0x40: Math operator caused an underflow.\\r\\n        Underflow,\\r\\n        /// 0x41: Math operator caused an overflow.\\r\\n        Overflow,\\r\\n        /// 0x42: Tried to divide by zero.\\r\\n        DivisionByZero,\\r\\n        /// Unallocated\\r\\n        Math0x43,\\r\\n        Math0x44,\\r\\n        Math0x45,\\r\\n        Math0x46,\\r\\n        Math0x47,\\r\\n        Math0x48,\\r\\n        Math0x49,\\r\\n        Math0x4A,\\r\\n        Math0x4B,\\r\\n        Math0x4C,\\r\\n        Math0x4D,\\r\\n        Math0x4E,\\r\\n        Math0x4F,\\r\\n        // Other errors\\r\\n        /// 0x50: Received zero reveals\\r\\n        NoReveals,\\r\\n        /// 0x51: Insufficient consensus in tally precondition clause\\r\\n        InsufficientConsensus,\\r\\n        /// 0x52: Received zero commits\\r\\n        InsufficientCommits,\\r\\n        /// 0x53: Generic error during tally execution\\r\\n        TallyExecution,\\r\\n        /// Unallocated\\r\\n        OtherError0x54,\\r\\n        OtherError0x55,\\r\\n        OtherError0x56,\\r\\n        OtherError0x57,\\r\\n        OtherError0x58,\\r\\n        OtherError0x59,\\r\\n        OtherError0x5A,\\r\\n        OtherError0x5B,\\r\\n        OtherError0x5C,\\r\\n        OtherError0x5D,\\r\\n        OtherError0x5E,\\r\\n        OtherError0x5F,\\r\\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\\r\\n        MalformedReveal,\\r\\n        /// Unallocated\\r\\n        OtherError0x61,\\r\\n        OtherError0x62,\\r\\n        OtherError0x63,\\r\\n        OtherError0x64,\\r\\n        OtherError0x65,\\r\\n        OtherError0x66,\\r\\n        OtherError0x67,\\r\\n        OtherError0x68,\\r\\n        OtherError0x69,\\r\\n        OtherError0x6A,\\r\\n        OtherError0x6B,\\r\\n        OtherError0x6C,\\r\\n        OtherError0x6D,\\r\\n        OtherError0x6E,\\r\\n        OtherError0x6F,\\r\\n        // Access errors\\r\\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\\r\\n        ArrayIndexOutOfBounds,\\r\\n        /// 0x71: Tried to access a value from a map using a key that does not exist\\r\\n        MapKeyNotFound,\\r\\n        /// Unallocated\\r\\n        OtherError0x72,\\r\\n        OtherError0x73,\\r\\n        OtherError0x74,\\r\\n        OtherError0x75,\\r\\n        OtherError0x76,\\r\\n        OtherError0x77,\\r\\n        OtherError0x78,\\r\\n        OtherError0x79,\\r\\n        OtherError0x7A,\\r\\n        OtherError0x7B,\\r\\n        OtherError0x7C,\\r\\n        OtherError0x7D,\\r\\n        OtherError0x7E,\\r\\n        OtherError0x7F,\\r\\n        OtherError0x80,\\r\\n        OtherError0x81,\\r\\n        OtherError0x82,\\r\\n        OtherError0x83,\\r\\n        OtherError0x84,\\r\\n        OtherError0x85,\\r\\n        OtherError0x86,\\r\\n        OtherError0x87,\\r\\n        OtherError0x88,\\r\\n        OtherError0x89,\\r\\n        OtherError0x8A,\\r\\n        OtherError0x8B,\\r\\n        OtherError0x8C,\\r\\n        OtherError0x8D,\\r\\n        OtherError0x8E,\\r\\n        OtherError0x8F,\\r\\n        OtherError0x90,\\r\\n        OtherError0x91,\\r\\n        OtherError0x92,\\r\\n        OtherError0x93,\\r\\n        OtherError0x94,\\r\\n        OtherError0x95,\\r\\n        OtherError0x96,\\r\\n        OtherError0x97,\\r\\n        OtherError0x98,\\r\\n        OtherError0x99,\\r\\n        OtherError0x9A,\\r\\n        OtherError0x9B,\\r\\n        OtherError0x9C,\\r\\n        OtherError0x9D,\\r\\n        OtherError0x9E,\\r\\n        OtherError0x9F,\\r\\n        OtherError0xA0,\\r\\n        OtherError0xA1,\\r\\n        OtherError0xA2,\\r\\n        OtherError0xA3,\\r\\n        OtherError0xA4,\\r\\n        OtherError0xA5,\\r\\n        OtherError0xA6,\\r\\n        OtherError0xA7,\\r\\n        OtherError0xA8,\\r\\n        OtherError0xA9,\\r\\n        OtherError0xAA,\\r\\n        OtherError0xAB,\\r\\n        OtherError0xAC,\\r\\n        OtherError0xAD,\\r\\n        OtherError0xAE,\\r\\n        OtherError0xAF,\\r\\n        OtherError0xB0,\\r\\n        OtherError0xB1,\\r\\n        OtherError0xB2,\\r\\n        OtherError0xB3,\\r\\n        OtherError0xB4,\\r\\n        OtherError0xB5,\\r\\n        OtherError0xB6,\\r\\n        OtherError0xB7,\\r\\n        OtherError0xB8,\\r\\n        OtherError0xB9,\\r\\n        OtherError0xBA,\\r\\n        OtherError0xBB,\\r\\n        OtherError0xBC,\\r\\n        OtherError0xBD,\\r\\n        OtherError0xBE,\\r\\n        OtherError0xBF,\\r\\n        OtherError0xC0,\\r\\n        OtherError0xC1,\\r\\n        OtherError0xC2,\\r\\n        OtherError0xC3,\\r\\n        OtherError0xC4,\\r\\n        OtherError0xC5,\\r\\n        OtherError0xC6,\\r\\n        OtherError0xC7,\\r\\n        OtherError0xC8,\\r\\n        OtherError0xC9,\\r\\n        OtherError0xCA,\\r\\n        OtherError0xCB,\\r\\n        OtherError0xCC,\\r\\n        OtherError0xCD,\\r\\n        OtherError0xCE,\\r\\n        OtherError0xCF,\\r\\n        OtherError0xD0,\\r\\n        OtherError0xD1,\\r\\n        OtherError0xD2,\\r\\n        OtherError0xD3,\\r\\n        OtherError0xD4,\\r\\n        OtherError0xD5,\\r\\n        OtherError0xD6,\\r\\n        OtherError0xD7,\\r\\n        OtherError0xD8,\\r\\n        OtherError0xD9,\\r\\n        OtherError0xDA,\\r\\n        OtherError0xDB,\\r\\n        OtherError0xDC,\\r\\n        OtherError0xDD,\\r\\n        OtherError0xDE,\\r\\n        OtherError0xDF,\\r\\n        // Bridge errors: errors that only belong in inter-client communication\\r\\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\\r\\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\\r\\n        /// are never included into blocks and therefore never get a Tally in response.\\r\\n        BridgeMalformedRequest,\\r\\n        /// 0xE1: Witnesses exceeds 100\\r\\n        BridgePoorIncentives,\\r\\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\\r\\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\\r\\n        BridgeOversizedResult,\\r\\n        /// Unallocated\\r\\n        OtherError0xE3,\\r\\n        OtherError0xE4,\\r\\n        OtherError0xE5,\\r\\n        OtherError0xE6,\\r\\n        OtherError0xE7,\\r\\n        OtherError0xE8,\\r\\n        OtherError0xE9,\\r\\n        OtherError0xEA,\\r\\n        OtherError0xEB,\\r\\n        OtherError0xEC,\\r\\n        OtherError0xED,\\r\\n        OtherError0xEE,\\r\\n        OtherError0xEF,\\r\\n        OtherError0xF0,\\r\\n        OtherError0xF1,\\r\\n        OtherError0xF2,\\r\\n        OtherError0xF3,\\r\\n        OtherError0xF4,\\r\\n        OtherError0xF5,\\r\\n        OtherError0xF6,\\r\\n        OtherError0xF7,\\r\\n        OtherError0xF8,\\r\\n        OtherError0xF9,\\r\\n        OtherError0xFA,\\r\\n        OtherError0xFB,\\r\\n        OtherError0xFC,\\r\\n        OtherError0xFD,\\r\\n        OtherError0xFE,\\r\\n        // This should not exist:\\r\\n        /// 0xFF: Some tally error is not intercepted but should\\r\\n        UnhandledIntercept\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_decorator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_percentileMarks\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_expirationBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalEggs\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_usdPriceCaption\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintGasOverhead\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"decorator\",\"type\":\"address\"}],\"name\":\"Decorator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"MintGasOverhead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEggs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"percentileMarks\",\"type\":\"uint8[]\"}],\"name\":\"Settings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signator\",\"type\":\"address\"}],\"name\":\"Signator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decorator\",\"outputs\":[{\"internalType\":\"contract IWc3Decorator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHatchingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHatchingRandomness\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hatchingRandomness\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintGasOverhead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expirationBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"percentileMarks\",\"type\":\"uint8[]\"}],\"internalType\":\"struct Wc3Lib.Settings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Wc3Lib.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatusString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIntrinsics\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"eggName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"eggGlobalRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggGuildRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum Wc3Lib.WittyCreatureRarity\",\"name\":\"eggRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eggScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintUsdCost6\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mintUsdPriceWitnetProof\",\"type\":\"bytes32\"}],\"internalType\":\"struct Wc3Lib.WittyCreature\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRandomTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"object\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outfit\",\"type\":\"uint8\"}],\"internalType\":\"struct Wc3Lib.WittyCreatureTraits\",\"name\":\"_traits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenStatus\",\"outputs\":[{\"internalType\":\"enum Wc3Lib.WittyCreatureStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenStatusString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_globalRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guildId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guildPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guildRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_globalRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guildId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guildPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guildRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"preview\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract IWitnetRandomness\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IWitnetPriceRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWc3Decorator\",\"name\":\"_decorator\",\"type\":\"address\"}],\"name\":\"setDecorator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintGasOverhead\",\"type\":\"uint256\"}],\"name\":\"setMintGasOverhead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expirationBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_percentileMarks\",\"type\":\"uint8[]\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signator\",\"type\":\"address\"}],\"name\":\"setSignator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startHatching\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPriceAssetId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPriceCaption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Wc3Token","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000894907c7ab64c1092620b5c8ba039bb6e611eba800000000000000000000000083a757eae821ad7b520d9a74952337138a80b2af0000000000000000000000003a1e624b1d8830abacface65839baaf7ee84ec7d000000000000000000000000f8a654c0328ba4bae1af69eb5856fc807c8e57310000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000010ec80000000000000000000000000000000000000000000000000000000000000005332e332e390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000f50726963652d4554482f5553442d360000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9347b6533420a72a13df2bdf48b1842f934700f04583cfe7e087cb5ed11bdbf0"}]}