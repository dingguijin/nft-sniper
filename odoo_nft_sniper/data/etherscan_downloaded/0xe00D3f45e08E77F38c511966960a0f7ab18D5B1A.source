{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity 0.8.12;\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IVoterID {\r\n    /**\r\n        @notice Minting function\r\n    */\r\n    function createIdentityFor(address newId, uint tokenId, string calldata uri) external;\r\n\r\n    /**\r\n        @notice Who has the authority to override metadata uri\r\n    */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n        @notice How many of these things exist?\r\n    */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n        @notice Which tokens were burned by which address?\r\n    */\r\n    function getBurned(address _owner) external view returns (uint[] memory);\r\n\r\n}\r\n\r\n/// @title A slightly modified enumerable, metadataed NFT contract, compatible with MerkleIdentity contract\r\n/// @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\r\n/// @dev This contract uses no subclassing to make it easier to read and reason about\r\n/// @dev This contract conforms to ERC721 and ERC165 but not ERC1155 because it's a crappy standard :P\r\ncontract VoterID is IVoterID {\r\n\r\n    // mapping from tokenId to owner of that tokenId\r\n    mapping (uint => address) public owners;\r\n    // mapping from address to amount of NFTs they own\r\n    mapping (address => uint) public balances;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) public operatorApprovals;\r\n    // weird single-address-per-token-id mapping (why not just use operatorApprovals??)\r\n    mapping (uint => address) public tokenApprovals;\r\n\r\n    // forward and backward mappings used for enumerable standard\r\n    // owner -> array of tokens owned...  ownershipMapIndexToToken[owner][index] = tokenNumber\r\n    // owner -> array of tokens owned...  ownershipMapTokenToIndex[owner][tokenNumber] = index\r\n    mapping (address => mapping (uint => uint)) public ownershipMapIndexToToken;\r\n    mapping (address => mapping (uint => uint)) public ownershipMapTokenToIndex;\r\n\r\n    // array-like map of all tokens in existence #enumeration\r\n    mapping (uint => uint) public allTokens;\r\n    mapping (uint => uint) public allTokenIndices;\r\n\r\n    mapping (address => uint[]) public burnedTokens;\r\n\r\n    // tokenId -> uri ... typically ipfs://...\r\n    mapping (uint => string) public uriMap;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    bytes4 private constant INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n    bytes4 private constant INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    string _name;\r\n    string _symbol;\r\n\r\n    // count the number of NFTs minted\r\n    uint public numIdentities;\r\n\r\n    // owner is a special name in the OpenZeppelin standard that opensea annoyingly expects for their management page\r\n    address public _owner_;\r\n    // minter has the sole, permanent authority to mint identities, in practice this will be a contract\r\n    address public _minter;\r\n\r\n    event OwnerUpdated(address oldOwner, address newOwner);\r\n    event IdentityCreated(address indexed owner, uint indexed token);\r\n\r\n\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    error TokenAlreadyExists(uint tokenId);\r\n    error OnlyMinter(address notMinter);\r\n    error OnlyOwner(address notOwner);\r\n    error InvalidToken(uint tokenId);\r\n    error InvalidIndex(uint tokenIndex);\r\n    error ZeroAddress();\r\n    error TokenOwnershipRequired(uint tokenId, address notOwner);\r\n    error UnauthorizedApproval(uint tokenId, address unauthorized);\r\n    error SelfApproval(uint tokenId, address owner);\r\n    error NFTUnreceivable(address receiver);\r\n    error UnapprovedTransfer(uint tokenId, address notApproved);\r\n\r\n    /// @notice Whoever deploys the contract determines the name, symbol and owner. Minter should be MerkleIdentity contract\r\n    /// @dev names are misspelled on purpose because we already have owners and _owner_ and _name and...\r\n    /// @param ooner the owner of this contract\r\n    /// @param minter address (MerkleIdentity contract) that can mint NFTs in this series\r\n    /// @param nomen name of the NFT series\r\n    /// @param symbowl symbol for the NFT series\r\n    constructor(address ooner, address minter, string memory nomen, string memory symbowl) {\r\n        _owner_ = ooner;\r\n        // we set it here with no resetting allowed so we cannot commit to NFTs and then reset\r\n        _minter = minter;\r\n        _name = nomen;\r\n        _symbol = symbowl;\r\n    }\r\n\r\n    /// @notice Create a new NFT in this series, with the given tokenId and uri\r\n    /// @dev All permissions around minting should be done thru MerkleIdentity and it's associate gates\r\n    /// @dev Only the minter contract can call this, and duplicate tokenIds are not allowed\r\n    /// @param thisOwner the owner of this particular NFT, not the owner of the contract\r\n    /// @param thisToken the tokenId that the newly NFT will have\r\n    /// @param uri the metadata string that this NFT will have\r\n    function createIdentityFor(address thisOwner, uint thisToken, string calldata uri) external override {\r\n        if (msg.sender != _minter) {\r\n            revert OnlyMinter(msg.sender);\r\n        }\r\n        if (owners[thisToken] != address(0)) {\r\n            revert TokenAlreadyExists(thisToken);\r\n        }\r\n\r\n        // for getTokenByIndex below, 0 based index so we do it before incrementing numIdentities\r\n        allTokenIndices[thisToken] = numIdentities;\r\n        allTokens[numIdentities++] = thisToken;\r\n\r\n\r\n        // two way mapping for enumeration\r\n        ownershipMapIndexToToken[thisOwner][balances[thisOwner]] = thisToken;\r\n        ownershipMapTokenToIndex[thisOwner][thisToken] = balances[thisOwner];\r\n\r\n\r\n        // set owner of new token\r\n        owners[thisToken] = thisOwner;\r\n        // increment balances for owner\r\n        ++balances[thisOwner];\r\n        uriMap[thisToken] = uri;\r\n        emit Transfer(address(0), thisOwner, thisToken);\r\n        emit IdentityCreated(thisOwner, thisToken);\r\n    }\r\n\r\n    /// ================= SETTERS =======================================\r\n\r\n    /// @notice Changing the owner key\r\n    /// @dev Only current owner may do this\r\n    /// @param newOwner the new address that will be owner, old address is no longer owner\r\n    function setOwner(address newOwner) external {\r\n        if (msg.sender != _owner_) {\r\n            revert OnlyOwner(msg.sender);\r\n        }\r\n\r\n        address oldOwner = _owner_;\r\n        _owner_ = newOwner;\r\n        emit OwnerUpdated(oldOwner, newOwner);\r\n    }\r\n\r\n    // manually set the token URI\r\n    /// @notice Manually set the token URI\r\n    /// @dev This is just a backup in case some metadata goes wrong, this is basically the only thing the owner can do\r\n    /// @param token tokenId that we are setting metadata for\r\n    /// @param uri metadata that will be associated to this token\r\n    function setTokenURI(uint token, string calldata uri) external {\r\n        if (msg.sender != _owner_) {\r\n            revert OnlyOwner(msg.sender);\r\n        }\r\n\r\n        uriMap[token] = uri;\r\n    }\r\n\r\n    function endMinting() external {\r\n        if (msg.sender != _owner_) {\r\n            revert OnlyOwner(msg.sender);\r\n        }\r\n\r\n        _minter = address(0);\r\n    }\r\n\r\n    function getBurned(address owner) external view returns (uint[] memory) {\r\n        return burnedTokens[owner];\r\n    }\r\n\r\n    /// ================= ERC 721 FUNCTIONS =============================================\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _address An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `owner`, possibly zero\r\n    function balanceOf(address _address) external view returns (uint256) {\r\n        if (_address == address(0)) {\r\n            revert ZeroAddress();\r\n        }\r\n        return balances[_address];\r\n    }\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 tokenId) external view returns (address)  {\r\n        address ooner = owners[tokenId];\r\n        if (ooner == address(0)) {\r\n            revert InvalidToken(tokenId);\r\n        }\r\n        return ooner;\r\n    }\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `from` is\r\n    ///  not the current owner. Throws if `to` is the zero address. Throws if\r\n    ///  `tokenId` is not a valid NFT.\r\n    /// @param from The current owner of the NFT\r\n    /// @param to The new owner\r\n    /// @param tokenId The NFT to transfer\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        if (isApproved(msg.sender, tokenId) == false) {\r\n            revert UnapprovedTransfer(tokenId, msg.sender);\r\n        }\r\n        transfer(from, to, tokenId);\r\n    }\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `from` is\r\n    ///  not the current owner. Throws if `to` is the zero address. Throws if\r\n    ///  `tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param from The current owner of the NFT\r\n    /// @param to The new owner\r\n    /// @param tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `to`\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {\r\n        if (checkOnERC721Received(from, to, tokenId, data) == false) {\r\n            revert NFTUnreceivable(to);\r\n        }\r\n        transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param from The current owner of the NFT\r\n    /// @param to The new owner\r\n    /// @param tokenId The NFT to transfer\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param approved The new approved NFT controller\r\n    /// @param tokenId The NFT to approve\r\n    function approve(address approved, uint256 tokenId) public {\r\n        address holder = owners[tokenId];\r\n        if (isApproved(msg.sender, tokenId) == false) {\r\n            revert UnauthorizedApproval(tokenId, msg.sender);\r\n        }\r\n        if (holder == approved) {\r\n            revert SelfApproval(tokenId, holder);\r\n        }\r\n        tokenApprovals[tokenId] = approved;\r\n        emit Approval(holder, approved, tokenId);\r\n    }\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param operator Address to add to the set of authorized operators\r\n    /// @param approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address operator, bool approved) external {\r\n        operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `tokenId` is not a valid NFT.\r\n    /// @param tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 tokenId) external view returns (address) {\r\n        address holder = owners[tokenId];\r\n        if (holder == address(0)) {\r\n            revert InvalidToken(tokenId);\r\n        }\r\n        return tokenApprovals[tokenId];\r\n    }\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _address The address that owns the NFTs\r\n    /// @param operator The address that acts on behalf of the owner\r\n    /// @return True if `operator` is an approved operator for `owner`, false otherwise\r\n    function isApprovedForAll(address _address, address operator) public view returns (bool) {\r\n        return operatorApprovals[_address][operator];\r\n    }\r\n\r\n    /// ================ UTILS =========================\r\n\r\n    /// @notice Look thru all 3 (???) notions of approval for one that matches\r\n    /// @dev There was a bug in this part of the contract when it was originally forked from OpenZeppelin\r\n    /// @param operator the address whose approval we are querying\r\n    /// @param tokenId the specific NFT about which we are querying approval\r\n    /// @return approval is the operator approved to transfer this tokenId?\r\n    function isApproved(address operator, uint tokenId) public view returns (bool) {\r\n        address holder = owners[tokenId];\r\n        return (\r\n            operator == holder ||\r\n            operatorApprovals[holder][operator] ||\r\n            tokenApprovals[tokenId] == operator\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Standard NFT transfer logic\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     * @param from current owner of the NFT\r\n     * @param to new owner of the NFT\r\n     * @param tokenId which NFT is getting transferred\r\n     */\r\n    function transfer(address from, address to, uint256 tokenId) internal {\r\n        if (owners[tokenId] != from) {\r\n            revert TokenOwnershipRequired(tokenId, from);\r\n        }\r\n        if (to == address(0)) {\r\n            burnedTokens[owners[tokenId]].push(tokenId);\r\n\r\n            // by decrementing here, we avoid having to subtract 1 below\r\n            numIdentities--;\r\n\r\n            // slot the last one into the current one\r\n            uint lastToken = allTokens[numIdentities];\r\n            uint tokenIndex = allTokenIndices[tokenId];\r\n\r\n            // these need to be in this order in case tokenId == lastToken\r\n            allTokens[tokenIndex] = lastToken;\r\n            allTokens[numIdentities] = 0;\r\n\r\n            // these need to be in this order in case tokenId == lastToken\r\n            allTokenIndices[lastToken] = tokenIndex;\r\n            allTokenIndices[tokenId] = 0;\r\n\r\n        } else {\r\n            // set two way mapping for recipient, but only if new owner is not zero address\r\n            ownershipMapIndexToToken[to][balances[to]] = tokenId;\r\n            ownershipMapTokenToIndex[to][tokenId] = balances[to];\r\n\r\n            balances[to] += 1;\r\n        }\r\n\r\n        // Clear approvals from the previous owner\r\n        approve(address(0), tokenId);\r\n\r\n        owners[tokenId] = to;\r\n\r\n        // update balances\r\n        balances[from] -= 1;\r\n\r\n        // zero out two way mapping\r\n        uint ownershipIndex = ownershipMapTokenToIndex[from][tokenId];\r\n        ownershipMapTokenToIndex[from][tokenId] = 0;\r\n        if (ownershipIndex != balances[from]) {\r\n            uint reslottedToken = ownershipMapIndexToToken[from][balances[from]];\r\n            ownershipMapIndexToToken[from][ownershipIndex] = reslottedToken;\r\n            ownershipMapIndexToToken[from][balances[from]] = 0;\r\n            ownershipMapTokenToIndex[from][reslottedToken] = ownershipIndex;\r\n        } else {\r\n            ownershipMapIndexToToken[from][ownershipIndex] = 0;\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data)\r\n        private returns (bool)\r\n    {\r\n        if (to.code.length == 0) {\r\n            return true;\r\n        }\r\n        IERC721Receiver target = IERC721Receiver(to);\r\n        bytes4 retval = target.onERC721Received(from, to, tokenId, data);\r\n        return ERC721_RECEIVED == retval;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC165 function to tell other contracts which interfaces we support\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     * @dev This whole interface thing is a little pointless, because contracts can lie or mis-implement the interface\r\n     * @dev so you might as well just use a try catch\r\n     * @param interfaceId the first four bytes of the hash of the signatures of the functions of the interface in question\r\n     * @return supports true if the interface is supported, false otherwise\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\r\n        return (\r\n            interfaceId == INTERFACE_ID_ERC721 ||\r\n            interfaceId == INTERFACE_ID_ERC165 ||\r\n            interfaceId == INTERFACE_ID_ERC721_ENUMERABLE ||\r\n            interfaceId == INTERFACE_ID_ERC721_METADATA\r\n        );\r\n    }\r\n\r\n    /// ================= ERC721Metadata FUNCTIONS =============================================\r\n\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    /// @return name the intended name\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    /// @return symbol the intended ticker symbol\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    /// @return uri the tokenUri for a specific tokenId\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n        if (owners[_tokenId] == address(0)) {\r\n            revert InvalidToken(_tokenId);\r\n        }\r\n        return uriMap[_tokenId];\r\n    }\r\n\r\n    /// @notice The address that can set the tokenUri for tokens\r\n    /// @return The address that can set the tokenUri for tokens\r\n    function owner() public view override returns (address) {\r\n        return _owner_;\r\n    }\r\n\r\n    /// ================= ERC721Enumerable FUNCTIONS =============================================\r\n\r\n\r\n    /// @notice Count NFTs tracked by this contract\r\n    /// @return A count of valid NFTs tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner not equal to the zero address\r\n    function totalSupply() external view override returns (uint256) {\r\n        return numIdentities;\r\n    }\r\n\r\n    /// @notice Enumerate valid NFTs\r\n    /// @dev Throws if `_index` >= `totalSupply()`.\r\n    /// @param _index A counter less than `totalSupply()`\r\n    /// @return The token identifier for the `_index`th NFT,\r\n    ///  (sort order not specified)\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        if (_index >= numIdentities) {\r\n            revert InvalidIndex(_index);\r\n        }\r\n        return allTokens[_index];\r\n    }\r\n\r\n    /// @notice Enumerate NFTs assigned to an owner\r\n    /// @dev Throws if `_index` >= `balanceOf(_owner_)` or if\r\n    ///  `_owner_` is the zero address, representing invalid NFTs.\r\n    /// @param _address An address where we are interested in NFTs owned by them\r\n    /// @param _index A counter less than `balanceOf(_owner_)`\r\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner_`,\r\n    ///   (sort order not specified)\r\n    function tokenOfOwnerByIndex(address _address, uint256 _index) external view returns (uint256) {\r\n        if (_index >= balances[_address]) {\r\n            revert InvalidIndex(_index);\r\n        }\r\n        if (_address == address(0)) {\r\n            revert ZeroAddress();\r\n        }\r\n        return ownershipMapIndexToToken[_address][_index];\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ooner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nomen\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbowl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"NFTUnreceivable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notMinter\",\"type\":\"address\"}],\"name\":\"OnlyMinter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notOwner\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SelfApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"notOwner\",\"type\":\"address\"}],\"name\":\"TokenOwnershipRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"notApproved\",\"type\":\"address\"}],\"name\":\"UnapprovedTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unauthorized\",\"type\":\"address\"}],\"name\":\"UnauthorizedApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"IdentityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokenIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"thisOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"thisToken\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"createIdentityFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getBurned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numIdentities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operatorApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownershipMapIndexToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownershipMapTokenToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uriMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VoterID","CompilerVersion":"v0.8.12+commit.f00d7308","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000288fe43139741f91a8cbb6f4add83811c794851b000000000000000000000000f17c9ffd50f2caa47c473892e289a3c1812a2866000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000c5472696233205469636b6574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065472696233540000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc1aaf50e11ecc3cef1b714941ee30f6fe525080b6112cbf1b679f2cd862eada"}]}