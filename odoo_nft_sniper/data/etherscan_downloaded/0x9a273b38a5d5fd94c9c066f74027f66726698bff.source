{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n Website : https://aztecinu.tech/\r\n Telegram :  https://t.me/aztecinu\r\n Twitter : https://twitter.com/aztecinuerc\r\n\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B5J?!!7JJJB&&&&&&&@G~~~!7?Y5GB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G^:::^7?777Y&&&&&&&&?:^!7777777B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&!:^^~????7?&&&&&&&&~^7??????7J&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#&&&@5:^^!?????7B&&&&&&G:!???????7G&&&&#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@&BPY?7777Y&&&&~:^~?????7P&&&&&@Y:7??????7J&&&&?^~!7?YPB&@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@B?~^:^!77??7B&&@5:^^7????7J&&&&&&7^???????7P&&&G^::^::::^~?B@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@!:::~??????7J&&&#~:^7????7?#&&&&#^~??????7?#&&&!:~!77!~^^::!@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@&##@@@@@@Y:^^!???????7P&&@5:^!?????7G&&&&G:7??????7P&&@5^!??????~^^:Y@@@@@@#B&@@@@@@@@@@@\r\n@@@@@@@@@GJ???YB@@@@@7:^~???????7?#&&&!:~?????7P&&&@Y^7?????7J&&&B^!???????~^:!&@@@@G7^^~?G@@@@@@@@@\r\n@@@@@@@G!~777777Y#@@@#~:^!???????7J&&@P:^7????7Y&&&&7~??????7G&&&7!???????!^:~#@@@B7:::^:::!P@@@@@@@\r\n@@@@@&?:^7??????7?5&@@#~:^!???????7P&&&7:~????7J&&&&~!?????7J&&@Y~???????7^:~#@@&J^:^~!!77!!~?#@@@@@\r\n@@@@B~:^!????????77JB@@#!:^7??????77G&@G^^77!~^!P&&G?7????7?B&@P~7??????7^:!#@@G~^!7?????????7?#@@@@\r\n@@@B~:^^~??????????775&&5!77???????7?P##!:^^~~!!!P57??????7J##P77???????77!5&&J^!7????????????7?#@@@\r\n@@@!:^^^^!??????????77??7?????777777?!~^^~!7?????7^!???????7??7??777777????7??~7???????????????7J@@@\r\n@@@5~:::::^!??????????77??7!~^^^~~~^~^^~7???????7Y7:!???????77??7777!!!!!7??77???????????777777?P@@@\r\n@@@@&GYJ7!^:^!7?????????7~^^~!77??!^:^7????????7J#B!:~!7??????????????77!~~7?????????7777?JY5PB&@@@@\r\n@@@@@@@@@@#GY7~~!?????7~^^!7?????!^^~7????????7?B&@B^:^^7??????????JJ?????!^~7?????77?YPB&@@@@@@@@@@\r\n@@@@@@@@@@@@@@&P77???7^^!?????JJ~::~???????????7B&&G:^^~??????????7?YYYJJJJ?!77???7JB&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@&GYJJ?????777??????J!::~7???????????7G&@P:^^!???????????7?????????7????77??YG&@@@@@@@@@@@\r\n@@@@@@@@@#Y!~~~!7??????????777?7~!7????????????7P&@5:^^7????????????77777777??J?!~^^:^^~75&@@@@@@@@@\r\n@@@@@@@@P~:^^^^^~7???J?????????????????????????7P&@5:^~?????????????????????JJJ7^^^~~!~~^^7B@@@@@@@@\r\n@@@@@@@Y:^!77?77^~???JJ????????????????????????7G&&P:^~???????????????????7?JJJ7^^!?????7!^~P@@@@@@@\r\n@@@@@@5:!7?777??~^???JJ?7????????7!~~~~~!!7???7?B&&B^:!?7!~~~~~~!7????????7?JJJ?^:~??7777?7~^P@@@@@@\r\n@@@@@B^7?77JPBP7^!?7?JJ?????????!^:::^^^^~7?777J&&&&!:!?7~^^^^:::^!??777????JJJ?!^^!??5PY?7?~~B@@@@@\r\n@@@@@?7?7?G&&G7^~???JJJ??77!~~7?7!!!!!777??????G&&&&P!?JJJ??7!!!!~7??7^^~!77?JJJ?!^^!?G&&#57?~?@@@@@\r\n@@@@#7?7?#@#Y!^~7??JJJ?!~^^::!?777??JJYYYYYJ77?JJJ!?JJYYY5PPGGP5YJ?777!^:^^^~?JJJ?!^:~7Y#&&577~#@@@@\r\n@@@@G77?B&G?~^!???JJJ7^^::^^!7??Y555YY7~7?77~^!?77~7777!!77??JY5GBBBPY?7^^^::^7JJJ?7~:^!?G&&Y7!P@@@@\r\n@@@@P77P&Y!^~7???JJJ?!^^^~!7J5P5YJ7!!77~~7??7~~7?7~!???~!???7?!^~7J5G##B5?~^~~7?JJJJ?!^:^!Y##?75@@@@\r\n@@@@57JB?^^!7??JJJ7!7?777JPG5?~~7~^^!??!^~!77~~!!7!!!!!~~7???7~^!?777?YG&&B5?77!!?JJJ?7^:^~?B575@@@@\r\n@@@@P7J7:^!??JJJ7~^~777JGBY!^~7?J7~^7???!~~~~~~~~!!!~~~~~~!77~~~7??7~~!7?5#@&PJ7^^!?JJJ?~:^~?P7P@@@@\r\n@@@@B7!:^7??JJ?~:^!?7JGBJ~^!7JY5PY~~7??7!~~!!!!!!!!!!!!!!!~!7~^~7?YPY?!~!7?5#@&GJ^:^!JJJ?~^^~?7B@@@@\r\n@@@@&!:^7??JJ!^^~77?P&5~^!7J5PPY7!!!??7!!7??JYYY5555555YYJ?777~^777YPP5J!~!7?P&&&P7^^^?JJJ!^:~?&@@@@\r\n@@@@&~^7?JJJ?!!7?7J#&?^~7?YPPY7~~~77?7?JJJJ?77!!!!!!!77?JY5PP5J!!7~~75PPPJ~~77Y#&&#Y!!7JJJJ!^^7&@@@@\r\n@@@@B^7??JJ?7??775&#7^!7J5P5?!!~~~77!!7!~~~~~~~~~~~~~~~~~~~~7?!!!!~~~~?5PP57^!7J#&&&P77?JJJ?~:~#@@@@\r\n@@@@B~??JJ?7777?G@#!^!7YPPJ~~~~~~~:::^~~~~~~~~~~~~~~~~~~~~~~~~^....^~~!7YPPP?^!7J#&&&P77?JJJ?^^#@@@@\r\n@@@@&?7?J???JJYB&&?^!7YPPJ!!!!!~~:     .^~~~~~~~~~~~~~~~~~~^.  ..  .~~!!!JPPP?^!7Y&&&&P???JJ?!~&@@@@\r\n@@@@@P?PGB##&&&&@P^~7JPPY777?7~!~.  !J7^.:^~~~~~~~~~~~~~~~~^:~YP5: .~~J57!?PPP7^77G&&&&&##BBP7Y@@@@@\r\n@@@@@&JGPYJYY5PB#7^!?5P5!!7?!~!7!. :GGY7~~~~~~~~~~~~~~~~~~~!!!7JG7  ~~7PP?!?5P5~~7JBG5YJJY55PJ&@@@@@\r\n@@@@577J?^~!77?JY5J?JPPJ~!7~:!!77: ~Y!~~^^^^~~~~~~~~~~~~^^:::^~~!7  ~~~!PG?!?PP?~JYJ!^~777J!^!?P@@@@\r\n@@#!^7?J?~???JJ7!7555PPJ!!!.^~~!7^.!7!!^.    ..^~~~~~~:.    .:~~~~^.~~~~!PP7YPPJJJ!~~~~??7J!~777Y&@@\r\n@&!:^!7JJ!7?J?777!!555PP57^:~~~~!~!7777!!^:::::^~~~~~~^:::^^~~~~~~~~~~~~~?GGPPJY5~^~?J7!7?J~!??J77&@\r\n@P^^!~~!J?JY?7?????JP5PPPY.:~~~~~~~!!77777??7!~~~~~~~~~7?7!!~~~~~~~~~~~~~~G#P5557:^!77??7YJ!???!!~P@\r\n@Y^~7?7!P@@&GY???7775PPPGP^:~~~~~~~~~~!!JG##7~?7~~~~~!5GGJ~?Y~~~~~~~~~~~~!G#PY55^^~777!5&@@BJ77???5@\r\n@5^^!???#@@@@5?777!^J55PGG!:~~~~~~~~~~~~YB###BBY~~~~~!PGGGP5J~~~~~~~~~~~~?G#5Y5J:^!????&@@@&J7!!7!P@\r\n@#^^~7??J#@@#Y?????~J55PGG!.!!~!~~~~~~~~~!7?JJ?77!!~~~~!7!!!~~~^^^^^^~~~~?G#555J:^!7!!?B@@&5J?7!~~#@\r\n@@5^~!777?Y??????J?~Y55PGG! ^!!!^:::^^^::^^~~!!JPGGGP57~~~~^:.:~!!!~:.:~~7BBP55Y^:^!?J?77YJJ77??~5@@\r\n@@@5~^^7??Y77????7~?PPPPG57..~!: ^JJJ??!.  ..:^P####&&G::.    ^77777^  :~!BPP5557^~?J??!!?77?~!?5@@@\r\n@@@@G^^^~7JJ7?77!~755PPPY7?!..^ ..:^^^:.   :.~.^J5GBPJ^.!.^ .   ...    .~JJPPP5J57^^!7!~J???!~~G@@@@\r\n@@@@P~~~^^~7~^^^~?Y7?PGJ!77?!. ...       ^?!.::  ^PG!  .^:75!         .^??!JPP5!?Y?!^^^!J77!!7JB@@@@\r\n@@@&~:~??7777!77?J?7~?PP?!77?7:  .........^7YJ7!?YJJJ?7?YBY: .       .^77!?5P5!!J?!7??7777??JJ??&@@@\r\n@@@J:^~???JJJJJJJJ?G7~?5PJ7!7??~.  .......  :5B5!7777!?PG7  ....  ..:~!!!JPPY!7JB7^:!?????????775@@@\r\n@@#^^^7??77????????YB?~7YP5?!77?7~:   ...... .?BGYJJJ5G5^      .:^^~~!!7YPPJ!7Y&P7^^~?777777???7?#@@\r\n@@J:^~??????????????5BY~!JPPY?777??!^.    ...  :?PPP5Y~.     .:^^~7??7JPP57!?5&&J!^^^7??????????75@@\r\n@&~^:!??????????????J5BG7~7YPG5J777???!~:..       .:.      .:^^~!77?JPG5J77JB&&5?!^^^7??????????7?&@\r\n@P^^^!???????????????Y5G#5!~7YPP5?77777???7!~~^^::::::^^^~~!!!!!~~?PPPJ77JP&&&P??~^^^7???????77!~~P@\r\n@?^~7!!!77??777777?Y55555B#57~7JP?!7777777777???????????77!!~~~~~~7PP?7JP&@&B5Y5Y~^^^!77??77!~!!77Y@\r\n#~^^7?77!~!!7777???Y5555555B#G?!7J?777777777777777777777777!!~~~~7YPYYG&@&BPY555Y~~!!~~~!!!!!7???7?&\r\nP:^:~????777???????????J55555B&#5????JYYJ7777777777???777777?J??YPGG#&&&B5YYJ???7^~!7?77777???????7G\r\nJ:^^!???????????????????J5555YYP#&#G5JJJJ?777777777777777777?JYPB#&&&#G5YYYJ????~^^:~?????????????75\r\n7:^^!????????????????????J55555YY5PB&&#BP5YJ??777777???JJYPGB&&&&&BP5YYYYYJ?????^^^^!?????????????7J\r\n~^^^~?????????????????????JY55555YYYY5PB#&&&&&########&&&&&&&#BP5YYYYYYYY??????7^^^^7?????????????7?\r\n^:::^777??????????????????JGBGPP555YYYYYYY55PGGBBBBBBBBGGP55YYYYYYYY5PPBGY?????~^^^!????????????7777\r\nPJ7~^^^^^~~!777?????????5#@@@@@@&&#BGGP555YYYYYYYYYYYYYYYYY55PGGB##&@@@@@@#PJ?7^^^^^^~~~~~~~~~~!7?YG\r\n@@@&#BPYJ?7!~~~!!77???P&@@@@@@@@@@@@@@@@@&&&###BBBBBB###&&&@@@@@@@@@@@@@@@@@&P!^^^^^^^~~!7?JYPG#&@@@\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract AZTECINU is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"AZTEC INU\";\r\n    string private constant _symbol = \"AZTECINU\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 10000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    //Buy Fee\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _taxFeeOnBuy = 10;\r\n\r\n    //Sell Fee\r\n    uint256 private _redisFeeOnSell = 0;\r\n    uint256 private _taxFeeOnSell = 10;\r\n\r\n    //Original Fee\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _taxFee = _taxFeeOnSell;\r\n\r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n\r\n    mapping(address => bool) public bots;\r\n    mapping(address => uint256) private cooldown;\r\n\r\n    address payable private _developmentAddress = payable(0x08738a75F3DE0Ab6cb32A04B499DD39c82310895);\r\n    address payable private _marketingAddress = payable(0xe66B0959C3E06611caA03ba24Cc6bf34b169c122);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n\r\n    uint256 public _maxTxAmount = 100000 * 10**9; //1%\r\n    uint256 public _maxWalletSize = 100000 * 10**9; //1%\r\n    uint256 public _swapTokensAtAmount = 40000 * 10**9; //.4%\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_developmentAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n\r\n\r\n\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n\r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n\r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n\r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n\r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n            require(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n\r\n            if(to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n\r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        //Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n\r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnBuy;\r\n                _taxFee = _taxFeeOnBuy;\r\n            }\r\n\r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnSell;\r\n                _taxFee = _taxFeeOnSell;\r\n            }\r\n\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _developmentAddress.transfer(amount.div(2));\r\n        _marketingAddress.transfer(amount.div(2));\r\n    }\r\n\r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function blockBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unblockBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        _redisFeeOnBuy = redisFeeOnBuy;\r\n        _redisFeeOnSell = redisFeeOnSell;\r\n\r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n\r\n    //Set MAx transaction\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AZTECINU","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9b706c735777843d5d9c16c6c714b59fce68a23f1afce4cefffc48766d92d1c1"}]}