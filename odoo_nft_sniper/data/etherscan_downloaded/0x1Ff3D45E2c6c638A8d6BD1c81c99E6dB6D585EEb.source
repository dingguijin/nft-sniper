{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libraries/IterableBalances.sol\r\n\r\npragma solidity 0.6.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @dev Models a address -> uint mapping where it is possible to iterate over all keys.\r\nlibrary IterableBalances {\r\n    struct iterableBalances {\r\n        mapping(address => Balances) balances;\r\n        KeyFlag[] keys;\r\n        uint256 size;\r\n    }\r\n\r\n    struct Balances {\r\n        uint256 keyIndex;\r\n        uint256 balance;\r\n        uint256 locked;\r\n    }\r\n    struct KeyFlag {\r\n        address key;\r\n        bool deleted;\r\n    }\r\n\r\n    function insert(\r\n        iterableBalances storage self,\r\n        address key,\r\n        uint256 balance\r\n    ) public {\r\n        uint256 keyIndex = self.balances[key].keyIndex;\r\n        self.balances[key].balance = balance;\r\n\r\n        if (keyIndex == 0) {\r\n            keyIndex = self.keys.length;\r\n            self.keys.push();\r\n            self.balances[key].keyIndex = keyIndex + 1;\r\n            self.keys[keyIndex].key = key;\r\n            self.size++;\r\n        }\r\n    }\r\n\r\n    function remove(iterableBalances storage self, address key) public {\r\n        uint256 keyIndex = self.balances[key].keyIndex;\r\n\r\n        require(\r\n            keyIndex != 0,\r\n            \"Cannot remove balance : key is not in balances\"\r\n        );\r\n\r\n        delete self.balances[key];\r\n        self.keys[keyIndex - 1].deleted = true;\r\n        self.size--;\r\n    }\r\n\r\n    function contains(iterableBalances storage self, address key)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return self.balances[key].keyIndex > 0;\r\n    }\r\n\r\n    function iterate_start(iterableBalances storage self)\r\n        public\r\n        view\r\n        returns (uint256 keyIndex)\r\n    {\r\n        return iterate_next(self, uint256(-1));\r\n    }\r\n\r\n    function iterate_valid(iterableBalances storage self, uint256 keyIndex)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return keyIndex < self.keys.length;\r\n    }\r\n\r\n    function iterate_next(iterableBalances storage self, uint256 keyIndex)\r\n        public\r\n        view\r\n        returns (uint256 r_keyIndex)\r\n    {\r\n        keyIndex++;\r\n\r\n        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted) {\r\n            keyIndex++;\r\n        }\r\n\r\n        return keyIndex;\r\n    }\r\n\r\n    function iterate_get(iterableBalances storage self, uint256 keyIndex)\r\n        public\r\n        view\r\n        returns (\r\n            address key,\r\n            uint256 balance,\r\n            uint256 locked\r\n        )\r\n    {\r\n        key = self.keys[keyIndex].key;\r\n        balance = self.balances[key].balance;\r\n        locked = self.balances[key].locked;\r\n    }\r\n\r\n    event Dummy(); // Needed otherwise typechain has no output\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SecurityTokenBalancesLibrary.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n/// @dev Models a address -> uint mapping where it is possible to iterate over all keys.\r\nlibrary SecurityTokenBalancesLibrary {\r\n    using IterableBalances for IterableBalances.iterableBalances;\r\n    using SafeMath for uint256;\r\n\r\n    struct SecurityTokenBalances {\r\n        address issuer;\r\n        IterableBalances.iterableBalances iterableBalances;\r\n    }\r\n\r\n    struct Balance {\r\n        address _address;\r\n        uint256 _balance;\r\n        uint256 _locked;\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); // Only for erc20 explorer\r\n\r\n    function setIssuer(SecurityTokenBalances storage self, address key) public {\r\n        self.issuer = key;\r\n    }\r\n\r\n    function mint(\r\n        SecurityTokenBalances storage self,\r\n        address key,\r\n        uint256 balance\r\n    ) public {\r\n        require(key == self.issuer, \"Only issuer balance can be minted\");\r\n        self.iterableBalances.insert(key, balance);\r\n    }\r\n\r\n    function lock(\r\n        SecurityTokenBalances storage self,\r\n        address key,\r\n        uint256 valueToLock\r\n    ) public {\r\n        require(\r\n            self.iterableBalances.balances[key].balance -\r\n                self.iterableBalances.balances[key].locked >=\r\n                valueToLock,\r\n            \"Can not lock value : insufficient disposable balance\"\r\n        );\r\n\r\n        self.iterableBalances.balances[key].locked += valueToLock;\r\n    }\r\n\r\n    function unlock(\r\n        SecurityTokenBalances storage self,\r\n        address key,\r\n        uint256 valueToUnlock\r\n    ) public {\r\n        require(\r\n            self.iterableBalances.balances[key].balance >= valueToUnlock,\r\n            \"Can not unlock value : insufficient balance\"\r\n        );\r\n        require(\r\n            self.iterableBalances.balances[key].locked >= valueToUnlock,\r\n            \"Can not unlock value : insufficient locked balance\"\r\n        );\r\n\r\n        self.iterableBalances.balances[key].locked -= valueToUnlock;\r\n    }\r\n\r\n    function burn(\r\n        SecurityTokenBalances storage self,\r\n        address _from,\r\n        uint256 _value\r\n    ) public {\r\n        require(\r\n            self.iterableBalances.balances[_from].balance -\r\n                self.iterableBalances.balances[_from].locked >=\r\n                _value,\r\n            \"Can not burn value : insufficient disposable balance\"\r\n        );\r\n\r\n        self.iterableBalances.balances[_from].balance -= _value;\r\n\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n\r\n    function transferLocked(\r\n        SecurityTokenBalances storage self,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external {\r\n        unlock(self, _from, _value);\r\n\r\n        self.iterableBalances.balances[_from].balance -= _value;\r\n\r\n        self.iterableBalances.insert(\r\n            _to,\r\n            self.iterableBalances.balances[_to].balance + _value\r\n        );\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function getBalance(SecurityTokenBalances storage self, address _address)\r\n        external\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return self.iterableBalances.balances[_address].balance;\r\n    }\r\n\r\n    function getFullBalance(\r\n        SecurityTokenBalances storage self,\r\n        address _address\r\n    ) external view returns (Balance memory value) {\r\n        return\r\n            Balance(\r\n                _address,\r\n                self.iterableBalances.balances[_address].balance,\r\n                self.iterableBalances.balances[_address].locked\r\n            );\r\n    }\r\n\r\n    function getFullBalances(SecurityTokenBalances storage self)\r\n        public\r\n        view\r\n        returns (Balance[] memory value)\r\n    {\r\n        address tokenHolder = address(0);\r\n        uint256 balance;\r\n        uint256 locked;\r\n        uint256 balancesSize = self.iterableBalances.size;\r\n        Balance[] memory addressBalanceArray = new Balance[](balancesSize);\r\n        for (\r\n            uint256 index = self.iterableBalances.iterate_start();\r\n            self.iterableBalances.iterate_valid(index);\r\n            index = self.iterableBalances.iterate_next(index)\r\n        ) {\r\n            (tokenHolder, balance, locked) = self.iterableBalances.iterate_get(\r\n                index\r\n            );\r\n            addressBalanceArray[index] = Balance(tokenHolder, balance, locked);\r\n        }\r\n\r\n        return addressBalanceArray;\r\n    }\r\n\r\n    function totalSupply(SecurityTokenBalances storage self)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 total = 0;\r\n        uint256 balance;\r\n        uint256 locked;\r\n\r\n        for (\r\n            uint256 index = self.iterableBalances.iterate_start();\r\n            self.iterableBalances.iterate_valid(index);\r\n            index = self.iterableBalances.iterate_next(index)\r\n        ) {\r\n            (, balance, locked) = self.iterableBalances.iterate_get(index);\r\n\r\n            total += balance + locked;\r\n        }\r\n\r\n        return total;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/BasicTokenLibrary.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\nlibrary BasicTokenLibrary {\r\n    struct BasicToken {\r\n        address owner;\r\n        uint256 initialSupply;\r\n        uint256 currentSupply;\r\n        string name;\r\n        string symbol;\r\n        string isinCode;\r\n        address settler;\r\n        address registrar;\r\n        SecurityTokenBalancesLibrary.SecurityTokenBalances securityTokenBalances;\r\n    }\r\n    event Dummy(); // Needed otherwise typechain has no output\r\n\r\n    struct BasicTokenInput {\r\n        uint256 initialSupply;\r\n        string isinCode;\r\n        string name;\r\n        string symbol;\r\n        uint256 denomination;\r\n        uint256 divisor;\r\n        uint256 startDate;\r\n        uint256 initialMaturityDate;\r\n        uint256 firstCouponDate;\r\n        uint256 couponFrequencyInMonths;\r\n        uint256 interestRateInBips;\r\n        bool callable;\r\n        bool isSoftBullet;\r\n        uint256 softBulletPeriodInMonths;\r\n        string currency;\r\n        address registrarAddress;\r\n        address settlerAgentAddress;\r\n        address issuerAddress;\r\n    }\r\n\r\n    struct Bond {\r\n        uint256 denomination;\r\n        uint256 divisor;\r\n        uint256 startDate;\r\n        uint256 maturityDate;\r\n        uint256 currentMaturityDate;\r\n        uint256 firstCouponDate;\r\n        uint256 couponFrequencyInMonths;\r\n        uint256 interestRateInBips;\r\n        bool callable;\r\n        bool isSoftBullet;\r\n        uint256 softBulletPeriodInMonths;\r\n        string termsheetUrl;\r\n        string currency;\r\n        mapping(address => uint256) tokensToBurn;\r\n        uint256 state;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/OperatorManagerLibrary.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\nlibrary OperatorManagerLibrary {\r\n    struct OperatorAuthorization {\r\n        uint256 operatorRole;\r\n    }\r\n\r\n    struct OperatorManager {\r\n        mapping(address => OperatorAuthorization[]) authorizationsByOperator;\r\n    }\r\n\r\n    event NewOperator(address _by, address _operator, uint256 _operatorRole);\r\n    event RevokeOperator(address _by, address _operator, uint256 _operatorRole);\r\n\r\n    function authorizeOperator(\r\n        OperatorManager storage operatorManager,\r\n        uint256 _operatorRole,\r\n        address _operator\r\n    ) external {\r\n        OperatorAuthorization memory operatorAuthorization;\r\n        operatorAuthorization.operatorRole = _operatorRole;\r\n        operatorManager.authorizationsByOperator[_operator].push(\r\n            operatorAuthorization\r\n        );\r\n\r\n        emit NewOperator(msg.sender, _operator, _operatorRole);\r\n    }\r\n\r\n    function isOperatorWithRoleAuthorized(\r\n        OperatorManager storage operatorManager,\r\n        address _operator,\r\n        uint256 _operatorRole\r\n    ) external view returns (bool) {\r\n        OperatorAuthorization[] storage operatorAuthorizations =\r\n            operatorManager.authorizationsByOperator[_operator];\r\n\r\n        for (uint256 i = 0; i < operatorAuthorizations.length; i++) {\r\n            if (operatorAuthorizations[i].operatorRole == _operatorRole) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function revokeOperatorAuthorization(\r\n        OperatorManager storage operatorManager,\r\n        address _operator,\r\n        uint256 _operatorRole\r\n    ) external {\r\n        OperatorAuthorization[] storage operatorAuthorizations =\r\n            operatorManager.authorizationsByOperator[_operator];\r\n\r\n        for (uint256 i = 0; i < operatorAuthorizations.length; i++) {\r\n            if (operatorAuthorizations[i].operatorRole == _operatorRole) {\r\n                delete operatorAuthorizations[i];\r\n                emit RevokeOperator(msg.sender, _operator, _operatorRole);\r\n                return;\r\n            }\r\n        }\r\n\r\n        revert(\"Can not revoke role : target does not have role\");\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IOperatorManager.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\ninterface IOperatorManager {\r\n    function authorizeOperator(uint256 _roleName, address _operatorAddress)\r\n        external;\r\n\r\n    function isOperatorWithRoleAuthorized(\r\n        address _operatorAddress,\r\n        uint256 _roleName\r\n    ) external view returns (bool);\r\n\r\n    function revokeOperatorAuthorization(\r\n        address _operatorAddress,\r\n        uint256 _roleName\r\n    ) external;\r\n\r\n    event NewOperator(address indexed _by, address indexed _operator);\r\n}\r\n\r\n// File: contracts/libraries/SettlementRepositoryLibrary.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\nlibrary SettlementRepositoryLibrary {\r\n    using SecurityTokenBalancesLibrary for SecurityTokenBalancesLibrary.SecurityTokenBalances;\r\n    using SettlementRepositoryLibrary for SettlementRepositoryLibrary.SettlementTransactionRepository;\r\n\r\n    using BasicTokenLibrary for BasicTokenLibrary.BasicToken;\r\n\r\n    uint256 private constant CREATED = 0x01;\r\n    uint256 private constant TOKEN_LOCKED = 0x02;\r\n    uint256 private constant CASH_RECEIVED = 0x03;\r\n    uint256 public constant CASH_TRANSFERRED = 0x04;\r\n    uint256 private constant ERROR = 0xFF;\r\n\r\n    struct SettlementTransactionRepository {\r\n        mapping(uint256 => SettlementTransaction) settlementTransactionById; // mapping ( settlementtransactionId => settlementtransaction)\r\n        mapping(uint256 => uint256) operationTypeByOperationId; // operationId -> operationType\r\n    }\r\n\r\n    struct SettlementTransaction {\r\n        uint256 txId;\r\n        uint256 operationId;\r\n        address deliverySenderAccountNumber;\r\n        address deliveryReceiverAccountNumber;\r\n        uint256 deliveryQuantity;\r\n        uint256 status;\r\n        string txHash;\r\n    }\r\n\r\n    struct PartialSettlementTransaction {\r\n        uint256 txId;\r\n        uint256 operationId;\r\n        address deliverySenderAccountNumber; // redemption investor - subscription issuer\r\n        address deliveryReceiverAccountNumber; // redemption issuer - subscription investor\r\n        uint256 deliveryQuantity;\r\n        string txHash;\r\n    }\r\n\r\n    function getSettlementTransactionById(\r\n        SettlementTransactionRepository storage settlementTransactionRepository,\r\n        uint256 id\r\n    ) public view returns (SettlementTransaction memory) {\r\n        SettlementTransaction storage settlementTransaction =\r\n            settlementTransactionRepository.settlementTransactionById[id];\r\n\r\n        return settlementTransaction;\r\n        // the return will be copied on memory to ensure no unwanted mutation\r\n        // can be done. This have an impact on gas consumption as memory\r\n        // expansion cost gas.\r\n    }\r\n\r\n    function setSettlementTransactionStatus(\r\n        SettlementTransactionRepository storage settlementTransactionRepository,\r\n        uint256 txId,\r\n        uint256 status\r\n    ) internal {\r\n        require(\r\n            status == CREATED ||\r\n                status == TOKEN_LOCKED ||\r\n                status == CASH_RECEIVED ||\r\n                status == CASH_TRANSFERRED ||\r\n                status == ERROR,\r\n            \"Can not set status : Invalid Status\"\r\n        );\r\n\r\n        SettlementTransaction storage settlementTransaction =\r\n            settlementTransactionRepository.settlementTransactionById[txId];\r\n        settlementTransaction.status = status;\r\n    }\r\n\r\n    function createSettlementTransaction(\r\n        SettlementTransactionRepository storage settlementTransactionRepository,\r\n        PartialSettlementTransaction memory partialSettlementTransaction\r\n    ) internal {\r\n        require(\r\n            settlementTransactionRepository.settlementTransactionById[\r\n                partialSettlementTransaction.txId\r\n            ]\r\n                .txId != partialSettlementTransaction.txId,\r\n            \"Settlement Transaction already exist with this id\"\r\n        );\r\n\r\n        SettlementTransaction memory newSettlementTransaction =\r\n            SettlementTransaction({\r\n                txId: partialSettlementTransaction.txId,\r\n                operationId: partialSettlementTransaction.operationId,\r\n                deliverySenderAccountNumber: partialSettlementTransaction\r\n                    .deliverySenderAccountNumber,\r\n                deliveryReceiverAccountNumber: partialSettlementTransaction\r\n                    .deliveryReceiverAccountNumber,\r\n                deliveryQuantity: partialSettlementTransaction.deliveryQuantity,\r\n                txHash: partialSettlementTransaction.txHash,\r\n                status: CREATED\r\n            });\r\n        settlementTransactionRepository.settlementTransactionById[\r\n            partialSettlementTransaction.txId\r\n        ] = newSettlementTransaction;\r\n    }\r\n\r\n    // Operation type management\r\n\r\n    function getOperationType(\r\n        SettlementTransactionRepository storage settlementTransactionRepository,\r\n        uint256 _operationId\r\n    ) external view returns (uint256) {\r\n        return\r\n            settlementTransactionRepository.operationTypeByOperationId[\r\n                _operationId\r\n            ];\r\n    }\r\n\r\n    function getOperationTypeForSettlementTransaction(\r\n        SettlementTransactionRepository storage settlementTransactionRepository,\r\n        uint256 _settlementTransactionId\r\n    ) external view returns (uint256) {\r\n        return\r\n            settlementTransactionRepository.operationTypeByOperationId[\r\n                settlementTransactionRepository.settlementTransactionById[\r\n                    _settlementTransactionId\r\n                ]\r\n                    .operationId\r\n            ];\r\n    }\r\n\r\n    function setOperationType(\r\n        SettlementTransactionRepository storage settlementTransactionRepository,\r\n        uint256 _operationId,\r\n        uint256 _operationType\r\n    ) internal {\r\n        settlementTransactionRepository.operationTypeByOperationId[\r\n            _operationId\r\n        ] = _operationType;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SettlementWorkflowLibrary.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\nlibrary SettlementWorkflowLibrary {\r\n    uint256 private constant CREATED = 0x01;\r\n    uint256 private constant TOKEN_LOCKED = 0x02;\r\n    uint256 private constant CASH_RECEIVED = 0x03;\r\n    uint256 public constant CASH_TRANSFERRED = 0x04;\r\n    uint256 private constant ERROR = 0xFF;\r\n\r\n    uint256 private constant SUBSCRIPTION = 0x01;\r\n    uint256 private constant REDEMPTION = 0x02;\r\n    uint256 private constant TRADE = 0x03;\r\n\r\n    using SettlementRepositoryLibrary for SettlementRepositoryLibrary.SettlementTransactionRepository;\r\n    using SecurityTokenBalancesLibrary for SecurityTokenBalancesLibrary.SecurityTokenBalances;\r\n\r\n    function initiateDVP(\r\n        SettlementRepositoryLibrary.SettlementTransactionRepository\r\n            storage settlementTransactionRepository,\r\n        BasicTokenLibrary.BasicToken storage token,\r\n        uint256 settlementTransactionId\r\n    ) public {\r\n        SettlementRepositoryLibrary.SettlementTransaction memory st =\r\n            settlementTransactionRepository.getSettlementTransactionById(\r\n                settlementTransactionId\r\n            );\r\n\r\n        token.securityTokenBalances.lock(\r\n            st.deliverySenderAccountNumber,\r\n            st.deliveryQuantity\r\n        );\r\n\r\n        settlementTransactionRepository.setSettlementTransactionStatus(\r\n            settlementTransactionId,\r\n            TOKEN_LOCKED\r\n        );\r\n    }\r\n\r\n    function initiateSubscription(\r\n        SettlementRepositoryLibrary.SettlementTransactionRepository\r\n            storage settlementTransactionRepository,\r\n        BasicTokenLibrary.BasicToken storage token,\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction\r\n            memory partialSettlementTransaction\r\n    ) public {\r\n        settlementTransactionRepository.createSettlementTransaction(\r\n            partialSettlementTransaction\r\n        );\r\n\r\n        initiateDVP(\r\n            settlementTransactionRepository,\r\n            token,\r\n            partialSettlementTransaction.txId\r\n        );\r\n\r\n        settlementTransactionRepository.setOperationType(\r\n            partialSettlementTransaction.operationId,\r\n            SUBSCRIPTION\r\n        );\r\n    }\r\n\r\n    function initiateTrade(\r\n        SettlementRepositoryLibrary.SettlementTransactionRepository\r\n            storage settlementTransactionRepository,\r\n        BasicTokenLibrary.BasicToken storage token,\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction\r\n            memory partialSettlementTransaction\r\n    ) public {\r\n        settlementTransactionRepository.createSettlementTransaction(\r\n            partialSettlementTransaction\r\n        );\r\n\r\n        initiateDVP(\r\n            settlementTransactionRepository,\r\n            token,\r\n            partialSettlementTransaction.txId\r\n        );\r\n\r\n        settlementTransactionRepository.setOperationType(\r\n            partialSettlementTransaction.operationId,\r\n            TRADE\r\n        );\r\n    }\r\n\r\n    function initiateRedemption(\r\n        SettlementRepositoryLibrary.SettlementTransactionRepository\r\n            storage settlementTransactionRepository,\r\n        BasicTokenLibrary.BasicToken storage token,\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction[]\r\n            memory partialSettlementTransactions\r\n    ) public {\r\n        for (uint256 i = 0; i < partialSettlementTransactions.length; i++) {\r\n            settlementTransactionRepository.createSettlementTransaction(\r\n                partialSettlementTransactions[i]\r\n            );\r\n\r\n            initiateDVP(\r\n                settlementTransactionRepository,\r\n                token,\r\n                partialSettlementTransactions[i].txId\r\n            );\r\n        }\r\n\r\n        settlementTransactionRepository.setOperationType(\r\n            partialSettlementTransactions[0].operationId,\r\n            REDEMPTION\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IBasicToken.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\ninterface IBasicToken {}\r\n\r\n// File: contracts/interfaces/ISettlement.sol\r\n\r\npragma solidity 0.6.7;\r\ninterface ISettlement {\r\n    function initiateSubscription(\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction\r\n            calldata partialSettlementTransaction\r\n    ) external;\r\n\r\n    function initiateTrade(\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction\r\n            calldata partialSettlementTransaction\r\n    ) external;\r\n\r\n    function initiateRedemption(\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction[]\r\n            calldata settlementTransaction\r\n    ) external;\r\n\r\n    function confirmPaymentReceived(uint256 settlementTransactionId) external;\r\n\r\n    function confirmPaymentTransferred(uint256 settlementTransactionId)\r\n        external;\r\n\r\n    event SubscriptionInitiated(uint256 settlementTransactionId);\r\n    event TradeInitiated(uint256 settlementTransactionId);\r\n    event RedemptionInitiated(uint256[] settlementTransactionIds);\r\n    event PaymentReceived(uint256 settlementTransactionId);\r\n    event PaymentTransferred(uint256 settlementTransactionId);\r\n}\r\n\r\n// File: contracts/tokens/ForgeBond.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ForgeBond is IBasicToken, IOperatorManager, ISettlement {\r\n    using BasicTokenLibrary for BasicTokenLibrary.BasicToken;\r\n    using BasicTokenLibrary for BasicTokenLibrary.Bond;\r\n\r\n    using SecurityTokenBalancesLibrary for SecurityTokenBalancesLibrary.SecurityTokenBalances;\r\n    using OperatorManagerLibrary for OperatorManagerLibrary.OperatorManager;\r\n    using SettlementRepositoryLibrary for SettlementRepositoryLibrary.SettlementTransactionRepository;\r\n\r\n    BasicTokenLibrary.BasicToken private token;\r\n    BasicTokenLibrary.Bond private bond;\r\n    OperatorManagerLibrary.OperatorManager private operatorManager;\r\n    SettlementRepositoryLibrary.SettlementTransactionRepository\r\n        private settlementTransactionRepository;\r\n\r\n    uint256 public constant REGISTRAR_ROLE = 0x01;\r\n    uint256 public constant SETTLER_ROLE = 0x02;\r\n\r\n    // bond state Type\r\n    uint256 private constant STATE_CREATED = 0x01;\r\n    uint256 private constant STATE_RUNNING = 0x02;\r\n    uint256 private constant STATE_REDEEMED = 0x03;\r\n\r\n    // operation Type\r\n    uint256 private constant SUBSCRIPTION = 0x01;\r\n    uint256 private constant REDEMPTION = 0x02;\r\n    uint256 private constant TRADE = 0x03;\r\n\r\n    // Settlement Status\r\n    uint256 private constant CREATED = 0x01;\r\n    uint256 private constant TOKEN_LOCKED = 0x02;\r\n    uint256 private constant CASH_RECEIVED = 0x03;\r\n    uint256 public constant CASH_TRANSFERRED = 0x04;\r\n    uint256 private constant ERROR = 0xFF;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); // Only for erc20 explorer\r\n\r\n    constructor(BasicTokenLibrary.BasicTokenInput memory basicTokenInput)\r\n        public\r\n    {\r\n        token.owner = basicTokenInput.issuerAddress;\r\n        token.initialSupply = basicTokenInput.initialSupply;\r\n        token.currentSupply = basicTokenInput.initialSupply;\r\n        token.isinCode = basicTokenInput.isinCode;\r\n        token.name = basicTokenInput.name;\r\n        token.symbol = basicTokenInput.symbol;\r\n        token.settler = basicTokenInput.settlerAgentAddress;\r\n        token.registrar = basicTokenInput.registrarAddress;\r\n        token.securityTokenBalances.setIssuer(token.owner);\r\n        token.securityTokenBalances.mint(token.owner, token.initialSupply);\r\n        bond.denomination = basicTokenInput.denomination;\r\n        bond.divisor = basicTokenInput.divisor;\r\n        bond.startDate = basicTokenInput.startDate;\r\n        bond.maturityDate = basicTokenInput.initialMaturityDate;\r\n        bond.currentMaturityDate = bond.maturityDate;\r\n        bond.firstCouponDate = basicTokenInput.firstCouponDate;\r\n        bond.couponFrequencyInMonths = basicTokenInput.couponFrequencyInMonths;\r\n        bond.interestRateInBips = basicTokenInput.interestRateInBips;\r\n        bond.callable = basicTokenInput.callable;\r\n        bond.isSoftBullet = basicTokenInput.isSoftBullet;\r\n        bond.state = STATE_CREATED;\r\n        bond.currency = basicTokenInput.currency;\r\n        bond.softBulletPeriodInMonths = basicTokenInput\r\n            .softBulletPeriodInMonths;\r\n        operatorManager.authorizeOperator(REGISTRAR_ROLE, token.registrar);\r\n        operatorManager.authorizeOperator(SETTLER_ROLE, token.settler);\r\n    }\r\n\r\n    // Basic Token\r\n    function owner() public view returns (address) {\r\n        return token.owner;\r\n    }\r\n\r\n    function settler() public view returns (address) {\r\n        return token.settler;\r\n    }\r\n\r\n    function registrar() public view returns (address) {\r\n        return token.registrar;\r\n    }\r\n\r\n    function initialSupply() public view returns (uint256) {\r\n        return token.initialSupply;\r\n    }\r\n\r\n    function currentSupply() public view returns (uint256) {\r\n        return token.currentSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return token.name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return token.symbol;\r\n    }\r\n\r\n    function isinCode() public view returns (string memory) {\r\n        return token.isinCode;\r\n    }\r\n\r\n    // Bond\r\n    function denomination() public view returns (uint256) {\r\n        return bond.denomination;\r\n    }\r\n\r\n    function divisor() public view returns (uint256) {\r\n        return bond.divisor;\r\n    }\r\n\r\n    function startDate() public view returns (uint256) {\r\n        return bond.startDate;\r\n    }\r\n\r\n    function maturityDate() public view returns (uint256) {\r\n        return bond.maturityDate;\r\n    }\r\n\r\n    function currentMaturityDate() public view returns (uint256) {\r\n        return bond.currentMaturityDate;\r\n    }\r\n\r\n    function firstCouponDate() public view returns (uint256) {\r\n        return bond.firstCouponDate;\r\n    }\r\n\r\n    function couponFrequencyInMonths() public view returns (uint256) {\r\n        return bond.couponFrequencyInMonths;\r\n    }\r\n\r\n    function interestRateInBips() public view returns (uint256) {\r\n        return bond.interestRateInBips;\r\n    }\r\n\r\n    function callable() public view returns (bool) {\r\n        return bond.callable;\r\n    }\r\n\r\n    function isSoftBullet() public view returns (bool) {\r\n        return bond.isSoftBullet;\r\n    }\r\n\r\n    function softBulletPeriodInMonths() public view returns (uint256) {\r\n        return bond.softBulletPeriodInMonths;\r\n    }\r\n\r\n    function currency() public view returns (string memory) {\r\n        return bond.currency;\r\n    }\r\n\r\n    // Modifiers\r\n    modifier issuerOnly() {\r\n        require(\r\n            msg.sender == token.owner,\r\n            \"Only issuer can perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier registrarOnly() {\r\n        require(\r\n            operatorManager.isOperatorWithRoleAuthorized(\r\n                msg.sender,\r\n                REGISTRAR_ROLE\r\n            ),\r\n            \"Only a registrar can perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier settlerOnly() {\r\n        require(\r\n            operatorManager.isOperatorWithRoleAuthorized(\r\n                msg.sender,\r\n                SETTLER_ROLE\r\n            ),\r\n            \"Only a settler can perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // [ERC-20] Only\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return token.securityTokenBalances.getBalance(_owner);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        pure\r\n        returns (bool success)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 0;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return token.securityTokenBalances.totalSupply();\r\n    }\r\n\r\n    function burn(uint256 quantity) public registrarOnly {\r\n        token.securityTokenBalances.burn(token.owner, quantity);\r\n    }\r\n\r\n    // IBasicToken\r\n\r\n    function getFullBalances()\r\n        public\r\n        view\r\n        returns (SecurityTokenBalancesLibrary.Balance[] memory value)\r\n    {\r\n        return token.securityTokenBalances.getFullBalances();\r\n    }\r\n\r\n    function getBalance(address _address) public view returns (uint256 value) {\r\n        return token.securityTokenBalances.getBalance(_address);\r\n    }\r\n\r\n    // IOperatorManager\r\n    function authorizeOperator(uint256 _roleName, address _operatorAddress)\r\n        public\r\n        override\r\n        issuerOnly()\r\n    {\r\n        operatorManager.authorizeOperator(_roleName, _operatorAddress);\r\n    }\r\n\r\n    function isOperatorWithRoleAuthorized(\r\n        address _operatorAddress,\r\n        uint256 _roleName\r\n    ) public view override returns (bool) {\r\n        return\r\n            operatorManager.isOperatorWithRoleAuthorized(\r\n                _operatorAddress,\r\n                _roleName\r\n            );\r\n    }\r\n\r\n    function revokeOperatorAuthorization(\r\n        address _operatorAddress,\r\n        uint256 _roleName\r\n    ) public override issuerOnly() {\r\n        operatorManager.revokeOperatorAuthorization(\r\n            _operatorAddress,\r\n            _roleName\r\n        );\r\n    }\r\n\r\n    // ISettlement\r\n    function initiateSubscription(\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction\r\n            memory partialSettlementTransaction\r\n    ) public override registrarOnly {\r\n        require(\r\n            bond.state < STATE_REDEEMED,\r\n            \"You can not doing a Subscription initiation after Redemption state\"\r\n        );\r\n        SettlementWorkflowLibrary.initiateSubscription(\r\n            settlementTransactionRepository,\r\n            token,\r\n            partialSettlementTransaction\r\n        );\r\n        bond.state = STATE_RUNNING;\r\n        emit SubscriptionInitiated(partialSettlementTransaction.txId);\r\n    }\r\n\r\n    function initiateTrade(\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction\r\n            memory partialSettlementTransaction\r\n    ) public override registrarOnly {\r\n        require(\r\n            bond.state < STATE_REDEEMED,\r\n            \"You can not doing a Trade initiation after Redemption state\"\r\n        );\r\n        SettlementWorkflowLibrary.initiateTrade(\r\n            settlementTransactionRepository,\r\n            token,\r\n            partialSettlementTransaction\r\n        );\r\n        bond.state = STATE_RUNNING;\r\n        emit TradeInitiated(partialSettlementTransaction.txId);\r\n    }\r\n\r\n    function confirmPaymentReceived(uint256 _settlementTransactionId)\r\n        external\r\n        override\r\n        settlerOnly\r\n    {\r\n        uint256 operationType =\r\n            settlementTransactionRepository\r\n                .getOperationTypeForSettlementTransaction(\r\n                _settlementTransactionId\r\n            );\r\n\r\n        if (operationType == SUBSCRIPTION) {\r\n            handleConfirmPaymentReceived(_settlementTransactionId);\r\n        } else if (operationType == REDEMPTION) {\r\n            handleConfirmPaymentReceived(_settlementTransactionId);\r\n        } else if (operationType == TRADE) {\r\n            handleConfirmPaymentReceived(_settlementTransactionId);\r\n        } else {\r\n            revert(\"If you see this, this is really bad\");\r\n        }\r\n\r\n        emit PaymentReceived(_settlementTransactionId);\r\n    }\r\n\r\n    function handleConfirmPaymentReceived(uint256 settlementTransactionId)\r\n        internal\r\n    {\r\n        SettlementRepositoryLibrary.SettlementTransaction memory st =\r\n            settlementTransactionRepository.getSettlementTransactionById(\r\n                settlementTransactionId\r\n            );\r\n\r\n        require(\r\n            st.status == TOKEN_LOCKED,\r\n            \"The settlement transaction is not in TOKEN_LOCKED state\"\r\n        );\r\n\r\n        token.securityTokenBalances.transferLocked(\r\n            st.deliverySenderAccountNumber,\r\n            st.deliveryReceiverAccountNumber,\r\n            st.deliveryQuantity\r\n        );\r\n\r\n        settlementTransactionRepository.setSettlementTransactionStatus(\r\n            settlementTransactionId,\r\n            CASH_RECEIVED\r\n        );\r\n    }\r\n\r\n    function confirmPaymentTransferred(uint256 _settlementTransactionId)\r\n        external\r\n        override\r\n        settlerOnly\r\n    {\r\n        SettlementRepositoryLibrary.SettlementTransaction memory st =\r\n            settlementTransactionRepository.getSettlementTransactionById(\r\n                _settlementTransactionId\r\n            );\r\n\r\n        require(\r\n            st.status == CASH_RECEIVED,\r\n            \"The settlement transaction is not in CASH_RECEIVED state\"\r\n        );\r\n        emit PaymentTransferred(_settlementTransactionId);\r\n\r\n        settlementTransactionRepository.setSettlementTransactionStatus(\r\n            _settlementTransactionId,\r\n            CASH_TRANSFERRED\r\n        );\r\n    }\r\n\r\n    function getCurrentState(uint256 _settlementTransactionId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            settlementTransactionRepository\r\n                .getSettlementTransactionById(_settlementTransactionId)\r\n                .status;\r\n    }\r\n\r\n    function getOperationType(uint256 _operationId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return settlementTransactionRepository.getOperationType(_operationId);\r\n    }\r\n\r\n    function initiateRedemption(\r\n        SettlementRepositoryLibrary.PartialSettlementTransaction[]\r\n            memory partialSettlementTransactions\r\n    ) public override registrarOnly {\r\n        require(\r\n            bond.state < STATE_REDEEMED,\r\n            \"You can not doing a Redemption initiation after Redemption finished\"\r\n        );\r\n        uint256[] memory ids =\r\n            new uint256[](partialSettlementTransactions.length);\r\n\r\n        SettlementWorkflowLibrary.initiateRedemption(\r\n            settlementTransactionRepository,\r\n            token,\r\n            partialSettlementTransactions\r\n        );\r\n\r\n        for (uint256 i = 0; i < partialSettlementTransactions.length; i++) {\r\n            ids[i] = partialSettlementTransactions[i].txId;\r\n        }\r\n        bond.state = STATE_REDEEMED;\r\n        emit RedemptionInitiated(ids);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"isinCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"denomination\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstCouponDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponFrequencyInMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateInBips\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"callable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSoftBullet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"softBulletPeriodInMonths\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registrarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlerAgentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"internalType\":\"struct BasicTokenLibrary.BasicTokenInput\",\"name\":\"basicTokenInput\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementTransactionId\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementTransactionId\",\"type\":\"uint256\"}],\"name\":\"PaymentTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"settlementTransactionIds\",\"type\":\"uint256[]\"}],\"name\":\"RedemptionInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementTransactionId\",\"type\":\"uint256\"}],\"name\":\"SubscriptionInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementTransactionId\",\"type\":\"uint256\"}],\"name\":\"TradeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CASH_TRANSFERRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRAR_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTLER_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roleName\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlementTransactionId\",\"type\":\"uint256\"}],\"name\":\"confirmPaymentReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlementTransactionId\",\"type\":\"uint256\"}],\"name\":\"confirmPaymentTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponFrequencyInMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaturityDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstCouponDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlementTransactionId\",\"type\":\"uint256\"}],\"name\":\"getCurrentState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_locked\",\"type\":\"uint256\"}],\"internalType\":\"struct SecurityTokenBalancesLibrary.Balance[]\",\"name\":\"value\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationId\",\"type\":\"uint256\"}],\"name\":\"getOperationType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deliverySenderAccountNumber\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deliveryReceiverAccountNumber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deliveryQuantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"internalType\":\"struct SettlementRepositoryLibrary.PartialSettlementTransaction[]\",\"name\":\"partialSettlementTransactions\",\"type\":\"tuple[]\"}],\"name\":\"initiateRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deliverySenderAccountNumber\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deliveryReceiverAccountNumber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deliveryQuantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"internalType\":\"struct SettlementRepositoryLibrary.PartialSettlementTransaction\",\"name\":\"partialSettlementTransaction\",\"type\":\"tuple\"}],\"name\":\"initiateSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deliverySenderAccountNumber\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deliveryReceiverAccountNumber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deliveryQuantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"internalType\":\"struct SettlementRepositoryLibrary.PartialSettlementTransaction\",\"name\":\"partialSettlementTransaction\",\"type\":\"tuple\"}],\"name\":\"initiateTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateInBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roleName\",\"type\":\"uint256\"}],\"name\":\"isOperatorWithRoleAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSoftBullet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isinCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roleName\",\"type\":\"uint256\"}],\"name\":\"revokeOperatorAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softBulletPeriodInMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ForgeBond","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000006088308e00000000000000000000000000000000000000000000000000000000644be90e00000000000000000000000000000000000000000000000000000000626ab58e000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000030000000000000000000000000089ace546613b2cbb4510eab030a61bcdd11c8b85000000000000000000000000e08106fad4add8dbffbbd0813027625a57c06fbd0000000000000000000000004d1578465fa9bf3dd4d7252848a55145d632f9a4000000000000000000000000000000000000000000000000000000000000000c4652303031343030333532310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4652303031343030333532310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c465230303134303033353231000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034555520000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"SecurityTokenBalancesLibrary:880cef9f42f60dbaa1002cb0155581076921818a;SettlementRepositoryLibrary:5e40a66f97e906b282f8c240706ef6e0dc041334;OperatorManagerLibrary:9c1c4ee19a85d42baa7b78e4d6c6dfb0c8fc3f9a;SettlementWorkflowLibrary:217b894016bb81ab6405eeca5e6c359157b7c07e","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://96d4fc11b652a999e6c457612e58a1cf5979f857fc5d3f660f141e11de9311b6"}]}