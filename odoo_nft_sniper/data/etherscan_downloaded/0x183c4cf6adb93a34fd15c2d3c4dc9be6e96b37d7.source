{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Initialized {\r\n    bool internal initialized;\r\n    \r\n    modifier noInit(){\r\n        require(!initialized, \"initialized\");\r\n        _;\r\n        initialized = true;\r\n    }\r\n}\r\n\r\ncontract Storage is Initialized{\r\n    //ERC20 pubilc variables\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    \r\n    //manager \r\n    address public owner;\r\n    address public rebaser;\r\n    address public minter;\r\n    address public receiver;\r\n    \r\n    //Factor\r\n    uint256 public scalingFactor;\r\n    uint256 internal fragment;\r\n    uint256 internal _totalSupply;\r\n    uint256 constant Decimals = 10**24;\r\n    uint256 constant BASE = 10**18;\r\n    \r\n    mapping (address => uint256) internal fragmentBalances;\r\n    mapping (address => mapping (address => uint256)) internal allowedFragments;\r\n    \r\n    \r\n    //modifier\r\n    modifier onlyRebaser() {\r\n        require(msg.sender == rebaser, \"LUCA: only rebaser\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n         require(msg.sender == owner, \"LUCA: only owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter, \"LUCA: only minter\");\r\n        _;\r\n    }\r\n}\r\n\r\ninterface ILuca is IERC20{\r\n    //event\r\n    event Rebase(uint256 epoch, uint256 indexDelta, bool positive);\r\n    \r\n    //luca core\r\n    function mint(uint256 amount) external;\r\n    function burn(uint256 amount) external;\r\n    function rebase(uint256 epoch, uint256 indexDelta, bool positive) external returns (uint256);\r\n    function rebaseByMilli(uint256 epoch, uint256 milli, bool positive) external returns (uint256);\r\n    \r\n    //query\r\n    function lucaToFragment(uint256 value) external view returns (uint256);\r\n    function fragmentToLuca(uint256 value) external view returns (uint256);\r\n    \r\n    //manager\r\n    function setOwner(address user) external;\r\n    function setMinter(address user) external;\r\n    function setReceiver(address user) external;\r\n    function setRebaser(address user) external;\r\n}\r\n\r\ncontract Token is Storage, IERC20{\r\n    using SafeMath for uint256;\r\n    \r\n    //IERC20 \r\n    function totalSupply() override external view returns (uint256){\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) override external returns (bool) {\r\n        _transferFragment(msg.sender, to, _lucaToFragment(value));\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) override external returns (bool){\r\n        uint256 fragmentValue = _lucaToFragment(value);\r\n        allowedFragments[from][msg.sender] = allowedFragments[from][msg.sender].sub(fragmentValue);\r\n        _transferFragment(from, to, fragmentValue);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address who) override external view returns (uint256){\r\n        return _fragmentToLuca(fragmentBalances[who]);\r\n    }\r\n\r\n    function allowance(address owner_, address spender) override external view returns (uint256){\r\n        return _fragmentToLuca(allowedFragments[owner_][spender]);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) override external returns (bool){\r\n        uint256 fragmentValue = _lucaToFragment(value);\r\n        allowedFragments[msg.sender][spender] = fragmentValue;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    //internal \r\n    function _mint(address to, uint256 amount) internal {\r\n        require(to != address(0), \"to addres cannot be 0\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        uint256 scaledAmount = _lucaToFragment(amount);\r\n        fragment = fragment.add(scaledAmount);\r\n        require(scalingFactor <= _maxScalingFactor(), \"LUCA: max scaling factor too low\");\r\n        fragmentBalances[to] = fragmentBalances[to].add(scaledAmount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address user, uint256 amount) internal {\r\n        require(user != address(0), \"user address cannot be 0\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        uint256 scaledAmount = _lucaToFragment(amount);\r\n        fragment = fragment.sub(scaledAmount);\r\n        fragmentBalances[user] = fragmentBalances[user].sub(scaledAmount);\r\n        emit Transfer(user ,address(0), amount);\r\n    }\r\n    \r\n    function _transferFragment(address from, address to, uint256 value ) internal {\r\n        require(to != address(0), \"to address cannot be 0\");\r\n        fragmentBalances[from] = fragmentBalances[from].sub(value);\r\n        fragmentBalances[to] = fragmentBalances[to].add(value);\r\n    }\r\n    \r\n    function _maxScalingFactor() internal view returns (uint256){\r\n       return (type(uint256).max).div(fragment);\r\n    }\r\n\r\n    function _fragmentToLuca(uint256 value) internal view returns(uint256){ \r\n         return value.mul(scalingFactor).div(Decimals);\r\n    }\r\n\r\n    function _lucaToFragment(uint value) internal view returns (uint256){\r\n        return value.mul(Decimals).div(scalingFactor);\r\n    }\r\n}\r\n\r\ncontract Luca is Token, ILuca{\r\n    using SafeMath for uint256;\r\n    \r\n    function initialize(string memory name, string memory symbol, uint256 totalSupply) external {\r\n        _initialize(name, symbol, 18, totalSupply*10**18);\r\n    }\r\n    \r\n     function setOwner(address user) override external onlyOwner{\r\n        require(user != address(0), \"user address cannot be 0\");\r\n        owner = user;\r\n    }\r\n\r\n    function setReceiver(address user) override external onlyOwner{\r\n        require(user != address(0), \"user address cannot be 0\");\r\n        receiver = user;\r\n    }\r\n    \r\n    function setMinter(address user) override external onlyOwner{\r\n        require(user != address(0), \"user address cannot be 0\");\r\n        minter =  user;\r\n    }\r\n    \r\n    function setRebaser(address user) override external onlyOwner{\r\n        require(user != address(0), \"user address cannot be 0\");\r\n        rebaser = user;\r\n    }\r\n    \r\n    function rebaseByMilli(uint256 epoch, uint256 milli, bool positive) override external onlyRebaser returns (uint256){\r\n        require(milli < 1000, \"LUCA: milli need less than 1000\");\r\n        return _rebase(epoch, milli.mul(BASE).div(1000), positive);\r\n\r\n    }\r\n    \r\n    function rebase(uint256 epoch, uint256 indexDelta, bool positive) override external onlyRebaser returns (uint256){\r\n         return _rebase(epoch, indexDelta, positive);\r\n    }\r\n    \r\n    function mint(uint256 amount) override external onlyMinter {\r\n        _mint(receiver, amount);\r\n    }\r\n    \r\n    function burn(uint256 amount) override external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    \r\n    function fragmentToLuca(uint256 value) override external view returns (uint256){\r\n        return _fragmentToLuca(value);\r\n    }\r\n    \r\n    function lucaToFragment(uint256 value) override external view returns (uint256){\r\n      return _lucaToFragment(value);\r\n    }\r\n    \r\n    function _rebase(uint256 epoch, uint256 indexDelta, bool positive) internal returns (uint256){\r\n        emit Rebase(epoch, indexDelta, positive);\r\n        if (indexDelta == 0)  return _totalSupply;\r\n        \r\n        if (!positive) {\r\n            require(indexDelta < BASE);\r\n            scalingFactor = scalingFactor.mul(BASE.sub(indexDelta)).div(BASE);\r\n        } else {\r\n            uint256 newScalingFactor = scalingFactor.mul(BASE.add(indexDelta)).div(BASE);\r\n            if (newScalingFactor < _maxScalingFactor()) {\r\n                scalingFactor = newScalingFactor;\r\n            } else {\r\n                scalingFactor = _maxScalingFactor();\r\n            }\r\n        }\r\n        \r\n        _totalSupply = _fragmentToLuca(fragment);\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function _initialize(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initTotalSupply) internal noInit {\r\n        scalingFactor = BASE;\r\n        owner = msg.sender;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        _totalSupply = _initTotalSupply;\r\n        fragment = _lucaToFragment(_initTotalSupply);\r\n        fragmentBalances[msg.sender] = fragment;\r\n        rebaser = owner;\r\n        minter = owner;\r\n        receiver = owner;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"fragmentToLuca\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"lucaToFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milli\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"}],\"name\":\"rebaseByMilli\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setRebaser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Luca","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5bdf76b49e2421b85e4f337cd3ddb975493e4e1c0b6f0aae58e0c6a46b7658cd"}]}