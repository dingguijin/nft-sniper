{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IRoleManager.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IRoleManager {\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function addGovernor(address newGovernor) external;\r\n\r\n    function renounceGovernance() external;\r\n\r\n    function addGaugeZap(address zap) external;\r\n\r\n    function removeGaugeZap(address zap) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n}\r\n\r\n\r\n// File libraries/Errors.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Error {\r\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\r\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\r\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\r\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\r\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\r\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\r\n    string internal constant UNAUTHORIZED_PAUSE = \"not authorized to pause\";\r\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\r\n    string internal constant INVALID_INDEX = \"invalid index\";\r\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\r\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\r\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\r\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\r\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\r\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\r\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_POOL_IMPLEMENTATION =\r\n        \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\r\n        \"invalid LP Token implementation for given coin\";\r\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\r\n        \"invalid vault implementation for given coin\";\r\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\r\n        \"invalid stakerVault implementation for given coin\";\r\n    string internal constant INSUFFICIENT_ALLOWANCE = \"insufficient allowance\";\r\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\r\n    string internal constant INSUFFICIENT_AMOUNT_OUT = \"Amount received less than min amount\";\r\n    string internal constant INSUFFICIENT_AMOUNT_IN = \"Amount spent more than max amount\";\r\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\r\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\r\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\r\n    string internal constant ADDRESS_DOES_NOT_EXIST = \"address does not exist\";\r\n    string internal constant ADDRESS_FROZEN = \"address is frozen\";\r\n    string internal constant ROLE_EXISTS = \"role already exists\";\r\n    string internal constant CANNOT_REVOKE_ROLE = \"cannot revoke role\";\r\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\r\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\r\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\r\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\r\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\r\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\r\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\r\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\r\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\r\n    string internal constant CANNOT_EXECUTE_IN_SAME_BLOCK = \"cannot execute action in same block\";\r\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\r\n    string internal constant TOP_UP_FAILED = \"top up failed\";\r\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\r\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\r\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\r\n        \"not enough funds were withdrawn from the pool\";\r\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\r\n    string internal constant FAILED_MINT = \"mint failed\";\r\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\r\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\r\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\r\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\r\n    string internal constant INVALID_MINTER =\r\n        \"the minter address of the LP token and the pool address do not match\";\r\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\r\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\r\n    string internal constant NOTHING_PENDING = \"no pending change to reset\";\r\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\r\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\r\n    string internal constant DELAY_TOO_SHORT = \"delay must be at least 3 days\";\r\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\r\n        \"insufficient funds for updating the position\";\r\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\r\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\r\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\r\n    string internal constant ALREADY_SHUTDOWN = \"the pool is already shutdown\";\r\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\r\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\r\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\r\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\r\n    string internal constant GAUGE_KILLED = \"gauge killed\";\r\n    string internal constant INVALID_TARGET = \"Invalid Target\";\r\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\r\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\r\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\r\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\r\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\r\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\r\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\r\n        \"pool does not support additional underlying coins to be withdrawn\";\r\n    string internal constant STRATEGY_SHUTDOWN = \"Strategy is shutdown\";\r\n    string internal constant POOL_SHUTDOWN = \"Pool is shutdown\";\r\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\r\n    string internal constant GAUGE_STILL_ACTIVE = \"Gauge still active\";\r\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\r\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\r\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\r\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\r\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\r\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\r\n    string internal constant INVALID_MAX_FEE = \"invalid max fee\";\r\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\r\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\r\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\r\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\r\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\r\n    string internal constant PREPARED_WITHDRAWAL =\r\n        \"Cannot relock funds when withdrawal is being prepared\";\r\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\r\n    string internal constant STALE_PRICE = \"Price is stale\";\r\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\r\n    string internal constant ROUND_NOT_COMPLETE = \"Round not complete\";\r\n    string internal constant NOT_ENOUGH_MERO_STAKED = \"Not enough MERO tokens staked\";\r\n    string internal constant RESERVE_ACCESS_EXCEEDED = \"Reserve access exceeded\";\r\n}\r\n\r\n\r\n// File libraries/Roles.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Roles {\r\n    bytes32 internal constant GOVERNANCE = \"governance\";\r\n    bytes32 internal constant ADDRESS_PROVIDER = \"address_provider\";\r\n    bytes32 internal constant POOL_FACTORY = \"pool_factory\";\r\n    bytes32 internal constant CONTROLLER = \"controller\";\r\n    bytes32 internal constant GAUGE_ZAP = \"gauge_zap\";\r\n    bytes32 internal constant MAINTENANCE = \"maintenance\";\r\n    bytes32 internal constant INFLATION_MANAGER = \"inflation_manager\";\r\n    bytes32 internal constant POOL = \"pool\";\r\n    bytes32 internal constant VAULT = \"vault\";\r\n}\r\n\r\n\r\n// File contracts/access/AuthorizationBase.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n/**\r\n * @notice Provides modifiers for authorization\r\n */\r\nabstract contract AuthorizationBase {\r\n    /**\r\n     * @notice Only allows a sender with `role` to perform the given action\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        require(_roleManager().hasRole(role, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with GOVERNANCE role to perform the given action\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_roleManager().hasRole(Roles.GOVERNANCE, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles2(bytes32 role1, bytes32 role2) {\r\n        require(_roleManager().hasAnyRole(role1, role2, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles3(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _roleManager().hasAnyRole(role1, role2, role3, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    function roleManager() external view virtual returns (IRoleManager) {\r\n        return _roleManager();\r\n    }\r\n\r\n    function _roleManager() internal view virtual returns (IRoleManager);\r\n}\r\n\r\n\r\n// File contracts/access/Authorization.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ncontract Authorization is AuthorizationBase {\r\n    IRoleManager internal immutable __roleManager;\r\n\r\n    constructor(IRoleManager roleManager) {\r\n        __roleManager = roleManager;\r\n    }\r\n\r\n    function _roleManager() internal view override returns (IRoleManager) {\r\n        return __roleManager;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IGasBank.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IGasBank {\r\n    event Deposit(address indexed account, uint256 value);\r\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\r\n\r\n    function depositFor(address account) external payable;\r\n\r\n    function withdrawUnused(address account) external;\r\n\r\n    function withdrawFrom(address account, uint256 amount) external;\r\n\r\n    function withdrawFrom(\r\n        address account,\r\n        address payable to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/IVaultReserve.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IVaultReserve {\r\n    event Deposit(address indexed vault, address indexed token, uint256 amount);\r\n    event Withdraw(address indexed vault, address indexed token, uint256 amount);\r\n    event VaultListed(address indexed vault);\r\n\r\n    function deposit(address token, uint256 amount) external payable;\r\n\r\n    function withdraw(address token, uint256 amount) external;\r\n\r\n    function getBalance(address vault, address token) external view returns (uint256);\r\n\r\n    function canWithdraw(address vault) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/oracles/IOracleProvider.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IOracleProvider {\r\n    /// @notice Checks whether the asset is supported\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return true if the asset is supported\r\n    function isAssetSupported(address baseAsset) external view returns (bool);\r\n\r\n    /// @notice Quotes the USD price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the USD price of the asset\r\n    function getPriceUSD(address baseAsset) external view returns (uint256);\r\n\r\n    /// @notice Quotes the ETH price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the ETH price of the asset\r\n    function getPriceETH(address baseAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/strategies/IStrategy.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IStrategy {\r\n    function deposit() external payable returns (bool);\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function harvest() external returns (uint256);\r\n\r\n    function shutdown() external;\r\n\r\n    function setCommunityReserve(address _communityReserve) external;\r\n\r\n    function setStrategist(address strategist_) external;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function harvestable() external view returns (uint256);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    function hasPendingFunds() external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IVault.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @title Interface for a Vault\r\n */\r\n\r\ninterface IVault {\r\n    event StrategyActivated(address indexed strategy);\r\n\r\n    event StrategyDeactivated(address indexed strategy);\r\n\r\n    /**\r\n     * @dev 'netProfit' is the profit after all fees have been deducted\r\n     */\r\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\r\n\r\n    function initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) external;\r\n\r\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAvailableToPool() external;\r\n\r\n    function initializeStrategy(address strategy_) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function withdrawFromReserve(uint256 amount) external;\r\n\r\n    function updateStrategy(address newStrategy) external;\r\n\r\n    function activateStrategy() external returns (bool);\r\n\r\n    function deactivateStrategy() external returns (bool);\r\n\r\n    function updatePerformanceFee(uint256 newPerformanceFee) external;\r\n\r\n    function updateStrategistFee(uint256 newStrategistFee) external;\r\n\r\n    function updateDebtLimit(uint256 newDebtLimit) external;\r\n\r\n    function updateTargetAllocation(uint256 newTargetAllocation) external;\r\n\r\n    function updateReserveFee(uint256 newReserveFee) external;\r\n\r\n    function updateBound(uint256 newBound) external;\r\n\r\n    function withdrawFromStrategy(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAllFromStrategy() external returns (bool);\r\n\r\n    function harvest() external returns (bool);\r\n\r\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\r\n\r\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalUnderlying() external view returns (uint256);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function strategy() external view returns (IStrategy);\r\n}\r\n\r\n\r\n// File interfaces/pool/ILiquidityPool.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ILiquidityPool {\r\n    event Deposit(address indexed minter, uint256 depositAmount, uint256 mintedLpTokens);\r\n\r\n    event DepositFor(\r\n        address indexed minter,\r\n        address indexed mintee,\r\n        uint256 depositAmount,\r\n        uint256 mintedLpTokens\r\n    );\r\n\r\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    event LpTokenSet(address indexed lpToken);\r\n\r\n    event StakerVaultSet(address indexed stakerVault);\r\n\r\n    event Shutdown();\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\r\n\r\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount) external payable returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\r\n\r\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\r\n\r\n    function depositFor(\r\n        address account,\r\n        uint256 depositAmount,\r\n        uint256 minTokenAmount\r\n    ) external payable returns (uint256);\r\n\r\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function handleLpTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function updateVault(address _vault) external;\r\n\r\n    function setLpToken(address _lpToken) external;\r\n\r\n    function setStaker() external;\r\n\r\n    function shutdownPool(bool shutdownStrategy) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function updateRequiredReserves(uint256 _newRatio) external;\r\n\r\n    function updateReserveDeviation(uint256 newRatio) external;\r\n\r\n    function updateMinWithdrawalFee(uint256 newFee) external;\r\n\r\n    function updateMaxWithdrawalFee(uint256 newFee) external;\r\n\r\n    function updateWithdrawalFeeDecreasePeriod(uint256 newPeriod) external;\r\n\r\n    function rebalanceVault() external;\r\n\r\n    function getNewCurrentFees(\r\n        uint256 timeToWait,\r\n        uint256 lastActionTimestamp,\r\n        uint256 feeRatio\r\n    ) external view returns (uint256);\r\n\r\n    function vault() external view returns (IVault);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function getLpToken() external view returns (address);\r\n\r\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function totalUnderlying() external view returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function isShutdown() external view returns (bool);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderMeta.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\nlibrary AddressProviderMeta {\r\n    struct Meta {\r\n        bool freezable;\r\n        bool frozen;\r\n    }\r\n\r\n    function fromUInt(uint256 value) internal pure returns (Meta memory) {\r\n        Meta memory meta;\r\n        meta.freezable = (value & 1) == 1;\r\n        meta.frozen = ((value >> 1) & 1) == 1;\r\n        return meta;\r\n    }\r\n\r\n    function toUInt(Meta memory meta) internal pure returns (uint256) {\r\n        uint256 value;\r\n        value |= meta.freezable ? 1 : 0;\r\n        value |= meta.frozen ? 1 << 1 : 0;\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IAddressProvider.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IAddressProvider {\r\n    event KnownAddressKeyAdded(bytes32 indexed key);\r\n    event StakerVaultListed(address indexed stakerVault);\r\n    event StakerVaultDelisted(address indexed stakerVault);\r\n    event ActionListed(address indexed action);\r\n    event PoolListed(address indexed pool);\r\n    event VaultUpdated(address indexed previousVault, address indexed newVault);\r\n    event FeeHandlerAdded(address feeHandler);\r\n    event FeeHandlerRemoved(address feeHandler);\r\n\r\n    /** Key functions */\r\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\r\n\r\n    function freezeAddress(bytes32 key) external;\r\n\r\n    /** Pool functions */\r\n\r\n    function allPools() external view returns (address[] memory);\r\n\r\n    function addPool(address pool) external;\r\n\r\n    function poolsCount() external view returns (uint256);\r\n\r\n    function getPoolAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isPool(address pool) external view returns (bool);\r\n\r\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\r\n\r\n    function safeGetPoolForToken(address token) external view returns (address);\r\n\r\n    /** Vault functions  */\r\n\r\n    function updateVault(address previousVault, address newVault) external;\r\n\r\n    function allVaults() external view returns (address[] memory);\r\n\r\n    function vaultsCount() external view returns (uint256);\r\n\r\n    function getVaultAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isVault(address vault) external view returns (bool);\r\n\r\n    /** Action functions */\r\n\r\n    function allActions() external view returns (address[] memory);\r\n\r\n    function addAction(address action) external returns (bool);\r\n\r\n    function isAction(address action) external view returns (bool);\r\n\r\n    /** Address functions */\r\n    function initializeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function initializeAddress(\r\n        bytes32 key,\r\n        address initialAddress,\r\n        bool frezable\r\n    ) external;\r\n\r\n    function initializeAndFreezeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function getAddress(bytes32 key) external view returns (address);\r\n\r\n    function getAddress(bytes32 key, bool checkExists) external view returns (address);\r\n\r\n    function getAddressMeta(bytes32 key) external view returns (AddressProviderMeta.Meta memory);\r\n\r\n    function updateAddress(bytes32 key, address newAddress) external;\r\n\r\n    /** Staker vault functions */\r\n    function allStakerVaults() external view returns (address[] memory);\r\n\r\n    function tryGetStakerVault(address token) external view returns (bool, address);\r\n\r\n    function getStakerVault(address token) external view returns (address);\r\n\r\n    function addStakerVault(address stakerVault) external;\r\n\r\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\r\n\r\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\r\n\r\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\r\n\r\n    /** Fee Handler function */\r\n    function addFeeHandler(address feeHandler) external;\r\n\r\n    function removeFeeHandler(address feeHandler) external;\r\n}\r\n\r\n\r\n// File interfaces/IFeeBurner.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IFeeBurner {\r\n    function burnToTarget(address[] memory tokens, address targetLpToken)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IMeroToken.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IMeroToken is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function cap() external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IInflationManager.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IInflationManager {\r\n    event KeeperGaugeListed(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeListed(address indexed token, address indexed ammGauge);\r\n    event KeeperGaugeDelisted(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeDelisted(address indexed token, address indexed ammGauge);\r\n\r\n    /** Pool functions */\r\n\r\n    function setKeeperGauge(address pool, address _keeperGauge) external returns (bool);\r\n\r\n    function setAmmGauge(address token, address _ammGauge) external returns (bool);\r\n\r\n    function setMinter(address _minter) external;\r\n\r\n    function advanceKeeperGaugeEpoch(address pool) external;\r\n\r\n    function whitelistGauge(address gauge) external;\r\n\r\n    function removeStakerVaultFromInflation(address lpToken) external;\r\n\r\n    function removeAmmGauge(address token) external returns (bool);\r\n\r\n    function addGaugeForVault(address lpToken) external;\r\n\r\n    function checkpointAllGauges() external;\r\n\r\n    function mintRewards(address beneficiary, uint256 amount) external;\r\n\r\n    function getAllAmmGauges() external view returns (address[] memory);\r\n\r\n    function getLpRateForStakerVault(address stakerVault) external view returns (uint256);\r\n\r\n    function getKeeperRateForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmRateForToken(address token) external view returns (uint256);\r\n\r\n    function getLpPoolWeight(address pool) external view returns (uint256);\r\n\r\n    function getKeeperGaugeForPool(address pool) external view returns (address);\r\n\r\n    function getAmmGaugeForToken(address token) external view returns (address);\r\n\r\n    /** Weight setter functions **/\r\n\r\n    function updateLpPoolWeight(address lpToken, uint256 newPoolWeight) external;\r\n\r\n    function updateAmmTokenWeight(address token, uint256 newTokenWeight) external;\r\n\r\n    function updateKeeperPoolWeight(address pool, uint256 newPoolWeight) external;\r\n\r\n    function batchUpdateLpPoolWeights(address[] calldata lpTokens, uint256[] calldata weights)\r\n        external;\r\n\r\n    function batchUpdateAmmTokenWeights(address[] calldata tokens, uint256[] calldata weights)\r\n        external;\r\n\r\n    function batchUpdateKeeperPoolWeights(address[] calldata pools, uint256[] calldata weights)\r\n        external;\r\n\r\n    function deactivateWeightBasedKeeperDistribution() external;\r\n}\r\n\r\n\r\n// File interfaces/IController.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IController {\r\n    function addressProvider() external view returns (IAddressProvider);\r\n\r\n    function inflationManager() external view returns (IInflationManager);\r\n\r\n    function addStakerVault(address stakerVault) external;\r\n\r\n    function shutdownPool(ILiquidityPool pool, bool shutdownStrategy) external returns (bool);\r\n\r\n    /** Keeper functions */\r\n    function updateKeeperRequiredStakedMERO(uint256 amount) external;\r\n\r\n    function canKeeperExecuteAction(address keeper) external view returns (bool);\r\n\r\n    /** Miscellaneous functions */\r\n\r\n    function getTotalEthRequiredForGas(address payer) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/ISwapperRouter.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ISwapperRouter {\r\n    function swapAll(address fromToken, address toToken) external payable returns (uint256);\r\n\r\n    function setSlippageTolerance(uint256 slippageTolerance_) external;\r\n\r\n    function setCurvePool(address token_, address curvePool_) external;\r\n\r\n    function swap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn\r\n    ) external payable returns (uint256);\r\n\r\n    function getAmountOut(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderKeys.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\nlibrary AddressProviderKeys {\r\n    bytes32 internal constant _TREASURY_KEY = \"treasury\";\r\n    bytes32 internal constant _REWARD_HANDLER_KEY = \"rewardHandler\";\r\n    bytes32 internal constant _GAS_BANK_KEY = \"gasBank\";\r\n    bytes32 internal constant _VAULT_RESERVE_KEY = \"vaultReserve\";\r\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \"oracleProvider\";\r\n    bytes32 internal constant _POOL_FACTORY_KEY = \"poolFactory\";\r\n    bytes32 internal constant _CONTROLLER_KEY = \"controller\";\r\n    bytes32 internal constant _MERO_LOCKER_KEY = \"meroLocker\";\r\n    bytes32 internal constant _FEE_BURNER_KEY = \"feeBurner\";\r\n    bytes32 internal constant _ROLE_MANAGER_KEY = \"roleManager\";\r\n    bytes32 internal constant _SWAPPER_ROUTER_KEY = \"swapperRouter\";\r\n}\r\n\r\n\r\n// File libraries/AddressProviderHelpers.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary AddressProviderHelpers {\r\n    /**\r\n     * @return The address of the treasury.\r\n     */\r\n    function getTreasury(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._TREASURY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the reward handler.\r\n     */\r\n    function getRewardHandler(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._REWARD_HANDLER_KEY);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns zero address if no reward handler is set.\r\n     * @return The address of the reward handler.\r\n     */\r\n    function getSafeRewardHandler(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._REWARD_HANDLER_KEY, false);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the fee burner.\r\n     */\r\n    function getFeeBurner(IAddressProvider provider) internal view returns (IFeeBurner) {\r\n        return IFeeBurner(provider.getAddress(AddressProviderKeys._FEE_BURNER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The gas bank.\r\n     */\r\n    function getGasBank(IAddressProvider provider) internal view returns (IGasBank) {\r\n        return IGasBank(provider.getAddress(AddressProviderKeys._GAS_BANK_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the vault reserve.\r\n     */\r\n    function getVaultReserve(IAddressProvider provider) internal view returns (IVaultReserve) {\r\n        return IVaultReserve(provider.getAddress(AddressProviderKeys._VAULT_RESERVE_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The oracleProvider.\r\n     */\r\n    function getOracleProvider(IAddressProvider provider) internal view returns (IOracleProvider) {\r\n        return IOracleProvider(provider.getAddress(AddressProviderKeys._ORACLE_PROVIDER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the address of the MERO locker\r\n     */\r\n    function getMEROLocker(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._MERO_LOCKER_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the MERO locker\r\n     */\r\n    function getRoleManager(IAddressProvider provider) internal view returns (IRoleManager) {\r\n        return IRoleManager(provider.getAddress(AddressProviderKeys._ROLE_MANAGER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the controller\r\n     */\r\n    function getController(IAddressProvider provider) internal view returns (IController) {\r\n        return IController(provider.getAddress(AddressProviderKeys._CONTROLLER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the swapper router\r\n     */\r\n    function getSwapperRouter(IAddressProvider provider) internal view returns (ISwapperRouter) {\r\n        return ISwapperRouter(provider.getAddress(AddressProviderKeys._SWAPPER_ROUTER_KEY));\r\n    }\r\n}\r\n\r\n\r\n// File libraries/DecimalScale.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary DecimalScale {\r\n    uint8 internal constant _DECIMALS = 18; // 18 decimal places\r\n\r\n    function scaleFrom(uint256 value, uint8 decimals) internal pure returns (uint256) {\r\n        if (decimals == _DECIMALS) {\r\n            return value;\r\n        } else if (decimals > _DECIMALS) {\r\n            return value / 10**(decimals - _DECIMALS);\r\n        } else {\r\n            return value * 10**(_DECIMALS - decimals);\r\n        }\r\n    }\r\n\r\n    function scaleTo(uint256 value, uint8 decimals) internal pure returns (uint256) {\r\n        if (decimals == _DECIMALS) {\r\n            return value;\r\n        } else if (decimals > _DECIMALS) {\r\n            return value * 10**(decimals - _DECIMALS);\r\n        } else {\r\n            return value / 10**(_DECIMALS - decimals);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File libraries/ScaledMath.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n/*\r\n * @dev To use functions of this contract, at least one of the numbers must\r\n * be scaled to `DECIMAL_SCALE`. The result will scaled to `DECIMAL_SCALE`\r\n * if both numbers are scaled to `DECIMAL_SCALE`, otherwise to the scale\r\n * of the number not scaled by `DECIMAL_SCALE`\r\n */\r\nlibrary ScaledMath {\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant DECIMAL_SCALE = 1e18;\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant ONE = 1e18;\r\n\r\n    /**\r\n     * @notice Performs a multiplication between two scaled numbers\r\n     */\r\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * b) / DECIMAL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two scaled numbers\r\n     */\r\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, rounding up the result\r\n     */\r\n    function scaledDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE + b - 1) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, ignoring any scaling and rounding up the result\r\n     */\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a + b - 1) / b;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/vendor/UniswapRouter02.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface UniswapRouter02 {\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsIn(uint256 amountOut) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface UniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n\r\n// File interfaces/vendor/IWETH.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @notice Interface for WETH9\r\n * @dev https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code\r\n */\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n\r\n// File interfaces/IERC20Full.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n/// @notice This is the ERC20 interface including optional getter functions\r\n/// The interface is used in the frontend through the generated typechain wrapper\r\ninterface IERC20Full is IERC20 {\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File interfaces/vendor/ICurveSwapEth.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ICurveSwapEth {\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external payable;\r\n\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external payable;\r\n\r\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\r\n        external;\r\n\r\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\r\n        external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\r\n\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/swappers/SwapperRouter.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The swapper router handles the swapping from one token to another.\r\n * By default it does all swaps through WETH, in two steps checking which DEX is better for each stage of the swap.\r\n * It also supports ETH in or out and handles it by converting to WETH and back.\r\n */\r\ncontract SwapperRouter is ISwapperRouter, Authorization {\r\n    using SafeERC20 for IERC20;\r\n    using DecimalScale for uint256;\r\n    using ScaledMath for uint256;\r\n    using AddressProviderHelpers for IAddressProvider;\r\n\r\n    // Dex contracts\r\n    address private constant _UNISWAP = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap Router, used for swapping tokens on Uniswap\r\n    address private constant _SUSHISWAP = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // Sushiswap Router, used for swapping tokens on Sushiswap\r\n    IWETH private constant _WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH, used for wrapping and unwrapping ETH for swaps\r\n\r\n    IAddressProvider private immutable _addressProvider; // Address provider used for getting oracle provider\r\n\r\n    uint256 public slippageTolerance; // The amount of slippage to allow from the oracle price of an asset\r\n    mapping(address => ICurveSwapEth) public curvePools; // Curve Pool to use for swapping with WETH\r\n\r\n    event Swapped(\r\n        address indexed fromToken,\r\n        address indexed toToken,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    ); // Emitted after a successfull swap\r\n    event SetSlippageTolerance(uint256 value); // Emitted after a successful setting of slippage tolerance\r\n    event SetCurvePool(address token, address curvePool); // Emitted after a successful setting of a Curve Pool\r\n\r\n    constructor(address addressProvider_)\r\n        Authorization(IAddressProvider(addressProvider_).getRoleManager())\r\n    {\r\n        _addressProvider = IAddressProvider(addressProvider_);\r\n        slippageTolerance = 0.97e18;\r\n    }\r\n\r\n    receive() external payable {} // Used for receiving ETH when unwrapping WETH\r\n\r\n    /**\r\n     * @notice Swaps all of the users balance of fromToken for toToken.\r\n     * @param fromToken_ The token to swap from.\r\n     * @param toToken_ The token to swap to.\r\n     * @return amountOut The amount of toToken received.\r\n     */\r\n    function swapAll(address fromToken_, address toToken_)\r\n        external\r\n        payable\r\n        override\r\n        returns (uint256 amountOut)\r\n    {\r\n        // Swapping if from token is ETH\r\n        if (fromToken_ == address(0)) {\r\n            return swap(fromToken_, toToken_, address(this).balance);\r\n        }\r\n\r\n        // Swapping if from token is ERC20\r\n        return swap(fromToken_, toToken_, IERC20(fromToken_).balanceOf(address(msg.sender)));\r\n    }\r\n\r\n    /**\r\n     * @notice Set slippage tolerance for swaps.\r\n     * @dev Stored as a multiplier, e.g. 2% would be set as 0.98.\r\n     * @param slippageTolerance_ New slippage tolerance.\r\n     */\r\n    function setSlippageTolerance(uint256 slippageTolerance_) external override onlyGovernance {\r\n        require(slippageTolerance_ <= ScaledMath.ONE, Error.INVALID_SLIPPAGE_TOLERANCE);\r\n        slippageTolerance = slippageTolerance_;\r\n        emit SetSlippageTolerance(slippageTolerance_);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the Curve Pool to use for swapping a token with WETH.\r\n     * @dev To use Uniswap or Sushiswap instead, set the Curve Pool to the zero address.\r\n     * @param token_ The token to set the Curve Pool for.\r\n     * @param curvePool_ The address of the Curve Pool.\r\n     */\r\n    function setCurvePool(address token_, address curvePool_) external override onlyGovernance {\r\n        require(token_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n        require(curvePool_ != address(curvePools[token_]), Error.SAME_ADDRESS_NOT_ALLOWED);\r\n        curvePools[token_] = ICurveSwapEth(curvePool_);\r\n        emit SetCurvePool(token_, curvePool_);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of toToken received by swapping amountIn of fromToken.\r\n     * @dev In the case where a custom swapper is used, return value may not be precise.\r\n     * @param fromToken_ The token to swap from.\r\n     * @param toToken_ The token to swap to.\r\n     * @param amountIn_ The amount of fromToken being swapped.\r\n     * @return amountOut The amount of toToken received by swapping amountIn of fromToken.\r\n     */\r\n    function getAmountOut(\r\n        address fromToken_,\r\n        address toToken_,\r\n        uint256 amountIn_\r\n    ) external view override returns (uint256 amountOut) {\r\n        if (fromToken_ == toToken_ || amountIn_ == 0) return amountIn_;\r\n\r\n        return _getTokenOut(toToken_, _getWethOut(fromToken_, amountIn_));\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps an amount of fromToken to toToken.\r\n     * @param fromToken_ The token to swap from.\r\n     * @param toToken_ The token to swap to.\r\n     * @param amountIn_ The amount of fromToken to swap for toToken.\r\n     * @return amountOut The amount of toToken received.\r\n     */\r\n    function swap(\r\n        address fromToken_,\r\n        address toToken_,\r\n        uint256 amountIn_\r\n    ) public payable override returns (uint256 amountOut) {\r\n        // Validating ETH value sent\r\n        require(msg.value == (fromToken_ == address(0) ? amountIn_ : 0), Error.INVALID_AMOUNT);\r\n        if (amountIn_ == 0) {\r\n            emit Swapped(fromToken_, toToken_, 0, 0);\r\n            return 0;\r\n        }\r\n\r\n        // Handling swap between the same token\r\n        if (fromToken_ == toToken_) {\r\n            if (fromToken_ == address(0)) {\r\n                // solhint-disable-next-line avoid-low-level-calls\r\n                (bool success, ) = payable(msg.sender).call{value: amountIn_}(\"\");\r\n                require(success, Error.FAILED_TRANSFER);\r\n            }\r\n            emit Swapped(fromToken_, toToken_, amountIn_, amountIn_);\r\n            return amountIn_;\r\n        }\r\n\r\n        // Transferring to contract if ERC20\r\n        if (fromToken_ != address(0)) {\r\n            IERC20(fromToken_).safeTransferFrom(msg.sender, address(this), amountIn_);\r\n        }\r\n\r\n        // Swapping token via WETH\r\n        uint256 amountOut_ = _swapWethForToken(toToken_, _swapForWeth(fromToken_));\r\n        emit Swapped(fromToken_, toToken_, amountIn_, amountOut_);\r\n        return _returnTokens(toToken_, amountOut_);\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps the full contract balance of token to WETH.\r\n     * @param token_ The token to swap to WETH.\r\n     * @return amountOut The amount of WETH received from the swap.\r\n     */\r\n    function _swapForWeth(address token_) internal returns (uint256 amountOut) {\r\n        if (token_ == address(_WETH)) return _WETH.balanceOf(address(this));\r\n\r\n        // Handling ETH -> WETH\r\n        if (token_ == address(0)) {\r\n            uint256 ethBalance_ = address(this).balance;\r\n            if (ethBalance_ == 0) return 0;\r\n            _WETH.deposit{value: ethBalance_}();\r\n            return ethBalance_;\r\n        }\r\n\r\n        // Handling Curve Pool swaps\r\n        ICurveSwapEth curvePool_ = curvePools[token_];\r\n        if (address(curvePool_) != address(0)) {\r\n            uint256 amount_ = IERC20(token_).balanceOf(address(this));\r\n            if (amount_ == 0) return 0;\r\n            _approve(token_, address(curvePool_));\r\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\r\n            curvePool_.exchange(\r\n                tokenIndex_,\r\n                wethIndex_,\r\n                amount_,\r\n                _minWethAmountOut(amount_, token_)\r\n            );\r\n            return _WETH.balanceOf(address(this));\r\n        }\r\n\r\n        // Handling ERC20 -> WETH\r\n        return _swap(token_, address(_WETH), IERC20(token_).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps the full contract balance of WETH to token.\r\n     * @param token_ The token to swap WETH to.\r\n     * @return amountOut The amount of token received from the swap.\r\n     */\r\n    function _swapWethForToken(address token_, uint256 amount_)\r\n        internal\r\n        returns (uint256 amountOut)\r\n    {\r\n        if (amount_ == 0) return 0;\r\n        if (token_ == address(_WETH)) return amount_;\r\n\r\n        // Handling WETH -> ETH\r\n        if (token_ == address(0)) {\r\n            _WETH.withdraw(amount_);\r\n            return amount_;\r\n        }\r\n\r\n        // Handling Curve Pool swaps\r\n        ICurveSwapEth curvePool_ = curvePools[token_];\r\n        if (address(curvePool_) != address(0)) {\r\n            _approve(address(_WETH), address(curvePool_));\r\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\r\n            curvePool_.exchange(\r\n                wethIndex_,\r\n                tokenIndex_,\r\n                amount_,\r\n                _minTokenAmountOut(amount_, token_)\r\n            );\r\n            return IERC20(token_).balanceOf(address(this));\r\n        }\r\n\r\n        // Handling WETH -> ERC20\r\n        return _swap(address(_WETH), token_, amount_);\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps an amount of fromToken to toToken.\r\n     * @param fromToken_ The token to swap from.\r\n     * @param toToken_ The token to swap to.\r\n     * @param amount_ The amount of fromToken to swap.\r\n     * @return amountOut The amount of toToken received from the swap.\r\n     */\r\n    function _swap(\r\n        address fromToken_,\r\n        address toToken_,\r\n        uint256 amount_\r\n    ) internal returns (uint256 amountOut) {\r\n        if (amount_ == 0) return 0;\r\n        if (fromToken_ == toToken_) return amount_;\r\n        address dex_ = _getBestDex(fromToken_, toToken_, amount_);\r\n        _approve(fromToken_, dex_);\r\n        address[] memory path_ = new address[](2);\r\n        path_[0] = fromToken_;\r\n        path_[1] = toToken_;\r\n        return\r\n            UniswapRouter02(dex_).swapExactTokensForTokens(\r\n                amount_,\r\n                _getAmountOutMin(amount_, fromToken_, toToken_),\r\n                path_,\r\n                address(this),\r\n                block.timestamp\r\n            )[1];\r\n    }\r\n\r\n    /**\r\n     * @dev Approves infinite spending for the given spender.\r\n     * @param token_ The token to approve for.\r\n     * @param spender_ The spender to approve.\r\n     */\r\n    function _approve(address token_, address spender_) internal {\r\n        if (IERC20(token_).allowance(address(this), spender_) > 0) return;\r\n        IERC20(token_).safeApprove(spender_, type(uint256).max);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an amount of tokens to the sender.\r\n     * @param token_ The token to return to sender.\r\n     * @param amount_ The amount of tokens to return to sender.\r\n     * @return amountReturned The amount of tokens returned to sender.\r\n     */\r\n    function _returnTokens(address token_, uint256 amount_)\r\n        internal\r\n        returns (uint256 amountReturned)\r\n    {\r\n        // Returning if ETH\r\n        if (token_ == address(0)) {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, ) = payable(msg.sender).call{value: amount_}(\"\");\r\n            require(success, Error.FAILED_TRANSFER);\r\n            return amount_;\r\n        }\r\n\r\n        // Returning if ERC20\r\n        IERC20(token_).safeTransfer(msg.sender, amount_);\r\n        return amount_;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the amount of WETH received by swapping amount of token\r\n     *      In the case where a custom swapper is used, return value may not be precise.\r\n     * @param token_ The token to swap from.\r\n     * @param amount_ The mount of token being swapped.\r\n     * @return amountOut The amount of WETH received by swapping amount of token.\r\n     */\r\n    function _getWethOut(address token_, uint256 amount_)\r\n        internal\r\n        view\r\n        returns (uint256 amountOut)\r\n    {\r\n        if (token_ == address(_WETH) || token_ == address(0)) return amount_;\r\n\r\n        // Handling Curve Pool swaps\r\n        ICurveSwapEth curvePool_ = curvePools[token_];\r\n        if (address(curvePool_) != address(0)) {\r\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\r\n            return curvePool_.get_dy(tokenIndex_, wethIndex_, amount_);\r\n        }\r\n\r\n        return\r\n            _tokenAmountOut(\r\n                token_,\r\n                address(_WETH),\r\n                amount_,\r\n                _getBestDex(token_, address(_WETH), amount_)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the amount of token received by swapping amount of WETH\r\n     *      In the case where a custom swapper is used, return value may not be precise.\r\n     * @param token_ The token to swap to.\r\n     * @param amount_ The amount of WETH being swapped.\r\n     * @return amountOut The amount of token received by swapping amount of WETH.\r\n     */\r\n    function _getTokenOut(address token_, uint256 amount_)\r\n        internal\r\n        view\r\n        returns (uint256 amountOut)\r\n    {\r\n        if (token_ == address(_WETH) || token_ == address(0)) return amount_;\r\n\r\n        // Handling Curve Pool swaps\r\n        ICurveSwapEth curvePool_ = curvePools[token_];\r\n        if (address(curvePool_) != address(0)) {\r\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\r\n            return curvePool_.get_dy(wethIndex_, tokenIndex_, amount_);\r\n        }\r\n\r\n        return\r\n            _tokenAmountOut(\r\n                address(_WETH),\r\n                token_,\r\n                amount_,\r\n                _getBestDex(address(_WETH), token_, amount_)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the best dex to use for swapping tokens based on which gives the highest amount out.\r\n     * @param fromToken_ The token to swap from.\r\n     * @param toToken_ The token to swap to.\r\n     * @param amount_ The amount of fromToken to swap.\r\n     * @return bestDex The best dex to use for swapping tokens based on which gives the highest amount out\r\n     */\r\n    function _getBestDex(\r\n        address fromToken_,\r\n        address toToken_,\r\n        uint256 amount_\r\n    ) internal view returns (address bestDex) {\r\n        address uniswap_ = _UNISWAP;\r\n        address sushiswap_ = _SUSHISWAP;\r\n        return\r\n            _tokenAmountOut(fromToken_, toToken_, amount_, uniswap_) >=\r\n                _tokenAmountOut(fromToken_, toToken_, amount_, sushiswap_)\r\n                ? uniswap_\r\n                : sushiswap_;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of toToken received by swapping amountIn of fromToken.\r\n     * @param fromToken_ The token to swap from.\r\n     * @param toToken_ The token to swap to.\r\n     * @param amountIn_ The amount of fromToken being swapped.\r\n     * @param dex_ The DEX to use for the swap.\r\n     * @return amountOut The amount of toToken received by swapping amountIn of fromToken.\r\n     */\r\n    function _tokenAmountOut(\r\n        address fromToken_,\r\n        address toToken_,\r\n        uint256 amountIn_,\r\n        address dex_\r\n    ) internal view returns (uint256 amountOut) {\r\n        address[] memory path_ = new address[](2);\r\n        path_[0] = fromToken_;\r\n        path_[1] = toToken_;\r\n        return UniswapRouter02(dex_).getAmountsOut(amountIn_, path_)[1];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum amount of toToken_ to receive from swap.\r\n     * @param amount_ The amount of fromToken_ being swapped.\r\n     * @param fromToken_ The Token being swapped from.\r\n     * @param toToken_ The Token being swapped to.\r\n     * @return amountOutMin The minimum amount of toToken_ to receive from swap.\r\n     */\r\n    function _getAmountOutMin(\r\n        uint256 amount_,\r\n        address fromToken_,\r\n        address toToken_\r\n    ) internal view returns (uint256 amountOutMin) {\r\n        return\r\n            fromToken_ == address(_WETH)\r\n                ? _minTokenAmountOut(amount_, toToken_)\r\n                : _minWethAmountOut(amount_, fromToken_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum amount of Token to receive from swap.\r\n     * @param wethAmount_ The amount of WETH being swapped.\r\n     * @param token_ The Token the WETH is being swapped to.\r\n     * @return minAmountOut The minimum amount of Token to receive from swap.\r\n     */\r\n    function _minTokenAmountOut(uint256 wethAmount_, address token_)\r\n        internal\r\n        view\r\n        returns (uint256 minAmountOut)\r\n    {\r\n        uint256 priceInEth_ = _getPriceInEth(token_);\r\n        if (priceInEth_ == 0) return 0;\r\n        return\r\n            wethAmount_.scaledDiv(priceInEth_).scaledMul(slippageTolerance).scaleTo(\r\n                IERC20Full(token_).decimals()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum amount of WETH to receive from swap.\r\n     * @param tokenAmount_ The amount of Token being swapped.\r\n     * @param token_ The Token that is being swapped for WETH.\r\n     * @return minAmountOut The minimum amount of WETH to receive from swap.\r\n     */\r\n    function _minWethAmountOut(uint256 tokenAmount_, address token_)\r\n        internal\r\n        view\r\n        returns (uint256 minAmountOut)\r\n    {\r\n        uint256 priceInEth_ = _getPriceInEth(token_);\r\n        if (priceInEth_ == 0) return 0;\r\n        return\r\n            tokenAmount_.scaledMul(priceInEth_).scaledMul(slippageTolerance).scaleFrom(\r\n                IERC20Full(token_).decimals()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the price in ETH of the given token.\r\n     * If no oracle exists for the token, returns 0.\r\n     * Only very minor assets should only ever return 0, which is why we choose\r\n     * to accept the risk of not having proper slippage in place later\r\n     * @param token_ The token to get the price for.\r\n     * @return tokenPriceInEth The price of the token in ETH.\r\n     */\r\n    function _getPriceInEth(address token_) internal view returns (uint256 tokenPriceInEth) {\r\n        IOracleProvider oracleProvider = _addressProvider.getOracleProvider();\r\n        if (oracleProvider.isAssetSupported(token_)) {\r\n            return oracleProvider.getPriceETH(token_);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Curve Pool coin indices for a given Token.\r\n     * @param curvePool_ The Curve Pool to return the indices for.\r\n     * @param token_ The Token to get the indices for.\r\n     * @return wethIndex_ The coin index for WETH.\r\n     * @return tokenIndex_ The coin index for the Token.\r\n     */\r\n    function _getIndices(ICurveSwapEth curvePool_, address token_)\r\n        internal\r\n        view\r\n        returns (uint256 wethIndex_, uint256 tokenIndex_)\r\n    {\r\n        return curvePool_.coins(1) == token_ ? (0, 1) : (1, 0);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressProvider_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"}],\"name\":\"SetCurvePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetSlippageTolerance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curvePools\",\"outputs\":[{\"internalType\":\"contract ICurveSwapEth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"}],\"name\":\"setCurvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippageTolerance_\",\"type\":\"uint256\"}],\"name\":\"setSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken_\",\"type\":\"address\"}],\"name\":\"swapAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SwapperRouter","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ac61fd84c5b20828c666ab1fdca0329aeaa8c8ee","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fbeb5a96ecfeca936ae80a6aa1394adfa61cde8ef4986d6fac920d1dd142740d"}]}