{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC-1155 Multi Token Standard, token receiver\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\r\n * Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type.\r\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     *  (i.e. 0xf23a6e61) to accept the transfer.\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param id        The ID of the token being transferred\r\n     * @param value     The amount of tokens being transferred\r\n     * @param data      Additional data with no specified format\r\n     * @return bytes4   `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types.\r\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     *  (i.e. 0xbc197c81) if to accept the transfer(s).\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n     * @param data      Additional data with no specified format\r\n     * @return          `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, IERC165 {\r\n    bytes4 private constant _ERC165_INTERFACE_ID = type(IERC165).interfaceId;\r\n    bytes4 private constant _ERC1155_TOKEN_RECEIVER_INTERFACE_ID = type(IERC1155TokenReceiver).interfaceId;\r\n\r\n    // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\r\n\r\n    // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\r\n\r\n    bytes4 internal constant _ERC1155_REJECTED = 0xffffffff;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == _ERC165_INTERFACE_ID || interfaceId == _ERC1155_TOKEN_RECEIVER_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC-1155 Inventory additional burning interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n */\r\ninterface IERC1155InventoryBurnable {\r\n    /**\r\n     * Burns some token.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if `id` does not represent a token.\r\n     * @dev Reverts if `id` represents a fungible token and `value` is 0.\r\n     * @dev Reverts if `id` represents a fungible token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a non-fungible token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferSingle} event.\r\n     * @param from Address of the current token owner.\r\n     * @param id Identifier of the token to burn.\r\n     * @param value Amount of token to burn.\r\n     */\r\n    function burnFrom(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) external;\r\n\r\n    /**\r\n     * Burns multiple tokens.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if one of `ids` does not represent a token.\r\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is 0.\r\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param from Address of the current tokens owner.\r\n     * @param ids Identifiers of the tokens to burn.\r\n     * @param values Amounts of tokens to burn.\r\n     */\r\n    function batchBurnFrom(\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values\r\n    ) external;\r\n}\r\n\r\n/*\r\n * Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner.\r\n */\r\nabstract contract ManagedIdentity {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC-173 Contract Ownership Standard\r\n * Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\n */\r\ninterface IERC173 {\r\n    /**\r\n     * Event emited when ownership of a contract changes.\r\n     * @param previousOwner the previous owner.\r\n     * @param newOwner the new owner.\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * Get the address of the owner\r\n     * @return The address of the owner.\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * Set the address of the new owner of the contract\r\n     * Set newOwner to address(0) to renounce any ownership.\r\n     * @dev Emits an {OwnershipTransferred} event.\r\n     * @param newOwner The address of the new owner of the contract. Using the zero address means renouncing ownership.\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is ManagedIdentity, IERC173 {\r\n    address internal _owner;\r\n\r\n    /**\r\n     * Initializes the contract, setting the deployer as the initial owner.\r\n     * @dev Emits an {IERC173-OwnershipTransferred(address,address)} event.\r\n     */\r\n    constructor(address owner_) {\r\n        _owner = owner_;\r\n        emit OwnershipTransferred(address(0), owner_);\r\n    }\r\n\r\n    /**\r\n     * Gets the address of the current contract owner.\r\n     */\r\n    function owner() public view virtual override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * See {IERC173-transferOwnership(address)}\r\n     * @dev Reverts if the sender is not the current contract owner.\r\n     * @param newOwner the address of the new owner. Use the zero address to renounce the ownership.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override {\r\n        _requireOwnership(_msgSender());\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if `account` is not the contract owner.\r\n     * @param account the account to test.\r\n     */\r\n    function _requireOwnership(address account) internal virtual {\r\n        require(account == this.owner(), \"Ownable: not the owner\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Upgrades the address type to check if it is a contract.\r\n */\r\nlibrary AddressIsContract {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Wrapper\r\n * Wraps ERC20 functions to support non-standard implementations which do not return a bool value.\r\n * Calls to the wrapped functions revert only if they throw or if they return false.\r\n */\r\nlibrary ERC20Wrapper {\r\n    using AddressIsContract for address;\r\n\r\n    function wrappedTransfer(\r\n        IWrappedERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function wrappedTransferFrom(\r\n        IWrappedERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function wrappedApprove(\r\n        IWrappedERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function _callWithOptionalReturnData(IWrappedERC20 token, bytes memory callData) internal {\r\n        address target = address(token);\r\n        require(target.isContract(), \"ERC20Wrapper: non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory data) = target.call(callData);\r\n        if (success) {\r\n            if (data.length != 0) {\r\n                require(abi.decode(data, (bool)), \"ERC20Wrapper: operation failed\");\r\n            }\r\n        } else {\r\n            // revert using a standard revert message\r\n            if (data.length == 0) {\r\n                revert(\"ERC20Wrapper: operation failed\");\r\n            }\r\n\r\n            // revert using the revert message coming from the call\r\n            assembly {\r\n                let size := mload(data)\r\n                revert(add(32, data), size)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IWrappedERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\nabstract contract Recoverable is ManagedIdentity, Ownable {\r\n    using ERC20Wrapper for IWrappedERC20;\r\n\r\n    /**\r\n     * Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\r\n     * Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\r\n     * so that the extraction is limited to only amounts sent accidentally.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\r\n     * @dev Reverts if one of `tokens` is does not implement the ERC20 transfer function.\r\n     * @dev Reverts if one of the ERC20 transfers fail for any reason.\r\n     * @param accounts the list of accounts to transfer the tokens to.\r\n     * @param tokens the list of ERC20 token addresses.\r\n     * @param amounts the list of token amounts to transfer.\r\n     */\r\n    function recoverERC20s(\r\n        address[] calldata accounts,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts\r\n    ) external virtual {\r\n        _requireOwnership(_msgSender());\r\n        uint256 length = accounts.length;\r\n        require(length == tokens.length && length == amounts.length, \"Recov: inconsistent arrays\");\r\n        for (uint256 i = 0; i != length; ++i) {\r\n            IWrappedERC20(tokens[i]).wrappedTransfer(accounts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\r\n     * Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\r\n     * so that the extraction is limited to only tokens sent accidentally.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\r\n     * @dev Reverts if one of `contracts` is does not implement the ERC721 transferFrom function.\r\n     * @dev Reverts if one of the ERC721 transfers fail for any reason.\r\n     * @param accounts the list of accounts to transfer the tokens to.\r\n     * @param contracts the list of ERC721 contract addresses.\r\n     * @param tokenIds the list of token ids to transfer.\r\n     */\r\n    function recoverERC721s(\r\n        address[] calldata accounts,\r\n        address[] calldata contracts,\r\n        uint256[] calldata tokenIds\r\n    ) external virtual {\r\n        _requireOwnership(_msgSender());\r\n        uint256 length = accounts.length;\r\n        require(length == contracts.length && length == tokenIds.length, \"Recov: inconsistent arrays\");\r\n        for (uint256 i = 0; i != length; ++i) {\r\n            IRecoverableERC721(contracts[i]).transferFrom(address(this), accounts[i], tokenIds[i]);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IRecoverableERC721 {\r\n    /// See {IERC721-transferFrom(address,address,uint256)}\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Contract which allows children to implement pausability.\r\n */\r\nabstract contract Pausable is ManagedIdentity {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool public paused;\r\n\r\n    constructor(bool paused_) {\r\n        paused = paused_;\r\n    }\r\n\r\n    function _requireNotPaused() internal view {\r\n        require(!paused, \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view {\r\n        require(paused, \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual {\r\n        _requireNotPaused();\r\n        paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual {\r\n        _requirePaused();\r\n        paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ArtemVoucherRedeemer is Recoverable, Pausable, ERC1155TokenReceiver {\r\n    using ERC20Wrapper for IWrappedERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IERC1155InventoryBurnable public immutable vouchersContract;\r\n    IWrappedERC20 public immutable tokenContract;\r\n    address public tokenHolder;\r\n\r\n    mapping (uint256 => uint256) private _voucherTokenAmount;\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param _vouchersContract the address of the vouchers contract.\r\n     * @param _tokenContract the address of the ERC20 token contract.\r\n     * @param _tokenHolder the address of the ERC20 token holder.\r\n     */\r\n    constructor(\r\n        IERC1155InventoryBurnable _vouchersContract,\r\n        IWrappedERC20 _tokenContract,\r\n        address _tokenHolder\r\n    ) Ownable(msg.sender) Pausable(true){\r\n        vouchersContract = _vouchersContract;\r\n        tokenContract = _tokenContract;\r\n        tokenHolder = _tokenHolder;\r\n    }\r\n\r\n    /**\r\n     * Sets the ERC20 token value for voucher.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @param tokenIds the id of the voucher.\r\n     * @param amounts value of the voucher in ERC20 token.\r\n     */\r\n    function setVoucherValues(uint256[] memory tokenIds, uint256[] memory amounts) external virtual{\r\n        _requireOwnership(_msgSender());\r\n        require(tokenIds.length == amounts.length, \"DoseVoucherRedeemer: invalid length of array\");\r\n        for(uint256 i; i < tokenIds.length; ++i){\r\n            uint256 amount = amounts[i];\r\n            require(amount > 0, \"DoseVoucherRedeemer: invalid amount\");\r\n            _voucherTokenAmount[tokenIds[i]] = amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the ERC20 token value for voucher.\r\n     * @param tokenId the id of the voucher.\r\n     */\r\n    function getVoucherValue(uint256 tokenId) external view virtual returns (uint256){\r\n        return _voucherTokenAmount[tokenId];\r\n    }\r\n\r\n    /**\r\n     * Validates the validity of the voucher and returns its value.\r\n     * @dev Reverts if the voucher is not a valid voucher.\r\n     * @param tokenId the id of the voucher.\r\n     * @return the value of the voucher in ERC20 token.\r\n     */\r\n    function _voucherValue(uint256 tokenId) internal view virtual returns (uint256) {\r\n        uint256 tokenValue = _voucherTokenAmount[tokenId];\r\n        require(tokenValue > 0, \"DoseVoucherRedeemer: invalid voucher\");\r\n        return tokenValue;\r\n    }\r\n\r\n    /**\r\n     * Sets the token holder address.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @param _tokenHolder the new address for the token holder.\r\n     */\r\n    function setTokenHolder(address _tokenHolder) external virtual {\r\n        _requireOwnership(_msgSender());\r\n        tokenHolder = _tokenHolder;\r\n    }\r\n\r\n    /**\r\n     * Pause the redeem function.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     */\r\n    function pause() public{\r\n        _requireOwnership(_msgSender());\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * Unpause the redeem function.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     */\r\n    function unpause() public{\r\n        _requireOwnership(_msgSender());\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * Handle the receipt of a single ERC1155 token type.\r\n     * @dev See {IERC1155TokenReceiver-onERC1155Received(address,address,uint256,uint256,bytes)}.\r\n     */\r\n    function onERC1155Received(\r\n        address, /*operator*/\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata /*data*/\r\n    ) external virtual override returns (bytes4) {\r\n        _requireNotPaused();\r\n        require(msg.sender == address(vouchersContract), \"DoseVoucherRedeemer: wrong sender\");\r\n        vouchersContract.burnFrom(address(this), id, value);\r\n        uint256 tokenAmount = _voucherValue(id).mul(value);\r\n        tokenContract.wrappedTransferFrom(tokenHolder, from, tokenAmount);\r\n        return _ERC1155_RECEIVED;\r\n    }\r\n\r\n    /**\r\n     * Handle the receipt of multiple ERC1155 token types.\r\n     * @dev See {IERC1155TokenReceiver-onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)}.\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address, /*operator*/\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata /*data*/\r\n    ) external virtual override returns (bytes4) {\r\n        _requireNotPaused();\r\n        require(msg.sender == address(vouchersContract), \"DoseVoucherRedeemer: wrong sender\");\r\n        vouchersContract.batchBurnFrom(address(this), ids, values);\r\n        uint256 tokenAmount;\r\n        for (uint256 i; i != ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            tokenAmount = tokenAmount.add(_voucherValue(id).mul(values[i]));\r\n        }\r\n        tokenContract.wrappedTransferFrom(tokenHolder, from, tokenAmount);\r\n        return _ERC1155_BATCH_RECEIVED;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC1155InventoryBurnable\",\"name\":\"_vouchersContract\",\"type\":\"address\"},{\"internalType\":\"contract IWrappedERC20\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getVoucherValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"setTokenHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setVoucherValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IWrappedERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vouchersContract\",\"outputs\":[{\"internalType\":\"contract IERC1155InventoryBurnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ArtemVoucherRedeemer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000087a3747c9942d8351cc85aac2f94807b27a37c0d0000000000000000000000009b83f827928abdf18cf1f7e67053572b9bceff3a000000000000000000000000b23072040b02602a6c2f6cb8d3cff92ad6b904f6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e86c8c3b18410a86bb960aa79f10ab94df6d6fbbc97c41edcddbec8ce6d0582b"}]}