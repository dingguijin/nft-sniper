{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/utils/uniq/UniqPaymentProxyV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./SignatureVerify.sol\\\";\\nimport \\\"../../utils/uniq/Ierc20.sol\\\";\\nimport \\\"../../interfaces/IUniqRedeemV2.sol\\\";\\n\\ncontract UniqPaymentProxyV2 is Ownable, SignatureVerify {\\n    IUniqRedeemV2 internal _redeem;\\n\\n    // ----- EVENTS ----- //\\n    event TokensRequested(\\n        address indexed _requester,\\n        address indexed _mintAddress,\\n        uint256[] _tokenIds,\\n        uint256 _bundleId\\n    );\\n    event TokensBougth(\\n        address indexed _mintingContractAddress,\\n        address indexed _sellerAddress,\\n        address indexed _receiver,\\n        uint256 _bundleId,\\n        uint256[] _tokenIds,\\n        uint256 _priceForPackage,\\n        address _paymentToken,\\n        uint256 _sellerFee\\n    );\\n    event Withdraw(\\n        address indexed _sellerAddress,\\n        address _tokenContractAddress,\\n        uint256 _amount\\n    );\\n\\n    // ----- VARIABLES ----- //\\n    uint256 internal _transactionOffset;\\n    uint256 internal _networkId;\\n    mapping(bytes => bool) internal _isSignatureUsed;\\n    mapping(address => mapping(uint256 => bool))\\n        internal _tokenAlreadyRequested;\\n    mapping(uint256 => bool) internal _isNonceUsed;\\n\\n    // ----- CONSTRUCTOR ----- //\\n    constructor(uint256 _pnetworkId) {\\n        _transactionOffset = 3 minutes;\\n        _networkId = _pnetworkId;\\n    }\\n\\n    function setRedeemAddress(IUniqRedeemV2 _redeemAddress) external onlyOwner {\\n        _redeem = _redeemAddress;\\n    }\\n\\n    // ----- VIEWS ----- //\\n    function getRedeemAddress() external view returns (address) {\\n        return address(_redeem);\\n    }\\n\\n    // ----- MESSAGE SIGNATURE ----- //\\n    /// @dev not test for functions related to signature\\n    function getMessageHash(\\n        address _mintingContractAddress,\\n        address _sellerAddress,\\n        uint256 _percentageForSeller,\\n        uint256 _bundleId,\\n        uint256[] memory _tokenIds,\\n        uint256 _price,\\n        address _paymnetTokenAddress,\\n        uint256 _timestamp,\\n        string memory _redeemerName,\\n        uint256 _purpose\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _networkId,\\n                    _mintingContractAddress,\\n                    _sellerAddress,\\n                    _percentageForSeller,\\n                    _bundleId,\\n                    _tokenIds,\\n                    _price,\\n                    _paymnetTokenAddress,\\n                    _timestamp,\\n                    _redeemerName,\\n                    _purpose\\n                )\\n            );\\n    }\\n\\n    /// @dev not test for functions related to signature\\n    function verifySignature(\\n        address _mintingContractAddress,\\n        address _sellerAddress,\\n        uint256 _percentageForSeller,\\n        uint256 _bundleId,\\n        uint256[] memory _tokenIds,\\n        uint256 _price,\\n        address _paymentTokenAddress,\\n        bytes memory _signature,\\n        uint256 _timestamp,\\n        string memory _redeemerName,\\n        uint256 _purpose\\n    ) internal view returns (bool) {\\n        bytes32 messageHash = getMessageHash(\\n            _mintingContractAddress,\\n            _sellerAddress,\\n            _percentageForSeller,\\n            _bundleId,\\n            _tokenIds,\\n            _price,\\n            _paymentTokenAddress,\\n            _timestamp,\\n            _redeemerName,\\n            _purpose\\n        );\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        return recoverSigner(ethSignedMessageHash, _signature) == owner();\\n    }\\n\\n    function getMessageHashRequester(\\n        address _mintContractAddress,\\n        uint256 _mintNetworkId,\\n        address _sellerAddress,\\n        uint256 _percentageForSeller,\\n        uint256 _bundleId,\\n        uint256[] memory _tokenIds,\\n        uint256 _price,\\n        address _paymnetTokenAddress,\\n        uint256 _timestamp,\\n        address _requesterAddress\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _networkId,\\n                    _mintContractAddress,\\n                    _mintNetworkId,\\n                    _sellerAddress,\\n                    _percentageForSeller,\\n                    _bundleId,\\n                    _tokenIds,\\n                    _price,\\n                    _paymnetTokenAddress,\\n                    _timestamp,\\n                    _requesterAddress\\n                )\\n            );\\n    }\\n\\n    function verifySignatureRequester(\\n        address _mintContractAddress,\\n        uint256 _mintNetworkId,\\n        address _sellerAddress,\\n        uint256 _percentageForSeller,\\n        uint256 _bundleId,\\n        uint256[] memory _tokenIds,\\n        uint256 _price,\\n        address _paymentTokenAddress,\\n        bytes memory _signature,\\n        uint256 _timestamp\\n    ) internal view returns (bool) {\\n        bytes32 messageHash = getMessageHashRequester(\\n            _mintContractAddress,\\n            _mintNetworkId,\\n            _sellerAddress,\\n            _percentageForSeller,\\n            _bundleId,\\n            _tokenIds,\\n            _price,\\n            _paymentTokenAddress,\\n            _timestamp,\\n            msg.sender\\n        );\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        return recoverSigner(ethSignedMessageHash, _signature) == owner();\\n    }\\n\\n    function _redeemTokens(\\n        address _mintingContractAddress,\\n        uint256[] memory _tokenIds,\\n        string memory _redeemerName,\\n        uint256 _purpose\\n    ) internal {\\n        address[] memory contractAddresses = new address[](_tokenIds.length);\\n        uint256[] memory purposes = new uint256[](_tokenIds.length);\\n        string[] memory names = new string[](_tokenIds.length);\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            contractAddresses[i] = _mintingContractAddress;\\n            purposes[i] = _purpose;\\n            names[i] = _redeemerName;\\n        }\\n        _redeem.redeemTokensAsAdmin(\\n            contractAddresses,\\n            _tokenIds,\\n            purposes,\\n            names\\n        );\\n    }\\n\\n    function _sendTokens(address _paymentToken, uint256 _priceForPackage, address _sellerAddress, uint256 _percentageForSeller) internal returns(uint256 sellerFee){\\n        sellerFee = (_priceForPackage * _percentageForSeller) / 100;\\n        if (_priceForPackage != 0) {\\n        if (_paymentToken == address(0)) {\\n                require(msg.value >= _priceForPackage, \\\"Not enough ether\\\");\\n                if (_priceForPackage < msg.value) {\\n                    payable(msg.sender).transfer(msg.value - _priceForPackage);\\n                }\\n                payable(_sellerAddress).transfer(sellerFee);\\n            } else {\\n                Ierc20(_paymentToken).transferFrom(\\n                    msg.sender,\\n                    _sellerAddress,\\n                    sellerFee\\n                );\\n                Ierc20(_paymentToken).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _priceForPackage - sellerFee\\n                );\\n            }\\n        }\\n    }\\n\\n    function _mintAndRedeem(address _mintingContractAddress,  address _receiver, uint256[] memory _tokenIds, string memory _redeemerName, uint256 _purpose) internal {\\n        address[] memory _receivers = new address[](_tokenIds.length);\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            _receivers[i] = _receiver;\\n        }\\n        IUniqCollections(_mintingContractAddress).batchMintSelectedIds(\\n            _tokenIds,\\n            _receivers\\n        );\\n        if (\\n            _purpose != 0 && bytes(_redeemerName).length >= 2 && (address(_redeem) != address(0))\\n        ) {\\n            _redeemTokens(_mintingContractAddress, _tokenIds, _redeemerName, _purpose);\\n        }\\n    }\\n\\n    // ----- PUBLIC METHODS ----- //\\n    function buyTokens(\\n        address _mintingContractAddress,\\n        address _sellerAddress,\\n        uint256 _percentageForSeller,\\n        uint256 _bundleId,\\n        uint256[] memory _tokenIds,\\n        uint256 _priceForPackage,\\n        address _paymentToken,\\n        address _receiver,\\n        bytes memory _signature,\\n        uint256 _timestamp,\\n        string memory _redeemerName,\\n        uint256 _purpose\\n    ) external payable {\\n        require(\\n            _timestamp + _transactionOffset >= block.timestamp,\\n            \\\"Transaction timed out\\\"\\n        );\\n        require(!_isSignatureUsed[_signature], \\\"Signature already used\\\");\\n        require(\\n            verifySignature(\\n                _mintingContractAddress,\\n                _sellerAddress,\\n                _percentageForSeller,\\n                _bundleId,\\n                _tokenIds,\\n                _priceForPackage,\\n                _paymentToken,\\n                _signature,\\n                _timestamp,\\n                _redeemerName,\\n                _purpose\\n            ),\\n            \\\"Signature mismatch\\\"\\n        );\\n        _isSignatureUsed[_signature] = true;\\n        \\n        uint256 sellerFee = _sendTokens(_paymentToken,  _priceForPackage,  _sellerAddress, _percentageForSeller);\\n\\n        _mintAndRedeem(_mintingContractAddress, _receiver, _tokenIds, _redeemerName, _purpose);\\n        \\n        emit TokensBougth(\\n            _mintingContractAddress,\\n            _sellerAddress,\\n            _receiver,\\n            _bundleId,\\n            _tokenIds,\\n            _priceForPackage,\\n            _paymentToken,\\n            sellerFee\\n        );\\n    }\\n\\n    function requestTokens(\\n        address _mintContractAddress,\\n        uint256 _mintNetworkId,\\n        address _sellerAddress,\\n        uint256 _percentageForSeller,\\n        uint256 _bundleId,\\n        uint256[] memory _tokenIds,\\n        uint256 _priceForPackage,\\n        address _paymentToken,\\n        bytes memory _signature,\\n        uint256 _timestamp\\n    ) external payable {\\n        require(\\n            _timestamp + _transactionOffset >= block.timestamp,\\n            \\\"Transaction timed out\\\"\\n        );\\n        require(!_isSignatureUsed[_signature], \\\"Signature already used\\\");\\n        require(\\n            verifySignatureRequester(\\n                _mintContractAddress,\\n                _mintNetworkId,\\n                _sellerAddress,\\n                _percentageForSeller,\\n                _bundleId,\\n                _tokenIds,\\n                _priceForPackage,\\n                _paymentToken,\\n                _signature,\\n                _timestamp\\n            ),\\n            \\\"Signature mismatch\\\"\\n        );\\n        _isSignatureUsed[_signature] = true;\\n        uint256 sellerFee = (_priceForPackage * _percentageForSeller) /\\n                    100;\\n        if (_priceForPackage != 0) {\\n            if (_paymentToken == address(0)) {\\n                require(msg.value >= _priceForPackage, \\\"Not enough ether\\\");\\n                if (_priceForPackage < msg.value) {\\n                    payable(msg.sender).transfer(msg.value - _priceForPackage);\\n                }\\n                payable(_sellerAddress).transfer(sellerFee);\\n            } else {\\n                Ierc20(_paymentToken).transferFrom(\\n                    msg.sender,\\n                    _sellerAddress,\\n                    sellerFee\\n                );\\n                Ierc20(_paymentToken).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _priceForPackage - sellerFee\\n                );\\n            }\\n        }\\n        if(_mintNetworkId == _networkId){ \\n            if(NFTContract(_mintContractAddress).owner() == address(this)){\\n            address[] memory _receivers = new address[](_tokenIds.length);\\n            for (uint256 i = 0; i < _tokenIds.length; i++) {\\n                _receivers[i] = msg.sender;\\n            }\\n            IUniqCollections(_mintContractAddress).batchMintSelectedIds(\\n                _tokenIds,\\n                _receivers\\n            );\\n            return();\\n            }\\n        }\\n        emit TokensRequested(\\n            msg.sender,\\n            _mintContractAddress,\\n            _tokenIds,\\n            _bundleId\\n        );\\n    }\\n\\n    // ----- PROXY METHODS ----- //\\n\\n    function pEditClaimingAddress(address _contractAddress, address _newAddress)\\n        external\\n        onlyOwner\\n    {\\n        IUniqCollections(_contractAddress).editClaimingAdress(_newAddress);\\n    }\\n\\n    function pEditRoyaltyFee(address _contractAddress, uint256 _newFee)\\n        external\\n        onlyOwner\\n    {\\n        IUniqCollections(_contractAddress).editRoyaltyFee(_newFee);\\n    }\\n\\n    function pEditTokenUri(address _contractAddress, string memory _ttokenUri)\\n        external\\n        onlyOwner\\n    {\\n        IUniqCollections(_contractAddress).editTokenUri(_ttokenUri);\\n    }\\n\\n    function pRecoverERC20(address _contractAddress, address token)\\n        external\\n        onlyOwner\\n    {\\n        IUniqCollections(_contractAddress).recoverERC20(token);\\n        uint256 val = IERC20(token).balanceOf(address(this));\\n        require(val > 0, \\\"Nothing to recover\\\");\\n        Ierc20(token).transfer(owner(), val);\\n    }\\n\\n    function pTransferOwnership(address _contractAddress, address newOwner)\\n        external\\n        onlyOwner\\n    {\\n        IUniqCollections(_contractAddress).transferOwnership(newOwner);\\n    }\\n\\n    function pBatchMintSelectedIds(\\n        uint256[] memory _ids,\\n        address[] memory _addresses,\\n        address _contractAddress\\n    ) external onlyOwner {\\n        IUniqCollections(_contractAddress).batchMintSelectedIds(\\n            _ids,\\n            _addresses\\n        );\\n    }\\n\\n    function pBatchMintSelectedIdsAndRedeem(\\n        uint256[] memory _ids,\\n        address[] memory _addresses,\\n        address _contractAddress,\\n        string[] memory _redeemerName,\\n        uint256 _purpose\\n    ) external onlyOwner {\\n        IUniqCollections(_contractAddress).batchMintSelectedIds(\\n            _ids,\\n            _addresses\\n        );\\n        uint256[] memory purposes = new uint256[](_ids.length);\\n        address[] memory contractAddresses = new address[](_ids.length);\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            purposes[i] = _purpose;\\n            contractAddresses[i] = _contractAddress;\\n        }\\n        _redeem.redeemTokensAsAdmin(\\n            contractAddresses,\\n            _ids,\\n            purposes,\\n            _redeemerName\\n        );\\n    }\\n\\n    function pMintNextToken(address _contractAddress, address _receiver)\\n        external\\n        onlyOwner\\n    {\\n        IUniqCollections(_contractAddress).mintNextToken(_receiver);\\n    }\\n\\n    // ----- OWNERS METHODS ----- //\\n\\n    function withdrawTokens(address token) external onlyOwner {\\n        uint256 val = IERC20(token).balanceOf(address(this));\\n        require(val != 0, \\\"Nothing to recover\\\");\\n        // use interface that not return value (USDT case)\\n        Ierc20(token).transfer(msg.sender, val);\\n    }\\n\\n    function setTransactionOffset(uint256 _newOffset) external onlyOwner {\\n        _transactionOffset = _newOffset;\\n    }\\n\\n    receive() external payable {}\\n\\n    function wthdrawETH() external onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n}\\n\\ninterface IUniqCollections {\\n    function editClaimingAdress(address _newAddress) external;\\n\\n    function editRoyaltyFee(uint256 _newFee) external;\\n\\n    function batchMintSelectedIds(\\n        uint256[] memory _ids,\\n        address[] memory _addresses\\n    ) external;\\n\\n    function editTokenUri(string memory _ttokenUri) external;\\n\\n    function recoverERC20(address token) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function mintNextToken(address _receiver) external;\\n}\\n\\ninterface NFTContract {\\n    function mintNFTTokens(\\n        address _requesterAddress,\\n        uint256 _bundleId,\\n        uint256[] memory _tokenIds,\\n        uint256 _chainId,\\n        bytes memory _transactionHash\\n    ) external;\\n\\n    function owner() external view returns(address);\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/uniq/SignatureVerify.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ncontract SignatureVerify{\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        require(_signature.length == 65, \\\"invalid signature length\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n}\"\r\n    },\r\n    \"./contracts/utils/uniq/Ierc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// we need some information from token contract\\n// we also need ability to transfer tokens from/to this contract\\ninterface Ierc20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IUniqRedeemV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IUniqRedeem.sol\\\";\\n\\ninterface IUniqRedeemV2 is IUniqRedeem {\\n    function redeemTokensAsAdmin(\\n        address[] memory _tokenContracts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _purposes,\\n        string[] memory _redeemerName\\n    ) external;\\n\\n    function redeemTokenForPurposesAsAdmin(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256[] memory _purposes,\\n        string memory _redeemerName\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IUniqRedeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IUniqRedeem {\\n    event Redeemed(\\n        address indexed _contractAddress,\\n        uint256 indexed _tokenId,\\n        address indexed _redeemerAddress,\\n        string _redeemerName,\\n        uint256[] _purposes\\n    );\\n\\n    function isTokenRedeemedForPurpose(\\n        address _address,\\n        uint256 _tokenId,\\n        uint256 _purpose\\n    ) external view returns (bool);\\n\\n    function getMessageHash(\\n        address[] memory _tokenContracts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _purposes,\\n        uint256 _price,\\n        address _paymentTokenAddress,\\n        uint256 _timestamp\\n    ) external pure returns (bytes32);\\n\\n    function redeemManyTokens(\\n        address[] memory _tokenContracts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _purposes,\\n        string memory _redeemerName,\\n        uint256 _price,\\n        address _paymentTokenAddress,\\n        bytes memory _signature,\\n        uint256 _timestamp\\n    ) external payable;\\n\\n    function redeemTokenForPurposes(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256[] memory _purposes,\\n        string memory _redeemerName,\\n        uint256 _price,\\n        address _paymentTokenAddress,\\n        bytes memory _signature,\\n        uint256 _timestamp\\n    ) external payable;\\n\\n    function setTransactionOffset(uint256 _newOffset) external;\\n\\n    function setStatusesForTokens(\\n        address[] memory _tokenAddresses,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _purposes,\\n        bool[] memory isRedeemed\\n    ) external;\\n\\n    function withdrawERC20(address _address) external;\\n\\n    function withdrawETH() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pnetworkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mintingContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bundleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceForPackage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellerFee\",\"type\":\"uint256\"}],\"name\":\"TokensBougth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mintAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bundleId\",\"type\":\"uint256\"}],\"name\":\"TokensRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentageForSeller\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bundleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_priceForPackage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_redeemerName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentageForSeller\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bundleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymnetTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_redeemerName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintNetworkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentageForSeller\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bundleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymnetTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_requesterAddress\",\"type\":\"address\"}],\"name\":\"getMessageHashRequester\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"pBatchMintSelectedIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_redeemerName\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"pBatchMintSelectedIdsAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"pEditClaimingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"pEditRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ttokenUri\",\"type\":\"string\"}],\"name\":\"pEditTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"pMintNextToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pRecoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"pTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintNetworkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentageForSeller\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bundleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_priceForPackage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"requestTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniqRedeemV2\",\"name\":\"_redeemAddress\",\"type\":\"address\"}],\"name\":\"setRedeemAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newOffset\",\"type\":\"uint256\"}],\"name\":\"setTransactionOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wthdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniqPaymentProxyV2","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ed247dd416a235113813e1904b28d356b33bce76f2e3fd1a5171ea6d330bfd09"}]}