{"status":"1","message":"OK","result":[{"SourceCode":"{\"Better.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ncontract Better {\\r\\n\\r\\n    string public constant name = \\\"Better\\\";\\r\\n    string public constant symbol = \\\"BTR\\\";\\r\\n    uint8 public constant decimals = 18;  \\r\\n\\r\\n\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\r\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\r\\n\\r\\n\\r\\n    mapping(address =\\u003e uint256) balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping (address =\\u003e uint256)) allowed;\\r\\n    \\r\\n    uint256 totalSupply_;\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n\\r\\n   constructor(uint256 total) {  \\r\\n\\ttotalSupply_ = total;\\r\\n\\tbalances[msg.sender] = totalSupply_;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount_)public{\\r\\n        totalSupply_ = totalSupply_.add(amount_);\\r\\n        balances[msg.sender] = balances[msg.sender].add(amount_);\\r\\n    }  \\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n\\treturn totalSupply_;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address tokenOwner) public view returns (uint) {\\r\\n        return balances[tokenOwner];\\r\\n    }\\r\\n\\r\\n    function transfer(address receiver, uint numTokens) public returns (bool) {\\r\\n        require(numTokens \\u003c= balances[msg.sender]);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\\r\\n        balances[receiver] = balances[receiver].add(numTokens);\\r\\n        emit Transfer(msg.sender, receiver, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address delegate, uint numTokens) public returns (bool) {\\r\\n        allowed[msg.sender][delegate] = numTokens;\\r\\n        emit Approval(msg.sender, delegate, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address delegate) public view returns (uint) {\\r\\n        return allowed[owner][delegate];\\r\\n    }\\r\\n\\r\\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\\r\\n        require(numTokens \\u003c= balances[owner]);    \\r\\n        require(numTokens \\u003c= allowed[owner][msg.sender]);\\r\\n    \\r\\n        balances[owner] = balances[owner].sub(numTokens);\\r\\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\\r\\n        balances[buyer] = balances[buyer].add(numTokens);\\r\\n        emit Transfer(owner, buyer, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath { \\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n      assert(b \\u003c= a);\\r\\n      return a - b;\\r\\n    }\\r\\n    \\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n      uint256 c = a + b;\\r\\n      assert(c \\u003e= a);\\r\\n      return c;\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _serviceAdmin;\\r\\n    bool private initialized;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    event NewServiceAdmin(address indexed previousServiceAdmin, address indexed newServiceAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n\\r\\n    function init(address serviceAdmin_) internal {\\r\\n        require(!initialized, \\\"Ownable: init done\\\");\\r\\n        _setOwner(_msgSender());\\r\\n        _setServiceAdmin(serviceAdmin_);\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current service admin.\\r\\n     */\\r\\n    function serviceAdmin() public view virtual returns (address) {\\r\\n        return _serviceAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the service Admin.\\r\\n     */\\r\\n    modifier onlyServiceAdmin() {\\r\\n        require(serviceAdmin() == _msgSender(), \\\"Ownable: caller is not the serviceAdmin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier anyAdmin(){\\r\\n        require(serviceAdmin() == _msgSender() || owner() == _msgSender(), \\\"Ownable: Caller is not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() external virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function _setServiceAdmin(address newServiceAdmin) private {\\r\\n        address oldServiceAdmin = _serviceAdmin;\\r\\n        _serviceAdmin = newServiceAdmin;\\r\\n        emit NewServiceAdmin(oldServiceAdmin, newServiceAdmin);\\r\\n    }\\r\\n}\\r\\n\"},\"Pauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n\\n    bool private pauseInit;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function _pausable_init() internal{\\n         require(!pauseInit, \\\"init done\\\");\\n        _paused = false;\\n        pauseInit = true;\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c \\u003c a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003c= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"StakingV1.1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n                 .\\u0027cdO0000OO00KKNNNXKOkdc\\u0027.                 \\n              \\u0027cooolc;;lc\\u0027,l:\\u0027\\u0027:lloxO000KKOdc\\u0027              \\n           \\u0027ldoll;.\\u0027c..;; .:\\u0027  \\u0027:..::;cxKKxccddl\\u0027           \\n         ;ddlc\\u0027.:;                 ,..;c,cdxddk0Ox:.        \\n       ;ddc..:,                       ...,::xOo;;lkk;       \\n     .dx;.;;                             \\u0027\\u0027.,lk0xlodkd\\u0027     \\n    ;kl;c.                                 .c\\u0027.okc,,cO0:    \\n   ckc\\u0027..        .cxd,       \\u0027ldOd\\u0027          .c:c00ollokl   \\n  cO;\\u0027c.        .dWMMX:     ,0MMMM0\\u0027          .\\u0027.cko;;;xKl  \\n ;Ol;,          ;KMMMMO.    oWMMMMWl           .c\\u0027cKkcccdO: \\n.ko.,\\u0027          :NMMMMK,   .dMMMMMMd            .,;dx.   lk\\u0027\\nlk;:,           ,KMMMMO.    lWMMMMWo             ;,,OklllxKl\\nko.\\u0027.           .oWMMNl     .OWMMM0\\u0027             .:;dO;...dO\\n0:;:             .ckk:.      .:okd\\u0027               ,.cO:...c0\\n0;\\u0027.     .;.                            \\u0027:c.      ;::0kllldK\\nO;c;     cXNOo\\u0027                      .cONNx.      ..;Oc   \\u0027O\\n0;..      lW0d,                      .;o0K,       ;::Ol...;0\\n0c;;      cNl                          .xK,       \\u0027.:0xlllkK\\nko.,.     ;Xx.                         \\u00270O.      .c;dk.   lO\\nlk::.     .xX:                         oNl       \\u0027.,0Oc::lOo\\n.ko.:\\u0027     \\u0027O0,                       cXx.      .::dkc::cOO\\u0027\\n :Ol,\\u0027      \\u0027OKc.                   .oKx.      \\u0027:.:KkcccdO: \\n  cO;,c.     .oKO;.               .cOKc.       \\u0027,cko;;:xKl  \\n   ckc.\\u0027,      \\u0027d0Oo;..      ...:d0Ol.       .c,:00olldOl.  \\n    ;kl:;.       .;okOkkxddxkOOOko;.       .;.\\u0027oOl;;:k0:    \\n     .dx,\\u0027c\\u0027         .\\u0027,::::;\\u0027..         ..\\u0027:cxkdlok0x\\u0027     \\n       ;xd:.\\u0027c.                       ...c;;xXkc:cdx:       \\n        .;ddl:..c. .              .\\u0027..c,.:ddlcdKXk:.        \\n           \\u0027ldooc..:, .c. \\u0027;..\\u0027:, \\u0027c,,cokK0xdddl,           \\n              \\u0027cooolc;:l,.:c,,:cccldO0Okxkkdc\\u0027.             \\n                 .,lxO000OOO00KKNNNNX0Oxl,.                 \\n*/\\n\\n// BETTER Staking Contract v1.1 (advisor vault with token lock period)\\n// based on Synthetix StakingRewards\\n\\npragma solidity ^0.8.9;\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Pauseable.sol\\\";\\n\\ncontract StakingRewards is Ownable,Pausable{\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n    uint256 public periodFinish;\\n    uint256 public withdrawLockPeriod;\\n    uint public rewardRate;\\n    uint public lastUpdateTime;\\n    uint public rewardPerTokenStored;\\n    mapping(address =\\u003e uint) public userRewardPerTokenPaid;\\n    mapping(address =\\u003e uint) public rewards;\\n    uint private _totalSupply;\\n    mapping(address =\\u003e uint) private _balances;\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event WithdrawDurationUpdated(uint256 newDuration);\\n    constructor(address _stakingToken, address _rewardsToken, uint256 _endTime, uint256 _rewardRate, address serviceAdmin) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardsToken);\\n        withdrawLockPeriod = _endTime;\\n        periodFinish = _endTime;\\n        rewardRate = _rewardRate;\\n        Ownable.init(serviceAdmin);\\n    }\\n    function rewardPerToken() public view returns (uint) {\\n        if (_totalSupply == 0) {\\n            return 0;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\\n    }\\n    function earned(address account) public view returns (uint) {\\n        return\\n            ((_balances[account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\\n            rewards[account];\\n    }\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n    function stake(uint _amount) external whenNotPaused updateReward(msg.sender) {\\n        require(_amount \\u003e 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply += _amount;\\n        _balances[msg.sender] += _amount;\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, _amount);\\n    }\\n    function withdraw(uint _amount) public whenNotPaused updateReward(msg.sender) {\\n        require(_amount \\u003e 0, \\\"Cannot withdraw 0\\\");\\n        require(withdrawLockPeriod \\u003c block.timestamp, \\\"Can not withdraw during lock period\\\");\\n        require(_balances[msg.sender] \\u003e= _amount,\\\"Can not withdraw more than the current balance\\\");\\n        _totalSupply -= _amount;\\n        _balances[msg.sender] -= _amount;\\n        stakingToken.transfer(msg.sender, _amount);\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n    function getReward() public whenNotPaused updateReward(msg.sender) {\\n        uint reward = rewards[msg.sender];\\n        if (reward \\u003e 0){\\n            rewards[msg.sender] = 0;\\n            rewardsToken.transfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n    \\n    function exit() whenNotPaused external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n    \\n    function updatewithdrawLockPeriod(uint256 _newperiod)public anyAdmin {\\n        \\n        withdrawLockPeriod = _newperiod;\\n        emit WithdrawDurationUpdated(_newperiod);\\n    }\\n    function updatePeriod(uint256 _newperiod)public anyAdmin {\\n        require(_newperiod \\u003e periodFinish, \\\"New time should be greater than old one\\\");\\n        \\n        periodFinish = _newperiod;\\n        emit RewardsDurationUpdated(_newperiod);\\n    }\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp \\u003c periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    // ================== Functions to pause and unpause contract ==================\\n    \\n    function PauseContract()public anyAdmin{\\n        _pause();\\n    }\\n    function UnPauseContract()public anyAdmin{\\n        _unpause();\\n    }\\n}\\n\"},\"StakingV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract StakingRewards is Ownable{\\r\\n    IERC20 public rewardsToken;\\r\\n    IERC20 public stakingToken;\\r\\n\\r\\n    uint256 public periodFinish;\\r\\n    uint public rewardRate ;\\r\\n    uint public lastUpdateTime;\\r\\n    uint public rewardPerTokenStored;\\r\\n    uint256 public lockPeriod;\\r\\n    uint256 public stakeId;\\r\\n\\r\\n    mapping(uint256 =\\u003e address) public stakeOwner;\\r\\n    mapping(uint256 =\\u003e uint256) public stakeAmount;\\r\\n    mapping(uint256 =\\u003e uint256) public stakeTimestamp;\\r\\n    mapping(uint256 =\\u003e bool) public stakeStatus;\\r\\n\\r\\n    mapping(uint256 =\\u003e uint256) public userRewardPerTokenPaid;\\r\\n    mapping(uint256 =\\u003e uint256) public rewards;\\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private _ownerIdIndex;\\r\\n    mapping(address =\\u003e uint256[]) private _ownerIds;\\r\\n\\r\\n    uint public _totalSupply;\\r\\n\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount, uint256 stakeId);\\r\\n    event Withdrawn(address indexed user, uint256 amount, uint256 stakeId);\\r\\n    event RewardPaid(address indexed user, uint256 reward, uint256 stakeId);\\r\\n    event RewardsDurationUpdated(uint256 newDuration);\\r\\n    event LockPeriodUpdated(uint256 newPeriod);\\r\\n\\r\\n    constructor(address _stakingToken, address _rewardsToken, uint256 _endTime, uint256 _lockPeriod, uint256 _rewardRate, address serviceAdmin) {\\r\\n        stakingToken = IERC20(_stakingToken);\\r\\n        rewardsToken = IERC20(_rewardsToken);\\r\\n        periodFinish = _endTime;\\r\\n        lockPeriod = _lockPeriod;\\r\\n        rewardRate = _rewardRate;\\r\\n        Ownable.init(serviceAdmin);\\r\\n        stakeId = 1;\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint) {\\r\\n        if (_totalSupply == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return\\r\\n            rewardPerTokenStored +\\r\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\\r\\n    }\\r\\n\\r\\n    function earned(uint256 _stakeId) public view returns (uint) {\\r\\n        return\\r\\n            ((stakeAmount[_stakeId] *\\r\\n                (rewardPerToken() - userRewardPerTokenPaid[_stakeId])) / 1e18) +\\r\\n            rewards[_stakeId];\\r\\n    }\\r\\n\\r\\n    modifier updateReward(uint256 _stakeId) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        lastUpdateTime = lastTimeRewardApplicable();\\r\\n\\r\\n        rewards[_stakeId] = earned(_stakeId);\\r\\n        userRewardPerTokenPaid[_stakeId] = rewardPerTokenStored;\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function stake(uint _amount) external updateReward(stakeId) {\\r\\n        _totalSupply += _amount;\\r\\n\\r\\n        stakeAmount[stakeId] = _amount;\\r\\n        stakeOwner[stakeId] = msg.sender;\\r\\n        stakeStatus[stakeId] = true;\\r\\n        stakeTimestamp[stakeId] = block.timestamp;\\r\\n\\r\\n        _balances[msg.sender] += _amount;\\r\\n\\r\\n        if (!_ownerIdExists(msg.sender, stakeId)) {\\r\\n            _addOwnerId(msg.sender, stakeId);\\r\\n        }\\r\\n\\r\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        emit Staked(msg.sender, _amount, stakeId);\\r\\n        _incrementStakeId();\\r\\n    }\\r\\n\\r\\n    function withdraw(uint _stakeId) public updateReward(_stakeId) {\\r\\n        require(stakeOwner[_stakeId] == msg.sender, \\\"Only Owner can withdraw\\\");\\r\\n        require(stakeStatus[_stakeId], \\\"Already withdrawn\\\" );\\r\\n        require(stakeTimestamp[_stakeId]+lockPeriod \\u003c block.timestamp, \\\"Can not withdraw during lock period\\\");\\r\\n\\r\\n        _totalSupply -= stakeAmount[_stakeId];\\r\\n        _balances[msg.sender] -= stakeAmount[_stakeId];\\r\\n\\r\\n        if ( _ownerIdExists(msg.sender, _stakeId)) {\\r\\n            _deleteOwnerId(msg.sender, _stakeId);\\r\\n        }\\r\\n\\r\\n        stakingToken.transfer(msg.sender, stakeAmount[_stakeId]);\\r\\n        stakeStatus[_stakeId] = false;\\r\\n        emit Withdrawn(msg.sender, stakeAmount[_stakeId], stakeId);\\r\\n    }\\r\\n\\r\\n    function getReward(uint256 _stakeId) public updateReward(_stakeId) {\\r\\n        require(stakeOwner[_stakeId] == msg.sender, \\\"Only Owner can claim reward\\\");\\r\\n\\r\\n        uint reward = rewards[_stakeId];\\r\\n        if (reward \\u003e 0){\\r\\n            rewards[_stakeId] = 0;\\r\\n            rewardsToken.transfer(msg.sender, reward);\\r\\n            emit RewardPaid(msg.sender, reward, stakeId);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function updateRewardPeriod(uint256 _newperiod)public anyAdmin {\\r\\n        require(_newperiod \\u003e periodFinish, \\\"New time should be greater than old one\\\");\\r\\n        periodFinish = _newperiod;\\r\\n        emit RewardsDurationUpdated(_newperiod);\\r\\n    }\\r\\n\\r\\n    function updateLockPeriod(uint256 _newLockPeriod)external anyAdmin{\\r\\n        lockPeriod = _newLockPeriod;\\r\\n        emit LockPeriodUpdated(_newLockPeriod);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\r\\n        return block.timestamp \\u003c periodFinish ? block.timestamp : periodFinish;\\r\\n    }\\r\\n\\r\\n    function _incrementStakeId()internal {\\r\\n        stakeId +=1;\\r\\n    }\\r\\n\\r\\n    function _deleteOwnerId(address owner, uint256 id) internal {\\r\\n        uint256 lastIndex = _ownerIds[owner].length - 1;\\r\\n        uint256 lastId = _ownerIds[owner][lastIndex];\\r\\n        if (id == lastId) {\\r\\n            _ownerIdIndex[owner][id] = 0;\\r\\n            _ownerIds[owner].pop();\\r\\n        } else {\\r\\n            uint256 indexOfId = _ownerIdIndex[owner][id];\\r\\n            _ownerIdIndex[owner][id] = 0;\\r\\n\\r\\n            _ownerIds[owner][indexOfId] = lastId;\\r\\n            _ownerIdIndex[owner][lastId] = indexOfId;\\r\\n            _ownerIds[owner].pop();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addOwnerId(address owner, uint256 id) internal {\\r\\n        uint256 len = _ownerIds[owner].length;\\r\\n        _ownerIdIndex[owner][id] = len;\\r\\n        _ownerIds[owner].push(id);\\r\\n    }\\r\\n\\r\\n    function _ownerIdExists(address owner, uint256 id) internal view returns (bool) {\\r\\n        if (_ownerIds[owner].length == 0) return false;\\r\\n        uint256 index = _ownerIdIndex[owner][id];\\r\\n        return id == _ownerIds[owner][index];\\r\\n    }\\r\\n\\r\\n    function getOwnerIds(address owner) public view returns (uint256[] memory) {\\r\\n        return _ownerIds[owner];\\r\\n    }\\r\\n   \\r\\n    function getOwnerIdIndex(address owner, uint256 id) public view returns (uint256) {\\r\\n        return _ownerIdIndex[owner][id];   \\r\\n    }\\r\\n\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"serviceAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousServiceAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newServiceAdmin\",\"type\":\"address\"}],\"name\":\"NewServiceAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"WithdrawDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnPauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newperiod\",\"type\":\"uint256\"}],\"name\":\"updatePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newperiod\",\"type\":\"uint256\"}],\"name\":\"updatewithdrawLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingRewards","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003fcf8c54e2de40e9da7373ae33767093d29985680000000000000000000000003fcf8c54e2de40e9da7373ae33767093d29985680000000000000000000000000000000000000000000000000000000063da1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003045b75f0d9c0dde2e9654a41ee93a26a7b05bdc","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4cad9d80cca17d67b67f8a3bf06c8fdc33424ddc92e7209be933272282a7a75c"}]}