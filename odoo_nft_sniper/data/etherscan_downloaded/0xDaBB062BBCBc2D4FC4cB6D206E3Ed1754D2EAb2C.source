{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DFreelance.sol\":{\"content\":\"\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ERC20.sol\\\"; \\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeERC20.sol\\\"; \\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/// @title DFreelance\\n/// @author Cao Huang\\ncontract DFreelance is Ownable, ReentrancyGuard { \\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    bool public stopped=false;\\n    address private treasury = address(0);\\n    \\n    enum ProjectState{Initiated, Accepted, Finished, Refund}\\n    enum MilestoneState{Initiated, Pending, RequestPayement, DepositPending, Deposited, Released, Refund, AcceptedRelease, Disputed, ResolvedDispute}\\n    enum DelayType{None, Release, Dispute}\\n    enum ActiveState{inactive, Active}\\n\\n    // project structure\\n    struct Project{\\n      uint    id;\\n      address client;\\n      address freelancer;     \\n      string freelancerHash;\\n      ProjectState  state;\\n      bool isvalid;       \\n    }\\n\\n    // milestone structure\\n    struct Milestone{\\n        uint id;\\n        uint price;\\n        address token;\\n        MilestoneState state;        \\n        bool isvalid;\\n        uint updated;\\n    }\\n\\n    // for milestone dispute\\n    struct Dispute {\\n      uint id;\\n      uint milestoneId;\\n      address litigator;\\n      uint litigatorAmount;\\n      uint defendantAmount;\\n      MilestoneState milestoneState;\\n      uint litigatorUpdatedAt;\\n      uint defendantUpdatedAt;      \\n      uint createdAt;\\n      uint clientAccepted;\\n      uint freelancerAccepted;\\n    }\\n\\n    struct DisputePaymentInfo {\\n      address client;\\n      address freelancer;\\n      uint freelancerFee;\\n      uint clientAmount;\\n      uint freelancerAmount;\\n      uint freelancerFeeAmt;        \\n    }\\n\\n    // memership\\n    struct Membership{\\n       address token;\\n       uint level;\\n       uint price;              \\n       uint updated; \\n       uint expired;\\n    }\\n\\n    uint gClientFee;\\n    mapping(uint=\\u003euint) private gFreelancerFee;\\n    mapping(DelayType=\\u003euint) public delayTimes;\\n\\n    mapping(address=\\u003eActiveState) private tokenFactory;\\n    mapping(address=\\u003eActiveState) private observers;\\n\\n    mapping(uint=\\u003eProject) private projects;\\n    mapping(uint=\\u003emapping(uint=\\u003eMilestone)) private milestones;\\n    mapping(uint=\\u003emapping(uint=\\u003eDispute)) private disputes;\\n    mapping(string=\\u003eMembership) private memberships; \\n\\n    uint[] private projectidList;\\n    mapping(uint=\\u003euint[]) private milestoneIdList;\\n    \\n    // project events\\n    event AcceptProject(uint projectId);\\n    event FinishProject(uint projectId,address client,address freelancer);\\n\\t\\n    // mileston events\\n    event DepositMilestone(uint _proejctId, uint _milestoneId);\\n    event ReleaseMilestone(uint _proejctId, uint _milestoneId);\\n    event AcceptReleaseMilestone(uint _proejctId, uint _milestoneId, uint valueReleased);\\n    event RefundMilestone(address employer,uint price);\\n    event SetMilestoneState(uint _projectId, uint _milestoneId, MilestoneState _status);\\n\\n    // dispute events\\n    event DisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId, uint _amount);\\n    event UpdateDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId, uint _amount);\\n    event AcceptDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId);\\n    event ResolveDispute(uint _projectId, uint _milestoneId, uint _disputeId, uint _disputeAmt);\\n    event CancelDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId);\\n    event SetDisputeStatus(uint _projectId, uint _milestoneId, uint _disputeId, MilestoneState _status);\\n\\n    // membership events\\n    event MembershipPayment(string _userId, uint _level, uint _price, uint _type);\\n\\n    // require that the caller must be an EOA account to avoid flash loans\\n    modifier onlyEOA() {\\n        require(msg.sender == tx.origin, \\\"not eoa\\\");\\n        _;\\n    }\\n\\n    // modifiers for project \\n    modifier verifyCaller (address _address) { \\n      require (msg.sender == _address); \\n      _;\\n    }\\n    \\n    modifier accepted(uint _id){ \\n      require(projects[_id].state==ProjectState.Accepted);\\n      _;\\n    }\\n\\n    // circuit breaker pattern modifiers\\n    modifier stopInEmergency { \\n      require(!stopped); \\n      _; \\n    }\\n    modifier onlyInEmergency { \\n      require(stopped); \\n      _;\\n    }\\n   \\n    modifier onlyObservers {\\n      require(msg.sender == getOwner() || observers[msg.sender] == ActiveState.Active, \\\"It\\u0027s not observer\\u0027s account\\\");\\n      _;\\n    }\\n\\n    // modifier for milestone\\n    modifier condition(bool _condition) {\\n      require(_condition);\\n      _;\\n    }\\n\\n    modifier onlyDeveloper(address _freelancerAddress) {\\n      require(msg.sender == _freelancerAddress, \\\"It\\u0027s not freelancer wallet account\\\");\\n      _;\\n    }\\n\\n    modifier onlyClient(address _clientAddress) {\\n      require(msg.sender == _clientAddress, \\\"It\\u0027s not client wallet account\\\");\\n      _;\\n    }\\n    \\n    modifier inProjectState(uint _projectId, ProjectState _state) {\\n      require(projects[_projectId].state == _state, \\\"It is in inappropriate Status.\\\");\\n      _;\\n    }\\n\\n    modifier inProjectProgress(uint _projectId) {\\n      require(projects[_projectId].state == ProjectState.Accepted, \\\"It\\u0027s not active job.\\\");\\n      _;\\n    }\\n\\n    modifier inProjectProgressOrCompleted(uint _projectId) {\\n      require(projects[_projectId].state == ProjectState.Accepted || projects[_projectId].state == ProjectState.Finished, \\\"It\\u0027s a pending job.\\\");\\n      _;\\n    }\\n\\n    modifier inMilestoneState(uint _projectId, uint _milestonId,  MilestoneState _state){\\n      require(milestones[_projectId][_milestonId].state == _state, \\\"It is in inappropriate Status.\\\");\\n      _;\\n    }\\n    \\n    function getObserver(address _observer) public view returns(ActiveState) {\\n      requireOwner();\\n      return observers[_observer];\\n    }\\n\\n    function setObserver(address _observer, ActiveState _state) external {\\n      requireOwner();\\n      observers[_observer] = _state; \\n    }\\n\\n    function getTreasuryInfo() public view returns (address) {\\n      return treasury;\\n    }\\n\\n    function setTreasuryInfo(address _treasury) external {\\n      requireOwner();\\n      treasury = _treasury;\\n    }\\n\\n    /// @notice Stop contract functionality in case of a bug is detected\\n    /// @dev Using the Circuit braker design pattern\\n    /// @param _stopped boolian state variable for stopping the contract\\n    function breakCircuit(bool _stopped)public{\\n        requireOwner();\\n        stopped=_stopped;\\n    } \\n\\t\\n    /// @notice Get delay time\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    function getDelayTime() public view returns(uint releaseDelay, uint disputeDelay){\\n        releaseDelay = delayTimes[DelayType.Release];\\n        disputeDelay = delayTimes[DelayType.Dispute];\\n    } \\n\\n    function setDelayTime(uint _releaseDelay, uint _disputeDelay ) external{ \\n        requireOwner();\\n        require(_releaseDelay \\u003e 0 \\u0026\\u0026 _disputeDelay \\u003e 0, \\\"Invalid delay time\\\");\\n        delayTimes[DelayType.Release] = _releaseDelay;\\n        delayTimes[DelayType.Dispute] = _disputeDelay;\\n    }\\n\\n    /// @notice Get the client fee\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @return clientFee: client fee (%)\\n    function getValidToken(address token) public view returns(ActiveState){\\n        return tokenFactory[token];\\n    } \\n\\n    function setValidToken(address _token, ActiveState _state) external{ \\n        requireOwner();\\n        tokenFactory[_token] = _state; // 1: active, 0: inactive\\n    }\\n\\n\\n    /// @notice Get the client fee\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @return clientFee: client fee (%)\\n    function getClientFee() public view returns(uint){\\n        uint fee = 30;\\n        \\n        if(gClientFee != 0) {\\n          fee = gClientFee;\\n        }\\n        return fee;\\n    } \\n\\n    function setClientFee(uint _fee) external{ \\n        requireOwner();\\n        require(_fee \\u003c 1000, \\\"Invalid client fee\\\");        \\n        gClientFee = _fee;\\n    }\\n\\n    /// @notice Get the freelancer fee\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @return freelancerFee: freelancer fee (%)\\n    ///         ex: 10%,  8.5%, 7%    \\n    function getFreelancerFee(string memory _userHash) public view returns(uint){\\n        uint fee = 100;  // 10%\\n\\n        if(memberships[_userHash].expired \\u003e block.timestamp) {\\n            uint level = memberships[_userHash].level;\\n            fee = gFreelancerFee[level];      \\n         } \\n\\n         return fee;\\n    }\\n\\n    function setFreelancerFee(uint _level, uint _fee) external{   \\n        requireOwner();\\n        require(_fee \\u003c 1000, \\\"Invalid Freelancer fee\\\");\\n        \\n        gFreelancerFee[_level] = _fee;\\n    }\\n\\n    /// @notice Start an open project as a freelancer\\n    /// @param _projectId The project id\\n    /// @param _hash: freelancer\\u0027s hash\\n    function acceptProject(uint _projectId, string memory _hash) onlyEOA nonReentrant external stopInEmergency{\\n      require(projects[_projectId].isvalid == false, \\\"Project id is already registered\\\");\\n      \\n      projects[_projectId] = Project({\\n          id:_projectId,\\n          state:ProjectState.Accepted,          \\n          client:address(0),\\n          freelancer:msg.sender,\\n          freelancerHash:_hash,\\n          isvalid:true\\n          }); \\n\\n      projectidList.push(_projectId);\\n\\n      emit AcceptProject(_projectId);\\n    }\\n\\n    /// @notice Close the commited project as an client, Ethers will be sent to the freelancer \\n    /// @dev Sending Ethers with call function and check the result\\n    /// @param _projectId The project id\\n    function finishProject(uint _projectId) external onlyEOA nonReentrant accepted(_projectId) verifyCaller(projects[_projectId].client){\\n\\n      uint milestoneSize = getMilestonesSize(_projectId);  \\n\\n      for (uint i = 0; i \\u003c milestoneSize ; i++) {  //for loop example\\n         uint milestoneId = getMilestoneId(_projectId, i);\\n         require(milestones[_projectId][milestoneId].state == MilestoneState.Released \\n         || milestones[_projectId][milestoneId].state == MilestoneState.AcceptedRelease\\n         || milestones[_projectId][milestoneId].state == MilestoneState.ResolvedDispute \\n         || milestones[_projectId][milestoneId].state == MilestoneState.Refund , \\\"Yon can\\u0027t finish your job.\\\");\\n      }\\n\\n      projects[_projectId].state=ProjectState.Finished;      \\n\\n      emit FinishProject(_projectId,projects[_projectId].client,projects[_projectId].freelancer);\\n    }\\n\\n    /// @notice Get the project id list\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @return ids: Array of project ids\\n    function getProjectsSize() external view returns (uint){\\n        return projectidList.length;\\n    }\\n\\n    function getProjectId(uint idx) external view returns(uint) {\\n        return projectidList[idx];\\n    }\\n\\n    /// @notice Get the project specifications\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @param _id : The project id\\n    /// @return id : The project id\\n    /// @return state : The project state\\n    /// @return client : The client address\\n    /// @return freelancer : The freelancer address\\n    function getProject(uint _id)external view onlyObservers returns(uint id,uint state, address client,address freelancer){ \\n\\n      id=projects[_id].id;\\n      state=uint(projects[_id].state);\\n      client=projects[_id].client;\\n      freelancer=projects[_id].freelancer;\\n    }\\n\\n    /// @notice Get milestone ids by project id\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId project id\\n    /// @return ids: mileston id list\\n    function getMilestoneId(uint _projectId, uint _idx) public view returns(uint) {\\n        return milestoneIdList[_projectId][_idx];\\n    }\\n\\n    function getMilestonesSize(uint _projectId) public view returns(uint) {\\n        return milestoneIdList[_projectId].length;\\n    }\\n\\n    /// @notice Get the milestone specifications\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId : The project id\\n    /// @param _milestoneId : The milestone id\\n    /// @return id : The project id\\n    /// @return price : The project price\\n    /// @return state : The project state\\n    /// @return token : The token address\\n    /// @return updated : The update uinx time\\n    function getMilestone(uint _projectId, uint _milestoneId) external view onlyObservers returns(uint id,uint price,uint state, address token, uint updated){ \\n\\n      id=milestones[_projectId][_milestoneId].id;\\n      price=milestones[_projectId][_milestoneId].price;\\n      state=uint(milestones[_projectId][_milestoneId].state);\\n      token = milestones[_projectId][_milestoneId].token;\\n      updated = milestones[_projectId][_milestoneId].updated;\\n    }\\n\\n    /// @notice Set the status of milestone. This function can be called by only owner.\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId : The project id\\n    /// @param _milestoneId : The milestone id\\n    /// @param _state : The milestone state\\n    function setMilestoneState(uint _projectId, uint _milestoneId, MilestoneState _state) external onlyObservers{\\n      milestones[_projectId][_milestoneId].state = _state;    \\n      emit SetMilestoneState(_projectId, _milestoneId, _state);\\n    }\\n\\n    function balance() public view returns(uint256){\\n        return address(this).balance;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////\\n    // Milestone\\n    ///////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Add a milestone as an client and milestone\\u0027s state is set with \\\"Deposited\\\".\\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id\\n    /// @param _clientAddr The client\\u0027s address\\n    /// @param _amount The milestone price\\n    function depositMilestone(uint _projectId, uint _milestoneId, address _clientAddr, uint _amount, address _token)\\n        external \\n        payable \\n        nonReentrant \\n        onlyEOA\\n        inProjectProgress(_projectId)\\n    {\\n        require(msg.sender == _clientAddr, \\\"Invalid Address\\\");\\n        require(milestones[_projectId][_milestoneId].isvalid == false, \\\"This milestone is already registered\\\");\\n        require(_amount \\u003e 0, \\\"Invalid milestone price\\\");\\n\\n        if(_token == address(0)) {\\n          require(msg.value == _amount, \\\"Invalid Amount\\\");\\n        } else {\\n           require(tokenFactory[_token] == ActiveState.Active, \\\"Invalid token address\\\");\\n        }\\n\\n        if(projects[_projectId].client != address(0)) {\\n          require(msg.sender == projects[_projectId].client, \\\"Invalid address\\\");\\n        } else {\\n          projects[_projectId].client = msg.sender;\\n        }\\n\\n        uint clientFee = getClientFee();\\n        uint oriAmount = _amount.mul(1000).div(1000 + clientFee); \\n        uint clientFeeAmt = oriAmount.mul(clientFee).div(1000);        \\n        \\n        if(_token == address(0)) {\\n          // Send the client service fee to our wallet.\\n          payable(treasury).transfer(clientFeeAmt);\\n        } else {\\n          // receive token into here\\n          IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount); \\n          // send the fee to our wallet\\n          IERC20(_token).safeTransfer(treasury,  clientFeeAmt);\\n        }\\n\\n        Milestone memory milestone;\\n        milestone.id = _milestoneId;\\n        milestone.state = MilestoneState.Deposited;\\n        milestone.token = _token;\\n        milestone.price = oriAmount;\\n        milestone.isvalid = true;\\n        milestone.updated=block.timestamp;\\n\\n        milestones[_projectId][_milestoneId]=milestone;        \\n        milestoneIdList[_projectId].push(_milestoneId);\\n\\n        emit DepositMilestone(_projectId, _milestoneId);\\n    }\\n\\n    /// @notice Withdraw funds to the client in an emergency\\n    /// @dev Set the price to zero and the status of the project to Closed \\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id\\n    function refundMilestone(uint _projectId, uint _milestoneId)\\n      external \\n      nonReentrant \\n      onlyEOA\\n      inProjectProgress(_projectId)\\n      inMilestoneState(_projectId, _milestoneId, MilestoneState.Deposited)\\n      onlyDeveloper((projects[_projectId].freelancer))\\n    {\\n      address tokenAddr = milestones[_projectId][_milestoneId].token;\\n      uint price=milestones[_projectId][_milestoneId].price;\\n      \\n      milestones[_projectId][_milestoneId].price=0;\\n      milestones[_projectId][_milestoneId].state=MilestoneState.Refund;\\n      milestones[_projectId][_milestoneId].updated=block.timestamp;\\n\\n      //payable(msg.sender).transfer(price);\\n      if(tokenAddr == address(0)) {\\n        payable(projects[_projectId].client).transfer(price);\\n      } else {\\n        IERC20(tokenAddr).safeTransfer(projects[_projectId].client, price);\\n      }      \\n\\n      emit RefundMilestone(projects[_projectId].client, price);\\n    }\\n\\n    /// @notice Close the commited milestone as an client, Ethers will be sent to the freelancer.\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id \\n    function releaseMilestone(uint _projectId, uint _milestoneId)\\n        external\\n        inProjectProgress(_projectId)\\n        inMilestoneState(_projectId, _milestoneId, MilestoneState.Deposited)\\n        onlyClient((projects[_projectId].client))\\n    {\\n        milestones[_projectId][_milestoneId].state = MilestoneState.Released;\\n        milestones[_projectId][_milestoneId].updated=block.timestamp + delayTimes[DelayType.Release];\\n\\n        emit ReleaseMilestone(_projectId, _milestoneId);\\n    }\\n\\n    /// @notice Close the commited milestone as an client, Ethers will be sent to the freelancer.\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id \\n    function acceptReleaseMilestone(uint _projectId, uint _milestoneId)\\n        external\\n        payable\\n        nonReentrant \\n        onlyEOA\\n        inProjectProgressOrCompleted(_projectId)\\n        inMilestoneState(_projectId, _milestoneId, MilestoneState.Released)\\n        onlyDeveloper((projects[_projectId].freelancer))\\n    {\\n        require((block.timestamp - milestones[_projectId][_milestoneId].updated) \\u003e delayTimes[DelayType.Release], \\\"You can receive it 48 hours after the client releases.\\\");\\n\\n        address tokenAddr = milestones[_projectId][_milestoneId].token;\\n        uint freelancerFeeAmt = milestones[_projectId][_milestoneId].price.mul(getFreelancerFee(projects[_projectId].freelancerHash)).div(1000);\\n        uint price = milestones[_projectId][_milestoneId].price.sub(freelancerFeeAmt);\\n        \\n        // Send the freelancer fee to our wallet.\\n        milestones[_projectId][_milestoneId].state = MilestoneState.AcceptedRelease;\\n        milestones[_projectId][_milestoneId].updated=block.timestamp;\\n\\n        if(tokenAddr == address(0)) {\\n          payable(projects[_projectId].freelancer).transfer(price);\\n          payable(treasury).transfer(freelancerFeeAmt);\\n        } else {\\n          IERC20(tokenAddr).safeTransfer(projects[_projectId].freelancer, price);\\n          IERC20(tokenAddr).safeTransfer(treasury, freelancerFeeAmt);\\n        }\\n\\n        emit AcceptReleaseMilestone(_projectId, _milestoneId, price);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////\\n    //                               dispute  \\n    /////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Get the dispute information \\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId : The project id\\n    /// @param _disputeId : The dispute id\\n    /// @return id :  dispute id\\n    /// @return milestoneId :  milestone id\\n    /// @return litigator :  litigator\\u0027s account address\\n    /// @return litigatorAmount :  litigator\\u0027s dispute amount.\\n    /// @return defendantAmount :  defendant\\u0027s dispute amount.\\n    /// @return litigatorUpdatedAt :  litigator\\u0027s update date.\\n    /// @return defendantUpdatedAt :  defendant\\u0027s update date.\\n    /// @return milestoneState : milestone\\u0027s state\\n    function getDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId)external view onlyObservers returns(uint id, uint milestoneId, address litigator, uint litigatorAmount, uint defendantAmount, uint litigatorUpdatedAt, uint defendantUpdatedAt, uint milestoneState){ \\n\\n      id = _disputeId;\\n      milestoneId = disputes[_projectId][_disputeId].milestoneId;\\n      litigator = disputes[_projectId][_disputeId].litigator;\\n      litigatorAmount = disputes[_projectId][_disputeId].litigatorAmount;\\n      defendantAmount = disputes[_projectId][_disputeId].defendantAmount;\\n      litigatorUpdatedAt = disputes[_projectId][_disputeId].litigatorUpdatedAt;\\n      defendantUpdatedAt = disputes[_projectId][_disputeId].defendantUpdatedAt;\\n      milestoneState = uint(milestones[_projectId][_milestoneId].state);\\n    }\\n\\n    /// @notice Set the status of milestone. This function can be called by only owner.\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId : The project id\\n    /// @param _milestoneId : The milestone id\\n    /// @param _disputeId : The dispute id\\n    /// @param _status : The milestone state\\n    function setDisputeStatus(uint _projectId, uint _milestoneId, uint _disputeId, MilestoneState _status) external{\\n      \\n      requireOwner();\\n      milestones[_projectId][_milestoneId].state = _status;\\n      emit SetDisputeStatus(_projectId, _milestoneId, _disputeId, _status);\\n    }\\n\\n    /// @notice Create new dispute.\\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id\\n    /// @param _disputeId The milestone id\\n    /// @param _amount The milestone price\\n    function disputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId, uint _amount)\\n        external\\n        nonReentrant \\n        onlyEOA\\n        inProjectProgress(_projectId)\\n    {\\n        require(msg.sender == projects[_projectId].client || msg.sender == projects[_projectId].freelancer, \\\"Invalid access\\\");\\n        require(milestones[_projectId][_milestoneId].state == MilestoneState.Deposited || \\n                milestones[_projectId][_milestoneId].state == MilestoneState.Released, \\\"You can\\u0027t dispute the milestone.\\\");\\n\\n        if(msg.sender == projects[_projectId].client) {\\n          require(_amount \\u003e= 0 \\u0026\\u0026 _amount \\u003c milestones[_projectId][_milestoneId].price, \\\"Invalid dispute amount\\\"); \\n        } else {\\n          require(_amount \\u003e 0 \\u0026\\u0026 _amount \\u003c= milestones[_projectId][_milestoneId].price, \\\"Invalid dispute amount\\\"); \\n        }        \\n\\n        Dispute memory dispute;\\n\\n        dispute.id = _disputeId;\\n        dispute.milestoneId = _milestoneId;\\n        dispute.litigator = msg.sender; // set the disputer\\u0027s wallet address.\\n        dispute.litigatorAmount = _amount;\\n        dispute.milestoneState = milestones[_projectId][_milestoneId].state;\\n        dispute.litigatorUpdatedAt = block.timestamp;\\n        dispute.createdAt = block.timestamp;\\n\\n        disputes[_projectId][_disputeId] = dispute;\\n        milestones[_projectId][_milestoneId].state = MilestoneState.Disputed;\\n\\n        emit DisputeMilestone(_projectId, _milestoneId, _disputeId, _amount);\\n    }\\n\\n    /// @notice Cancel the dispute request.\\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id\\n    /// @param _disputeId The milestone id\\n    function cancelDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId)\\n        external\\n        nonReentrant \\n        onlyEOA\\n        inProjectProgress(_projectId)\\n        inMilestoneState(_projectId, _milestoneId, MilestoneState.Disputed)\\n    {\\n        require(msg.sender == disputes[_projectId][_disputeId].litigator, \\\"Only litigator can cancel the dispute request.\\\");\\n\\n        milestones[_projectId][_milestoneId].state = disputes[_projectId][_disputeId].milestoneState;\\n        delete disputes[_projectId][_disputeId];\\n\\n        emit CancelDisputeMilestone(_projectId, _milestoneId, _disputeId);\\n    }\\n\\n    /// @notice Update the dispute information.\\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id\\n    /// @param _disputeId The milestone id\\n    /// @param _amount The milestone price\\n    function updateDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId, uint _amount)\\n        external\\n        nonReentrant \\n        onlyEOA\\n        inProjectProgress(_projectId)\\n        inMilestoneState(_projectId, _milestoneId, MilestoneState.Disputed)\\n    {\\n        require(msg.sender == projects[_projectId].client || msg.sender == projects[_projectId].freelancer, \\\"Invalid access\\\");        \\n        \\n        if(msg.sender == projects[_projectId].client) {\\n          require(_amount \\u003e= 0 \\u0026\\u0026 _amount \\u003c milestones[_projectId][_milestoneId].price, \\\"Invalid dispute amount\\\"); \\n        } else {\\n          require(_amount \\u003e 0 \\u0026\\u0026 _amount \\u003c= milestones[_projectId][_milestoneId].price, \\\"Invalid dispute amount\\\"); \\n        }\\n\\n        if(disputes[_projectId][_disputeId].defendantUpdatedAt == 0) {\\n          require((block.timestamp - disputes[_projectId][_disputeId].createdAt) \\u003c delayTimes[DelayType.Dispute], \\\"This is a dispute that has already been resolved and cannot be changed.\\\");\\n        }\\n\\n        // set the disputer\\u0027s wallet address.\\n        if(msg.sender == disputes[_projectId][_disputeId].litigator) {\\n          disputes[_projectId][_disputeId].litigatorAmount = _amount;\\n          disputes[_projectId][_disputeId].litigatorUpdatedAt = block.timestamp;\\n        } else {\\n          disputes[_projectId][_disputeId].defendantAmount = _amount;\\n          disputes[_projectId][_disputeId].defendantUpdatedAt = block.timestamp;\\n        }\\n\\n        if(disputes[_projectId][_disputeId].defendantUpdatedAt \\u003e 0 \\u0026\\u0026 disputes[_projectId][_disputeId].litigatorUpdatedAt \\u003e 0) {\\n          if(disputes[_projectId][_disputeId].litigatorAmount == disputes[_projectId][_disputeId].defendantAmount) {\\n            settleDisputeMilestone(_projectId, _milestoneId, _disputeId);\\n          }\\n        } \\n        emit UpdateDisputeMilestone(_projectId, _milestoneId, _disputeId, _amount);\\n    }\\n\\n    /// @notice Settle the dispute information and resolve the dispute.\\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id\\n    /// @param _disputeId The milestone id\\n    function settleDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId) private\\n    {\\n        // Send the freelancer fee to our wallet.\\n        DisputePaymentInfo memory paymentInfo;\\n\\n        paymentInfo.freelancerFee = getFreelancerFee(projects[_projectId].freelancerHash); \\n        paymentInfo.freelancer = projects[_projectId].freelancer;\\n        paymentInfo.client = projects[_projectId].client;\\n\\n        address tokenAddr = milestones[_projectId][_milestoneId].token;\\n\\n        paymentInfo.freelancerAmount = disputes[_projectId][_disputeId].litigatorAmount;\\n        paymentInfo.clientAmount = milestones[_projectId][_milestoneId].price - paymentInfo.freelancerAmount;\\n        \\n        paymentInfo.freelancerFeeAmt = paymentInfo.freelancerAmount.mul(paymentInfo.freelancerFee).div(1000);\\n        paymentInfo.freelancerAmount -= paymentInfo.freelancerFeeAmt;\\n        \\n        milestones[_projectId][_milestoneId].state = MilestoneState.ResolvedDispute;\\n\\n        if(tokenAddr == address(0)) {\\n          if(paymentInfo.freelancerAmount \\u003e 0) {\\n            payable(paymentInfo.freelancer).transfer(paymentInfo.freelancerAmount);    \\n            payable(treasury).transfer(paymentInfo.freelancerFeeAmt);         \\n          }\\n\\n          if(paymentInfo.clientAmount \\u003e 0) {\\n            payable(paymentInfo.client).transfer(paymentInfo.clientAmount);          \\n          }     \\n        } else {\\n          if(paymentInfo.freelancerAmount \\u003e 0) {\\n            IERC20(tokenAddr).safeTransfer(paymentInfo.freelancer, paymentInfo.freelancerAmount); \\n            IERC20(tokenAddr).safeTransfer(treasury, paymentInfo.freelancerFeeAmt);\\n          }\\n          \\n          if(paymentInfo.clientAmount \\u003e 0) {\\n            IERC20(tokenAddr).safeTransfer(paymentInfo.client, paymentInfo.clientAmount); \\n          }\\n        }\\n    }\\n\\n    /// @notice Accept the dispute information and resolve the dispute.\\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId The project id\\n    /// @param _milestoneId The milestone id\\n    /// @param _disputeId The milestone id\\n    function acceptDisputeMilestone(uint _projectId, uint _milestoneId, uint _disputeId) \\n      external\\n      nonReentrant \\n      onlyEOA\\n      inProjectProgress(_projectId)\\n      inMilestoneState(_projectId, _milestoneId, MilestoneState.Disputed)\\n    {\\n        require(msg.sender == projects[_projectId].client || msg.sender == projects[_projectId].freelancer, \\\"Invalid access\\\");     \\n        require( disputes[_projectId][_disputeId].defendantUpdatedAt == 0 \\u0026\\u0026 (block.timestamp - disputes[_projectId][_disputeId].createdAt) \\u003e delayTimes[DelayType.Dispute], \\n                \\\"You can accept the dispute payment after 48 hours.\\\");\\n\\n        // Send the freelancer fee to our wallet.\\n        DisputePaymentInfo memory paymentInfo;\\n\\n        paymentInfo.freelancerFee = getFreelancerFee(projects[_projectId].freelancerHash); \\n        paymentInfo.freelancer = projects[_projectId].freelancer;\\n        paymentInfo.client = projects[_projectId].client;\\n        \\n        address tokenAddr = milestones[_projectId][_milestoneId].token;\\n\\n        paymentInfo.freelancerAmount = disputes[_projectId][_disputeId].litigatorAmount;\\n        paymentInfo.clientAmount = milestones[_projectId][_milestoneId].price - paymentInfo.freelancerAmount;\\n        \\n        paymentInfo.freelancerFeeAmt = paymentInfo.freelancerAmount.mul(paymentInfo.freelancerFee).div(1000);\\n        paymentInfo.freelancerAmount -= paymentInfo.freelancerFeeAmt;     \\n\\n        if(tokenAddr == address(0)) {\\n          if(msg.sender == projects[_projectId].client) {\\n             require(disputes[_projectId][_disputeId].clientAccepted == 0, \\\"Client was accepted the dispute funt already.\\\"); \\n                \\n            disputes[_projectId][_disputeId].clientAccepted = 1;\\n            if(paymentInfo.clientAmount \\u003e 0) {\\n              payable(paymentInfo.client).transfer(paymentInfo.clientAmount);\\n            } \\n          } else {\\n            require(disputes[_projectId][_disputeId].freelancerAccepted == 0, \\\"Client was accepted the dispute funt already.\\\");\\n\\n            disputes[_projectId][_disputeId].freelancerAccepted = 1;\\n            if(paymentInfo.freelancerAmount \\u003e 0) {\\n              payable(paymentInfo.freelancer).transfer(paymentInfo.freelancerAmount);     \\n              payable(treasury).transfer(paymentInfo.freelancerFeeAmt);\\n            }\\n          }\\n        } else {\\n          if(msg.sender == projects[_projectId].client) {\\n            require(disputes[_projectId][_disputeId].clientAccepted == 0, \\\"Client was accepted the dispute funt already.\\\");\\n\\n            disputes[_projectId][_disputeId].clientAccepted = 1;\\n            if(paymentInfo.clientAmount \\u003e 0) {\\n                IERC20(tokenAddr).safeTransfer(paymentInfo.client, paymentInfo.clientAmount); \\n            }               \\n          } else {\\n            require(disputes[_projectId][_disputeId].freelancerAccepted == 0, \\\"Client was accepted the dispute funt already.\\\");\\n            \\n            disputes[_projectId][_disputeId].freelancerAccepted = 1;\\n            if(paymentInfo.freelancerAmount \\u003e 0) {\\n              IERC20(tokenAddr).safeTransfer(paymentInfo.freelancer, paymentInfo.freelancerAmount); \\n              IERC20(tokenAddr).safeTransfer(treasury, paymentInfo.freelancerFeeAmt);\\n            }            \\n          }\\n        }\\n        \\n        if(paymentInfo.clientAmount == milestones[_projectId][_milestoneId].price || \\n            disputes[_projectId][_disputeId].litigatorAmount == milestones[_projectId][_milestoneId].price) {\\n            milestones[_projectId][_milestoneId].state = MilestoneState.ResolvedDispute;\\n        } else {\\n          if(disputes[_projectId][_disputeId].freelancerAccepted == 1 \\u0026\\u0026 disputes[_projectId][_disputeId].clientAccepted == 1) {\\n            milestones[_projectId][_milestoneId].state = MilestoneState.ResolvedDispute;\\n          }\\n        }\\n\\n        emit AcceptDisputeMilestone(_projectId, _milestoneId, _disputeId);\\n    }\\n\\n    /// @notice Resolve the dispute request by manager.\\n    /// @dev  Solidity doesnt support the struct return type in public function calls\\n    /// @param _projectId : The project id\\n    /// @param _milestoneId : The milestone id\\n    /// @param _disputeId  : The milestone id\\n    /// @param _disputeAmt : litigateor\\u0027s dispute amount\\n    function resolveDispute(uint _projectId, uint _milestoneId, uint _disputeId, uint _disputeAmt)\\n        external\\n        inProjectProgress(_projectId)\\n        inMilestoneState(_projectId, _milestoneId, MilestoneState.Disputed)\\n    {\\n        requireOwner();\\n        require(_disputeAmt \\u003e= 0 \\u0026\\u0026 _disputeAmt \\u003c milestones[_projectId][_milestoneId].price, \\\"Invalid dispute amount\\\");\\n\\n        address tokenAddr = milestones[_projectId][_milestoneId].token;\\n        DisputePaymentInfo memory paymentInfo;\\n\\n        paymentInfo.freelancerFee = getFreelancerFee(projects[_projectId].freelancerHash); \\n        paymentInfo.freelancer = projects[_projectId].freelancer;\\n        paymentInfo.client = projects[_projectId].client;\\n\\n        disputes[_projectId][_disputeId].litigatorAmount = _disputeAmt;\\n        disputes[_projectId][_disputeId].litigatorUpdatedAt = block.timestamp;\\n        disputes[_projectId][_disputeId].defendantAmount = _disputeAmt;\\n        disputes[_projectId][_disputeId].defendantUpdatedAt = block.timestamp;\\n\\n        paymentInfo.freelancerAmount = _disputeAmt;\\n        paymentInfo.clientAmount = milestones[_projectId][_milestoneId].price - _disputeAmt;\\n\\n        paymentInfo.freelancerFeeAmt = paymentInfo.freelancerAmount.mul(paymentInfo.freelancerFee).div(1000);\\n        paymentInfo.freelancerAmount -= paymentInfo.freelancerFeeAmt;\\n        \\n        //disputes[_projectId][_disputeId].updated = block.timestamp;\\n        milestones[_projectId][_milestoneId].state = MilestoneState.ResolvedDispute;\\n\\n        if(milestones[_projectId][_milestoneId].token == address(0)) {\\n          if(paymentInfo.freelancerAmount \\u003e 0) {\\n            payable(paymentInfo.freelancer).transfer(paymentInfo.freelancerAmount);     \\n            payable(treasury).transfer(paymentInfo.freelancerFeeAmt);       \\n          }\\n\\n          if(paymentInfo.clientAmount \\u003e 0) {\\n            payable(paymentInfo.client).transfer(paymentInfo.clientAmount);           \\n          }\\n          \\n        } else {\\n\\n          if(paymentInfo.freelancerAmount \\u003e 0) {\\n            IERC20(tokenAddr).safeTransfer(paymentInfo.freelancer, paymentInfo.freelancerAmount); \\n            IERC20(tokenAddr).safeTransfer(treasury, paymentInfo.freelancerFeeAmt);\\n          }\\n          \\n          if(paymentInfo.clientAmount \\u003e 0) {\\n            IERC20(tokenAddr).safeTransfer(paymentInfo.client, paymentInfo.clientAmount); \\n          }\\n        }\\n\\n        emit ResolveDispute(_projectId, _milestoneId, _disputeId, _disputeAmt);        \\n    }\\n\\n    // For membership payment\\n    function membershipPayment(string memory _userHash, uint _level, uint _amount, uint _type, address _token) \\n      external \\n      payable\\n      nonReentrant \\n      onlyEOA\\n    {\\n      if(_token == address(0)) {\\n        require(msg.value == _amount, \\\"Invalid amount\\\");\\n        payable(treasury).transfer(msg.value);\\n      } else {\\n        require(tokenFactory[_token] == ActiveState.Active, \\\"Invalid token address\\\");\\n        require(_amount \\u003e 0, \\\"Invalid membership price\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount); \\n        IERC20(_token).safeTransfer(treasury,  _amount);\\n      }\\n\\n      Membership memory membership;\\n\\n      membership.token=address(0);\\n      membership.price =_amount;      \\n      membership.level = _level;\\n      membership.updated  = block.timestamp;\\n\\n      if(_type == 1) { // monthly\\n        membership.expired = membership.updated + 30 days;\\n      } else { // annual\\n        membership.expired = membership.updated + 365 days;\\n      }      \\n\\n      memberships[_userHash] = membership;\\n      emit MembershipPayment(_userHash, _level, _amount, _type);\\n    }\\n\\n    /// @notice Get the membership specifications\\n    /// @dev Solidity doesnt support the struct return type in public function calls\\n    /// @param _userHash : The user hash\\n    /// @return userHash : The user hash\\n    /// @return level : The membership level\\n    /// @return token : The token addressgetMembership\\n    /// @return price : The membership price\\n    /// @return updated : payment date\\n    function getMembership(string memory _userHash)external view returns(string memory userHash, uint level, address token, uint price, uint updated){ \\n        userHash = _userHash;\\n        \\n        token = memberships[_userHash].token;\\n        price = memberships[_userHash].price;\\n        updated = memberships[_userHash].updated;\\n        level = memberships[_userHash].level;\\n    }\\n}\"},\"draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\r\\n     * given ``owner``\\u0027s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount \\u003c= accountBalance \\u003c= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance \\u003e= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7; \\n\\ncontract Migrations {\\n  address public owner = msg.sender;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    require(\\n      msg.sender == owner,\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n\\r\\n/// @title Ownable Contract\\r\\n/// @author Anton Grigorev (@BaldyAsh)\\r\\ncontract Ownable {\\r\\n    /// @notice Storage position of the owner address\\r\\n    /// @dev The address of the current owner is stored in a\\r\\n    /// constant pseudorandom slot of the contract storage\\r\\n    /// (slot number obtained as a result of hashing a certain message),\\r\\n    /// the probability of rewriting which is almost zero\\r\\n    bytes32 private constant ownerPosition = keccak256(\\\"owner\\\");\\r\\n\\r\\n    /// @notice Contract constructor\\r\\n    /// @dev Sets msg sender address as owner address\\r\\n    constructor() {\\r\\n        setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Check that requires msg.sender to be the current owner\\r\\n    function requireOwner() internal view {\\r\\n        require(msg.sender == getOwner(), \\\"55f1136901\\\"); // 55f1136901 - sender must be owner\\r\\n    }\\r\\n\\r\\n    /// @notice Returns contract owner address \\r\\n    /// @return owner Owner address\\r\\n    function getOwner() public view returns (address owner) {\\r\\n        bytes32 position = ownerPosition;\\r\\n        assembly {\\r\\n            owner := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets new owner address\\r\\n    /// @param _newOwner New owner address\\r\\n    function setOwner(address _newOwner) internal {\\r\\n        bytes32 position = ownerPosition;\\r\\n        assembly {\\r\\n            sstore(position, _newOwner)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers the control of the contract to new owner\\r\\n    /// @dev msg.sender must be the current owner\\r\\n    /// @param _newOwner New owner address\\r\\n    function transferOwnership(address _newOwner) external {\\r\\n        requireOwner();\\r\\n        require(_newOwner != address(0), \\\"f2fde38b01\\\"); // f2fde38b01 - new owner cant be zero address\\r\\n        setOwner(_newOwner);\\r\\n    }\\r\\n}\\r\\n\"},\"Owned.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7; \\n\\n\\n/// @title Owned\\n/// @author Cao Huang\\ncontract Owned{\\n    \\n    address payable public  owner;\\n    \\n     /// @notice Store the contract owner address\\n    function owned() public {        \\n        owner=payable(msg.sender);\\n    }\\n    \\n}\\n/// @title Mortal\\n/// @author Cao Huang\\ncontract Mortal is Owned{\\n    \\n    /// @notice Destroy the smart contract\\n    /// @dev Destroy the smart contract using selfdestruct() function that returns all funds to the owner address\\n    function kill() public{\\n        \\n        require(msg.sender==owner);        \\n        selfdestruct(owner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./draft-IERC20Permit.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7; \\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"Upgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n\\r\\n/// @title Upgradeable contract\\r\\n/// @author Anton Grigorev (@BaldyAsh)\\r\\ncontract Upgradeable is Ownable {\\r\\n    /// @notice Storage position of the current implementation address.\\r\\n    /// @dev The address of the current implementation is stored in a\\r\\n    /// constant pseudorandom slot of the contract proxy contract storage\\r\\n    /// (slot number obtained as a result of hashing a certain message),\\r\\n    /// the probability of rewriting which is almost zero\\r\\n    bytes32 private constant implementationPosition = keccak256(\\r\\n        \\\"implementation\\\"\\r\\n    );\\r\\n\\r\\n    /// @notice Contract constructor\\r\\n    /// @dev Calls Ownable contract constructor\\r\\n    constructor() Ownable() {}\\r\\n\\r\\n    /// @notice Returns the current implementation contract address\\r\\n    /// @return implementation : Implementaion contract address\\r\\n    function getImplementation() public view returns (address implementation) {\\r\\n        bytes32 position = implementationPosition;\\r\\n        assembly {\\r\\n            implementation := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets new implementation contract address as current\\r\\n    /// @param _newImplementation New implementation contract address\\r\\n    function setImplementation(address _newImplementation) public {\\r\\n        requireOwner();\\r\\n        require(_newImplementation != address(0), \\\"d784d42601\\\"); // d784d42601 - new implementation must have non-zero address\\r\\n        address currentImplementation = getImplementation();\\r\\n        require(currentImplementation != _newImplementation, \\\"d784d42602\\\"); // d784d42602 - new implementation must have new address\\r\\n        bytes32 position = implementationPosition;\\r\\n        assembly {\\r\\n            sstore(position, _newImplementation)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets new implementation contract address and call its initializer.\\r\\n    /// @dev New implementation call is a low level delegatecall.\\r\\n    /// @param _newImplementation the new implementation address.\\r\\n    /// @param _newImplementaionCallData represents the msg.data to bet sent through the low level delegatecall.\\r\\n    /// This parameter may include the initializer function signature with the needed payload.\\r\\n    function setImplementationAndCall(\\r\\n        address _newImplementation,\\r\\n        bytes calldata _newImplementaionCallData\\r\\n    ) external payable {\\r\\n        setImplementation(_newImplementation);\\r\\n        if (_newImplementaionCallData.length \\u003e 0) {\\r\\n            (bool success, ) = address(this).call{value:msg.value}(\\r\\n                _newImplementaionCallData\\r\\n            );\\r\\n            require(success, \\\"e9c8588d01\\\"); // e9c8588d01 - delegatecall has failed\\r\\n        }\\r\\n    }\\r\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"AcceptDisputeMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"AcceptProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proejctId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueReleased\",\"type\":\"uint256\"}],\"name\":\"AcceptReleaseMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"CancelDisputeMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proejctId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"}],\"name\":\"DepositMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DisputeMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"freelancer\",\"type\":\"address\"}],\"name\":\"FinishProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"MembershipPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RefundMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proejctId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"}],\"name\":\"ReleaseMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeAmt\",\"type\":\"uint256\"}],\"name\":\"ResolveDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DFreelance.MilestoneState\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"SetDisputeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DFreelance.MilestoneState\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"SetMilestoneState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpdateDisputeMilestone\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"acceptDisputeMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"acceptProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"}],\"name\":\"acceptReleaseMilestone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stopped\",\"type\":\"bool\"}],\"name\":\"breakCircuit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"cancelDisputeMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DFreelance.DelayType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"delayTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_clientAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"depositMilestone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"disputeMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"finishProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClientFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"litigator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"litigatorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"litigatorUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestoneState\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userHash\",\"type\":\"string\"}],\"name\":\"getFreelancerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userHash\",\"type\":\"string\"}],\"name\":\"getMembership\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"userHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"}],\"name\":\"getMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getMilestoneId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getMilestonesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_observer\",\"type\":\"address\"}],\"name\":\"getObserver\",\"outputs\":[{\"internalType\":\"enum DFreelance.ActiveState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"freelancer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getValidToken\",\"outputs\":[{\"internalType\":\"enum DFreelance.ActiveState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"membershipPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"}],\"name\":\"refundMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"}],\"name\":\"releaseMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeAmt\",\"type\":\"uint256\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setClientFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeDelay\",\"type\":\"uint256\"}],\"name\":\"setDelayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"enum DFreelance.MilestoneState\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setDisputeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFreelancerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"enum DFreelance.MilestoneState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setMilestoneState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_observer\",\"type\":\"address\"},{\"internalType\":\"enum DFreelance.ActiveState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setObserver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum DFreelance.ActiveState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setValidToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateDisputeMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DFreelance","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79d3f9ce043f3eb8053af2ebaa5b09d6104e9f355d4f79d1b84ad8b5254c3154"}]}