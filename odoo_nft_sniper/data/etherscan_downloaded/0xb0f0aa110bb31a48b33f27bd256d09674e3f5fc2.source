{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract BulkNFTSender{\r\n\r\n    function airdropNFTs(address[] calldata _recipients) public {\r\n        address _NFTaddress = 0x7CB3c60E65fef3A9e0997F42a06F56fA0eAbd66D;\r\n        address _owner = msg.sender;\r\n        \r\n        IERC721 nft = IERC721(_NFTaddress);\r\n        require(nft.isApprovedForAll(_owner,address(this)),\"Operator not approved for transfer all\");\r\n        require(nft.balanceOf(msg.sender)>=_recipients.length,\"Owner doesnt have enough NFTs\");\r\n        uint256 nft_balance = nft.balanceOf(_owner);\r\n       \r\n        uint[] memory tokenIds = new uint[](nft_balance);\r\n\r\n        for (uint256 i = 0; i < nft_balance; i++) {\r\n            tokenIds[i] = nft.tokenOfOwnerByIndex(_owner,i);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            nft.safeTransferFrom(_owner,_recipients[i],tokenIds[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"airdropNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BulkNFTSender","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://550b2d9834143d6a857800d193f8874e6ab6535aa053e8060f8884386ca0df8a"}]}