{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract BGFVRFPICKS is VRFConsumerBaseV2 {\r\n\r\n    VRFCoordinatorV2Interface COORDINATOR;    \r\n    uint64 s_subscriptionId;\r\n    uint64 public entries;\r\n    uint32 public numWords = 1;\r\n    mapping(uint256 => uint256) public picks;\r\n    address vrfCoordinator = 0x271682DEB8C4E0901D1a1550aD2e64D568E69909;\r\n    bytes32 s_keyHash = 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef;    \r\n    uint32 public callbackGasLimit = 2500000;\r\n    uint16 public requestConfirmations = 3;\r\n    address s_owner;\r\n\r\n    event PickRequested(uint256 indexed requestId, address indexed roller);\r\n    event PickReceived(uint256 indexed requestId, uint256 indexed result);\r\n\r\n    constructor() VRFConsumerBaseV2(vrfCoordinator) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        s_owner = msg.sender;\r\n    }\r\n\r\n    function requestPick() public onlyOwner returns (uint256 requestId) {\r\n        requestId = COORDINATOR.requestRandomWords(\r\n            s_keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );        \r\n        emit PickRequested(requestId, msg.sender);\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override{\r\n        uint256 pick = (randomWords[0] % entries) + 1;\r\n        picks[requestId] = pick;\r\n        emit PickReceived(requestId, pick);\r\n    }\r\n\r\n    function setEntries(uint64 _entries) public onlyOwner{\r\n        entries = _entries;\r\n    }\r\n\r\n    function setSubscriptionId(uint64 _id) public onlyOwner{\r\n        s_subscriptionId = _id;\r\n    }\r\n\r\n    function setNumWords(uint32 _numWords) public onlyOwner{\r\n        numWords = _numWords;\r\n    }\r\n    \r\n    function setCallbackGasLimit(uint32 _callbackGasLimit) public onlyOwner{\r\n        callbackGasLimit = _callbackGasLimit;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(msg.sender == s_owner);\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"PickReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roller\",\"type\":\"address\"}],\"name\":\"PickRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entries\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"picks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestPick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_entries\",\"type\":\"uint64\"}],\"name\":\"setEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"}],\"name\":\"setNumWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BGFVRFPICKS","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b9d3ecd65e6dc2cb6928154c6db4ea1c31126d9fb69434bd0a483593efd18439"}]}