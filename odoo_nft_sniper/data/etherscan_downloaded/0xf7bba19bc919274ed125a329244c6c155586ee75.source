{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/lib/interfaces/MarketTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface MarketTokenInterface {\r\n    function isMarketToken() external view returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n    function reserveFactorMantissa() external view returns (uint256);\r\n    function accrualBlockTimestamp() external view returns (uint256);\r\n    function borrowIndex() external view returns (uint256);\r\n    function totalBorrows() external view returns (uint256);\r\n    function totalReserves() external view returns (uint256);\r\n    function accountTokens(address account) external view returns (uint256);\r\n    function accountBorrows(address account) external view returns (uint256,uint256);\r\n    function protocolSeizeShareMantissa() external view returns (uint256);\r\n    function comptroller() external view returns (address);\r\n    function interestRateModel() external view returns (address);\r\n\r\n    function transfer(address dst, uint amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n    function borrowRatePerSecond() external view returns (uint);\r\n    function supplyRatePerSecond() external view returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function borrowBalanceStored(address account) external view returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function getCash() external view returns (uint);\r\n    function accrueInterest() external returns (uint);\r\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\r\n\r\n    function _setComptroller(address newComptroller) external returns (uint);\r\n    function _setReserveFactor(uint newReserveFactorMantissa) external  returns (uint);\r\n    function _reduceReserves(uint reduceAmount) external  returns (uint);\r\n    function _setInterestRateModel(address newInterestRateModel) external  returns (uint);\r\n\r\n\r\n\r\n    \r\n}\r\n\r\ninterface MarketTokenEtherInterface is MarketTokenInterface{\r\n\r\n    function mint() external payable;\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow() external payable;\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n    function liquidateBorrow(address borrower, address marketTokenCollateral) external payable;\r\n\r\n    function _addReserves() external payable returns (uint);\r\n\r\n}\r\n\r\ninterface MarketTokenERC20Interface is MarketTokenInterface{\r\n\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, address marketTokenCollateral) external returns (uint);\r\n    function sweepToken(address token) external ;\r\n\r\n    function _addReserves(uint addAmount) external returns (uint);\r\n\r\n}\r\n\r\n\r\n// File contracts/market/MarketTokenEtherMaxRepay.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MarketTokenEtherMaxRepay {\r\n\r\n    MarketTokenEtherInterface public etherMarket;\r\n\r\n    constructor(MarketTokenEtherInterface _etherMarket)  {\r\n        etherMarket = _etherMarket;\r\n    }\r\n\r\n    function repayBorrow() external payable {\r\n        address borrower = msg.sender;\r\n        repayBehalf(borrower);\r\n    }\r\n\r\n    function repayBehalf(address borrower) public payable {\r\n        repayBehalfExplicit(borrower, etherMarket);\r\n    }\r\n\r\n    function repayBehalfExplicit(address borrower, MarketTokenEtherInterface _etherMarket) public payable {\r\n        uint received = msg.value;\r\n        uint borrows = _etherMarket.borrowBalanceCurrent(borrower);\r\n        if (received > borrows) {\r\n            _etherMarket.repayBorrowBehalf{value:borrows}(borrower);\r\n            payable(msg.sender).transfer(received - borrows);\r\n        } else {\r\n            _etherMarket.repayBorrowBehalf{value:received}(borrower);\r\n        }\r\n    }  \r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract MarketTokenEtherInterface\",\"name\":\"_etherMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"etherMarket\",\"outputs\":[{\"internalType\":\"contract MarketTokenEtherInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"repayBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract MarketTokenEtherInterface\",\"name\":\"_etherMarket\",\"type\":\"address\"}],\"name\":\"repayBehalfExplicit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"MarketTokenEtherMaxRepay","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e0ddda5faffc35de79e83a5736145e820854148b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://74c98459a66524277fbdfc6fff5bb8e5207627be8f6060d8b5cb3299594d4891"}]}