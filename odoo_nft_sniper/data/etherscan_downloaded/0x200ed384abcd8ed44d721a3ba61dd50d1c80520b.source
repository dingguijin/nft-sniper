{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n   _____         ______ ______ _______ _    _ ______ _____  ______ _    _ __  __ \r\n  / ____|  /\\   |  ____|  ____|__   __| |  | |  ____|  __ \\|  ____| |  | |  \\/  |\r\n | (___   /  \\  | |__  | |__     | |  | |__| | |__  | |__) | |__  | |  | | \\  / |\r\n  \\___ \\ / /\\ \\ |  __| |  __|    | |  |  __  |  __| |  _  /|  __| | |  | | |\\/| |\r\n  ____) / ____ \\| |    | |____   | |  | |  | | |____| | \\ \\| |____| |__| | |  | |\r\n |_____/_/    \\_\\_|    |______|  |_|  |_|  |_|______|_|  \\_\\______|\\____/|_|  |_|                                                                            \r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint amountToken,\r\n            uint amountETH,\r\n            uint liquidity\r\n        );\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Safethereum is Ownable, IBEP20 {\r\n    //shares represent the token someone with reflections turned on has.\r\n\r\n    //over time each share becomes worth more tokens so the tokens someone holds grow\r\n\r\n    mapping(address => uint) public Shares;\r\n\r\n    //exFcluded from Reflection accounts just track the exact amount of tokens\r\n\r\n    mapping(address => uint) public ExcludedBalances;\r\n\r\n    mapping(address => bool) public ExcludedFromReflection;\r\n\r\n    mapping(address => bool) public ExcludedFromFees;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    //Market makers have different Fees for Buy/Sell\r\n\r\n    mapping(address => bool) public _isMarketMaker;\r\n\r\n    uint _buyTax = 1000;\r\n\r\n    uint _sellTax = 1000;\r\n\r\n    uint _transferTax = 0;\r\n\r\n    //The taxes are split into different uses and need to add up to \"TAX_DENOMINATOR\"\r\n\r\n    uint _marketingTax = 3000;\r\n\r\n    uint _reflectionTax = 6000;\r\n\r\n    uint _liquidityTax = 2000;\r\n\r\n    uint _contractTax = TAX_DENOMINATOR - _reflectionTax;\r\n\r\n    //percentage of dexPair that should be swapped with each contract swap (15=0.15%)\r\n\r\n    uint _swapTreshold = 15;\r\n\r\n    //If liquidity is greater than treshold, stop creating AutoLP(15%)\r\n\r\n    uint _liquifyTreshold = 1500;\r\n\r\n    //Manual swap disables auto swap, should there be a problem\r\n\r\n    bool _manualSwap;\r\n\r\n    uint launchTimestamp = type(uint).max;\r\n\r\n    uint _liquidityUnlockTime;\r\n\r\n    uint constant AntiBotBuyTax = 9999;\r\n\r\n    uint constant BotBuyTaxDuration = 1 minutes;\r\n\r\n    uint constant TAX_DENOMINATOR = 10000;\r\n\r\n    //DividentMagnifier to make Reflection more accurate\r\n\r\n    uint constant DividentMagnifier = 2**128;\r\n\r\n    uint TokensPerShare = DividentMagnifier;\r\n\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint constant InitialSupply = 10**9 * 10**_decimals;\r\n\r\n    //All non excluded tokens get tracked here as shares\r\n\r\n    uint _totalShares;\r\n\r\n    //All excluded tokens get tracked here as tokens\r\n\r\n    uint _totalExcludedTokens;\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return \"SFT\";\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return \"Safethereum\";\r\n    }\r\n\r\n    address public marketingWallet;\r\n\r\n    uint public MaxTX = InitialSupply / 500; //0.2% of the supply max TX by default\r\n\r\n    address dexPair;\r\n\r\n    address private constant DEXrouter=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n\r\n    IDEXRouter pancakeRouter = IDEXRouter(DEXrouter);\r\n\r\n    event onSetManualSwap(bool manual);\r\n\r\n    event OnSetOverLiquifyTreshold(uint amount);\r\n\r\n    event OnSetSwapTreshold(uint treshold);\r\n\r\n    event OnSetAMM(address AMM, bool add);\r\n\r\n    event OnSetTaxes(\r\n        uint Buy,\r\n        uint Sell,\r\n        uint Transfer,\r\n        uint Reflection,\r\n        uint Liquidity,\r\n        uint Marketing\r\n    );\r\n\r\n    event OnSetExcludedFromFee(address account, bool exclude);\r\n\r\n    event OnSetLaunchTimestamp(uint Timestamp);\r\n\r\n    event OnSetExcludedFromReflection(address account, bool exclude);\r\n\r\n    event OnSetMarketingWallet(address wallet);\r\n\r\n    event OnProlongLPLock(uint UnlockTimestamp);\r\n\r\n    event OnReleaseLP();\r\n\r\n    event OnSetMaxTX(uint MaxTX);\r\n\r\n    constructor() {\r\n        dexPair = IPancakeFactory(pancakeRouter.factory()).createPair(\r\n            address(this),\r\n            pancakeRouter.WETH()\r\n        );\r\n\r\n        _isMarketMaker[dexPair] = true;\r\n\r\n        addTokens(msg.sender, (InitialSupply * 999) / 1000);\r\n\r\n        //Sends tokens to dead address to prevent overflows from happening- due to reflection with no receiver\r\n\r\n        addTokens(address(0xdead), InitialSupply / 1000);\r\n\r\n        emit Transfer(address(0), address(0xdead), InitialSupply / 1000);\r\n\r\n        emit Transfer(address(0), msg.sender, (InitialSupply * 999) / 1000);\r\n\r\n        //Pancake pair and contract never get reflections and can't be included\r\n\r\n        _excludeFromReflection(address(this), true);\r\n\r\n        _excludeFromReflection(dexPair, true);\r\n\r\n        //Contract never pays fees and can't be included\r\n\r\n        ExcludedFromFees[msg.sender] = true;\r\n\r\n        ExcludedFromFees[address(this)] = true;\r\n\r\n        //Dev and marketing wallet are by default the contract wallet and need to be set later\r\n\r\n        marketingWallet = msg.sender;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ///Transfer/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) private {\r\n        require(sender != address(0), \"transfer from zero\");\r\n\r\n        require(recipient != address(0), \"transfer to zero\");\r\n\r\n        require(amount > 0, \"amount zero\");\r\n\r\n        if (ExcludedFromFees[sender] || ExcludedFromFees[recipient])\r\n            transferFeeless(sender, recipient, amount);\r\n        else transferWithFee(sender, recipient, amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transferFeeless(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) private {\r\n        removeTokens(sender, amount);\r\n\r\n        addTokens(recipient, amount);\r\n    }\r\n\r\n    function transferWithFee(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) private {\r\n        require(block.timestamp >= launchTimestamp);\r\n\r\n        bool isBuy = _isMarketMaker[sender];\r\n\r\n        bool isSell = _isMarketMaker[recipient];\r\n\r\n        uint tax;\r\n\r\n        require(amount <= MaxTX, \"Exceeds MaxTX\");\r\n\r\n        if (isBuy) {\r\n            if (block.timestamp < launchTimestamp + BotBuyTaxDuration)\r\n                tax = _getStartTax(BotBuyTaxDuration, AntiBotBuyTax, _buyTax);\r\n            else tax = _buyTax;\r\n        } else if (isSell) tax = _sellTax;\r\n        else tax = _transferTax;\r\n\r\n        if (!_isSwappingContractModifier && sender != dexPair && !_manualSwap)\r\n            _swapContractToken(false);\r\n\r\n        uint TaxedAmount = (amount * tax) / TAX_DENOMINATOR;\r\n\r\n        uint ContractToken = (TaxedAmount * _contractTax) / TAX_DENOMINATOR;\r\n\r\n        uint ReflectToken = TaxedAmount - ContractToken;\r\n\r\n        removeTokens(sender, amount);\r\n\r\n        addTokens(recipient, amount - TaxedAmount);\r\n\r\n        if (ContractToken > 0) addTokens(address(this), ContractToken);\r\n\r\n        if (ReflectToken > 0) reflectTokens(ReflectToken);\r\n    }\r\n\r\n    //Start tax drops depending on the time since launch, enables bot protection and Dump protection\r\n\r\n    function _getStartTax(\r\n        uint duration,\r\n        uint maxTax,\r\n        uint minTax\r\n    ) private view returns (uint) {\r\n        uint timeSinceLaunch = block.timestamp - launchTimestamp;\r\n\r\n        return maxTax - (((maxTax - minTax) * timeSinceLaunch) / duration);\r\n    }\r\n\r\n    //Adds token respecting reflection\r\n\r\n    function addTokens(address account, uint tokens) private {\r\n        uint Balance = balanceOf(account);\r\n\r\n        uint newBalance = Balance + tokens;\r\n\r\n        if (ExcludedFromReflection[account]) {\r\n            ExcludedBalances[account] = newBalance;\r\n\r\n            _totalExcludedTokens += tokens;\r\n        } else {\r\n            uint oldShares = SharesFromTokens(Balance);\r\n\r\n            uint newShares = SharesFromTokens(newBalance);\r\n\r\n            Shares[account] = newShares;\r\n\r\n            _totalShares += (newShares - oldShares);\r\n        }\r\n    }\r\n\r\n    //Removes token respecting reflection\r\n\r\n    function removeTokens(address account, uint tokens) private {\r\n        uint Balance = balanceOf(account);\r\n\r\n        require(tokens <= Balance, \"Transfer exceeds Balance\");\r\n\r\n        uint newBalance = Balance - tokens;\r\n\r\n        if (ExcludedFromReflection[account]) {\r\n            ExcludedBalances[account] = newBalance;\r\n\r\n            _totalExcludedTokens -= (Balance - newBalance);\r\n        } else {\r\n            uint oldShares = SharesFromTokens(Balance);\r\n\r\n            uint newShares = SharesFromTokens(newBalance);\r\n\r\n            Shares[account] = newShares;\r\n\r\n            _totalShares -= (oldShares - newShares);\r\n        }\r\n    }\r\n\r\n    //Handles reflection of already substracted token\r\n\r\n    function reflectTokens(uint tokens) private {\r\n        if (_totalShares == 0) return; //if total shares=0 reflection dissapears into nothing\r\n\r\n        TokensPerShare += (tokens * DividentMagnifier) / _totalShares;\r\n    }\r\n\r\n    function TokensFromShares(uint shares) public view returns (uint) {\r\n        return (shares * TokensPerShare) / DividentMagnifier;\r\n    }\r\n\r\n    function SharesFromTokens(uint tokens) public view returns (uint) {\r\n        return (tokens * DividentMagnifier) / TokensPerShare;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ///SwapContractToken////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    bool private _isSwappingContractModifier;\r\n\r\n    modifier lockTheSwap() {\r\n        _isSwappingContractModifier = true;\r\n\r\n        _;\r\n\r\n        _isSwappingContractModifier = false;\r\n    }\r\n\r\n    function _swapContractToken(bool ignoreLimits) private lockTheSwap {\r\n        uint256 contractBalance = ExcludedBalances[address(this)];\r\n\r\n        if (_contractTax == 0) return;\r\n\r\n        uint256 tokenToSwap = (ExcludedBalances[dexPair] * _swapTreshold) /\r\n            TAX_DENOMINATOR;\r\n\r\n        //only swap if contractBalance is larger than tokenToSwap or ignore limits\r\n\r\n        if (contractBalance < tokenToSwap) {\r\n            if (ignoreLimits) tokenToSwap = contractBalance;\r\n            else return;\r\n        }\r\n\r\n        //splits the token in TokenForLiquidity and tokenForMarketing\r\n\r\n        uint256 tokenForLiquidity = isOverLiquified()\r\n            ? 0\r\n            : (tokenToSwap * _liquidityTax) / _contractTax;\r\n\r\n        uint256 tokenForMarketing = tokenToSwap - tokenForLiquidity;\r\n\r\n        //splits tokenForLiquidity in 2 halves\r\n\r\n        uint256 liqToken = tokenForLiquidity / 2;\r\n\r\n        //swaps marktetingToken and the liquidity token half for BNB\r\n\r\n        uint256 swapToken = liqToken + tokenForMarketing;\r\n\r\n        if (swapToken == 0) return;\r\n\r\n        _swapTokenForBNB(swapToken);\r\n\r\n        uint256 newBNB = address(this).balance;\r\n\r\n        //calculates the amount of BNB belonging to the LP-Pair and converts them to LP\r\n\r\n        uint256 liqBNB = (newBNB * liqToken) / swapToken;\r\n\r\n        if (liqBNB > 0) _addLiquidity(liqToken, liqBNB);\r\n\r\n        (bool sent, ) = marketingWallet.call{value: address(this).balance}(\"\");\r\n\r\n        sent = true;\r\n    }\r\n\r\n    function _swapTokenForBNB(uint256 tokens) private {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        _allowances[address(this)][address(pancakeRouter)] = tokens;\r\n\r\n        pancakeRouter.swapExactTokensForETH(\r\n            tokens,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenamount, uint256 bnbamount) private {\r\n        _allowances[address(this)][address(pancakeRouter)] = tokenamount;\r\n\r\n        try\r\n            pancakeRouter.addLiquidityETH{value: bnbamount}(\r\n                address(this),\r\n                tokenamount,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            )\r\n        {} catch {}\r\n    }\r\n\r\n    function isOverLiquified() public view returns (bool) {\r\n        return\r\n            ExcludedBalances[dexPair] >\r\n            (totalSupply() * _liquifyTreshold) / TAX_DENOMINATOR;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ///Settings/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function ReflectTokens(uint amount) external {\r\n        removeTokens(msg.sender, amount);\r\n\r\n        reflectTokens(amount);\r\n\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    function setMaxTX(uint MaxTXPercentage) external onlyOwner {\r\n        require(MaxTXPercentage >= TAX_DENOMINATOR / 1000);\r\n        MaxTX = (InitialSupply * MaxTXPercentage) / TAX_DENOMINATOR;\r\n\r\n        emit OnSetMaxTX(MaxTX);\r\n    }\r\n\r\n    function swapContractToken(uint treshold) external onlyOwner {\r\n        uint prevTreshold = _swapTreshold;\r\n\r\n        _swapTreshold = treshold;\r\n\r\n        _swapContractToken(true);\r\n\r\n        _swapTreshold = prevTreshold;\r\n    }\r\n\r\n    function setManualSwap(bool manual) external onlyOwner {\r\n        _manualSwap = manual;\r\n\r\n        emit onSetManualSwap(manual);\r\n    }\r\n\r\n    function setOverLiquifyTreshold(uint amount) external onlyOwner {\r\n        require(amount < TAX_DENOMINATOR);\r\n\r\n        _liquifyTreshold = amount;\r\n\r\n        emit OnSetOverLiquifyTreshold(amount);\r\n    }\r\n\r\n    function setSwapTreshold(uint treshold) external onlyOwner {\r\n        require(treshold <= TAX_DENOMINATOR / 100);\r\n\r\n        _swapTreshold = treshold;\r\n\r\n        emit OnSetSwapTreshold(treshold);\r\n    }\r\n\r\n    function setAMM(address AMM, bool add) external onlyOwner {\r\n        require(AMM != dexPair);\r\n\r\n        _isMarketMaker[AMM] = add;\r\n\r\n        emit OnSetAMM(AMM, add);\r\n    }\r\n\r\n    function setTaxes(\r\n        uint Buy,\r\n        uint Sell,\r\n        uint Transfer,\r\n        uint Reflection,\r\n        uint Liquidity,\r\n        uint Marketing\r\n    ) public onlyOwner {\r\n        uint maxTax = (TAX_DENOMINATOR / 100) * 11; //11% max tax\r\n\r\n        require(Buy <= maxTax && Sell <= maxTax && Transfer <= maxTax);\r\n\r\n        require(Reflection + Liquidity + Marketing == TAX_DENOMINATOR);\r\n\r\n        _buyTax = Buy;\r\n\r\n        _sellTax = Sell;\r\n\r\n        _transferTax = Transfer;\r\n\r\n        _reflectionTax = Reflection;\r\n\r\n        _liquidityTax = Liquidity;\r\n\r\n        _marketingTax = Marketing;\r\n\r\n        _contractTax = TAX_DENOMINATOR - _reflectionTax;\r\n\r\n        emit OnSetTaxes(Buy, Sell, Transfer, Reflection, Liquidity, Marketing);\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool exclude)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(exclude || account != address(this));\r\n\r\n        ExcludedFromFees[account] = exclude;\r\n\r\n        emit OnSetExcludedFromFee(account, exclude);\r\n    }\r\n\r\n    function setLaunchInSeconds(uint secondsUntilLaunch) public onlyOwner {\r\n        setLaunchTimestamp(block.timestamp + secondsUntilLaunch);\r\n    }\r\n\r\n    function setLaunchTimestamp(uint Timestamp) public onlyOwner {\r\n        require(block.timestamp < launchTimestamp);\r\n\r\n        require(Timestamp >= block.timestamp);\r\n\r\n        launchTimestamp = Timestamp;\r\n\r\n        emit OnSetLaunchTimestamp(Timestamp);\r\n    }\r\n\r\n    function setExcludedFromReflection(address account, bool exclude)\r\n        public\r\n        onlyOwner\r\n    {\r\n        //Contract and PancakePair never can receive reflections\r\n\r\n        require(account != address(this) && account != dexPair);\r\n\r\n        //Burn wallet always receives reflections\r\n\r\n        require(account != address(0xdead));\r\n\r\n        _excludeFromReflection(account, exclude);\r\n\r\n        emit OnSetExcludedFromReflection(account, exclude);\r\n    }\r\n\r\n    function _excludeFromReflection(address account, bool exclude) private {\r\n        require(ExcludedFromReflection[account] != exclude);\r\n\r\n        uint tokens = balanceOf(account);\r\n\r\n        ExcludedFromReflection[account] = exclude;\r\n\r\n        if (exclude) {\r\n            uint shares = Shares[account];\r\n\r\n            _totalShares -= shares;\r\n\r\n            Shares[account] = 0;\r\n\r\n            ExcludedBalances[account] = tokens;\r\n\r\n            _totalExcludedTokens += tokens;\r\n        } else {\r\n            ExcludedBalances[account] = 0;\r\n\r\n            _totalExcludedTokens -= tokens;\r\n\r\n            uint shares = SharesFromTokens(tokens);\r\n\r\n            Shares[account] = shares;\r\n\r\n            _totalShares += shares;\r\n        }\r\n    }\r\n\r\n    function SetMarketingWallet(address newMarketingWallet) public onlyOwner {\r\n        marketingWallet = newMarketingWallet;\r\n\r\n        emit OnSetMarketingWallet(newMarketingWallet);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ///View/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function getTaxes()\r\n        public\r\n        view\r\n        returns (\r\n            uint Buy,\r\n            uint Sell,\r\n            uint Transfer,\r\n            uint Reflection,\r\n            uint LP,\r\n            uint Marketing\r\n        )\r\n    {\r\n        Buy = _buyTax;\r\n\r\n        Sell = _sellTax;\r\n\r\n        Transfer = _transferTax;\r\n\r\n        Reflection = _reflectionTax;\r\n\r\n        LP = _liquidityTax;\r\n\r\n        Marketing = _marketingTax;\r\n    }\r\n\r\n    function getInfo()\r\n        public\r\n        view\r\n        returns (\r\n            uint SwapTreshold,\r\n            uint LiquifyTreshold,\r\n            uint LaunchTimestamp,\r\n            uint TotalShares,\r\n            uint TotalExcluded,\r\n            bool ManualSwap\r\n        )\r\n    {\r\n        SwapTreshold = _swapTreshold;\r\n\r\n        LiquifyTreshold = _liquifyTreshold;\r\n\r\n        LaunchTimestamp = launchTimestamp;\r\n\r\n        TotalExcluded = _totalExcludedTokens;\r\n\r\n        TotalShares = _totalShares;\r\n\r\n        ManualSwap = _manualSwap;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ///Liquidity Lock///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function LockLiquidityForSeconds(uint secondsUntilUnlock) public onlyOwner {\r\n        SetUnlockTimestamp(secondsUntilUnlock + block.timestamp);\r\n    }\r\n\r\n    function SetUnlockTimestamp(uint newUnlockTime) public onlyOwner {\r\n        // require new unlock time to be longer than old one\r\n\r\n        require(newUnlockTime > _liquidityUnlockTime);\r\n\r\n        _liquidityUnlockTime = newUnlockTime;\r\n\r\n        emit OnProlongLPLock(_liquidityUnlockTime);\r\n    }\r\n\r\n    //Release Liquidity Tokens once unlock time is over\r\n\r\n    function LiquidityRelease() public onlyOwner {\r\n        //Only callable if liquidity Unlock time is over\r\n\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n\r\n        IBEP20 liquidityToken = IBEP20(dexPair);\r\n\r\n        uint amount = liquidityToken.balanceOf(address(this));\r\n\r\n        liquidityToken.transfer(msg.sender, amount);\r\n\r\n        emit OnReleaseLP();\r\n    }\r\n\r\n    function RescueTokens(address token) public onlyOwner {\r\n        require(token != address(this) && token != dexPair);\r\n\r\n        IBEP20(token).transfer(\r\n            msg.sender,\r\n            IBEP20(token).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function getLiquidityLockSeconds()\r\n        public\r\n        view\r\n        returns (uint256 LockedSeconds)\r\n    {\r\n        if (block.timestamp < _liquidityUnlockTime)\r\n            return _liquidityUnlockTime - block.timestamp;\r\n\r\n        return 0;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ///BEP20 Implementation/////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    receive() external payable {}\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (ExcludedFromReflection[account]) return ExcludedBalances[account];\r\n\r\n        return TokensFromShares(Shares[account]);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalExcludedTokens + TokensFromShares(_totalShares);\r\n    }\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0));\r\n\r\n        require(spender != address(0));\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n\r\n        require(currentAllowance >= amount, \"Transfer exceeds allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender] + addedValue\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n\r\n        require(currentAllowance >= subtractedValue);\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UnlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"OnProlongLPLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnReleaseLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AMM\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"OnSetAMM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"OnSetExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"OnSetExcludedFromReflection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"OnSetLaunchTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"OnSetMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MaxTX\",\"type\":\"uint256\"}],\"name\":\"OnSetMaxTX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnSetOverLiquifyTreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"OnSetSwapTreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Sell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Transfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"}],\"name\":\"OnSetTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"onSetManualSwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ExcludedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ExcludedFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsUntilUnlock\",\"type\":\"uint256\"}],\"name\":\"LockLiquidityForSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReflectTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newUnlockTime\",\"type\":\"uint256\"}],\"name\":\"SetUnlockTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SharesFromTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"TokensFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isMarketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"SwapTreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquifyTreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LaunchTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ManualSwap\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityLockSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"LockedSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AMM\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"setExcludedFromReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsUntilLaunch\",\"type\":\"uint256\"}],\"name\":\"setLaunchInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"setLaunchTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"setManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"MaxTXPercentage\",\"type\":\"uint256\"}],\"name\":\"setMaxTX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOverLiquifyTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"setSwapTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"swapContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Safethereum","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f35982d7ee4c17d1d8c3282c9ff55ef9c2110ace4223d69b518163c504692a74"}]}