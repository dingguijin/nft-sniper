{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/SpiltPayment.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n\r\ncontract SplitPayment is ReentrancyGuard {\r\n\r\n    address payable private immutable owner;\r\n    address payable private immutable secondOwner;\r\n    \r\n\r\n    constructor(address _owner, address _secondOwner){\r\n        owner = payable(_owner);\r\n        secondOwner = payable(_secondOwner);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function withdrawFunds() public payable onlyOwner nonReentrant { \r\n        require(address(this).balance > 0, \"The contract has no ETH\");\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n\r\n         (bool withdrawOneSuccess,) = owner.call{value: contractBalance * 50 / 100}(\"\");\r\n         (bool withdrawTwoSuccess,) = secondOwner.call{value: contractBalance * 50 / 100}(\"\");\r\n         require(withdrawOneSuccess && withdrawTwoSuccess, \"Withdraw failed\");\r\n    }\r\n\r\n\r\n    /* Modifiers */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner || msg.sender == secondOwner, \"You are not the owner\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SplitPayment","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fe7c10383edcefbda57b816b9206f83044caadff0000000000000000000000007cf9a7d091b8c5d97ee7c4ac2c4ad9d6e22ea18a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7f0fea7d8da1dab892bf462338c0152dfbcb81414fdfe8a484081dcb594773b5"}]}