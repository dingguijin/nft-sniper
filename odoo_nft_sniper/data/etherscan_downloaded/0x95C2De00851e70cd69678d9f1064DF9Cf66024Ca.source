{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n// File: OMS.sol\r\n\r\n// Developed by Orcania (https://orcania.io/)\r\ninterface IERC20{\r\n         \r\n    function transfer(address recipient, uint256 amount) external;\r\n    \r\n}\r\n\r\nabstract contract OMS { //Orcania Management Standard\r\n\r\n    address private _owner;\r\n    mapping(address => bool) private _manager;\r\n\r\n    event OwnershipTransfer(address indexed newOwner);\r\n    event SetManager(address indexed manager, bool state);\r\n\r\n    receive() external payable {}\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _manager[msg.sender] = true;\r\n\r\n        emit SetManager(msg.sender, true);\r\n    }\r\n\r\n    //Modifiers ==========================================================================================================================================\r\n    modifier Owner() {\r\n        require(msg.sender == _owner, \"OMS: NOT_OWNER\");\r\n        _;  \r\n    }\r\n\r\n    modifier Manager() {\r\n      require(_manager[msg.sender], \"OMS: MOT_MANAGER\");\r\n      _;  \r\n    }\r\n\r\n    //Read functions =====================================================================================================================================\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function manager(address user) external view returns(bool) {\r\n        return _manager[user];\r\n    }\r\n\r\n    \r\n    //Write functions ====================================================================================================================================\r\n    function setNewOwner(address user) external Owner {\r\n        _owner = user;\r\n        emit OwnershipTransfer(user);\r\n    }\r\n\r\n    function setManager(address user, bool state) external Owner {\r\n        _manager[user] = state;\r\n        emit SetManager(user, state);\r\n    }\r\n\r\n    //===============\r\n    \r\n    function withdraw(address payable to, uint256 value) external Manager {\r\n        sendValue(to, value);  \r\n    }\r\n\r\n    function withdrawERC20(address token, address to, uint256 value) external Manager {\r\n        IERC20(token).transfer(to, value);   \r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"INSUFFICIENT_BALANCE\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"UNABLE_TO_SEND_VALUE RECIPIENT_MAY_HAVE_REVERTED\");\r\n    }\r\n\r\n}\r\n// File: OERC721.sol\r\n\r\n// Developed by Orcania (https://orcania.io/)\r\n\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n    \r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n    \r\n    function totalSupply() external view returns(uint256);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\nabstract contract OERC721 is OMS, ERC165, IERC721, IERC721Metadata{ //OrcaniaERC721 Standard\r\n    using Strings for uint256;\r\n\r\n    string internal uriLink;\r\n    \r\n    uint256 internal _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n\r\n    mapping(uint256 => address) internal _owners;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(uint256 => address) public _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) public _operatorApprovals;\r\n\r\n    //Read Functions======================================================================================================================================================\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) external view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) external view override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function totalSupply() external view override returns(uint256){return _totalSupply;}\r\n\r\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\r\n        return string(abi.encodePacked(uriLink, tokenId.toString(), \".json\"));\r\n\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) external view override returns (address) {\r\n        require(_owners[tokenId] != address(0), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function tokensOf(address user, uint256 limit) external view returns(uint256[] memory nfts) {\r\n        nfts = new uint256[](limit);\r\n        uint256 index;\r\n\r\n        for(uint256 t=1; t <= _totalSupply && index < limit; ++t) {\r\n            if(_owners[t] == user) {nfts[index++] = t;}\r\n        }\r\n    }\r\n    \r\n    //Moderator Functions======================================================================================================================================================\r\n\r\n    function changeURIlink(string calldata newUri) external Manager {\r\n        uriLink = newUri;\r\n    }\r\n\r\n    function changeData(string calldata name, string calldata symbol) external Manager {\r\n        _name = name;\r\n        _symbol = symbol;\r\n    }\r\n\r\n    function adminMint(address to, uint256 amount) external Manager {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function adminMint(address[] calldata to, uint256[] calldata amount) external Manager {\r\n        uint256 size = to.length;\r\n\r\n        for(uint256 t; t < size; ++t) {\r\n            _mint(to[t], amount[t]);\r\n        }\r\n    }\r\n\r\n    //User Functions======================================================================================================================================================\r\n    function approve(address to, uint256 tokenId) external override {\r\n        address owner = _owners[tokenId];\r\n\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) external override {\r\n        require(operator != msg.sender, \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    \r\n    function burn(uint256 tokenId) external {\r\n        address owner = _owners[tokenId];\r\n        require(msg.sender == owner || _tokenApprovals[tokenId] == msg.sender || isApprovedForAll(owner, msg.sender), \"ERC721: Not approved or owner\");\r\n\r\n        _balances[owner] -= 1;\r\n        _owners[tokenId] = address(0);\r\n        --_totalSupply;\r\n\r\n        _approve(address(0), tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    //Internal Functions======================================================================================================================================================\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = _owners[tokenId];\r\n        require(spender == owner || _tokenApprovals[tokenId] == spender || isApprovedForAll(owner, spender), \"ERC721: Not approved or owner\");\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 tokenId) internal {\r\n        require(_owners[tokenId] == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(_owners[tokenId], to, tokenId);\r\n    }\r\n\r\n    function _mint(address user, uint256 amount) internal {\r\n        uint256 tokenID = _totalSupply;\r\n\r\n        _balances[user] += amount;\r\n        _totalSupply += amount;\r\n        \r\n        for(uint256 t; t < amount; ++t) {\r\n            \r\n            _owners[++tokenID] = user;\r\n                \r\n            emit Transfer(address(0), user, tokenID);\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n// File: CDS/CDS.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract chaoticDJs is OERC721 {\r\n    using Strings for uint256;\r\n\r\n    bytes32 private _glRoot;\r\n    uint256 private _glPrice;\r\n    uint256 private _glUserMintLimit;\r\n    uint256 private _glMintLimit;\r\n    uint256 private _glActive;\r\n\r\n    mapping(address => uint256) _glUserMints; //Amount of mints performed by this user\r\n    uint256 private _glMints; //Amount of mints performed in this mint\r\n\r\n\r\n    bytes32 private _wlRoot;\r\n    uint256 private _wlPrice;\r\n    uint256 private _wlUserMintLimit;\r\n    uint256 private _wlMintLimit;\r\n    uint256 private _wlActive;\r\n\r\n    mapping(address => uint256) _wlUserMints; //Amount of mints performed by this user\r\n    uint256 private _wlMints; //Amount of mints performed in this mint\r\n\r\n\r\n    uint256 private _pmPrice;\r\n    uint256 private _pmUserMintLimit;\r\n    uint256 private _pmActive;\r\n\r\n    mapping(address => uint256) _pmUserMints; //Amount of mints performed by this user\r\n\r\n    uint256 _maxSupply;\r\n\r\n    uint256 private _reveal;\r\n\r\n    constructor() {\r\n        _name = \"Chaotic DJs\";\r\n        _symbol = \"CDS\";\r\n    }\r\n\r\n    //Read Functions===========================================================================================================================================================\r\n\r\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\r\n        if(_reveal == 1) {return string(abi.encodePacked(uriLink, tokenId.toString(), \".json\"));}\r\n\r\n        return string(abi.encodePacked(uriLink, \"secret.json\"));\r\n    }\r\n\r\n    function glData(address user) external view returns(uint256 userMints, uint256 mints, uint256 price, uint256 userMintLimit, uint256 mintLimit, bytes32 root, bool active) {\r\n        userMints = _glUserMints[user];\r\n        mints = _glMints;\r\n        price = _glPrice;\r\n        userMintLimit = _glUserMintLimit;\r\n        mintLimit = _glMintLimit;\r\n        active = _glActive == 1;\r\n        root = _glRoot;\r\n    }\r\n\r\n    function wlData(address user) external view returns(uint256 userMints, uint256 mints, uint256 price, uint256 userMintLimit, uint256 mintLimit, bytes32 root, bool active) {\r\n        userMints = _wlUserMints[user];\r\n        mints = _wlMints;\r\n        price = _wlPrice;\r\n        userMintLimit = _wlUserMintLimit;\r\n        mintLimit = _wlMintLimit;\r\n        active = _wlActive == 1;\r\n        root = _wlRoot;\r\n    }\r\n\r\n    function pmData(address user) external view returns(uint256 userMints, uint256 price, uint256 userMintLimit, bool active) {\r\n        userMints = _pmUserMints[user];\r\n        price = _pmPrice;\r\n        userMintLimit = _pmUserMintLimit;\r\n        active = _pmActive == 1;\r\n    }\r\n\r\n    function maxSupply() external view returns(uint256) {return _maxSupply;}\r\n\r\n    //Moderator Functions======================================================================================================================================================\r\n\r\n    function setGlData(uint256 price, uint256 userMintLimit, uint256 mintLimit, bytes32 root, uint256 active) external Manager {\r\n        _glPrice = price;\r\n        _glUserMintLimit = userMintLimit;\r\n        _glMintLimit = mintLimit;\r\n        _glActive = active;\r\n        _glRoot = root;\r\n    }\r\n\r\n    function setWlData(uint256 price, uint256 userMintLimit, uint256 mintLimit, bytes32 root, uint256 active) external Manager {\r\n        _wlPrice = price;\r\n        _wlUserMintLimit = userMintLimit;\r\n        _wlMintLimit = mintLimit;\r\n        _wlActive = active;\r\n        _wlRoot = root;\r\n    }\r\n\r\n    function setPmData(uint256 price, uint256 userMintLimit, uint256 active) external Manager {\r\n        _pmPrice = price;\r\n        _pmUserMintLimit = userMintLimit;\r\n        _pmActive = active;\r\n    }\r\n\r\n    function setMaxSupply(uint256 maxSupply) external Manager {\r\n        _maxSupply = maxSupply;\r\n    }\r\n\r\n    function setReveal(uint256 reveal) external Manager {\r\n        _reveal = reveal;\r\n    }\r\n\r\n    //User Functions======================================================================================================================================================\r\n\r\n    function glMint(bytes32[] calldata _merkleProof) external payable {\r\n        require(_glMints < _glMintLimit, \"CDS: WL has sold out\");\r\n        require(_glActive == 1, \"CDS: WL minting is closed\");\r\n\r\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n        require(MerkleProof.verify(_merkleProof, _glRoot, leaf), \"NOT_GOLD_LISTED\");\r\n\r\n        uint256 price = _glPrice;\r\n\r\n        require(msg.value % price == 0, \"CDS: Wrong Value\");\r\n\r\n        uint256 amount = msg.value / price;\r\n\r\n        require((_glMints += amount) <= _glMintLimit, \"CDS: Mint Limit Exceeded\");\r\n        require((_glUserMints[msg.sender] += amount) <= _glUserMintLimit, \"CDS: User Mint Limit Exceeded\");\r\n\r\n        _mint(msg.sender, amount);\r\n\r\n        require(_totalSupply <= _maxSupply, \"CDS: Supply Exceeded\");\r\n    }\r\n\r\n    function wlMint(bytes32[] calldata _merkleProof) external payable {\r\n        require(_wlMints < _wlMintLimit, \"CDS: WL has sold out\");\r\n        require(_wlActive == 1, \"CDS: WL minting is closed\");\r\n\r\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n        require(MerkleProof.verify(_merkleProof, _wlRoot, leaf), \"NOT_GOLD_LISTED\");\r\n\r\n        uint256 price = _wlPrice;\r\n\r\n        require(msg.value % price == 0, \"CDS: Wrong Value\");\r\n\r\n        uint256 amount = msg.value / price;\r\n\r\n        require((_wlMints += amount) <= _wlMintLimit, \"CDS: Mint Limit Exceeded\");\r\n        require((_wlUserMints[msg.sender] += amount) <= _wlUserMintLimit, \"CDS: User Mint Limit Exceeded\");\r\n\r\n        _mint(msg.sender, amount);\r\n\r\n        require(_totalSupply <= _maxSupply, \"CDS: Supply Exceeded\");\r\n    }\r\n\r\n    function pmMint() external payable {\r\n        require(_pmActive == 1, \"CDS: WL minting is closed\");\r\n\r\n        uint256 price = _pmPrice;\r\n\r\n        require(msg.value % price == 0, \"CDS: Wrong Value\");\r\n\r\n        uint256 amount = msg.value / price;\r\n\r\n        require((_pmUserMints[msg.sender] += amount) <= _pmUserMintLimit, \"CDS: User Mint Limit Exceeded\");\r\n\r\n        _mint(msg.sender, amount);\r\n\r\n        require(_totalSupply <= _maxSupply, \"CDS: Supply Exceeded\");\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"changeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"changeURIlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"glData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"glMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pmData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"}],\"name\":\"setGlData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"}],\"name\":\"setPmData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reveal\",\"type\":\"uint256\"}],\"name\":\"setReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"}],\"name\":\"setWlData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"tokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nfts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wlData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"wlMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"chaoticDJs","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"25000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a01a03c5bd26445f7ee9cad24141706d71943305b6607cd521195f79013b65d"}]}