{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n */\r\ncontract TokenVestingFLYY is Ownable, ReentrancyGuard {\r\n    struct VestingSchedule {\r\n        bool initialized;\r\n        address beneficiary;\r\n        uint256 cliff;\r\n        uint256 start;\r\n        uint256 duration;\r\n        uint256 slicePeriodSeconds;\r\n        uint256 amountTotal;\r\n        uint256 released;\r\n    }\r\n\r\n    IERC20 private immutable _token;\r\n\r\n    bytes32[] private vestingSchedulesIds;\r\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\r\n    uint256 private vestingSchedulesTotalAmount;\r\n    mapping(address => uint256) private holdersVestingCount;\r\n\r\n    address public authorizedContractAddress;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    event TokensReleased(address beneficiary, uint256 amount);\r\n    event VestingScheduleCreated(\r\n        address beneficiary,\r\n        uint256 cliff,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 slicePeriodSeconds,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier onlyIfVestingScheduleExists(bytes32 vestingScheduleId) {\r\n        require(\r\n            vestingSchedules[vestingScheduleId].initialized == true,\r\n            \"TokenVestingFLYY: INVALID Vesting Schedule ID! no vesting schedule exists for that ID\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfBeneficiaryExists(address beneficiary) {\r\n        require(\r\n            holdersVestingCount[beneficiary] > 0,\r\n            \"TokenVestingFLYY: INVALID Beneficiary Address! no vesting schedule exists for that beneficiary\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAuthorizedContract() {\r\n        require(\r\n            _msgSender() == owner() ||\r\n                _msgSender() == authorizedContractAddress,\r\n            \"TokenVestingFLYY: caller is not the owner or authorized contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address token_) {\r\n        require(token_ != address(0x0));\r\n        _token = IERC20(token_);\r\n        authorizedContractAddress = address(0);\r\n    }\r\n\r\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return holdersVestingCount[_beneficiary];\r\n    }\r\n\r\n    function getVestingIdAtIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            index < getVestingSchedulesCount(),\r\n            \"TokenVestingFLYY: index out of bounds\"\r\n        );\r\n        return vestingSchedulesIds[index];\r\n    }\r\n\r\n    function getVestingScheduleByBeneficiaryAndIndex(\r\n        address beneficiary,\r\n        uint256 index\r\n    ) external view returns (VestingSchedule memory) {\r\n        require(\r\n            holdersVestingCount[beneficiary] > 0,\r\n            \"TokenVestingFLYY: INVALID Beneficiary Address! no vesting schedule exists for that beneficiary\"\r\n        );\r\n        require(\r\n            index < holdersVestingCount[beneficiary],\r\n            \"TokenVestingFLYY: INVALID Vesting Schedule Index! no vesting schedule exists at this index for that beneficiary\"\r\n        );\r\n        return\r\n            getVestingSchedule(\r\n                computeVestingScheduleIdForAddressAndIndex(beneficiary, index)\r\n            );\r\n    }\r\n\r\n    function computeVestingScheduleIdForAddressAndIndex(\r\n        address holder,\r\n        uint256 index\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(holder, index));\r\n    }\r\n\r\n    function getVestingSchedule(bytes32 vestingScheduleId)\r\n        public\r\n        view\r\n        returns (VestingSchedule memory)\r\n    {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[\r\n            vestingScheduleId\r\n        ];\r\n        require(\r\n            vestingSchedule.initialized == true,\r\n            \"TokenVestingFLYY: INVALID Vesting Schedule ID! no vesting schedule exists for that id\"\r\n        );\r\n        return vestingSchedule;\r\n    }\r\n\r\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\r\n        return vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    function getToken() external view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        uint256 _amount\r\n    ) external onlyOwnerOrAuthorizedContract {\r\n        require(\r\n            this.getTokensWithdrawableAmount() >= _amount,\r\n            \"TokenVestingFLYY: cannot create vesting schedule because not sufficient tokens\"\r\n        );\r\n        require(_duration > 0, \"TokenVestingFLYY: duration must be > 0\");\r\n        require(_amount > 0, \"TokenVestingFLYY: amount must be > 0\");\r\n        require(\r\n            _slicePeriodSeconds >= 1,\r\n            \"TokenVestingFLYY: slicePeriodSeconds must be >= 1\"\r\n        );\r\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(\r\n            _beneficiary\r\n        );\r\n        uint256 cliff = _start + _cliff;\r\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\r\n            true,\r\n            _beneficiary,\r\n            cliff,\r\n            _start,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _amount,\r\n            0\r\n        );\r\n        _balances[_beneficiary] = _balances[_beneficiary] + _amount;\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\r\n        vestingSchedulesIds.push(vestingScheduleId);\r\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\r\n        holdersVestingCount[_beneficiary] = currentVestingCount + 1;\r\n    }\r\n\r\n    function getTokensWithdrawableAmount() public view returns (uint256) {\r\n        return _token.balanceOf(address(this)) - vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    function computeNextVestingScheduleIdForHolder(address holder)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            computeVestingScheduleIdForAddressAndIndex(\r\n                holder,\r\n                holdersVestingCount[holder]\r\n            );\r\n    }\r\n\r\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 currentTime = getCurrentTime();\r\n        if (currentTime < vestingSchedule.cliff) {\r\n            return 0;\r\n        } else if (\r\n            currentTime >= vestingSchedule.cliff + vestingSchedule.duration\r\n        ) {\r\n            return vestingSchedule.amountTotal - vestingSchedule.released;\r\n        } else {\r\n            uint256 timeFromStart = currentTime - (vestingSchedule.cliff);\r\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\r\n            uint256 releaseableSlicePeriods = timeFromStart / secondsPerSlice;\r\n            uint256 releaseableSeconds = releaseableSlicePeriods *\r\n                secondsPerSlice;\r\n            uint256 releaseableAmount = (vestingSchedule.amountTotal *\r\n                releaseableSeconds) / vestingSchedule.duration;\r\n            releaseableAmount = releaseableAmount - vestingSchedule.released;\r\n\r\n            return releaseableAmount;\r\n        }\r\n    }\r\n\r\n    function releaseFromAllVestings(address beneficiary)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n        onlyIfBeneficiaryExists(beneficiary)\r\n    {\r\n        uint256 vestingSchedulesCountByBeneficiary = getVestingSchedulesCountByBeneficiary(\r\n                beneficiary\r\n            );\r\n\r\n        VestingSchedule storage vestingSchedule;\r\n        uint256 totalReleaseableAmount = 0;\r\n        uint256 i = 0;\r\n        do {\r\n            vestingSchedule = vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(beneficiary, i)\r\n            ];\r\n            uint256 releaseableAmount = _computeReleasableAmount(\r\n                vestingSchedule\r\n            );\r\n            vestingSchedule.released =\r\n                vestingSchedule.released +\r\n                releaseableAmount;\r\n\r\n            totalReleaseableAmount = totalReleaseableAmount + releaseableAmount;\r\n            i++;\r\n        } while (i < vestingSchedulesCountByBeneficiary);\r\n\r\n        vestingSchedulesTotalAmount =\r\n            vestingSchedulesTotalAmount -\r\n            totalReleaseableAmount;\r\n        _balances[beneficiary] =\r\n            _balances[beneficiary] -\r\n            totalReleaseableAmount;\r\n        _token.transfer(beneficiary, totalReleaseableAmount);\r\n        emit TokensReleased(beneficiary, totalReleaseableAmount);\r\n    }\r\n\r\n    function claimFromAllVestings()\r\n        external\r\n        nonReentrant\r\n        onlyIfBeneficiaryExists(msg.sender)\r\n    {\r\n        address beneficiary = _msgSender();\r\n        uint256 vestingSchedulesCountByBeneficiary = getVestingSchedulesCountByBeneficiary(\r\n                beneficiary\r\n            );\r\n\r\n        VestingSchedule storage vestingSchedule;\r\n        uint256 totalReleaseableAmount = 0;\r\n        uint256 i = 0;\r\n        do {\r\n            vestingSchedule = vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(beneficiary, i)\r\n            ];\r\n            uint256 releaseableAmount = _computeReleasableAmount(\r\n                vestingSchedule\r\n            );\r\n            vestingSchedule.released =\r\n                vestingSchedule.released +\r\n                releaseableAmount;\r\n\r\n            totalReleaseableAmount = totalReleaseableAmount + releaseableAmount;\r\n            i++;\r\n        } while (i < vestingSchedulesCountByBeneficiary);\r\n\r\n        vestingSchedulesTotalAmount =\r\n            vestingSchedulesTotalAmount -\r\n            totalReleaseableAmount;\r\n        _balances[beneficiary] =\r\n            _balances[beneficiary] -\r\n            totalReleaseableAmount;\r\n        _token.transfer(beneficiary, totalReleaseableAmount);\r\n        emit TokensReleased(beneficiary, totalReleaseableAmount);\r\n    }\r\n\r\n    function withdrawExtraTokens(uint256 amount)\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(\r\n            this.getTokensWithdrawableAmount() >= amount,\r\n            \"TokenVestingFLYY: not enough withdrawable funds\"\r\n        );\r\n        _token.transfer(owner(), amount);\r\n    }\r\n\r\n    function getVestingSchedulesCount() public view returns (uint256) {\r\n        return vestingSchedulesIds.length;\r\n    }\r\n\r\n    function computeReleasableAmount(bytes32 vestingScheduleId)\r\n        public\r\n        view\r\n        onlyIfVestingScheduleExists(vestingScheduleId)\r\n        returns (uint256)\r\n    {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[\r\n            vestingScheduleId\r\n        ];\r\n        return _computeReleasableAmount(vestingSchedule);\r\n    }\r\n\r\n    function getLastVestingScheduleForBeneficiary(address beneficiary)\r\n        external\r\n        view\r\n        returns (VestingSchedule memory)\r\n    {\r\n        require(\r\n            holdersVestingCount[beneficiary] > 0,\r\n            \"TokenVestingFLYY: INVALID Beneficiary Address! no vesting schedule exists for that beneficiary\"\r\n        );\r\n        return\r\n            vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(\r\n                    beneficiary,\r\n                    holdersVestingCount[beneficiary] - 1\r\n                )\r\n            ];\r\n    }\r\n\r\n    function getCurrentTime() public view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"VFLYY\";\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    function changeAuthorizedContractAddress(address newContractAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        authorizedContractAddress = newContractAddress;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authorizedContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"changeAuthorizedContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFromAllVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getLastVestingScheduleForBeneficiary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVestingFLYY.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVestingFLYY.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByBeneficiaryAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVestingFLYY.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releaseFromAllVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawExtraTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenVestingFLYY","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d324ba09f83a109da048001bbfb0e84c9733150e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://438ae1e55077a9f01254d11908476c127f8af9f21636f5fb2b7a3818c698c2ac"}]}