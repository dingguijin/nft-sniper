{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract J is IERC20, Auth {\r\n\tstring constant _name = \"Last Dragon Slayer\"; \r\n\tstring constant _symbol = \"J\"; \r\n\tuint8 constant _decimals = 9;\r\n\tuint256 constant _totalSupply = 1_000_000_000_000 * 10**_decimals;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\tuint256 private _tradingOpenBlock;\r\n\tmapping (address => bool) private _isLiqPool;\r\n\r\n\tuint8 private fee_taxRateMaxLimit; uint8 private fee_taxRateBuy; uint8 private fee_taxRateSell;\r\n\r\n\tuint256 private lim_maxTxAmount; uint256 private lim_maxWalletAmount;\r\n\tuint256 private lim_taxSwapMin; uint256 private lim_taxSwapMax;\r\n\r\n\taddress private _liquidityPool;\r\n\r\n\tmapping(address => bool) private exm_noFees;\r\n\tmapping(address => bool) private exm_noLimits;\r\n\t\r\n\tbool private _inTaxSwap = false;\r\n\taddress private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\taddress private _wethAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\tIUniswapV2Router02 private _uniswapV2Router;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tevent TokensBurned(address burnedFrom, uint256 tokenAmount);\r\n\tevent TaxRatesChanged(uint8 taxRateBuy, uint8 taxRateSell);\r\n\tevent LimitsIncreased(uint256 maxTransaction, uint256 maxWalletSize);\r\n\tevent TaxSwapSettingsChanged(uint256 taxSwapMin, uint256 taxSwapMax);\r\n\tevent WalletExemptionsSet(address wallet, bool noFees, bool noLimits);\r\n\r\n\tconstructor() Auth(msg.sender) {\r\n\t\t_tradingOpenBlock = type(uint256).max; \r\n\t\tfee_taxRateMaxLimit = 7;\r\n\t\tlim_maxTxAmount = _totalSupply;\r\n\t\tlim_maxWalletAmount = _totalSupply;\r\n\t\tlim_taxSwapMin = _totalSupply * 10 / 10000;\r\n\t\tlim_taxSwapMax = _totalSupply * 50 / 10000;\r\n\t\t_uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n\r\n\t\texm_noFees[owner] = true;\r\n\t\texm_noFees[address(this)] = true;\r\n\t\texm_noFees[_uniswapV2RouterAddress] = true;\r\n\r\n\t\texm_noLimits[owner] = true;\r\n\t\texm_noLimits[address(this)] = true;\r\n\t\texm_noLimits[_uniswapV2RouterAddress] = true;\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external pure override returns (string memory) { return _symbol; }\r\n\tfunction name() external pure override returns (string memory) { return _name; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\tif (_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\t\t}\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction addLP() external onlyOwner {\r\n\t\trequire(!_tradingOpen(), \"trading already open\");\r\n\t\trequire(_liquidityPool == address(0), \"LP already added\");\r\n\r\n\t\t_balances[address(this)] = _totalSupply / 2;\r\n\t\temit Transfer(address(0), address(this), _balances[address(this)]);\r\n\r\n\t\t_balances[owner] = _totalSupply - _balances[address(this)];\r\n\t\temit Transfer(address(0), owner, _balances[owner]);\r\n\r\n\t\t_wethAddress = _uniswapV2Router.WETH(); //override the WETH address from router\r\n\t\t_liquidityPool = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _wethAddress);\r\n\r\n\t\t_isLiqPool[_liquidityPool] = true;\r\n\r\n\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\trequire(_contractETHBalance >= 0, \"no eth\");\t\t\r\n\t\tuint256 _contractTokenBalance = balanceOf(address(this));\r\n\t\trequire(_contractTokenBalance > 0, \"no tokens\");\r\n\r\n\t\t_approveRouter(_contractTokenBalance);\r\n\t\t_addLiquidity(_contractTokenBalance, _contractETHBalance, false);\r\n\t}\r\n\r\n\tfunction _approveRouter(uint256 _tokenAmount) internal {\r\n\t\tif ( _allowances[address(this)][_uniswapV2RouterAddress] < _tokenAmount ) {\r\n\t\t\t_allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), _uniswapV2RouterAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tif ( !autoburn ) { lpTokenRecipient = owner; }\r\n\t\t_uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n\tfunction openTrading() external onlyOwner {\r\n\t\trequire(!_tradingOpen(), \"trading already open\");\r\n\t\trequire(_liquidityPool != address(0), \"LP not initialized\");\r\n\t\t_openTrading();\r\n\t}\r\n\r\n\tfunction _openTrading() internal {\r\n\t\tlim_maxTxAmount     = 100 * _totalSupply / 10000 + 10**_decimals; \r\n\t\tlim_maxWalletAmount = 100 * _totalSupply / 10000 + 10**_decimals;\r\n\t\tfee_taxRateBuy = 4;\r\n\t\tfee_taxRateSell = 4;\r\n\t\t_tradingOpenBlock = block.number + 134;\r\n\t}\r\n\r\n\tfunction tradingOpen() external view returns (bool) {\r\n\t\tif (_tradingOpen() && block.number >= _tradingOpenBlock + 10) { return _tradingOpen(); }\r\n\t\telse { return false; }\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(sender!=address(0) && recipient!=address(0), \"Zero address not allowed\");\r\n\r\n\t\tif ( !_inTaxSwap && _isLiqPool[recipient] ) { _swapTaxAndLiquify();\t}\r\n\r\n\t\tif ( sender != address(this) && recipient != address(this) && sender != owner ) { require(_checkLimits(sender, recipient, amount), \"TX exceeds limits\"); }\r\n\t\tuint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t\tuint256 _transferAmount = amount - _taxAmount;\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tif ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n\t\t_balances[recipient] = _balances[recipient] + _transferAmount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _checkLimits(address sender, address recipient, uint256 transferAmount) internal view returns (bool) {\r\n\t\tbool limitCheckPassed = true;\r\n\t\tif ( _tradingOpen() && !exm_noLimits[recipient] && !exm_noLimits[sender] ) {\r\n\t\t\tif ( transferAmount > lim_maxTxAmount ) { limitCheckPassed = false; }\r\n\t\t\telse if ( !_isLiqPool[recipient] && (_balances[recipient] + transferAmount > lim_maxWalletAmount) ) { limitCheckPassed = false; }\r\n\t\t}\r\n\t\treturn limitCheckPassed;\r\n\t}\r\n\r\n\tfunction _tradingOpen() private view returns (bool) {\r\n\t\tbool result = false;\r\n\t\tif (block.number >= _tradingOpenBlock) { result = true; }\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction _checkTradingOpen() private view returns (bool){\r\n\t\tbool checkResult = false;\r\n\t\tif ( _tradingOpen() ) { checkResult = true; } \r\n\t\telse if ( tx.origin == owner ) { checkResult = true; } \r\n\t\treturn checkResult;\r\n\t}\r\n\r\n\tfunction _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\t\tuint256 taxAmount;\r\n\t\tif ( !_tradingOpen() || exm_noFees[sender] || exm_noFees[recipient] ) { taxAmount = 0; }\r\n\t\telse if ( _isLiqPool[sender] ) { taxAmount = amount * fee_taxRateBuy / 100; }\r\n\t\telse if ( _isLiqPool[recipient] ) { taxAmount = amount * fee_taxRateSell / 100; }\r\n\t\telse { taxAmount = 0; }\r\n\t\treturn taxAmount;\r\n\t}\r\n\r\n\tfunction getExemptions(address wallet) external view returns(bool noFees, bool noLimits) {\r\n\t\treturn (exm_noFees[wallet], exm_noLimits[wallet]);\r\n\t}\r\n\r\n\tfunction setExemptions(address wallet, bool noFees, bool noLimits) external onlyOwner {\r\n\t\texm_noFees[wallet] = noFees;\r\n\t\texm_noLimits[wallet] = noLimits;\r\n\t\temit WalletExemptionsSet(wallet, noFees, noLimits);\r\n\t}\r\n\r\n\tfunction getFeeSettings() external view returns(uint8 taxRateMaxLimit, uint8 taxRateBuy, uint8 taxRateSell) {\r\n\t\treturn (fee_taxRateMaxLimit, fee_taxRateBuy, fee_taxRateSell);\r\n\t}\r\n\r\n\tfunction setTaxRates(uint8 newBuyTax, uint8 newSellTax) external onlyOwner {\r\n\t\trequire( newBuyTax+newSellTax <= 2*fee_taxRateMaxLimit, \"Tax too high\");\r\n\t\tfee_taxRateBuy = newBuyTax;\r\n\t\tfee_taxRateSell = newSellTax;\r\n\t\temit TaxRatesChanged(newBuyTax, newSellTax);\r\n\t}\r\n\r\n\tfunction getWallets() external view returns(address contractOwner, address liquidityPool) {\r\n\t\treturn (owner, _liquidityPool);\r\n\t}\r\n\r\n\tfunction getLimits() external view returns(uint256 maxTxAmount, uint256 maxWalletAmount, uint256 taxSwapMin, uint256 taxSwapMax) {\r\n\t\treturn (lim_maxTxAmount, lim_maxWalletAmount, lim_taxSwapMin, lim_taxSwapMax);\r\n\t}\r\n\r\n\tfunction increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n\t\tuint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000 + 1;\r\n\t\trequire(newTxAmt >= lim_maxTxAmount, \"tx limit too low\");\r\n\t\tlim_maxTxAmount = newTxAmt;\r\n\t\tuint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000 + 1;\r\n\t\trequire(newWalletAmt >= lim_maxWalletAmount, \"wallet limit too low\");\r\n\t\tlim_maxWalletAmount = newWalletAmt;\r\n\t\temit LimitsIncreased(lim_maxTxAmount, lim_maxWalletAmount);\r\n\t}\r\n\r\n\tfunction setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n\t\tlim_taxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\tlim_taxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t\trequire(lim_taxSwapMax > lim_taxSwapMin);\r\n\t\temit TaxSwapSettingsChanged(lim_taxSwapMin, lim_taxSwapMax);\r\n\t}\r\n\r\n\tfunction _swapTaxAndLiquify() private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n\t\tif ( _taxTokensAvailable >= lim_taxSwapMin && _tradingOpen() ) {\r\n\t\t\tif ( _taxTokensAvailable >= lim_taxSwapMax ) { _taxTokensAvailable = lim_taxSwapMax; }\r\n\t\t\tuint256 _tokensForLP = _taxTokensAvailable / 2;\r\n\t\t\tuint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n\t\t\tif (_tokensToSwap >= 10**_decimals) {\r\n\t\t\t\tuint256 _ethPreSwap = address(this).balance;\r\n\t\t\t\t_swapTaxTokensForEth(_tokensToSwap);\r\n\t\t\t\tuint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n\t\t\t\tif ( _ethSwapped > 0 ) {\r\n\t\t\t\t\t_approveRouter(_tokensForLP);\r\n\t\t\t\t\t_addLiquidity(_tokensForLP, _ethSwapped, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(uint256 _tokenAmount) private {\r\n\t\t_approveRouter(_tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _wethAddress;\r\n\t\t_uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n\t}\r\n\r\n\tfunction recoverBalance() external onlyOwner {\r\n\t\tuint256 _stuckEthBalance = address(this).balance;\r\n        require (_stuckEthBalance > 0);\r\n\t\taddress payable recipient = payable(owner);\r\n\t\trecipient.transfer(_stuckEthBalance);\r\n\t}\r\n\r\n\tfunction manualSwap(uint8 swapPercent) external onlyOwner {\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n\t\trequire(taxTokenBalance > 0, \"No tokens\");\r\n\t\tuint256 tokensToSwap = taxTokenBalance * swapPercent / 100;\r\n\t\t_swapTaxTokensForEth(tokensToSwap);\r\n\t}\r\n\r\n\tfunction burnTokens(uint256 amount) external {\r\n\t\tuint256 _tokensAvailable = balanceOf(msg.sender);\r\n\t\trequire(amount <= _tokensAvailable, \"Token balance too low\");\r\n\t\t_balances[msg.sender] -= amount;\r\n\t\t_balances[address(0)] += amount;\r\n\t\temit Transfer(msg.sender, address(0), amount);\r\n\t\temit TokensBurned(msg.sender, amount);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"LimitsIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"taxRateBuy\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"taxRateSell\",\"type\":\"uint8\"}],\"name\":\"TaxRatesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxSwapMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxSwapMax\",\"type\":\"uint256\"}],\"name\":\"TaxSwapSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnedFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"name\":\"WalletExemptionsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getExemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeSettings\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"taxRateMaxLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"taxRateBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"taxRateSell\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxSwapMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxSwapMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"swapPercent\",\"type\":\"uint8\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"name\":\"setExemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"J","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4d50882030a1da00ca440bcdcd7ce3e6b7ab9a1c54d10369cec25a7ef6869456"}]}