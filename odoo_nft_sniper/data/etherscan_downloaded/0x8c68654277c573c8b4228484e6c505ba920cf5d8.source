{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n/*\r\n*\r\n*    _______  _________  ___  ___          ________  ________   ________  ___       __   ________  ________  ___       ___          \r\n*   |\\  ___ \\|\\___   ___\\\\  \\|\\  \\        |\\   ____\\|\\   ___  \\|\\   __  \\|\\  \\     |\\  \\|\\   __  \\|\\   __  \\|\\  \\     |\\  \\         \r\n*   \\ \\   __/\\|___ \\  \\_\\ \\  \\\\\\  \\       \\ \\  \\___|\\ \\  \\\\ \\  \\ \\  \\|\\  \\ \\  \\    \\ \\  \\ \\  \\|\\ /\\ \\  \\|\\  \\ \\  \\    \\ \\  \\        \r\n*    \\ \\  \\_|/__  \\ \\  \\ \\ \\   __  \\       \\ \\_____  \\ \\  \\\\ \\  \\ \\  \\\\\\  \\ \\  \\  __\\ \\  \\ \\   __  \\ \\   __  \\ \\  \\    \\ \\  \\       \r\n*     \\ \\  \\_|\\ \\  \\ \\  \\ \\ \\  \\ \\  \\       \\|____|\\  \\ \\  \\\\ \\  \\ \\  \\\\\\  \\ \\  \\|\\__\\_\\  \\ \\  \\|\\  \\ \\  \\ \\  \\ \\  \\____\\ \\  \\____  \r\n*      \\ \\_______\\  \\ \\__\\ \\ \\__\\ \\__\\        ____\\_\\  \\ \\__\\\\ \\__\\ \\_______\\ \\____________\\ \\_______\\ \\__\\ \\__\\ \\_______\\ \\_______\\\r\n*       \\|_______|   \\|__|  \\|__|\\|__|       |\\_________\\|__| \\|__|\\|_______|\\|____________|\\|_______|\\|__|\\|__|\\|_______|\\|_______|\r\n*                                            \\|_________|                                                                           \r\n*                                                                                     \r\n* ETH Snowball - ETH Miner\r\n*\r\n* Twitter  : https://twitter.com/ethsnowball\r\n* Telegram : https://t.me/ethsnowball\r\n* Discord  : https://discord.gg/pnaDGkej2w \r\n*\r\n*/\r\n\r\ncontract Ownable{\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IRandomGenerator {\r\n    function getRandomNumber(uint _count) external view returns (uint);\r\n}\r\n\r\ncontract ETHSnowball is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IRandomGenerator public randomGenerator;\r\n\r\n    /* base parameters */\r\n    uint256 public EGGS_TO_HIRE_1MINERS = 2880000;\r\n    uint256 public REFERRAL = 50;\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public EXTRA_BONUS = 200;\r\n    uint256 public DECREASE_TAX = 500;\r\n    uint256 public TAX = 100;\r\n    uint256 public MARKET_EGGS_DIVISOR = 5;\r\n    uint256 public MARKET_EGGS_DIVISOR_SELL = 2;\r\n\r\n    uint256 public MIN_INVEST_LIMIT = 1 * 1e16; /* 0.01 ETH  */\r\n    uint256 public WALLET_DEPOSIT_LIMIT = 50 * 1e18; /* 50 ETH  */\r\n\r\n\tuint256 public COMPOUND_BONUS = 0;\r\n\tuint256 public COMPOUND_BONUS_MAX_TIMES = 10;\r\n    uint256 public COMPOUND_STEP = 1 days;\r\n\r\n    uint256 public EARLY_WITHDRAWAL_TAX = 500;\r\n    uint256 public COMPOUND_FOR_NO_TAX_WITHDRAWAL = 6;\r\n\r\n    uint256 public LOTTERY_INTERVAL = 7 days;\r\n    bool public lotteryStarted = false;\r\n    uint256 public ticketPrice = 1e16; // 0.01 ETH\r\n    uint256 public LOTTERY_START_TIME;\r\n    uint8 public LOTTERY_ROUND;\r\n    uint256 public winTicketID;\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n\r\n    address[] public memberList;\r\n\r\n    uint256 public WHITELIST_COUNT = 3000;  // RoadMap 1\r\n    address[] public whitelist;\r\n    mapping(address => bool) public isWhitelist;\r\n\r\n    uint256 private marketEggs;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool private contractStarted;\r\n    bool public blacklistActive = true;\r\n    mapping(address => bool) public blacklisted;\r\n\r\n\tuint256 public CUTOFF_STEP = 4 days;\r\n\tuint256 public WITHDRAW_COOLDOWN = 1 days;\r\n\r\n    /* addresses */\r\n    // address private owner;\r\n    address payable private marketingAddress;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedEggs;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralEggRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 farmerCompoundCount; //added to monitor farmer consecutive compound without cap\r\n        uint256 lastWithdrawTime;\r\n        mapping(uint16 => uint256) ticketCount;\r\n        uint8 level;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    struct PurchaseInfo {\r\n        uint256 ticketIDFrom;\r\n        uint256 tickets;\r\n        address account;\r\n    }\r\n\r\n    struct LotteryInfo {\r\n        address winnerAccount;          // winner of this round\r\n        uint256 totalTicketCnt;         // total purcahsed ticket count of this count\r\n        PurchaseInfo[] purchaseInfo;    // purchase info\r\n    }\r\n\r\n    mapping(uint16 => LotteryInfo) public lotteryInfo;     // lottery ID -> LOtteryInfo\r\n\r\n    constructor(address payable _marketingAddress, address _randomGenerator) {\r\n\t\trequire(!isContract(_marketingAddress));\r\n        marketingAddress = _marketingAddress;\r\n\r\n        randomGenerator = IRandomGenerator(_randomGenerator);\r\n\r\n        marketEggs = 144000000000;\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function setblacklistActive(bool isActive) public{\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        blacklistActive = isActive;\r\n    }\r\n\r\n    function blackListWallet(address Wallet, bool isBlacklisted) public{\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        blacklisted[Wallet] = isBlacklisted;\r\n    }\r\n\r\n    function blackMultipleWallets(address[] calldata Wallet, bool isBlacklisted) public{\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        for(uint256 i = 0; i < Wallet.length; i++) {\r\n            blacklisted[Wallet[i]] = isBlacklisted;\r\n        }\r\n    }\r\n\r\n    function CompoundRewards(bool isCompound) public {\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n\r\n        if (blacklistActive) {\r\n            require(!blacklisted[msg.sender], \"Address is blacklisted.\");\r\n        }\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 eggsForCompound = eggsUsed;\r\n\r\n        if(isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(msg.sender, eggsForCompound);\r\n            eggsForCompound = eggsForCompound.add(dailyCompoundBonus);\r\n            uint256 eggsUsedValue = calculateEggSell(eggsForCompound);\r\n            user.userDeposit = user.userDeposit.add(eggsUsedValue);\r\n            totalCompound = totalCompound.add(eggsUsedValue);\r\n        } \r\n\r\n        if(block.timestamp.sub(user.lastHatch) >= COMPOUND_STEP) {\r\n            if(user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n            //add compoundCount for monitoring purposes.\r\n            user.farmerCompoundCount = user.farmerCompoundCount.add(1);\r\n        }\r\n        \r\n        user.miners = user.miners.add(eggsForCompound.div(EGGS_TO_HIRE_1MINERS));\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n\r\n        marketEggs = marketEggs.add(eggsUsed.div(MARKET_EGGS_DIVISOR));\r\n    }\r\n\r\n    function ClaimRewards() public {\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n\r\n        if (blacklistActive) {\r\n            require(!blacklisted[msg.sender], \"Address is blacklisted.\");\r\n        }\r\n\r\n        User storage user = users[msg.sender];\r\n        require(user.lastHatch + WITHDRAW_COOLDOWN < block.timestamp);\r\n\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        \r\n        /** \r\n            if user compound < to mandatory compound days**/\r\n        if (user.dailyCompoundBonus < COMPOUND_FOR_NO_TAX_WITHDRAWAL){\r\n            //daily compound bonus count will not reset and eggValue will be deducted with 50% feedback tax.\r\n            eggValue = eggValue.sub(eggValue.mul(EARLY_WITHDRAWAL_TAX).div(PERCENTS_DIVIDER));\r\n        } else {\r\n            //set daily compound bonus count to 0 and eggValue will remain without deductions\r\n             user.dailyCompoundBonus = 0;\r\n             user.farmerCompoundCount = 0;\r\n        }\r\n        \r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedEggs = 0;  \r\n        user.lastHatch = block.timestamp;\r\n        marketEggs = marketEggs.add(hasEggs.div(MARKET_EGGS_DIVISOR_SELL));\r\n        \r\n        if (user.level > 0) {\r\n            eggValue = eggValue + eggValue.mul(EXTRA_BONUS).div(PERCENTS_DIVIDER);\r\n        }\r\n\r\n        if(getBalance() < eggValue) {\r\n            eggValue = getBalance();\r\n        }\r\n\r\n        uint256 eggsPayout = eggValue.sub(payFees(eggValue));\r\n        \r\n        payable(address(msg.sender)).transfer(eggsPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(eggsPayout);\r\n        totalWithdrawn = totalWithdrawn.add(eggsPayout);\r\n    }\r\n\r\n     \r\n    /* transfer amount of ETH */\r\n    function BuySnows(address ref) public payable {\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n\r\n        if (blacklistActive) {\r\n            require(!blacklisted[msg.sender], \"Address is blacklisted.\");\r\n        }\r\n        User storage user = users[msg.sender];\r\n        if (lotteryStarted) {\r\n\r\n            if (LOTTERY_START_TIME + LOTTERY_INTERVAL < block.timestamp) {\r\n                UpdateRoundInfo();\r\n            }\r\n\r\n            uint256 ticketCnt = msg.value.div(ticketPrice);\r\n            user.ticketCount[LOTTERY_ROUND] = user.ticketCount[LOTTERY_ROUND].add(ticketCnt);\r\n\r\n            lotteryInfo[LOTTERY_ROUND].purchaseInfo.push(PurchaseInfo({\r\n                ticketIDFrom: lotteryInfo[LOTTERY_ROUND].totalTicketCnt,\r\n                tickets: ticketCnt,\r\n                account: msg.sender\r\n            }));\r\n\r\n            lotteryInfo[LOTTERY_ROUND].totalTicketCnt = lotteryInfo[LOTTERY_ROUND].totalTicketCnt + ticketCnt;\r\n        }\r\n        \r\n        require(msg.value >= MIN_INVEST_LIMIT, \"Mininum investment not met.\");\r\n        require(user.initialDeposit.add(msg.value) <= WALLET_DEPOSIT_LIMIT, \"Max deposit limit reached.\");\r\n\r\n        if (user.initialDeposit == 0) {\r\n            memberList.push(msg.sender);\r\n        }\r\n\r\n        uint256 eggsBought = calculateEggBuy(msg.value, address(this).balance.sub(msg.value));\r\n        user.userDeposit = user.userDeposit.add(msg.value);\r\n        user.initialDeposit = user.initialDeposit.add(msg.value);\r\n        user.claimedEggs = user.claimedEggs.add(eggsBought);\r\n\r\n        if (!isWhitelist[msg.sender] && user.initialDeposit > 1 ether && whitelist.length < WHITELIST_COUNT) {\r\n            isWhitelist[msg.sender] = true;\r\n            whitelist.push(msg.sender);\r\n        }\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n            }\r\n        }\r\n                \r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 refRewards = msg.value.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n                payable(address(upline)).transfer(refRewards);\r\n                users[upline].referralEggRewards = users[upline].referralEggRewards.add(refRewards);\r\n                totalRefBonus = totalRefBonus.add(refRewards);\r\n            }\r\n        }\r\n\r\n        uint256 eggsPayout = payFees(msg.value);\r\n        totalStaked = totalStaked.add(msg.value.sub(eggsPayout));\r\n        totalDeposits = totalDeposits.add(1);\r\n        CompoundRewards(false);\r\n    }\r\n\r\n    function throwSnowball(address addr) public payable{\r\n        if (!contractStarted) {\r\n    \t\tif (msg.sender == owner()) {\r\n    \t\t\tcontractStarted = true;\r\n                BuySnows(addr);\r\n    \t\t} else revert(\"Contract not yet started.\");\r\n    \t}\r\n    }\r\n\r\n    //fund contract with ETH before launch.\r\n    function fundContract() external payable {}\r\n\r\n    function payFees(uint256 eggValue) internal returns(uint256) {\r\n        uint256 tax = eggValue.mul(TAX).div(PERCENTS_DIVIDER);\r\n        if (users[msg.sender].level > 1) {\r\n            tax = tax.mul(DECREASE_TAX).div(PERCENTS_DIVIDER);\r\n        }\r\n        payable(owner()).transfer(tax.mul(150).div(PERCENTS_DIVIDER));\r\n        payable(marketingAddress).transfer(tax.mul(850).div(PERCENTS_DIVIDER));\r\n        \r\n        return tax;\r\n    }\r\n\r\n    function getDailyCompoundBonus(address _adr, uint256 amount) public view returns(uint256){\r\n        if(users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(COMPOUND_BONUS); \r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _miners,\r\n     uint256 _claimedEggs, uint256 _lastHatch, address _referrer, uint256 _referrals, uint256 _totalWithdrawn, uint256 _referralEggRewards,\r\n     uint256 _dailyCompoundBonus, uint256 _farmerCompoundCount, uint256 _lastWithdrawTime, uint8 _level) {\r\n         _initialDeposit = users[_adr].initialDeposit;\r\n         _userDeposit = users[_adr].userDeposit;\r\n         _miners = users[_adr].miners;\r\n         _claimedEggs = users[_adr].claimedEggs;\r\n         _lastHatch = users[_adr].lastHatch;\r\n         _referrer = users[_adr].referrer;\r\n         _referrals = users[_adr].referralsCount;\r\n         _totalWithdrawn = users[_adr].totalWithdrawn;\r\n         _referralEggRewards = users[_adr].referralEggRewards;\r\n         _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\r\n         _farmerCompoundCount = users[_adr].farmerCompoundCount;\r\n         _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n         _level = users[_adr].level;\r\n\t}\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userEggs = users[_adr].claimedEggs.add(getEggsSinceLastHatch(_adr));\r\n        return calculateEggSell(userEggs);\r\n    }\r\n\r\n    //  Supply and demand balance algorithm \r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n    // (PSN * bs)/(PSNH + ((PSN * rs + PSNH * rt) / rt)); PSN / PSNH == 1/2\r\n    // bs * (1 / (1 + (rs / rt)))\r\n    // purchase ： marketEggs * 1 / ((1 + (this.balance / eth)))\r\n    // sell ： this.balance * 1 / ((1 + (marketEggs / eggs)))\r\n        return SafeMath.div(\r\n                SafeMath.mul(PSN, bs), \r\n                    SafeMath.add(PSNH, \r\n                        SafeMath.div(\r\n                            SafeMath.add(\r\n                                SafeMath.mul(PSN, rs), \r\n                                    SafeMath.mul(PSNH, rt)), \r\n                                        rt)));\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs, marketEggs, getBalance());\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth, getBalance());\r\n    }\r\n\r\n    /* How many snows per day user will receive based on ETH deposit */\r\n    function getEggsYield(uint256 amount) public view returns(uint256,uint256) {\r\n        uint256 eggsAmount = calculateEggBuy(amount , getBalance().add(amount).sub(amount));\r\n        uint256 miners = eggsAmount.div(EGGS_TO_HIRE_1MINERS);\r\n        uint256 day = 1 days;\r\n        uint256 eggsPerDay = day.mul(miners);\r\n        uint256 earningsPerDay = calculateEggSellForYield(eggsPerDay, amount);\r\n        return(miners, earningsPerDay);\r\n    }\r\n\r\n    function calculateEggSellForYield(uint256 eggs,uint256 amount) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs, getBalance().add(amount));\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalStaked, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus) {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus);\r\n    }\r\n\r\n    function getMyMiners() public view returns(uint256){\r\n        return users[msg.sender].miners;\r\n    }\r\n\r\n    function getMyEggs() public view returns(uint256){\r\n        return users[msg.sender].claimedEggs.add(getEggsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsSinceLastHatch = block.timestamp.sub(users[adr].lastHatch);\r\n                            /* get min time. */\r\n        uint256 cutoffTime = min256(secondsSinceLastHatch, CUTOFF_STEP);\r\n        uint256 secondsPassed = min256(EGGS_TO_HIRE_1MINERS, cutoffTime);\r\n        return secondsPassed.mul(users[adr].miners);\r\n    }\r\n\r\n    function levelGift(address _account) external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        users[_account].level = users[_account].level + 1;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function min16(uint16 a, uint16 b) private pure returns (uint16) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function CHANGE_marketingAddress(address value) external {\r\n        require(msg.sender == marketingAddress, \"Admin use only.\");\r\n        marketingAddress = payable(value);\r\n    }\r\n\r\n    /* APR setters */\r\n    // 2880000 - 3%, 2160000 - 4%, 1728000 - 5%, 1440000 - 6%, 1200000 - 7%\r\n    // 1080000 - 8%, 959000 - 9%, 864000 - 10%, 720000 - 12%\r\n    \r\n    function SET_EGGS_TO_HIRE_1MINERS(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 2880000 && value >= 720000, \"Min 3%, Max 12%\");\r\n        EGGS_TO_HIRE_1MINERS = value;\r\n    }\r\n\r\n    function SET_REFERRAL_PERCENT(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value >= 10 && value <= 100, \"Min 1%, Max 10%\");\r\n        REFERRAL = value;\r\n    }\r\n\r\n    function SET_MARKET_EGGS_DIVISOR(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 50);\r\n        MARKET_EGGS_DIVISOR = value;\r\n    }\r\n\r\n    function SET_MARKET_EGGS_DIVISOR_SELL(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 50);\r\n        MARKET_EGGS_DIVISOR_SELL = value;\r\n    }\r\n\r\n    function SET_TAX(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 100, \"available to 10%\");\r\n        TAX = value;\r\n    }\r\n\r\n    function SET_EXTRA_BONUS(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 500, \"available to 50%\");\r\n        EXTRA_BONUS = value;\r\n    }\r\n\r\n    function SET_DECREASE_TAX(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 1000, \"available to 100%\");\r\n        DECREASE_TAX = value;\r\n    }\r\n\r\n    function SET_WITHDRAWAL_TAX(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 900, \"available to 90%\");\r\n        EARLY_WITHDRAWAL_TAX = value;\r\n    }\r\n\r\n    function SET_DAILY_COMPOUND_BONUS(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value >= 10 && value <= 900);\r\n        COMPOUND_BONUS = value;\r\n    }\r\n\r\n    function SET_DAILY_COMPOUND_BONUS_MAX_TIMES(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 30);\r\n        COMPOUND_BONUS_MAX_TIMES = value;\r\n    }\r\n\r\n    function SET_COMPOUND_STEP(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 1_209_600, \"available between 0 and 14 days\");\r\n        COMPOUND_STEP = value;\r\n    }\r\n\r\n    function SET_INVEST_MIN(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        require(value >= 1e16 && value <= 1 ether, \"available between 0.01 ETH and 1ETH\");\r\n        MIN_INVEST_LIMIT = value;\r\n    }\r\n\r\n    function SET_CUTOFF_STEP(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        require(value <= 1_209_600, \"available between 0 and 14 days\");\r\n        CUTOFF_STEP = value;\r\n    }\r\n\r\n    function SET_WITHDRAW_COOLDOWN(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        require(value <= 1_209_600, \"available between 0 and 14 days\");\r\n        WITHDRAW_COOLDOWN = value;\r\n    }\r\n\r\n    function SET_WALLET_DEPOSIT_LIMIT(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        require(value >= 10 && value <= 100, \"available between 10ETH and 100ETH\");\r\n        WALLET_DEPOSIT_LIMIT = value * 1 ether;\r\n    }\r\n    \r\n    function SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only.\");\r\n        require(value <= 12);\r\n        COMPOUND_FOR_NO_TAX_WITHDRAWAL = value;\r\n    }\r\n\r\n    function startLOTTERY() external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        lotteryStarted = true;\r\n        LOTTERY_START_TIME = block.timestamp;\r\n        LOTTERY_ROUND = LOTTERY_ROUND + 1;\r\n    }\r\n\r\n    function finishLOTTERY() external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        require(lotteryStarted == true);\r\n        UpdateRoundInfo();\r\n        lotteryStarted = false;\r\n    }\r\n\r\n    function SET_LOTTERY_INTERVAL(uint256 value) external {\r\n        require(msg.sender == owner(), \"Admin use only\");\r\n        require(value <= 1_209_600, \"available between 0 and 14 days\");\r\n        LOTTERY_INTERVAL = value;\r\n    }\r\n\r\n    function getMemberList(uint16 _start, uint16 _end) public view returns( address [] memory){\r\n        require(_start < _end);\r\n        uint16 len = uint16(memberList.length-1);\r\n        uint16 start = min16(_start, len);\r\n        uint16 end = min16(_end, len);\r\n\r\n        address [] memory result = new address[](end - start + 1);\r\n        for (uint16 i = start; i <= end; i++) {\r\n            result[i-_start] = (memberList[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getTotalMemberCount() external view returns(uint256) {\r\n        return memberList.length;\r\n    }\r\n\r\n    function UpdateRoundInfo() internal {\r\n        winTicketID = randomGenerator.getRandomNumber(lotteryInfo[LOTTERY_ROUND].totalTicketCnt);\r\n        \r\n        PurchaseInfo[] memory info = lotteryInfo[LOTTERY_ROUND].purchaseInfo;\r\n        uint256 mid;\r\n        uint256 low = 0;\r\n        uint256 high = info.length - 1;\r\n\r\n        /* perform binary search */\r\n        while (low <= high) {\r\n            mid = low + (high - low)/2; // update mid\r\n            \r\n            if ((winTicketID >= info[mid].ticketIDFrom) && \r\n                (winTicketID < info[mid].ticketIDFrom + info[mid].tickets)) {\r\n                break; // find winnerID\r\n            }\r\n            else if (winTicketID < info[mid].ticketIDFrom) { // search left subarray for val\r\n                high = mid - 1;  // update high\r\n            }\r\n            else if (winTicketID > info[mid].ticketIDFrom) { // search right subarray for val\r\n                low = mid + 1;        // update low\r\n            }\r\n        }\r\n        lotteryInfo[LOTTERY_ROUND].winnerAccount = info[mid].account;\r\n        User storage winner = users[info[mid].account];\r\n        winner.level = winner.level + 1;\r\n         \r\n        LOTTERY_ROUND = LOTTERY_ROUND + 1;\r\n        LOTTERY_START_TIME = LOTTERY_START_TIME + LOTTERY_INTERVAL;\r\n    }\r\n\r\n    function getUserTicketInfo(address _account, uint16 _roundID) external view returns(uint256) {\r\n        return users[_account].ticketCount[_roundID];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomGenerator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"BuySnows\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_marketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"CompoundRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECREASE_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HIRE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTRA_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_ROUND\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_DIVISOR_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_CUTOFF_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_DAILY_COMPOUND_BONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_DAILY_COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_DECREASE_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_EGGS_TO_HIRE_1MINERS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_EXTRA_BONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_INVEST_MIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_INTERVAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MARKET_EGGS_DIVISOR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MARKET_EGGS_DIVISOR_SELL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_REFERRAL_PERCENT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WALLET_DEPOSIT_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAWAL_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_COOLDOWN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blackListWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Wallet\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blackMultipleWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateEggSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishLOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEggsYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_start\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_end\",\"type\":\"uint16\"}],\"name\":\"getMemberList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_roundID\",\"type\":\"uint16\"}],\"name\":\"getUserTicketInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"levelGift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"lotteryInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winnerAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTicketCnt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setblacklistActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"throwSnowball\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winTicketID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ETHSnowball","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f611314d2d6ef059d002e188650dcfc2197045ee00000000000000000000000017d71fb405a47669239f436598645405b8bda632","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://96bad512b7237b198e91538963530a506c58567c535c9331ef0550efbf926a91"}]}