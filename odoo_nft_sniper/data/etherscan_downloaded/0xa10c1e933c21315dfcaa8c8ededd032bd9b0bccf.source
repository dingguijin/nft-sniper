{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract LiquidationEngineLike {\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint256 data\r\n    ) external virtual;\r\n    function connectSAFESaviour(address) virtual external;\r\n    function disconnectSAFESaviour(address) virtual external;\r\n}\r\n\r\ncontract MinimalLiquidationEngineOverlay is GebAuth {\r\n    // Minimum and maximum possible penalty for any collateral type liquidation\r\n    uint256               public minPenalty;\r\n    uint256               public maxPenalty;\r\n\r\n    LiquidationEngineLike public liquidationEngine;\r\n\r\n    constructor(address liquidationEngine_, uint256 minPenalty_, uint256 maxPenalty_) public GebAuth() {\r\n        require(liquidationEngine_ != address(0), \"MinimalLiquidationEngineOverlay/null-address\");\r\n        require(both(minPenalty_ < maxPenalty_, minPenalty_ > 0), \"MinimalLiquidationEngineOverlay/invalid-penalty-bounds\");\r\n\r\n        liquidationEngine = LiquidationEngineLike(liquidationEngine_);\r\n        minPenalty        = minPenalty_;\r\n        maxPenalty        = maxPenalty_;\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    /**\r\n     * @notice Modify a collateral's liquidation penalty\r\n     * @param collateralType The collateral type we change parameters for\r\n     * @param parameter The name of the parameter (must be \"liquidationPenalty\")\r\n     * @param data New value for the penalty\r\n     */\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint256 data\r\n    ) external isAuthorized {\r\n        require(parameter == \"liquidationPenalty\", \"MinimalLiquidationEngineOverlay/invalid-param-name\");\r\n        require(both(data >= minPenalty, data <= maxPenalty), \"MinimalLiquidationEngineOverlay/invalid-new-penalty\");\r\n        liquidationEngine.modifyParameters(collateralType, parameter, data);\r\n    }\r\n\r\n    /*\r\n    * @notify Connect a new safe saviour to the LiquidationEngine\r\n    * @param saviour The new saviour address\r\n    */\r\n    function connectSAFESaviour(address saviour) external isAuthorized {\r\n        liquidationEngine.connectSAFESaviour(saviour);\r\n    }\r\n    /*\r\n    * @notify Disconnect an existing safe saviour from the LiquidationEngine\r\n    * @param saviour The saviour address to disconnect\r\n    */\r\n    function disconnectSAFESaviour(address saviour) external isAuthorized {\r\n        liquidationEngine.disconnectSAFESaviour(saviour);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidationEngine_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPenalty_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPenalty_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"connectSAFESaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"disconnectSAFESaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationEngine\",\"outputs\":[{\"internalType\":\"contract LiquidationEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinimalLiquidationEngineOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ffbaa89d648079faafc7852de49ea1dc92f99760000000000000000000000000000000000000000000000000f207539952d00000000000000000000000000000000000000000000000000000ff59ee833b30000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a6348796609ab8b8d4a7c4d7a446945f72e5e30fb73e46430576a181169e9f12"}]}