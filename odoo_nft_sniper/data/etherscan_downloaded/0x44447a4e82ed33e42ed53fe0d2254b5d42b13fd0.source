{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Copyright (c) 2022 Gemini Trust Company LLC. All Rights Reserved\r\npragma solidity 0.8.x;\r\n\r\nstruct RoyaltyInfo {\r\n    address beneficiary;\r\n    uint16 bips; //max 10_000\r\n}\r\n\r\ninterface IRegistry {\r\n   function isValidNiftySender(address sender) external view returns (bool);\r\n}\r\n\r\ncontract NiftyLegacyRegistry {\r\n\r\n    bool public _initialized;\r\n    address immutable public _registry;\r\n    uint256 immutable public _defaultNiftyType;\r\n\r\n    mapping(uint256 => RoyaltyInfo) public _royaltyInfoIndex;\r\n\r\n    mapping(address => uint256[]) public _tokenToIndexSetGlobal;\r\n    mapping(address => mapping(uint256 => uint256[])) public _tokenToIndexSetNiftyType;\r\n\r\n    event LegacyContractAdded(address indexed tokenAddress);\r\n\r\n    constructor(address registry_) {\r\n        _registry = registry_;\r\n        _defaultNiftyType = 1;\r\n        _initialized = false;\r\n    }\r\n\r\n    modifier onlyValidSender() {\r\n        require(IRegistry(_registry).isValidNiftySender(msg.sender), \"NiftyLegacyRegistry: invalid msg.sender\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function setInitialized() public onlyValidSender {\r\n        _initialized = true;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    function isLegacyToken(address tokenAddress, uint256 tokenId) public view returns (bool) {\r\n        return _tokenToIndexSetNiftyType[tokenAddress][_getNiftyType(tokenId)].length != 0 ||\r\n               _tokenToIndexSetGlobal[tokenAddress].length != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev RoyaltyRegistry.sol address verification.\r\n     */\r\n    function isLegacyAddress(address tokenAddress) public view returns (bool) {\r\n        return _tokenToIndexSetNiftyType[tokenAddress][_defaultNiftyType].length != 0 ||\r\n               _tokenToIndexSetGlobal[tokenAddress].length != 0;\r\n    }\r\n\r\n    /**\r\n     *               index                                token                      bips\r\n     * _royaltyInfoSet[1] = RoyaltyInfo(0x0000000000000000000000000000000000000000, 10000);\r\n     *\r\n     */\r\n    function setRoyaltyInfoIndexBatch(uint256[] calldata indexList, RoyaltyInfo[] calldata infoList) external onlyValidSender {\r\n        for(uint256 i = 0; i < indexList.length; i++){\r\n            _royaltyInfoIndex[indexList[i]] = infoList[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *                                     tokenAddress                   niftyType\r\n     * _tokenNiftyTypeToIndexSet[0x0000000000000000000000000000000000000000][1] = [1, 2];\r\n     *                                                                     royalty info indices\r\n     *\r\n     */\r\n    function setTokenToIndexNiftyType(address tokenAddress, uint256[] calldata listNiftyType, uint256[][] calldata indexList) external onlyValidSender {\r\n        require(!_initialized, \"NiftyLegacyRegistry: initialized\");\r\n        for(uint256 i = 0; i < listNiftyType.length; i++){\r\n            uint256 niftyType = listNiftyType[i];\r\n            _setTokenToIndexNiftyType(tokenAddress, niftyType, indexList[i]);\r\n        }\r\n        emit LegacyContractAdded(tokenAddress);\r\n    }\r\n\r\n    /**\r\n     *\r\n     *                                     tokenAddress                  \r\n     * _tokenToIndexSetGlobal[0x0000000000000000000000000000000000000000] = [1, 2];\r\n     *                                                                 royalty info indices\r\n     */\r\n    function setTokenToIndexGlobalBatch(address[] calldata tokenAddressList, uint256[][] calldata indexListSet) external onlyValidSender {\r\n        require(!_initialized, \"NiftyLegacyRegistry: initialized\");\r\n        for(uint256 i = 0; i < tokenAddressList.length; i++){\r\n            _setTokenToIndexGlobal(tokenAddressList[i], indexListSet[i]);\r\n            emit LegacyContractAdded(tokenAddressList[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function updateGlobalToNiftyType(address tokenAddress, uint256[] calldata listNiftyType, uint256[][] calldata indexList) external onlyValidSender {\r\n        require(isLegacyAddress(tokenAddress), \"NiftyLegacyRegistry: invalid token address\");\r\n        for(uint256 i = 0; i < listNiftyType.length; i++){\r\n            uint256 niftyType = listNiftyType[i];\r\n            _setTokenToIndexNiftyType(tokenAddress, niftyType, indexList[i]);\r\n        }\r\n        delete _tokenToIndexSetGlobal[tokenAddress];\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function updateNiftyTypeToGlobal(address tokenAddress, uint256[] calldata listNiftyType, uint256[] calldata indexList) external onlyValidSender {\r\n        require(isLegacyAddress(tokenAddress), \"NiftyLegacyRegistry: invalid token address\");\r\n        for(uint256 i = 0; i < listNiftyType.length; i++){\r\n            uint256 niftyType = listNiftyType[i];\r\n            delete _tokenToIndexSetNiftyType[tokenAddress][niftyType];\r\n        }\r\n        _setTokenToIndexGlobal(tokenAddress, indexList);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function updateTokenToIndexGlobal(address tokenAddress, uint256[] calldata indexList) external onlyValidSender {\r\n        require(isLegacyAddress(tokenAddress), \"NiftyLegacyRegistry: invalid token address\");\r\n        delete _tokenToIndexSetGlobal[tokenAddress];\r\n        _setTokenToIndexGlobal(tokenAddress, indexList);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function updateTokenToIndexNiftyType(address tokenAddress, uint256 niftyType, uint256[] calldata indexList) external onlyValidSender {\r\n        require(isLegacyAddress(tokenAddress), \"NiftyLegacyRegistry: invalid token address\");\r\n        delete _tokenToIndexSetNiftyType[tokenAddress][niftyType];\r\n        _setTokenToIndexNiftyType(tokenAddress, niftyType, indexList);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function _setTokenToIndexNiftyType(address tokenAddress, uint256 niftyType, uint256[] calldata indexList) private {\r\n        for(uint256 i = 0; i < indexList.length; i++){\r\n            uint256 index = indexList[i];\r\n            _tokenToIndexSetNiftyType[tokenAddress][niftyType].push(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     */\r\n    function _setTokenToIndexGlobal(address tokenAddress, uint256[] calldata indexList) private {\r\n        for(uint256 i = 0; i < indexList.length; i++){\r\n            uint256 index = indexList[i];\r\n            _tokenToIndexSetGlobal[tokenAddress].push(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     */\r\n    function _getNiftyType(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 contractId  = tokenId / 100000000;\r\n        uint256 topLevelMultiplier = contractId * 100000000;\r\n        return (tokenId - topLevelMultiplier) / 10000;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function getRoyaltyInfo(uint256 index) external view returns (RoyaltyInfo memory) {\r\n        return _royaltyInfoIndex[index];\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function getTokenToIndexNiftyType(address tokenAddress, uint256 niftyType) public view returns (uint256[] memory) {\r\n        return _tokenToIndexSetNiftyType[tokenAddress][niftyType];\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function getTokenToIndexSetGlobal(address tokenAddress) public view returns (uint256[] memory) {\r\n        return _tokenToIndexSetGlobal[tokenAddress];\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    function getRoyalties(address tokenAddress, uint256 tokenId) external view returns (address payable[] memory, uint256[] memory) {\r\n        require(isLegacyToken(tokenAddress, tokenId), \"NiftyLegacyRegistry: invalid input\");\r\n\r\n        uint256[] memory listIndex = _tokenToIndexSetGlobal[tokenAddress];\r\n        uint256 count = listIndex.length;\r\n\r\n        if (count == 0) {\r\n            listIndex = _tokenToIndexSetNiftyType[tokenAddress][_getNiftyType(tokenId)];\r\n            count = listIndex.length;\r\n        }\r\n\r\n        address payable[] memory listBeneficiary = new address payable[](count);\r\n        uint256[] memory listAmount = new uint256[](count);\r\n\r\n        for(uint256 i = 0; i < count; i++){\r\n            RoyaltyInfo memory info = _royaltyInfoIndex[listIndex[i]];\r\n            listAmount[i] = info.bips;\r\n            listBeneficiary[i] = payable(info.beneficiary);\r\n        } \r\n        return (listBeneficiary, listAmount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"LegacyContractAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_defaultNiftyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_royaltyInfoIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bips\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenToIndexSetGlobal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenToIndexSetNiftyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bips\",\"type\":\"uint16\"}],\"internalType\":\"struct RoyaltyInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"getTokenToIndexNiftyType\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenToIndexSetGlobal\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isLegacyAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isLegacyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexList\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bips\",\"type\":\"uint16\"}],\"internalType\":\"struct RoyaltyInfo[]\",\"name\":\"infoList\",\"type\":\"tuple[]\"}],\"name\":\"setRoyaltyInfoIndexBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"indexListSet\",\"type\":\"uint256[][]\"}],\"name\":\"setTokenToIndexGlobalBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"listNiftyType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"indexList\",\"type\":\"uint256[][]\"}],\"name\":\"setTokenToIndexNiftyType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"listNiftyType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"indexList\",\"type\":\"uint256[][]\"}],\"name\":\"updateGlobalToNiftyType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"listNiftyType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexList\",\"type\":\"uint256[]\"}],\"name\":\"updateNiftyTypeToGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"indexList\",\"type\":\"uint256[]\"}],\"name\":\"updateTokenToIndexGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexList\",\"type\":\"uint256[]\"}],\"name\":\"updateTokenToIndexNiftyType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NiftyLegacyRegistry","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"0000000000000000000000006e53130ddff21e3bc963ee902005223b9a202106","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://102da712925643e04c9ca87fa7fba561c88fcfd93b32fd6bccbc1ccdeda52143"}]}