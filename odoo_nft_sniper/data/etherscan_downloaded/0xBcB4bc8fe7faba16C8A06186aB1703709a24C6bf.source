{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/MercuryStaking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract MercuryStaking is ReentrancyGuard, Ownable {\r\n    event Staked(address indexed user, uint256 amount);\r\n\r\n    event Unstaked(address indexed user, uint256 amount);\r\n\r\n    event RewardPaid(address indexed user, uint256 amount);\r\n\r\n    event EmergencyWithdrawalInitiated();\r\n\r\n    uint64 POINT_BASE = 1000;\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct UserStakingData {\r\n        uint256 amountStaked;\r\n        uint256 guaranteedReward;\r\n        uint256 storedReward;\r\n        uint256 storedRewardUpdatedOn;\r\n        uint256 firstActiveStakeIndex; // for gas optimization if many stakes\r\n        Stake[] stakes;\r\n    }\r\n\r\n    uint256 public constant YIELD_PERIOD = 15552000; //180 days;\r\n\r\n    IERC20 public stakingToken;\r\n    IERC20 public rewardToken;\r\n    bool internal _stakingTokenIsRewardToken;\r\n    uint256 public rewardNumerator;\r\n    uint256 public rewardDenominator;\r\n\r\n    uint256 public minStakeAmount = 10_000 ether; // should be at least 1\r\n    bool public emergencyWithdrawalInProgress = false;\r\n    bool public paused = false;\r\n\r\n    mapping(address => UserStakingData) stakingDataByUser;\r\n\r\n    uint256 public totalPenaltyAmount = 0;\r\n\r\n    uint256 public totalAmountStaked = 0;\r\n    uint256 public totalGuaranteedReward = 0;\r\n    uint256 public totalStoredReward = 0;\r\n\r\n    constructor(\r\n        address _stakingToken,\r\n        address _rewardToken,\r\n        uint256 _rewardNumerator,\r\n        uint256 _rewardDenominator\r\n    ) Ownable() {\r\n        require(_rewardNumerator != 0, \"Reward numerator cannot be 0\"); // would mean zero reward\r\n        require(_rewardDenominator != 0, \"Reward denominator cannot be 0\"); // would mean division by zero\r\n\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardToken = IERC20(_rewardToken);\r\n        _stakingTokenIsRewardToken = _stakingToken == _rewardToken;\r\n\r\n        rewardNumerator = _rewardNumerator;\r\n        rewardDenominator = _rewardDenominator;\r\n    }\r\n\r\n    /**\r\n     * PUBLIC USER API\r\n     */\r\n    function stake(uint256 amount) public virtual nonReentrant {\r\n        require(\r\n            !paused,\r\n            \"Staking is temporarily paused, no new stakes accepted\"\r\n        );\r\n        require(\r\n            !emergencyWithdrawalInProgress,\r\n            \"Emergency withdrawal in progress, no new stakes accepted\"\r\n        );\r\n        require(amount > 0, \"Minimum stake amount not met\");\r\n\r\n        /**\r\n         * This needs to be checked before accepting the stake,\r\n         * in case stakedToken and rewardToken are the same\r\n         */\r\n        require(\r\n            availableToStake() >= amount,\r\n            \"Not enough rewards left to accept new stakes for given amount\"\r\n        );\r\n        require(\r\n            stakingToken.transferFrom(msg.sender, address(this), amount),\r\n            \"Cannot transfer balance\"\r\n        );\r\n\r\n        UserStakingData storage userData = stakingDataByUser[msg.sender];\r\n\r\n        // Update stored reward, in case the user has already staked\r\n        _updateStoredReward(userData);\r\n\r\n        userData.stakes.push(\r\n            Stake({amount: amount, timestamp: block.timestamp})\r\n        );\r\n\r\n        userData.amountStaked += amount;\r\n        totalAmountStaked += amount;\r\n        uint256 rewardAmount = (amount * rewardNumerator) / rewardDenominator;\r\n\r\n        require(rewardAmount > 0, \"Zero reward amount\");\r\n\r\n        userData.guaranteedReward += (rewardAmount * 5) / 100;\r\n        totalGuaranteedReward += (rewardAmount * 5) / 100;\r\n        // may waste some gas, but would rather be safe than sorry\r\n        userData.storedRewardUpdatedOn = block.timestamp;\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function claimReward() public virtual nonReentrant {\r\n        _rewardUser(msg.sender);\r\n    }\r\n\r\n    function unstake(uint256 amount) public virtual nonReentrant {\r\n        _unstakeUser(msg.sender, amount);\r\n    }\r\n\r\n    function exit() public virtual nonReentrant {\r\n        UserStakingData storage userData = stakingDataByUser[msg.sender];\r\n        if (userData.amountStaked > 0) {\r\n            _unstakeUser(msg.sender, userData.amountStaked);\r\n        }\r\n        _rewardUser(msg.sender);\r\n        delete stakingDataByUser[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * PUBLIC VIEWS AND UTILITIES\r\n     */\r\n\r\n    function availableToStake() public view returns (uint256 stakeable) {\r\n        stakeable = ((rewardToken.balanceOf(address(this)) - totalLockedReward())/ 5) * 100;\r\n        if (_stakingTokenIsRewardToken) {\r\n            stakeable -= totalAmountStaked;\r\n        }\r\n        stakeable = (stakeable * rewardDenominator) / rewardNumerator;\r\n    }    \r\n    \r\n    function availableToReward() public view returns (uint256 rewardable) {\r\n        rewardable = rewardToken.balanceOf(address(this)) - totalLockedReward();\r\n        if (_stakingTokenIsRewardToken) {\r\n            rewardable -= totalAmountStaked;\r\n        }\r\n        rewardable = (rewardable * rewardDenominator) / rewardNumerator;\r\n    }\r\n\r\n    function totalLockedReward() public view returns (uint256 locked) {\r\n        locked = totalStoredReward + totalGuaranteedReward;\r\n    }\r\n\r\n    function rewardClaimable(address user)\r\n        public\r\n        view\r\n        returns (uint256 reward)\r\n    {\r\n        UserStakingData storage userData = stakingDataByUser[user];\r\n        reward = userData.storedReward;\r\n        reward += _calculateStoredRewardToAdd(userData);\r\n    }\r\n\r\n    function staked(address user) public view returns (uint256 amount) {\r\n        UserStakingData storage userData = stakingDataByUser[user];\r\n        return userData.amountStaked;\r\n    }\r\n\r\n    // OWNER API\r\n    // =========\r\n\r\n    function payRewardToUser(address user)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        _rewardUser(user);\r\n    }\r\n\r\n    function withdrawTokens(address token, uint256 amount)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        if (token == address(rewardToken)) {\r\n            require(\r\n                amount <= availableToReward(),\r\n                \"Can only withdraw up to balance minus locked amount\"\r\n            );\r\n        } else if (token == address(stakingToken)) {\r\n            uint256 maxAmount = stakingToken.balanceOf(address(this)) -\r\n                totalAmountStaked;\r\n            require(amount <= maxAmount, \"Cannot withdraw staked tokens\");\r\n        }\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function setMinStakeAmount(uint256 newMinStakeAmount)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(\r\n            newMinStakeAmount > 0,\r\n            \"Minimum stake amount must be at least 1\"\r\n        );\r\n        minStakeAmount = newMinStakeAmount;\r\n    }\r\n\r\n    function setPaused(bool newPaused) public virtual onlyOwner nonReentrant {\r\n        paused = newPaused;\r\n    }\r\n\r\n    function initiateEmergencyWithdrawal()\r\n        public\r\n        virtual\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(\r\n            !emergencyWithdrawalInProgress,\r\n            \"Emergency withdrawal already in progress\"\r\n        );\r\n        emergencyWithdrawalInProgress = true;\r\n        emit EmergencyWithdrawalInitiated();\r\n    }\r\n\r\n    function forceExitUser(address user) public virtual onlyOwner nonReentrant {\r\n        /**\r\n         * NOTE: this pays all of guaranteed reward to the user,\r\n         * even ahead of schedule with humongous APY!\r\n         */\r\n        require(\r\n            emergencyWithdrawalInProgress,\r\n            \"Emergency withdrawal not in progress\"\r\n        );\r\n        UserStakingData storage userData = stakingDataByUser[user];\r\n        if (userData.amountStaked > 0) {\r\n            totalAmountStaked -= userData.amountStaked;\r\n            stakingToken.transfer(user, userData.amountStaked);\r\n            emit Unstaked(user, userData.amountStaked);\r\n            //userData.amountStaked = 0;\r\n        }\r\n        uint256 userReward = userData.storedReward + userData.guaranteedReward;\r\n        if (userReward > 0) {\r\n            rewardToken.transfer(user, userReward);\r\n            totalStoredReward -= userData.storedReward;\r\n            totalGuaranteedReward -= userData.guaranteedReward;\r\n            emit RewardPaid(user, userReward);\r\n        }\r\n        // delete the whole thing to set everything as 0 and to save on gas\r\n        delete stakingDataByUser[user];\r\n    }\r\n\r\n    // INTERNAL API\r\n    // ============\r\n\r\n    function _rewardUser(address user) internal {\r\n        UserStakingData storage userData = stakingDataByUser[user];\r\n        _updateStoredReward(userData);\r\n\r\n        uint256 reward = userData.storedReward;\r\n        if (reward == 0) {\r\n            return;\r\n        }\r\n\r\n        userData.storedReward = 0;\r\n        totalStoredReward -= reward;\r\n\r\n        require(rewardToken.transfer(user, reward), \"Sending reward failed\");\r\n\r\n        emit RewardPaid(user, reward);\r\n    }\r\n\r\n    function _unstakeUser(address user, uint256 amount) private {\r\n        require(amount > 0, \"Cannot unstake zero amount\");\r\n\r\n        UserStakingData storage userData = stakingDataByUser[user];\r\n        _updateStoredReward(userData);\r\n\r\n        uint256 amountLeft = amount;\r\n        uint256 penaltyAmount = 0;\r\n        uint256 i = userData.firstActiveStakeIndex;\r\n        uint256 userDataStakesLength = userData.stakes.length;\r\n        for (; i < userDataStakesLength; i++) {\r\n            if (userData.stakes[i].amount == 0) {\r\n                continue;\r\n            }\r\n            if (userData.stakes[i].amount > amountLeft) {\r\n                userData.stakes[i].amount -= amountLeft;\r\n                amountLeft = 0;\r\n                break;\r\n            } else {\r\n                // stake amount equal to or smaller than amountLeft\r\n                amountLeft -= userData.stakes[i].amount;\r\n                userData.stakes[i].amount = 0;\r\n            }\r\n            //calculate penalty amount\r\n            uint256 daysStaked = (block.timestamp -\r\n                userData.stakes[i].timestamp) / 86400; // epoch equal 1 day\r\n            if (daysStaked < 90) {\r\n                penaltyAmount += (amount * 20) / 100;\r\n            } else if (daysStaked >= 90 && daysStaked < 150) {\r\n                penaltyAmount += (amount * 15) / 100;\r\n            } else if (daysStaked >= 150 && daysStaked < 180) {\r\n                penaltyAmount += (amount * 10) / 100;\r\n            }\r\n            totalPenaltyAmount += penaltyAmount;\r\n        }\r\n\r\n        require(\r\n            amountLeft == 0,\r\n            \"Not enough staked balance left to unstake all of wanted amount\"\r\n        );\r\n\r\n        userData.firstActiveStakeIndex = i;\r\n        userData.amountStaked -= amount;\r\n        totalAmountStaked -= amount;\r\n        /**\r\n         * We need to make sure the user is left with no guaranteed reward if they have unstaked everything\r\n         * -- in that case, just add to stored reward.\r\n         */\r\n        if (userData.guaranteedReward > 0 && i == userData.stakes.length) {\r\n            userData.storedReward += userData.guaranteedReward;\r\n            totalStoredReward += userData.guaranteedReward;\r\n\r\n            totalGuaranteedReward -= userData.guaranteedReward;\r\n            userData.guaranteedReward = 0;\r\n\r\n            userData.storedRewardUpdatedOn = block.timestamp;\r\n        }\r\n\r\n        require(\r\n            stakingToken.transfer(msg.sender, amount - penaltyAmount),\r\n            \"Transferring staked token back to sender failed\"\r\n        );\r\n\r\n        emit Unstaked(msg.sender, amount);\r\n    }\r\n\r\n    function _updateStoredReward(UserStakingData storage userData) internal {\r\n        uint256 calcStoredReward = _calculateStoredRewardToAdd(userData);\r\n        if (calcStoredReward != 0) {\r\n            userData.storedReward += calcStoredReward;\r\n            totalStoredReward += calcStoredReward;\r\n\r\n            if (calcStoredReward > userData.guaranteedReward) {\r\n                totalGuaranteedReward -= userData.guaranteedReward;\r\n                userData.guaranteedReward = 0;\r\n            } else {\r\n                userData.guaranteedReward -= calcStoredReward;\r\n                totalGuaranteedReward -= calcStoredReward;\r\n            }\r\n\r\n            userData.storedRewardUpdatedOn = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _calculateStoredRewardToAdd(UserStakingData storage userData)\r\n        internal\r\n        view\r\n        returns (uint256 storedRewardToAdd)\r\n    {\r\n        if (\r\n            userData.storedRewardUpdatedOn == 0 ||\r\n            userData.storedRewardUpdatedOn == block.timestamp\r\n        ) {\r\n            /**\r\n             * safety check -- don't want to accidentally multiply everything by the unix epoch\r\n             * instead of time passed\r\n             */\r\n            return 0;\r\n        }\r\n        uint256 timePassedFromLastUpdate = block.timestamp -\r\n            userData.storedRewardUpdatedOn;\r\n\r\n        uint256 localStoredRewardToAdd = (((userData.amountStaked *\r\n            rewardNumerator *\r\n            timePassedFromLastUpdate) / rewardDenominator) /\r\n            (YIELD_PERIOD * 2)) / 100;\r\n\r\n        //We can pay only guaranteedReward as maximum reward payment\r\n        if (localStoredRewardToAdd > userData.guaranteedReward) {\r\n            storedRewardToAdd = userData.guaranteedReward;\r\n        } else {\r\n            storedRewardToAdd = localStoredRewardToAdd * POINT_BASE;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyWithdrawalInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"YIELD_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawalInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"forceExitUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateEmergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"payRewardToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rewardClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGuaranteedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPenaltyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStoredReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MercuryStaking","CompilerVersion":"v0.8.8+commit.dddeac2f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a203eb78fee91c8459c6d4ef3a899d8724ee5b35000000000000000000000000a203eb78fee91c8459c6d4ef3a899d8724ee5b3500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e564551653bf123d1dc3011fd15c3640a4d6cbf3ec341a205fe3c4c6c768d691"}]}