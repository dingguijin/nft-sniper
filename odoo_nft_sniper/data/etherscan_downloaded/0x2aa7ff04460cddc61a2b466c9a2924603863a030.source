{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n// File: Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: GPv2Order.sol\r\n\r\n/// @title Gnosis Protocol v2 Order Library\r\n/// @author Gnosis Developers\r\nlibrary GPv2Order {\r\n    /// @dev The complete data for a Gnosis Protocol order. This struct contains\r\n    /// all order parameters that are signed for submitting to GP.\r\n    struct Data {\r\n        IERC20 sellToken;\r\n        IERC20 buyToken;\r\n        address receiver;\r\n        uint256 sellAmount;\r\n        uint256 buyAmount;\r\n        uint32 validTo;\r\n        bytes32 appData;\r\n        uint256 feeAmount;\r\n        bytes32 kind;\r\n        bool partiallyFillable;\r\n        bytes32 sellTokenBalance;\r\n        bytes32 buyTokenBalance;\r\n    }\r\n\r\n    /// @dev The order EIP-712 type hash for the [`GPv2Order.Data`] struct.\r\n    ///\r\n    /// This value is pre-computed from the following expression:\r\n    /// ```\r\n    /// keccak256(\r\n    ///     \"Order(\" +\r\n    ///         \"address sellToken,\" +\r\n    ///         \"address buyToken,\" +\r\n    ///         \"address receiver,\" +\r\n    ///         \"uint256 sellAmount,\" +\r\n    ///         \"uint256 buyAmount,\" +\r\n    ///         \"uint32 validTo,\" +\r\n    ///         \"bytes32 appData,\" +\r\n    ///         \"uint256 feeAmount,\" +\r\n    ///         \"string kind,\" +\r\n    ///         \"bool partiallyFillable\" +\r\n    ///         \"string sellTokenBalance\" +\r\n    ///         \"string buyTokenBalance\" +\r\n    ///     \")\"\r\n    /// )\r\n    /// ```\r\n    bytes32 internal constant TYPE_HASH =\r\n        hex\"d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489\";\r\n\r\n    /// @dev The marker value for a sell order for computing the order struct\r\n    /// hash. This allows the EIP-712 compatible wallets to display a\r\n    /// descriptive string for the order kind (instead of 0 or 1).\r\n    ///\r\n    /// This value is pre-computed from the following expression:\r\n    /// ```\r\n    /// keccak256(\"sell\")\r\n    /// ```\r\n    bytes32 internal constant KIND_SELL =\r\n        hex\"f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775\";\r\n\r\n    /// @dev The OrderKind marker value for a buy order for computing the order\r\n    /// struct hash.\r\n    ///\r\n    /// This value is pre-computed from the following expression:\r\n    /// ```\r\n    /// keccak256(\"buy\")\r\n    /// ```\r\n    bytes32 internal constant KIND_BUY =\r\n        hex\"6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc\";\r\n\r\n    /// @dev The TokenBalance marker value for using direct ERC20 balances for\r\n    /// computing the order struct hash.\r\n    ///\r\n    /// This value is pre-computed from the following expression:\r\n    /// ```\r\n    /// keccak256(\"erc20\")\r\n    /// ```\r\n    bytes32 internal constant BALANCE_ERC20 =\r\n        hex\"5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9\";\r\n\r\n    /// @dev The TokenBalance marker value for using Balancer Vault external\r\n    /// balances (in order to re-use Vault ERC20 approvals) for computing the\r\n    /// order struct hash.\r\n    ///\r\n    /// This value is pre-computed from the following expression:\r\n    /// ```\r\n    /// keccak256(\"external\")\r\n    /// ```\r\n    bytes32 internal constant BALANCE_EXTERNAL =\r\n        hex\"abee3b73373acd583a130924aad6dc38cfdc44ba0555ba94ce2ff63980ea0632\";\r\n\r\n    /// @dev The TokenBalance marker value for using Balancer Vault internal\r\n    /// balances for computing the order struct hash.\r\n    ///\r\n    /// This value is pre-computed from the following expression:\r\n    /// ```\r\n    /// keccak256(\"internal\")\r\n    /// ```\r\n    bytes32 internal constant BALANCE_INTERNAL =\r\n        hex\"4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce\";\r\n\r\n    /// @dev Marker address used to indicate that the receiver of the trade\r\n    /// proceeds should the owner of the order.\r\n    ///\r\n    /// This is chosen to be `address(0)` for gas efficiency as it is expected\r\n    /// to be the most common case.\r\n    address internal constant RECEIVER_SAME_AS_OWNER = address(0);\r\n\r\n    /// @dev The byte length of an order unique identifier.\r\n    uint256 internal constant UID_LENGTH = 56;\r\n\r\n    /// @dev Returns the actual receiver for an order. This function checks\r\n    /// whether or not the [`receiver`] field uses the marker value to indicate\r\n    /// it is the same as the order owner.\r\n    ///\r\n    /// @return receiver The actual receiver of trade proceeds.\r\n    function actualReceiver(Data memory order, address owner)\r\n        internal\r\n        pure\r\n        returns (address receiver)\r\n    {\r\n        if (order.receiver == RECEIVER_SAME_AS_OWNER) {\r\n            receiver = owner;\r\n        } else {\r\n            receiver = order.receiver;\r\n        }\r\n    }\r\n\r\n    /// @dev Return the EIP-712 signing hash for the specified order.\r\n    ///\r\n    /// @param order The order to compute the EIP-712 signing hash for.\r\n    /// @param domainSeparator The EIP-712 domain separator to use.\r\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\r\n    function hash(Data memory order, bytes32 domainSeparator)\r\n        internal\r\n        pure\r\n        returns (bytes32 orderDigest)\r\n    {\r\n        bytes32 structHash;\r\n\r\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\r\n        // in the EIP proposal, noting that the order struct has 10 fields, and\r\n        // including the type hash `(12 + 1) * 32 = 416` bytes to hash.\r\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let dataStart := sub(order, 32)\r\n            let temp := mload(dataStart)\r\n            mstore(dataStart, TYPE_HASH)\r\n            structHash := keccak256(dataStart, 416)\r\n            mstore(dataStart, temp)\r\n        }\r\n\r\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\r\n        // hash using scratch memory past the free memory pointer. The signing\r\n        // hash is computed from `\"\\x19\\x01\" || domainSeparator || structHash`.\r\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\r\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let freeMemoryPointer := mload(0x40)\r\n            mstore(freeMemoryPointer, \"\\x19\\x01\")\r\n            mstore(add(freeMemoryPointer, 2), domainSeparator)\r\n            mstore(add(freeMemoryPointer, 34), structHash)\r\n            orderDigest := keccak256(freeMemoryPointer, 66)\r\n        }\r\n    }\r\n\r\n    /// @dev Packs order UID parameters into the specified memory location. The\r\n    /// result is equivalent to `abi.encodePacked(...)` with the difference that\r\n    /// it allows re-using the memory for packing the order UID.\r\n    ///\r\n    /// This function reverts if the order UID buffer is not the correct size.\r\n    ///\r\n    /// @param orderUid The buffer pack the order UID parameters into.\r\n    /// @param orderDigest The EIP-712 struct digest derived from the order\r\n    /// parameters.\r\n    /// @param owner The address of the user who owns this order.\r\n    /// @param validTo The epoch time at which the order will stop being valid.\r\n    function packOrderUidParams(\r\n        bytes memory orderUid,\r\n        bytes32 orderDigest,\r\n        address owner,\r\n        uint32 validTo\r\n    ) internal pure {\r\n        require(orderUid.length == UID_LENGTH, \"GPv2: uid buffer overflow\");\r\n\r\n        // NOTE: Write the order UID to the allocated memory buffer. The order\r\n        // parameters are written to memory in **reverse order** as memory\r\n        // operations write 32-bytes at a time and we want to use a packed\r\n        // encoding. This means, for example, that after writing the value of\r\n        // `owner` to bytes `20:52`, writing the `orderDigest` to bytes `0:32`\r\n        // will **overwrite** bytes `20:32`. This is desirable as addresses are\r\n        // only 20 bytes and `20:32` should be `0`s:\r\n        //\r\n        //        |           1111111111222222222233333333334444444444555555\r\n        //   byte | 01234567890123456789012345678901234567890123456789012345\r\n        // -------+---------------------------------------------------------\r\n        //  field | [.........orderDigest..........][......owner.......][vT]\r\n        // -------+---------------------------------------------------------\r\n        // mstore |                         [000000000000000000000000000.vT]\r\n        //        |                     [00000000000.......owner.......]\r\n        //        | [.........orderDigest..........]\r\n        //\r\n        // Additionally, since Solidity `bytes memory` are length prefixed,\r\n        // 32 needs to be added to all the offsets.\r\n        //\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            mstore(add(orderUid, 56), validTo)\r\n            mstore(add(orderUid, 52), owner)\r\n            mstore(add(orderUid, 32), orderDigest)\r\n        }\r\n    }\r\n\r\n    /// @dev Extracts specific order information from the standardized unique\r\n    /// order id of the protocol.\r\n    ///\r\n    /// @param orderUid The unique identifier used to represent an order in\r\n    /// the protocol. This uid is the packed concatenation of the order digest,\r\n    /// the validTo order parameter and the address of the user who created the\r\n    /// order. It is used by the user to interface with the contract directly,\r\n    /// and not by calls that are triggered by the solvers.\r\n    /// @return orderDigest The EIP-712 signing digest derived from the order\r\n    /// parameters.\r\n    /// @return owner The address of the user who owns this order.\r\n    /// @return validTo The epoch time at which the order will stop being valid.\r\n    function extractOrderUidParams(bytes calldata orderUid)\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 orderDigest,\r\n            address owner,\r\n            uint32 validTo\r\n        )\r\n    {\r\n        require(orderUid.length == UID_LENGTH, \"GPv2: invalid uid\");\r\n\r\n        // Use assembly to efficiently decode packed calldata.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            orderDigest := calldataload(orderUid.offset)\r\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\r\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\r\n        }\r\n    }\r\n}\r\n\r\n// File: IGPv2Settlement.sol\r\n\r\ninterface IGPv2Settlement {\r\n    function setPreSignature(bytes calldata orderUid, bool signed) external;\r\n}\r\n\r\n// File: IPriceChecker.sol\r\n\r\ninterface IPriceChecker {\r\n    function checkPrice(\r\n        uint256 _amountIn,\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 _minOut\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: CowAnywhere.sol\r\n\r\nenum OrderType {\r\n    BUY,\r\n    SELL\r\n}\r\n\r\ncontract CowAnywhere {\r\n    using SafeERC20 for IERC20;\r\n    using GPv2Order for GPv2Order.Data;\r\n    using GPv2Order for bytes;\r\n\r\n    event SwapRequested(\r\n        bytes32 swapID,\r\n        address user,\r\n        address receiver,\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amountIn,\r\n        address priceChecker,\r\n        uint256 nonce\r\n    );\r\n    event SwapCancelled(bytes32 swapID);\r\n    event SwapExecuted(bytes32 swapID);\r\n\r\n    mapping(address => uint256) public nonces;\r\n    mapping(bytes32 => bool) public validSwapRequests;\r\n\r\n    // Who we give allowance\r\n    address internal constant gnosisVaultRelayer =\r\n        0xC92E8bdf79f0507f65a392b0ab4667716BFE0110;\r\n    // Where we pre-sign\r\n    IGPv2Settlement internal constant settlement =\r\n        IGPv2Settlement(0x9008D19f58AAbD9eD0D60971565AA8510560ab41);\r\n    // Settlement's domain separator, used to hash order IDs\r\n    bytes32 internal constant domainSeparator =\r\n        0xc078f884a2676e1345748b1feace7b0abee5d00ecadb6e574dcdd109a63e8943;\r\n\r\n    // Request to asynchronously swap exact tokens for market value of other tokens through cowswap\r\n    function requestSwapExactTokensForTokens(\r\n        uint256 _amountIn,\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        address _to,\r\n        address _priceChecker // used to verify that any UIDs passed in are setting reasonable minOuts. Set to 0 if you don't want.\r\n    ) external {\r\n        _fromToken.transferFrom(msg.sender, address(this), _amountIn);\r\n\r\n        // Assumption: relayer allowance always either 0 or so high that it will never need to be set again\r\n        if (_fromToken.allowance(address(this), gnosisVaultRelayer) == 0) {\r\n            _fromToken.safeApprove(gnosisVaultRelayer, type(uint256).max);\r\n        }\r\n\r\n        uint256 _nonce = nonces[msg.sender];\r\n        nonces[msg.sender] += 1;\r\n\r\n        bytes32 _swapID = keccak256(\r\n            abi.encode(\r\n                msg.sender,\r\n                _to,\r\n                _fromToken,\r\n                _toToken,\r\n                _amountIn,\r\n                _priceChecker,\r\n                _nonce\r\n            )\r\n        );\r\n\r\n        validSwapRequests[_swapID] = true;\r\n\r\n        emit SwapRequested(\r\n            _swapID,\r\n            msg.sender,\r\n            _to,\r\n            _fromToken,\r\n            _toToken,\r\n            _amountIn,\r\n            _priceChecker,\r\n            _nonce\r\n        );\r\n    }\r\n\r\n    function cancelSwap(\r\n        uint256 _amountIn,\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        address _to,\r\n        address _priceChecker,\r\n        uint256 _nonce\r\n    ) external {\r\n        bytes32 _swapID = keccak256(\r\n            abi.encode(\r\n                msg.sender,\r\n                _to,\r\n                _fromToken,\r\n                _toToken,\r\n                _amountIn,\r\n                _priceChecker,\r\n                _nonce\r\n            )\r\n        );\r\n        require(validSwapRequests[_swapID], \"!no_swap_request\");\r\n        validSwapRequests[_swapID] = false;\r\n\r\n        _fromToken.safeTransfer(msg.sender, _amountIn);\r\n\r\n        emit SwapCancelled(_swapID);\r\n    }\r\n\r\n    // Called by a bot who has generated a UID via the API\r\n    function signOrderUid(\r\n        bytes calldata _orderUid,\r\n        GPv2Order.Data calldata _order,\r\n        address _user,\r\n        address _priceChecker,\r\n        uint256 _nonce\r\n    ) external {\r\n        bytes32 _orderDigestFromOrderDetails = _order.hash(domainSeparator);\r\n        (bytes32 _orderDigestFromUid, address _owner, ) = _orderUid\r\n            .extractOrderUidParams();\r\n\r\n        require(address(this) == _owner, \"owner!=cow_anywhere\");\r\n\r\n        require(\r\n            _orderDigestFromOrderDetails == _orderDigestFromUid,\r\n            \"!digest_match\"\r\n        );\r\n\r\n        bytes32 _swapID = keccak256(\r\n            abi.encode(\r\n                _user,\r\n                _order.receiver,\r\n                _order.sellToken,\r\n                _order.buyToken,\r\n                _order.sellAmount + _order.feeAmount, // do we need to worry about fee manipulation?\r\n                _priceChecker,\r\n                _nonce\r\n            )\r\n        );\r\n\r\n        require(validSwapRequests[_swapID], \"!no_swap_request\");\r\n        validSwapRequests[_swapID] = false;\r\n\r\n        if (_priceChecker != address(0)) {\r\n            require(\r\n                IPriceChecker(_priceChecker).checkPrice(\r\n                    _order.sellAmount,\r\n                    address(_order.sellToken),\r\n                    address(_order.buyToken),\r\n                    _order.buyAmount\r\n                ),\r\n                \"invalid_min_out\"\r\n            );\r\n        }\r\n\r\n        settlement.setPreSignature(_orderUid, true);\r\n    }\r\n\r\n    address internal constant STRATEGIST_MULTISIG = 0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7;\r\n\r\n    function execute(\r\n        address payable to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns (bool success, bytes memory result)\r\n    {\r\n        require(msg.sender == STRATEGIST_MULTISIG);\r\n        (success, result) = to.call{value: value}(data);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"}],\"name\":\"SwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceChecker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SwapRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceChecker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceChecker\",\"type\":\"address\"}],\"name\":\"requestSwapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_orderUid\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"partiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sellTokenBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyTokenBalance\",\"type\":\"bytes32\"}],\"internalType\":\"struct GPv2Order.Data\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceChecker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"signOrderUid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validSwapRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CowAnywhere","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://603d786d1b3b2822fd213a11efa337e3954f7e3accc77b1c8e27266fa781d12d"}]}