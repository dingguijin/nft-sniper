{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n⏁⊑⟒ ⟒⏃⍀⏁⊑⌰⟟⋏☌⌇ ⊑⏃⎐⟒ ⏃ ⌿⍀⟟⋔⏃⏁⟟⎐⟒ ⟟⋏☊⎍⏚⏃⏁⟟⍜⋏ ⋔⟒⏁⊑⍜⎅, ⏚⎍⏁ ⏁⊑⟟⌇ ⍙⟟⌰⌰ ⊑⏃⎐⟒ ⏁⍜ ⎅⍜.\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.9;\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    //function _msgSender() internal view virtual returns (address payable) {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n   \r\n}\r\n\r\n\r\ncontract IncubationChamber is Context, Ownable {\r\n   \r\n    uint256 public lockperiod;\r\n    uint256 public lpLockTimestamp;\r\n    uint256 public lpUnlockTimestamp;\r\n    bool public lplocked;\r\n\r\n    constructor() {\r\n    }\r\n   \r\n\r\n    function getIncubationTimeRemaining() public view returns (uint256) {\r\n        return lpUnlockTimestamp - lpLockTimestamp;\r\n    }\r\n\r\n    function Incubatetokens(uint256 time) public onlyOwner() {\r\n        require(lplocked != true, \"lock: error\");\r\n        lpLockTimestamp = block.timestamp;\r\n        lpUnlockTimestamp = lpLockTimestamp + time;\r\n        lockperiod = block.timestamp + time;  \r\n        lplocked = true;\r\n    }\r\n     \r\n    function withdrawEggs(IERC20 lpaddress) public onlyOwner() {\r\n       require(block.timestamp >= lockperiod, \"Tokens are being incubated\");\r\n       lpaddress.transfer(_msgSender(), lpaddress.balanceOf(address(this)));\r\n       lplocked = false;\r\n    }\r\n\r\n    // to rescue ETH sent by accident\r\n    function  clearStuckBalance() public onlyOwner() {\r\n        payable(_msgSender()).transfer(address(this).balance);\r\n    }\r\n   \r\n    receive() external payable {}\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Incubatetokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncubationTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockperiod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lplocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpaddress\",\"type\":\"address\"}],\"name\":\"withdrawEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IncubationChamber","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8315c8ed25fa23872e87f6f5dee3d348fa1112ced52ff00704cb14ec2d920b8e"}]}