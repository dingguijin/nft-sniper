{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.2\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.2\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.2\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.2\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/Initializable.sol@v3.4.1\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/PerpetualTokensFarm.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract PerpetualTokensFarm is OwnableUpgradeable, ReentrancyGuardUpgradeable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Enums\r\n    enum EarlyWithdrawPenalty {\r\n        NO_PENALTY,\r\n        BURN_REWARDS,\r\n        REDISTRIBUTE_REWARDS\r\n    }\r\n\r\n    // Info of each user.\r\n    struct StakeInfo {\r\n        // How many tokens the user has provided.\r\n        uint256 amount;\r\n        // Reward debt.\r\n        uint256 rewardDebt;\r\n        // Time when user deposited.\r\n        uint256 depositTime;\r\n        // Time when user withdraw\r\n        uint256 withdrawTime;\r\n        // Address of user\r\n        address addressOfUser;\r\n        // Id of epoch\r\n        uint256 epochId;\r\n        // If stake is paid\r\n        bool paid;\r\n    }\r\n\r\n    // ***** EPOCH INDEPENDENT PARAMETERS ******//\r\n\r\n    // Address of ERC20 token contract.\r\n    IERC20 public tokenStaked;\r\n    // Address of the ERC20 Token contract.\r\n    IERC20 public erc20;\r\n    // Fee collector address\r\n    address payable public feeCollector;\r\n    // Total fee collected\r\n    uint256 public totalFeeCollectedETH;\r\n    // Total fee collected in tokens\r\n    uint256 public totalFeeCollectedTokens;\r\n    // Address of farm instance\r\n    address public farmImplementation;\r\n    // Number of epochs\r\n    uint256 public epochId;\r\n    // Info of each user that stakes ERC20 tokens\r\n    mapping(address => StakeInfo[]) public stakeInfo;\r\n\r\n    // ***** EPOCH DEPENDING PARAMETERS ******//\r\n\r\n    // Last time number that ERC20s distribution occurs for every epoch\r\n    mapping(uint256 => uint256) public lastRewardTime;\r\n    // Accumulated ERC20s per share, times 1e18 for every epoch\r\n    mapping(uint256 => uint256) public accERC20PerShare;\r\n    // Total tokens deposited in the farm for every epoch\r\n    mapping(uint256 => uint256) public totalDeposits;\r\n    // If contractor allows early withdraw on stakes for every epoch\r\n    mapping(uint256 => bool) public isEarlyWithdrawAllowed;\r\n    // Minimal period of time to stake for every epoch\r\n    mapping(uint256 => uint256) public minTimeToStake;\r\n    // ERC20 tokens rewarded per second for every epoch\r\n    mapping(uint256 => uint256) public rewardPerSecond;\r\n    // Total rewards added to farm for every epoch\r\n    mapping(uint256 => uint256) public totalFundedRewards;\r\n    // Total current rewards for every epoch\r\n    mapping(uint256 => uint256) public totalRewards;\r\n    // The time when farming starts for every epoch\r\n    mapping(uint256 => uint256) public startTime;\r\n    // The time when farming ends for every epoch\r\n    mapping(uint256 => uint256) public endTime;\r\n    // Early withdraw penalty for every epoch\r\n    mapping(uint256 => EarlyWithdrawPenalty) public penalty;\r\n    // Stake fee percent for every epoch\r\n    mapping(uint256 => uint256) public stakeFeePercent;\r\n    // Reward fee percent for every epoch\r\n    mapping(uint256 => uint256) public rewardFeePercent;\r\n    // Flat fee amount to deposit for every epoch\r\n    mapping(uint256 => uint256) public flatFeeAmountDeposit;\r\n    // Flat fee amount to withdraw for every epoch\r\n    mapping(uint256 => uint256) public flatFeeAmountWithdraw;\r\n    // Fee option for every epoch\r\n    mapping(uint256 => bool) public isFlatFeeAllowed;\r\n    // Total tokens burned for every epoch\r\n    mapping(uint256 => uint256) public totalTokensBurned;\r\n    // Paid out amounts for every epoch\r\n    mapping(uint256 => uint256) public paidOut;\r\n    // Mapping of every participants array of every epoch\r\n    mapping(uint256 => address[]) public participants;\r\n    // Number of active users per epoch\r\n    mapping(uint256 => uint256) public noOfUsers;\r\n    // Mapping of every users spot in array in every epoch\r\n    mapping(uint256 => mapping(address => uint256)) public id;\r\n    // Number of stakes for user in epoch\r\n    mapping(address => mapping(uint256 => uint256)) public noOfStakesInEpoch;\r\n    // When first deposit was made for that epoch\r\n    mapping(uint256 => uint256) public firstDepositAt;\r\n    // Is farm fully initialised\r\n    bool public init;\r\n    // Total tokens currently staked for user per epoch\r\n    mapping(address => mapping(uint256 => uint256)) public totalActiveStakeAmount;\r\n\r\n    // Events\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 indexed stakeId,\r\n        uint256 indexed amount\r\n    );\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 indexed stakeId,\r\n        uint256 indexed stakedAmount,\r\n        uint256 rewardAmount,\r\n        uint256 epochId\r\n    );\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed stakeId,\r\n        uint256 indexed amount,\r\n        uint256 epochId\r\n    );\r\n    event EarlyWithdrawPenaltySet(EarlyWithdrawPenalty indexed penalty);\r\n    event MinTimeToStakeSet(uint256 indexed minTimeToStake);\r\n    event IsEarlyWithdrawAllowedSet(bool indexed allowed);\r\n    event StakeFeePercentSet(uint256 indexed stakeFeePercent);\r\n    event RewardFeePercentSet(uint256 indexed rewardFeePercent);\r\n    event FlatFeeAmountDepositSet(uint256 indexed flatFeeAmount);\r\n    event FlatFeeAmountWithdrawSet(uint256 indexed flatFeeAmount);\r\n    event IsFlatFeeAllowedSet(bool indexed allowed);\r\n    event FeeCollectorSet(address payable indexed feeCollector);\r\n\r\n    // Modifiers\r\n    modifier validateStakeByStakeId(address _user, uint256 stakeId) {\r\n        require(stakeId < stakeInfo[_user].length, \"Stake does not exist\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice function sets initial state of contract\r\n     *\r\n     * @param _erc20 - address of reward token\r\n     * @param _rewardPerSecond - number of reward per second\r\n     * @param _startTime - beginning of farm\r\n     * @param _minTimeToStake - how much time needs to pass before staking\r\n     * @param _isEarlyWithdrawAllowed - is early withdraw allowed or not\r\n     * @param _penalty - ENUM(what type of penalty)\r\n     * @param _tokenStaked - address of token which is staked\r\n     * @param _stakeFeePercent - fee percent for staking\r\n     * @param _rewardFeePercent - fee percent for reward distribution\r\n     * @param _flatFeeAmountDeposit - flat fee amount to deposit\r\n     * @param _flatFeeAmountWithdraw - flat fee amount to withdraw\r\n     * @param _isFlatFeeAllowed - is flat fee  allowed or not\r\n     */\r\n    function initialize(\r\n        address _erc20,\r\n        uint256 _rewardPerSecond,\r\n        uint256 _startTime,\r\n        uint256 _minTimeToStake,\r\n        bool _isEarlyWithdrawAllowed,\r\n        uint256 _penalty,\r\n        address _tokenStaked,\r\n        uint256 _stakeFeePercent,\r\n        uint256 _rewardFeePercent,\r\n        uint256 _flatFeeAmountDeposit,\r\n        uint256 _flatFeeAmountWithdraw,\r\n        address payable _feeCollector,\r\n        bool _isFlatFeeAllowed\r\n    )\r\n        external\r\n        initializer\r\n    {\r\n        // Upgrading ownership\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n\r\n        // Requires for correct initialization\r\n        require(_erc20 != address(0x0), \"Wrong token address.\");\r\n        require(_rewardPerSecond > 0, \"Rewards per second must be > 0.\");\r\n        require(\r\n            _startTime >= block.timestamp,\r\n            \"Start time can not be in the past.\"\r\n        );\r\n        require(_stakeFeePercent < 100, \"Stake fee must be < 100.\");\r\n        require(_rewardFeePercent < 100, \"Reward fee must be < 100.\");\r\n        require(\r\n            _feeCollector != address(0x0),\r\n            \"Wrong fee collector address.\"\r\n        );\r\n\r\n        // Initialization of contract\r\n        epochId = 0;\r\n        erc20 = IERC20(_erc20);\r\n        rewardPerSecond[epochId] = _rewardPerSecond;\r\n        startTime[epochId] = _startTime;\r\n        endTime[epochId] = _startTime;\r\n        minTimeToStake[epochId] = _minTimeToStake;\r\n        isEarlyWithdrawAllowed[epochId] = _isEarlyWithdrawAllowed;\r\n        stakeFeePercent[epochId] = _stakeFeePercent;\r\n        rewardFeePercent[epochId] = _rewardFeePercent;\r\n        flatFeeAmountDeposit[epochId] = _flatFeeAmountDeposit;\r\n        flatFeeAmountWithdraw[epochId] = _flatFeeAmountWithdraw;\r\n        feeCollector = _feeCollector;\r\n        isFlatFeeAllowed[epochId] = _isFlatFeeAllowed;\r\n\r\n        _setEarlyWithdrawPenalty(_penalty);\r\n        _addPool(IERC20(_tokenStaked));\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting the rest of params\r\n     *\r\n     * @param implementation - address of farm implementation\r\n     */\r\n    function setImplementation(\r\n        address implementation\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(!init, \"Implementation was already set\");\r\n        require(\r\n            implementation != address(0x0),\r\n            \"Farm implementation can not be 0x0 address\"\r\n        );\r\n\r\n        farmImplementation = implementation;\r\n        init = true;\r\n    }\r\n\r\n    // ********************* INTERNAL FUNCTIONS ********************* //\r\n\r\n    /**\r\n     * @notice function is adding a new ERC20 token to the pool\r\n     *\r\n     * @param _tokenStaked - address of token staked\r\n     */\r\n    function _addPool(\r\n        IERC20 _tokenStaked\r\n    )\r\n        internal\r\n    {\r\n        require(\r\n            address(_tokenStaked) != address(0x0),\r\n            \"Must input valid address.\"\r\n        );\r\n        require(\r\n            address(tokenStaked) == address(0x0),\r\n            \"Pool can be set only once.\"\r\n        );\r\n\r\n        uint256 _lastRewardTime = block.timestamp > startTime[epochId]\r\n            ? block.timestamp\r\n            : startTime[epochId];\r\n\r\n        tokenStaked = _tokenStaked;\r\n        lastRewardTime[epochId] = _lastRewardTime;\r\n        accERC20PerShare[epochId] = 0;\r\n        totalDeposits[epochId] = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting early withdrawal penalty, if applicable\r\n     *\r\n     * @param _penalty - number of penalty\r\n     */\r\n    function _setEarlyWithdrawPenalty(\r\n        uint256 _penalty\r\n    )\r\n        internal\r\n    {\r\n        penalty[epochId] = EarlyWithdrawPenalty(_penalty);\r\n        emit EarlyWithdrawPenaltySet(penalty[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is adding participant from farm\r\n     *\r\n     * @param user - address of user\r\n     *\r\n     * @return boolean - if adding is successful or not\r\n     */\r\n    function _addParticipant(\r\n        address user\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        if(totalActiveStakeAmount[msg.sender][epochId] > 0){\r\n            return false;\r\n        }\r\n\r\n        id[epochId][user] = noOfUsers[epochId];\r\n        noOfUsers[epochId]++;\r\n        participants[epochId].push(user);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice function is removing participant from farm\r\n     *\r\n     * @param user - address of user\r\n     * @param amount - how many is user withdrawing\r\n     * @param _epochId - id of epoch where stake occurred\r\n     *\r\n     * @return boolean - if removal is successful or not\r\n     */\r\n    function _removeParticipant(\r\n        address user,\r\n        uint256 amount,\r\n        uint256 _epochId\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        uint256 totalAmount;\r\n        if(noOfUsers[_epochId] == 1){\r\n            if(amount == totalActiveStakeAmount[user][epochId]){\r\n                delete id[_epochId][user];\r\n                participants[_epochId].pop();\r\n                noOfUsers[_epochId]--;\r\n\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            if(amount == totalActiveStakeAmount[user][epochId]){\r\n                uint256 deletedUserId = id[_epochId][user];\r\n                address lastUserInParticipantsArray = participants[_epochId][noOfUsers[_epochId] - 1];\r\n                participants[_epochId][deletedUserId] = lastUserInParticipantsArray;\r\n                id[_epochId][lastUserInParticipantsArray] = deletedUserId;\r\n\r\n                delete id[_epochId][user];\r\n                participants[_epochId].pop();\r\n                noOfUsers[_epochId]--;\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice function is transferring money to farm,\r\n     * and supporting deflationary token\r\n     *\r\n     * @param _amount - amount that is funded\r\n     * @param tokenAddress - address of token\r\n     */\r\n    function safeTransferFromAndGetBalance(\r\n        uint256 _amount,\r\n        address tokenAddress\r\n    )\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 beforeBalance = token.balanceOf(address(this));\r\n        token.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        uint256 afterBalance = token.balanceOf(address(this));\r\n\r\n        return afterBalance.sub(beforeBalance);\r\n    }\r\n\r\n\r\n    // ********************* FUNDING FUNCTIONS ********************* //\r\n\r\n    /**\r\n     * @notice function is funding the farm, increase the end time\r\n     *\r\n     * @param _amount - how many tokens is funded\r\n     */\r\n    function fund(\r\n        uint256 _amount\r\n    )\r\n        external\r\n    {\r\n        uint256 fundAmount = safeTransferFromAndGetBalance(\r\n            _amount,\r\n            address(erc20)\r\n        );\r\n\r\n        totalFundedRewards[epochId] = totalFundedRewards[epochId].add(fundAmount);\r\n        _fundInternal(fundAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice function is internally funding the farm,\r\n     * by adding farmed rewards by user to the end\r\n     *\r\n     * @param _amount - how many tokens is funded\r\n     */\r\n    function _fundInternal(\r\n        uint256 _amount\r\n    )\r\n        internal\r\n    {\r\n        require(\r\n            block.timestamp < endTime[epochId],\r\n            \"fund: too late, the farm is closed\"\r\n        );\r\n        require(\r\n            _amount > rewardPerSecond[epochId],\r\n            \"Amount needs to be bigger than reward per second\"\r\n        );\r\n        require(_amount > 0, \"Amount must be greater than 0.\");\r\n        // Compute new end time\r\n        endTime[epochId] += _amount.div(rewardPerSecond[epochId]);\r\n        // Increase farm total rewards\r\n        totalRewards[epochId] = totalRewards[epochId].add(_amount);\r\n    }\r\n\r\n    // ********************* PERPETUAL FUNCTIONS ********************* //\r\n\r\n    /**\r\n     * @notice function is resetting the farm\r\n     *\r\n     * @param _startTime - start time of farm\r\n     * @param _rewardPerSecond - rewards per second\r\n     * @param _totalBudget - new fund amount\r\n     * @param _minTimeToStake - minimal time to stake\r\n     * @param _isEarlyWithdrawAllowed - is early withdraw allowed\r\n     * @param _stakeFeePercent - amount of % to take as stake fee\r\n     * @param _rewardFeePercent - amount of % to take as reward fee\r\n     * @param _flatFeeAmountDeposit - amount to take as flat fee\r\n     * @param _flatFeeAmountWithdraw - amount to take as flat fee\r\n     * @param _isFlatFeeAllowed - if flat fee is allowed or not\r\n     * @param _penalty - type of penalty\r\n     */\r\n    function startNewEpoch(\r\n        uint256 _startTime,\r\n        uint256 _rewardPerSecond,\r\n        uint256 _totalBudget,\r\n        uint256 _minTimeToStake,\r\n        bool _isEarlyWithdrawAllowed,\r\n        uint256 _stakeFeePercent,\r\n        uint256 _rewardFeePercent,\r\n        uint256 _flatFeeAmountDeposit,\r\n        uint256 _flatFeeAmountWithdraw,\r\n        bool _isFlatFeeAllowed,\r\n        uint256 _penalty\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            endTime[epochId] < block.timestamp ,\r\n            \"Previous epoch is not finished yet\"\r\n        );\r\n        require(\r\n            _startTime > block.timestamp,\r\n            \"Start time can not be in the past\"\r\n        );\r\n        require(\r\n            _rewardPerSecond > 0,\r\n            \"_rewardPerSecond can not be below 0\"\r\n        );\r\n        require(\r\n            _totalBudget > 0,\r\n            \"_totalBudget can not be below 0\"\r\n        );\r\n        require(\r\n            _minTimeToStake >= 0,\r\n            \"_minTimeToStake can not be below 0\"\r\n        );\r\n        require(\r\n            _stakeFeePercent >= 0 && _stakeFeePercent <= 100,\r\n            \"_stakeFeePercent can not be below 0\"\r\n        );\r\n        require(\r\n            _rewardFeePercent >= 0 && _rewardFeePercent <= 100,\r\n            \"_rewardFeePercent can not be below 0\"\r\n        );\r\n        require(\r\n            _flatFeeAmountDeposit >= 0,\r\n            \"_flatFeeAmountDeposit can not be below 0\"\r\n        );\r\n        require(\r\n            _flatFeeAmountWithdraw >= 0,\r\n            \"_flatFeeAmountWithdraw can not be below 0\"\r\n        );\r\n\r\n        // New epoch is starting\r\n        epochId++;\r\n\r\n        // From add pool resetting parameters\r\n        uint256 _lastRewardTime = block.timestamp > _startTime\r\n            ? block.timestamp\r\n            : _startTime;\r\n\r\n        lastRewardTime[epochId] = _lastRewardTime;\r\n        accERC20PerShare[epochId] = 0;\r\n        totalDeposits[epochId] = 0;\r\n\r\n        // From initialize resetting parameters\r\n        startTime[epochId] = _startTime;\r\n        endTime[epochId] = startTime[epochId];\r\n        rewardPerSecond[epochId] = _rewardPerSecond;\r\n        totalRewards[epochId] = 0;\r\n        totalFundedRewards[epochId] = 0;\r\n        minTimeToStake[epochId] = _minTimeToStake;\r\n        isEarlyWithdrawAllowed[epochId] = _isEarlyWithdrawAllowed;\r\n        stakeFeePercent[epochId] = _stakeFeePercent;\r\n        rewardFeePercent[epochId] = _rewardFeePercent;\r\n        flatFeeAmountDeposit[epochId] = _flatFeeAmountDeposit;\r\n        flatFeeAmountWithdraw[epochId] = _flatFeeAmountWithdraw;\r\n         isFlatFeeAllowed[epochId] = _isFlatFeeAllowed;\r\n        _setEarlyWithdrawPenalty(_penalty);\r\n\r\n        // Funding the farm\r\n        uint256 fundAmount = safeTransferFromAndGetBalance(_totalBudget, address(erc20));\r\n\r\n        // Initialize last two epoch parameters\r\n        totalFundedRewards[epochId] = totalFundedRewards[epochId].add(fundAmount);\r\n        _fundInternal(fundAmount);\r\n    }\r\n\r\n    // ********************* SETTER FUNCTIONS ********************* //\r\n\r\n    /**\r\n     * @notice function is setting new minimum time to stake value\r\n     *\r\n     * @param _minTimeToStake - min time to stake\r\n     */\r\n    function setMinTimeToStake(\r\n        uint256 _minTimeToStake\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _minTimeToStake >= 0,\r\n            \"_minTimeToStake can not be below 0\"\r\n        );\r\n\r\n        minTimeToStake[epochId] = _minTimeToStake;\r\n        emit MinTimeToStakeSet(minTimeToStake[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting new state of early withdraw\r\n     *\r\n     * @param _isEarlyWithdrawAllowed - is early withdraw allowed or not\r\n     */\r\n    function setIsEarlyWithdrawAllowed(\r\n        bool _isEarlyWithdrawAllowed\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        isEarlyWithdrawAllowed[epochId] = _isEarlyWithdrawAllowed;\r\n        emit IsEarlyWithdrawAllowedSet(isEarlyWithdrawAllowed[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting new stake fee percent value\r\n     *\r\n     * @param _stakeFeePercent - stake fee percent\r\n     */\r\n    function setStakeFeePercent(\r\n        uint256 _stakeFeePercent\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _stakeFeePercent >= 0 && _stakeFeePercent <= 100,\r\n            \"_stakeFeePercent can not be below 0\"\r\n        );\r\n\r\n        stakeFeePercent[epochId] = _stakeFeePercent;\r\n        emit StakeFeePercentSet(stakeFeePercent[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting new reward fee percent value\r\n     *\r\n     * @param _rewardFeePercent - reward fee percent\r\n     */\r\n    function setRewardFeePercent(\r\n        uint256 _rewardFeePercent\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _rewardFeePercent >= 0 && _rewardFeePercent <= 100,\r\n            \"_rewardFeePercent can not be below 0\"\r\n        );\r\n\r\n        rewardFeePercent[epochId] = _rewardFeePercent;\r\n        emit RewardFeePercentSet(rewardFeePercent[epochId]);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting new flat fee amount\r\n     *\r\n     * @param _flatFeeAmount - flat fee amount\r\n     */\r\n    function setFlatFeeAmountDeposit(\r\n        uint256 _flatFeeAmount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _flatFeeAmount >= 0,\r\n            \"_flatFeeAmount can not be below 0\"\r\n        );\r\n\r\n        flatFeeAmountDeposit[epochId] = _flatFeeAmount;\r\n        emit FlatFeeAmountDepositSet(flatFeeAmountDeposit[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting new flat fee amount\r\n     *\r\n     * @param _flatFeeAmount - flat fee amount\r\n     */\r\n    function setFlatFeeAmountWithdraw(\r\n        uint256 _flatFeeAmount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _flatFeeAmount >= 0,\r\n            \"_flatFeeAmount can not be below 0\"\r\n        );\r\n\r\n        flatFeeAmountWithdraw[epochId] = _flatFeeAmount;\r\n        emit FlatFeeAmountWithdrawSet(flatFeeAmountWithdraw[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting flat fee allowed\r\n     *\r\n     * @param _isFlatFeeAllowed - is flat fee allowed or not\r\n     */\r\n    function setIsFlatFeeAllowed(\r\n        bool _isFlatFeeAllowed\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        isFlatFeeAllowed[epochId] = _isFlatFeeAllowed;\r\n        emit IsFlatFeeAllowedSet(isFlatFeeAllowed[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting feeCollector on new address\r\n     *\r\n     * @param _feeCollector - address of newFeeCollector\r\n     */\r\n    function setFeeCollector(\r\n        address payable _feeCollector\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        feeCollector = _feeCollector;\r\n        emit FeeCollectorSet(feeCollector);\r\n    }\r\n\r\n    // ********************* GETTER FUNCTIONS ********************* //\r\n\r\n    /**\r\n     * @notice function is getting number to see deposited ERC20 token for a user.\r\n     *\r\n     * @param _user - address of user\r\n     * @param stakeId - id of user stake\r\n     *\r\n     * @return deposited ERC20 token for a user\r\n     */\r\n    function deposited(\r\n        address _user,\r\n        uint256 stakeId\r\n    )\r\n        public\r\n        view\r\n        validateStakeByStakeId(_user, stakeId)\r\n        returns (uint256)\r\n    {\r\n        StakeInfo memory  stake = stakeInfo[_user][stakeId];\r\n        return stake.amount;\r\n    }\r\n\r\n    /**\r\n     * @notice function is getting number to see pending ERC20s for a user.\r\n     *\r\n     * @dev pending reward =\r\n     * (user.amount * pool.accERC20PerShare) - user.rewardDebt\r\n     *\r\n     * @param _user - address of user\r\n     * @param stakeId - id of user stake\r\n     *\r\n     * @return pending ERC20s for a user.\r\n     */\r\n    function pending(\r\n        address _user,\r\n        uint256 stakeId\r\n    )\r\n        public\r\n        view\r\n        validateStakeByStakeId(_user, stakeId)\r\n        returns (uint256)\r\n    {\r\n        StakeInfo memory stake = stakeInfo[_user][stakeId];\r\n        uint256 _epochId = stake.epochId;\r\n\r\n        if (stake.amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 _accERC20PerShare = accERC20PerShare[_epochId];\r\n        uint256 tokenSupply = totalDeposits[_epochId];\r\n\r\n        if (block.timestamp > lastRewardTime[_epochId] && tokenSupply != 0) {\r\n            uint256 lastTime = block.timestamp < endTime[_epochId]\r\n                ? block.timestamp\r\n                : endTime[_epochId];\r\n            uint256 timeToCompare = lastRewardTime[_epochId] < endTime[_epochId]\r\n                ? lastRewardTime[_epochId]\r\n                : endTime[_epochId];\r\n            uint256 nrOfSeconds = lastTime.sub(timeToCompare);\r\n            uint256 erc20Reward = nrOfSeconds.mul(rewardPerSecond[_epochId]);\r\n            _accERC20PerShare = _accERC20PerShare.add(\r\n                erc20Reward.mul(1e18).div(tokenSupply)\r\n            );\r\n        }\r\n\r\n        return\r\n            stake.amount.mul(_accERC20PerShare).div(1e18).sub(stake.rewardDebt);\r\n    }\r\n\r\n    /**\r\n     * @notice function is getting number to see deposit timestamp for a user.\r\n     *\r\n     * @param _user - address of user\r\n     * @param stakeId - id of user stake\r\n     *\r\n     * @return time when user deposited specific stake\r\n     */\r\n    function depositTimestamp(\r\n        address _user,\r\n        uint256 stakeId\r\n    )\r\n        public\r\n        view\r\n        validateStakeByStakeId(_user, stakeId)\r\n        returns (uint256)\r\n    {\r\n        StakeInfo memory stake = stakeInfo[_user][stakeId];\r\n        return stake.depositTime;\r\n    }\r\n\r\n    /**\r\n     * @notice function is getting number to see withdraw timestamp for a user.\r\n     *\r\n     * @param _user - address of user\r\n     * @param stakeId - id of user stake\r\n     *\r\n     * @return time when user withdraw specific stake\r\n     */\r\n    function withdrawTimestamp(\r\n        address _user,\r\n        uint256 stakeId\r\n    )\r\n        public\r\n        view\r\n        validateStakeByStakeId(_user, stakeId)\r\n        returns (uint256)\r\n    {\r\n        StakeInfo memory stake = stakeInfo[_user][stakeId];\r\n        return stake.withdrawTime;\r\n    }\r\n\r\n    /**\r\n     * @notice function is getting number for total rewards the farm has yet to pay out.\r\n     *\r\n     * @return how many total reward the farm has yet to pay out.\r\n     */\r\n    function totalPending()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (block.timestamp <= startTime[epochId]) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 lastTime = block.timestamp < endTime[epochId]\r\n            ? block.timestamp\r\n            : endTime[epochId];\r\n        return rewardPerSecond[epochId]\r\n            .mul(lastTime - firstDepositAt[epochId])\r\n            .sub(paidOut[epochId]);\r\n    }\r\n\r\n    /**\r\n     * @notice function is getting number of stakes user has\r\n     *\r\n     * @param user - address of user\r\n     *\r\n     * @return how many times has user staked tokens\r\n     */\r\n    function getNumberOfUserStakes(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stakeInfo[user].length;\r\n    }\r\n\r\n    /**\r\n     * @notice function is getting user pending amounts, stakes and deposit time\r\n     *\r\n     * @param user - address of user\r\n     *\r\n     * @return array of deposits,pendingAmounts and depositTime\r\n     */\r\n    function getUserStakesAndPendingAmounts(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        uint256 numberOfStakes = stakeInfo[user].length;\r\n\r\n        uint256[] memory deposits = new uint256[](numberOfStakes);\r\n        uint256[] memory pendingAmounts = new uint256[](numberOfStakes);\r\n        uint256[] memory depositTime = new uint256[](numberOfStakes);\r\n\r\n        for(uint256 i = 0; i < numberOfStakes; i++){\r\n            deposits[i] = deposited(user, i);\r\n            pendingAmounts[i] = pending(user, i);\r\n            depositTime[i] = depositTimestamp(user, i);\r\n        }\r\n\r\n        return (deposits, pendingAmounts, depositTime);\r\n    }\r\n\r\n    /**\r\n     * @notice function is getting total rewards locked/unlocked\r\n     *\r\n     * @return totalRewardsUnlocked\r\n     * @return totalRewardsLocked\r\n     */\r\n    function getTotalRewardsLockedUnlocked()\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 totalRewardsLocked;\r\n        uint256 totalRewardsUnlocked;\r\n\r\n        if (block.timestamp <= startTime[epochId]) {\r\n            totalRewardsUnlocked = 0;\r\n            totalRewardsLocked = totalFundedRewards[epochId];\r\n        } else {\r\n            uint256 lastTime = block.timestamp < endTime[epochId]\r\n                ? block.timestamp\r\n                : endTime[epochId];\r\n            totalRewardsUnlocked = rewardPerSecond[epochId].mul(lastTime - startTime[epochId]);\r\n            totalRewardsLocked = totalRewards[epochId] - totalRewardsUnlocked;\r\n        }\r\n\r\n        return (totalRewardsUnlocked, totalRewardsLocked);\r\n    }\r\n\r\n    // ********************* DEPOSIT FUNCTIONS ********************* //\r\n\r\n    /**\r\n     * @notice function is updating reward,\r\n     * variables of the given pool to be up-to-date.\r\n     *\r\n     * @param _epochId - id of epoch where stake occurred\r\n     */\r\n    function updatePool(\r\n        uint256 _epochId\r\n    )\r\n        public\r\n    {\r\n        uint256 lastTime = block.timestamp < endTime[_epochId]\r\n            ? block.timestamp\r\n            : endTime[_epochId];\r\n\r\n        if (lastTime <= lastRewardTime[_epochId]) {\r\n            return;\r\n        }\r\n\r\n        uint256 tokenSupply = totalDeposits[_epochId];\r\n\r\n        if (tokenSupply == 0) {\r\n            lastRewardTime[_epochId] = lastTime;\r\n            return;\r\n        }\r\n\r\n        uint256 nrOfSeconds = lastTime.sub(lastRewardTime[_epochId]);\r\n        uint256 erc20Reward = nrOfSeconds.mul(rewardPerSecond[_epochId]);\r\n\r\n        accERC20PerShare[_epochId] = accERC20PerShare[_epochId].add(\r\n            erc20Reward.mul(1e18).div(tokenSupply)\r\n        );\r\n        lastRewardTime[_epochId] = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice function is depositing ERC20 tokens to Farm for ERC20 allocation.\r\n     *\r\n     * @param _amount - how many tokens user is depositing\r\n     */\r\n    function deposit(\r\n        uint256 _amount\r\n    )\r\n        external\r\n        nonReentrant\r\n        payable\r\n    {\r\n        require(\r\n            block.timestamp >= startTime[epochId],\r\n            \"Deposit: epoch didn't started yet\"\r\n        );\r\n        require(\r\n            block.timestamp < endTime[epochId],\r\n            \"Deposit: too late, this epoch is finished\"\r\n        );\r\n        require(\r\n            _amount > 0,\r\n            \"Amount needs to be bigger than 0\"\r\n        );\r\n\r\n        StakeInfo memory stake;\r\n\r\n        // Update pool\r\n        updatePool(epochId);\r\n\r\n        uint256 stakedAmount = safeTransferFromAndGetBalance(\r\n            _amount,\r\n            address(tokenStaked)\r\n        );\r\n\r\n        if (isFlatFeeAllowed[epochId]) {\r\n            // Collect flat fee\r\n            require(\r\n                msg.value == flatFeeAmountDeposit[epochId],\r\n                \"Payable amount is less than fee amount.\"\r\n            );\r\n\r\n            totalFeeCollectedETH = totalFeeCollectedETH.add(msg.value);\r\n        } else if (stakeFeePercent[epochId] > 0) {\r\n            // Handle this case only if flat fee is not allowed, and stakeFeePercent > 0\r\n            // Compute the fee\r\n            uint256 feeAmount = stakedAmount.mul(stakeFeePercent[epochId]).div(100);\r\n            // Compute stake amount\r\n            stakedAmount = stakedAmount.sub(feeAmount);\r\n            totalFeeCollectedTokens = totalFeeCollectedTokens.add(feeAmount);\r\n        }\r\n\r\n        // Increase total deposits\r\n        totalDeposits[epochId] = totalDeposits[epochId].add(stakedAmount);\r\n        // Update user accounting\r\n        stake.amount = stakedAmount;\r\n        stake.rewardDebt = stake.amount.mul(accERC20PerShare[epochId]).div(1e18);\r\n        stake.depositTime = block.timestamp;\r\n        stake.addressOfUser = address(msg.sender);\r\n        stake.withdrawTime = 0;\r\n        stake.epochId = epochId;\r\n\r\n        // Increase a number of stake in one epoch\r\n        noOfStakesInEpoch[msg.sender][epochId]++;\r\n\r\n        _addParticipant(address(msg.sender));\r\n\r\n        totalActiveStakeAmount[msg.sender][epochId] = totalActiveStakeAmount[msg.sender][epochId].add(stakedAmount);\r\n\r\n        // Compute stake id\r\n        uint256 stakeId = stakeInfo[msg.sender].length;\r\n        // Push new stake to array of stakes for user\r\n        stakeInfo[msg.sender].push(stake);\r\n        // Emit deposit event\r\n        emit Deposit(msg.sender, stakeId, stakedAmount);\r\n\r\n        if(firstDepositAt[epochId] == 0){\r\n            firstDepositAt[epochId] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    // ********************* WITHDRAW FUNCTIONS ********************* //\r\n\r\n    /**\r\n     * @notice function is withdrawing with caring about rewards\r\n     *\r\n     * @param _amount - how many tokens wants to be withdrawn\r\n     * @param stakeId - Id of user stake\r\n     */\r\n    function withdraw(\r\n        uint256 _amount,\r\n        uint256 stakeId\r\n    )\r\n        external\r\n        nonReentrant\r\n        payable\r\n        validateStakeByStakeId(msg.sender, stakeId)\r\n    {\r\n        bool minimalTimeStakeRespected;\r\n        StakeInfo storage stake = stakeInfo[msg.sender][stakeId];\r\n        uint256 _epochId = stake.epochId;\r\n\r\n        require(\r\n            stake.amount >= _amount,\r\n            \"withdraw: can't withdraw more than deposit\"\r\n        );\r\n\r\n        updatePool(_epochId);\r\n\r\n        minimalTimeStakeRespected =\r\n            stake.depositTime.add(minTimeToStake[_epochId]) <= block.timestamp;\r\n\r\n        // if early withdraw is not allowed, user can't withdraw funds before\r\n        if (!isEarlyWithdrawAllowed[_epochId]) {\r\n            // Check if user has respected minimal time to stake, require it.\r\n            require(\r\n                minimalTimeStakeRespected,\r\n                \"User can not withdraw funds yet.\"\r\n            );\r\n        }\r\n\r\n        // Compute pending rewards amount of user rewards\r\n        uint256 pendingAmount = pending(msg.sender, stakeId);\r\n\r\n        // Penalties in case user didn't stake enough time\r\n        if (pendingAmount > 0) {\r\n            if (\r\n                penalty[_epochId] == EarlyWithdrawPenalty.BURN_REWARDS &&\r\n                !minimalTimeStakeRespected\r\n            ) {\r\n                // Burn to address (1)\r\n                totalTokensBurned[_epochId] = totalTokensBurned[_epochId].add(pendingAmount);\r\n                _erc20Transfer(address(1), pendingAmount, _epochId);\r\n                // Update totalRewards\r\n                totalRewards[_epochId] = totalRewards[_epochId].sub(pendingAmount);\r\n            } else if (\r\n                penalty[_epochId] == EarlyWithdrawPenalty.REDISTRIBUTE_REWARDS &&\r\n                !minimalTimeStakeRespected\r\n            ) {\r\n                if (block.timestamp >= endTime[_epochId]) {\r\n                    // Burn rewards because farm can not be funded anymore since it ended\r\n                    _erc20Transfer(address(1), pendingAmount, _epochId);\r\n                    totalTokensBurned[_epochId] = totalTokensBurned[_epochId].add(pendingAmount);\r\n                    // Update totalRewards\r\n                    totalRewards[_epochId] = totalRewards[_epochId].sub(pendingAmount);\r\n                } else {\r\n                    // Re-fund the farm\r\n                    _fundInternal(pendingAmount);\r\n                }\r\n            } else {\r\n                // In case either there's no penalty\r\n                _erc20Transfer(msg.sender, pendingAmount, _epochId);\r\n                // Update totalRewards\r\n                totalRewards[_epochId] = totalRewards[_epochId].sub(pendingAmount);\r\n            }\r\n        }\r\n\r\n        _removeParticipant(address(msg.sender), _amount, _epochId);\r\n\r\n        totalActiveStakeAmount[msg.sender][epochId] = totalActiveStakeAmount[msg.sender][epochId].sub(_amount);\r\n\r\n        stake.withdrawTime = block.timestamp;\r\n        stake.amount = stake.amount.sub(_amount);\r\n        stake.rewardDebt = stake.amount.mul(accERC20PerShare[_epochId]).div(1e18);\r\n\r\n        tokenStaked.safeTransfer(address(msg.sender), _amount);\r\n        totalDeposits[_epochId] = totalDeposits[_epochId].sub(_amount);\r\n\r\n        // Emit Withdraw event\r\n        emit Withdraw(msg.sender, stakeId, _amount, pendingAmount, stake.epochId);\r\n    }\r\n\r\n    /**\r\n     * @notice function is withdrawing without caring about rewards. EMERGENCY ONLY.\r\n     *\r\n     * @param stakeId - Id of user stake\r\n     */\r\n    function emergencyWithdraw(\r\n        uint256 stakeId\r\n    )\r\n        external\r\n        nonReentrant\r\n        validateStakeByStakeId(msg.sender, stakeId)\r\n    {\r\n        StakeInfo storage stake = stakeInfo[msg.sender][stakeId];\r\n        uint256 _epochId = stake.epochId;\r\n\r\n        // if early withdraw is not allowed, user can't withdraw funds before\r\n        if (!isEarlyWithdrawAllowed[_epochId]) {\r\n            bool minimalTimeStakeRespected = stake.depositTime.add(\r\n                minTimeToStake[epochId]\r\n            ) <= block.timestamp;\r\n            // Check if user has respected minimal time to stake, require it.\r\n            require(\r\n                minimalTimeStakeRespected,\r\n                \"User can not withdraw funds yet.\"\r\n            );\r\n        }\r\n\r\n        tokenStaked.safeTransfer(address(msg.sender), stake.amount);\r\n        totalDeposits[_epochId] = totalDeposits[_epochId].sub(stake.amount);\r\n\r\n        _removeParticipant(address(msg.sender), stake.amount, _epochId);\r\n        totalActiveStakeAmount[msg.sender][epochId] = totalActiveStakeAmount[msg.sender][epochId].sub(stake.amount);\r\n        stake.withdrawTime = block.timestamp;\r\n\r\n        emit EmergencyWithdraw(msg.sender, stakeId, stake.amount, stake.epochId);\r\n\r\n        stake.amount = 0;\r\n        stake.rewardDebt = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice function is withdrawing fee collected in ERC value\r\n     */\r\n    function withdrawCollectedFeesERC()\r\n        external\r\n        onlyOwner\r\n    {\r\n        erc20.transfer(feeCollector, totalFeeCollectedTokens);\r\n        totalFeeCollectedTokens = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice function is withdrawing fee collected in ETH value\r\n     */\r\n    function withdrawCollectedFeesETH()\r\n        external\r\n        onlyOwner\r\n    {\r\n        (bool sent, ) = payable(feeCollector).call{value: totalFeeCollectedETH}(\"\");\r\n        require(sent, \"Failed to end flat fee\");\r\n        totalFeeCollectedETH = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice function is withdrawing tokens if stuck\r\n     *\r\n     * @param _erc20 - address of token address\r\n     * @param _amount - number of how many tokens\r\n     * @param _beneficiary - address of user that collects tokens deposited by mistake\r\n     */\r\n    function withdrawTokensIfStuck(\r\n        address _erc20,\r\n        uint256 _amount,\r\n        address _beneficiary\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20 token = IERC20(_erc20);\r\n        require(tokenStaked != token, \"User tokens can not be pulled\");\r\n        require(\r\n            _beneficiary != address(0x0),\r\n            \"_beneficiary can not be 0x0 address\"\r\n        );\r\n\r\n        token.safeTransfer(_beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice function is transferring ERC20,\r\n     * and update the required ERC20 to payout all rewards\r\n     *\r\n     * @param _to - transfer on this address\r\n     * @param _amount - number of how many tokens\r\n     */\r\n    function _erc20Transfer(\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _epochId\r\n    )\r\n        internal\r\n    {\r\n        if (isFlatFeeAllowed[_epochId]) {\r\n            // Collect flat fee\r\n            require(\r\n                msg.value == flatFeeAmountWithdraw[_epochId],\r\n                \"Payable amount is less than fee amount.\"\r\n            );\r\n            // Increase amount of fees collected\r\n            totalFeeCollectedETH = totalFeeCollectedETH.add(msg.value);\r\n            // send reward\r\n            erc20.transfer(_to, _amount);\r\n            paidOut[_epochId] += _amount;\r\n        } else if (rewardFeePercent[_epochId] > 0) {\r\n            // Collect reward fee\r\n            uint256 feeAmount = _amount.mul(rewardFeePercent[_epochId]).div(100);\r\n            uint256 rewardAmount = _amount.sub(feeAmount);\r\n\r\n            // Increase amount of fees collected\r\n            totalFeeCollectedTokens = totalFeeCollectedTokens.add(feeAmount);\r\n\r\n            // send reward\r\n            erc20.transfer(_to, rewardAmount);\r\n            paidOut[_epochId] += _amount;\r\n        } else {\r\n            erc20.transfer(_to, _amount);\r\n            paidOut[_epochId] += _amount;\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum PerpetualTokensFarm.EarlyWithdrawPenalty\",\"name\":\"penalty\",\"type\":\"uint8\"}],\"name\":\"EarlyWithdrawPenaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"flatFeeAmount\",\"type\":\"uint256\"}],\"name\":\"FlatFeeAmountDepositSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"flatFeeAmount\",\"type\":\"uint256\"}],\"name\":\"FlatFeeAmountWithdrawSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"IsEarlyWithdrawAllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"IsFlatFeeAllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minTimeToStake\",\"type\":\"uint256\"}],\"name\":\"MinTimeToStakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardFeePercent\",\"type\":\"uint256\"}],\"name\":\"RewardFeePercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeFeePercent\",\"type\":\"uint256\"}],\"name\":\"StakeFeePercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accERC20PerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"depositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"firstDepositAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flatFeeAmountDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flatFeeAmountWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumberOfUserStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardsLockedUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakesAndPendingAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeToStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEarlyWithdrawAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenStaked\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmountDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmountWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isFlatFeeAllowed\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isEarlyWithdrawAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFlatFeeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minTimeToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noOfStakesInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noOfUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"penalty\",\"outputs\":[{\"internalType\":\"enum PerpetualTokensFarm.EarlyWithdrawPenalty\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmount\",\"type\":\"uint256\"}],\"name\":\"setFlatFeeAmountDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmount\",\"type\":\"uint256\"}],\"name\":\"setFlatFeeAmountWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEarlyWithdrawAllowed\",\"type\":\"bool\"}],\"name\":\"setIsEarlyWithdrawAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isFlatFeeAllowed\",\"type\":\"bool\"}],\"name\":\"setIsFlatFeeAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTimeToStake\",\"type\":\"uint256\"}],\"name\":\"setMinTimeToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardFeePercent\",\"type\":\"uint256\"}],\"name\":\"setRewardFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeFeePercent\",\"type\":\"uint256\"}],\"name\":\"setStakeFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressOfUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeToStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEarlyWithdrawAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmountDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmountWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFlatFeeAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"}],\"name\":\"startNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStaked\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalActiveStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollectedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollectedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalFundedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalTokensBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollectedFeesERC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollectedFeesETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdrawTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokensIfStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PerpetualTokensFarm","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://db696b21e67520e07ef88f82cc7c5a19e9e0a35b6f21b5f9fdf0d61cc817876a"}]}