{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ncontract SafelySend {\r\n\r\n  struct Transaction {\r\n    uint sentTime;\r\n    address from;\r\n    address to;\r\n    uint amount;\r\n    uint unlockTime;\r\n    bool done;\r\n  }\r\n\r\n  uint public nextId;\r\n  address public owner;\r\n  uint public accumTips;\r\n  mapping(uint => Transaction) public transactionMap; //all transactions mapped to their uniqueId\r\n  mapping(address => uint[]) public fromMap; //all transactionIds for which the \"from\" address is this address\r\n  mapping(address => uint[]) public toMap; //all transactionIds for which the \"to\" address is this address\r\n\r\n  constructor() {\r\n    nextId = 0;\r\n    accumTips = 0;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function sendTransaction(address aToAddress, uint aDelayTime, uint aTip) public payable {\r\n    uint transactionVal = msg.value - aTip;\r\n    uint activeTime = block.timestamp + aDelayTime;\r\n    require(transactionVal <= msg.value, \"overflow error\");\r\n    require(activeTime >= block.timestamp, \"overflow error\");\r\n\r\n    Transaction memory newTx = Transaction(block.timestamp, msg.sender, aToAddress, transactionVal, activeTime, false);\r\n    transactionMap[nextId] = newTx;\r\n    fromMap[msg.sender].push(nextId);\r\n    toMap[aToAddress].push(nextId);\r\n\r\n    accumTips = accumTips + aTip;\r\n    nextId = nextId + 1;\r\n  }\r\n\r\n  function withdrawTransaction(uint aTransactionId) public {\r\n    Transaction memory thisTx = transactionMap[aTransactionId];\r\n    require(thisTx.done == false, \"This transaction has already been completed.\");\r\n    require(block.timestamp >= thisTx.unlockTime, \"Transaction can't be withdrawn yet\");\r\n    require(msg.sender == thisTx.to, \"Only receiver can withdraw this transaction\");\r\n\r\n    transactionMap[aTransactionId].done = true;\r\n    payable(thisTx.to).transfer(thisTx.amount);\r\n  }\r\n\r\n  function checkTransactionsWaitingReceiver(address aToAddress) public view returns (uint[] memory) {\r\n    return toMap[aToAddress];\r\n  }\r\n\r\n  function checkTransactionsWaitingSender(address aFromAddress) public view returns (uint[] memory) {\r\n    return fromMap[aFromAddress];\r\n  }\r\n\r\n  function abortTransaction(uint aTransactionId) public {\r\n    Transaction memory thisTx = transactionMap[aTransactionId];\r\n    require(msg.sender == thisTx.from, \"Only the sender can revert a transaction.\");\r\n    require(thisTx.done == false, \"Transaction already processed.\");\r\n\r\n    transactionMap[aTransactionId].done = true;\r\n    payable(thisTx.from).transfer(thisTx.amount);\r\n  }\r\n\r\n  function withdrawTips() public {\r\n    require(msg.sender == owner, \"Only owner can withdraw tips\");\r\n    uint temp = accumTips;\r\n    accumTips = 0;\r\n    payable(owner).transfer(temp);\r\n  }\r\n\r\n  function transferOwner(address newOwner) public {\r\n    require(msg.sender == owner, \"only owner can change owner\");\r\n    require(newOwner != address(0), \"don't set owner to null address\");\r\n    owner = newOwner;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aTransactionId\",\"type\":\"uint256\"}],\"name\":\"abortTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumTips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aToAddress\",\"type\":\"address\"}],\"name\":\"checkTransactionsWaitingReceiver\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aFromAddress\",\"type\":\"address\"}],\"name\":\"checkTransactionsWaitingSender\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fromMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aToAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aDelayTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aTip\",\"type\":\"uint256\"}],\"name\":\"sendTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactionMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sentTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aTransactionId\",\"type\":\"uint256\"}],\"name\":\"withdrawTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SafelySend","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dbffa13369ff3cafeca1a51d1327190586482452e5b5bedbabf8704faffb2425"}]}