{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface Erc20 {\r\n\r\n    function approve(address, uint256) external returns (bool);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\ninterface CErc20 {\r\n    function underlying() external returns (address);\r\n\r\n    function mint(uint256) external returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function redeem(uint) external returns (uint);\r\n\r\n    function redeemUnderlying(uint) external returns (uint);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n\r\ninterface CEth {\r\n    function mint() external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function redeem(uint) external returns (uint);\r\n\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    \r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n\r\ncontract CompoundConnector {\r\n\r\n    address owner = 0x793457308e1Cb6436AeEeFA09B19822AFB50Bcd1;\r\n\r\n    event Log(string, uint256);\r\n\r\n    function supplyEthToCompound(address payable _cEtherContract)\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        // Create a reference to the corresponding cToken contract\r\n        CEth cToken = CEth(_cEtherContract);\r\n\r\n        // Amount of current exchange rate from cToken to underlying\r\n        uint256 exchangeRateMantissa = cToken.exchangeRateCurrent();\r\n        emit Log(\"Exchange Rate (scaled up by 1e18): \", exchangeRateMantissa);\r\n\r\n        // Amount added to you supply balance this block\r\n        uint256 supplyRateMantissa = cToken.supplyRatePerBlock();\r\n        emit Log(\"Supply Rate: (scaled up by 1e18)\", supplyRateMantissa);\r\n\r\n        emit Log(\"Ether Value Recieved: \", msg.value);\r\n        cToken.mint{ value: msg.value, gas: 250000 }();\r\n\r\n        uint balance = cToken.balanceOf(address(this));\r\n        emit Log(\"cEther Balance: \", balance);\r\n\r\n        bool transfer = cToken.transfer(owner, balance);\r\n\r\n        return transfer;\r\n    }\r\n\r\n    function supplyErc20ToCompound(\r\n        address _erc20Contract,\r\n        address _cErc20Contract,\r\n        uint256 _numTokensToSupply\r\n    ) public returns (bool) {\r\n        // Create a reference to the underlying asset contract, like DAI.\r\n        Erc20 underlying = Erc20(_erc20Contract);\r\n\r\n        // Create a reference to the corresponding cToken contract, like cDAI\r\n        CErc20 cToken = CErc20(_cErc20Contract);\r\n\r\n        // Amount of current exchange rate from cToken to underlying\r\n        uint256 exchangeRateMantissa = cToken.exchangeRateCurrent();\r\n        emit Log(\"Exchange Rate (scaled up): \", exchangeRateMantissa);\r\n\r\n        // Amount added to you supply balance this block\r\n        uint256 supplyRateMantissa = cToken.supplyRatePerBlock();\r\n        emit Log(\"Supply Rate: (scaled up)\", supplyRateMantissa);\r\n\r\n        // Approve transfer on the ERC20 contract\r\n        underlying.approve(_cErc20Contract, _numTokensToSupply);\r\n\r\n        // Mint cTokens\r\n        uint mintResult = cToken.mint(_numTokensToSupply);\r\n\r\n        require(mintResult == 0);\r\n\r\n        uint balance = cToken.balanceOf(address(this));\r\n        \r\n        bool transfer = cToken.transfer(owner, balance);\r\n\r\n        return transfer;\r\n    }\r\n\r\n    function redeemCErc20Tokens(\r\n        uint256 amount,\r\n        bool redeemType,\r\n        address _cErc20Contract\r\n    ) public returns (bool) {\r\n        // Create a reference to the corresponding cToken contract, like cDAI\r\n        CErc20 cToken = CErc20(_cErc20Contract);\r\n\r\n        // `amount` is scaled up, see decimal table here:\r\n        // https://compound.finance/docs#protocol-math\r\n\r\n        uint256 redeemResult;\r\n\r\n        if (redeemType == true) {\r\n            // Retrieve your asset based on a cToken amount\r\n            redeemResult = cToken.redeem(amount);\r\n        } else {\r\n            // Retrieve your asset based on an amount of the asset\r\n            redeemResult = cToken.redeemUnderlying(amount);\r\n        }\r\n\r\n        // Error codes are listed here:\r\n        // https://compound.finance/docs/ctokens#error-codes\r\n        emit Log(\"If this is not 0, there was an error\", redeemResult);\r\n\r\n        address _erc20Contract = cToken.underlying();\r\n\r\n        Erc20 underlying = Erc20(_erc20Contract);\r\n\r\n        uint balance = underlying.balanceOf(address(this));\r\n\r\n        bool transfer = underlying.transfer(owner, balance);\r\n\r\n        return transfer;\r\n    }\r\n\r\n    function redeemCEth(\r\n        uint256 amount,\r\n        bool redeemType,\r\n        address _cEtherContract\r\n    ) public returns (bool) {\r\n        // Create a reference to the corresponding cToken contract\r\n        CEth cToken = CEth(_cEtherContract);\r\n\r\n        // `amount` is scaled up by 1e18 to avoid decimals\r\n\r\n        emit Log(\"ETH Balance Before: \", address(this).balance);\r\n\r\n        uint256 redeemResult;\r\n\r\n        if (redeemType == true) {\r\n            // Retrieve your asset based on a cToken amount\r\n            redeemResult = cToken.redeem(amount);\r\n        } else {\r\n            // Retrieve your asset based on an amount of the asset\r\n            redeemResult = cToken.redeemUnderlying(amount);\r\n        }\r\n\r\n        // Error codes are listed here:\r\n        // https://compound.finance/docs/ctokens#error-codes\r\n        emit Log(\"If this is not 0, there was an error\", redeemResult);\r\n\r\n        emit Log(\"ETH Balance After: \", address(this).balance);\r\n\r\n        payable(owner).transfer(address(this).balance);\r\n\r\n        emit Log(\"ETH Balance After Transfer: \", address(this).balance);\r\n\r\n        return true;\r\n    }\r\n\r\n    // This is needed to receive ETH when calling `redeemCEth`\r\n    receive() external payable {}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemType\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_cErc20Contract\",\"type\":\"address\"}],\"name\":\"redeemCErc20Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemType\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_cEtherContract\",\"type\":\"address\"}],\"name\":\"redeemCEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cErc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numTokensToSupply\",\"type\":\"uint256\"}],\"name\":\"supplyErc20ToCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_cEtherContract\",\"type\":\"address\"}],\"name\":\"supplyEthToCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CompoundConnector","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a9297fc8f0a8e5e056fcb342164789ac35626178ec957c5e9dff4b92bfe793c8"}]}