{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/mstable/IMasset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MassetStructs.sol\\\";\\n\\ninterface IMasset is IERC20, MassetStructs {\\n    // Mint\\n    function mint(\\n        address _input,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external returns (uint256 mintOutput);\\n\\n    function mintMulti(\\n        address[] calldata _inputs,\\n        uint256[] calldata _inputQuantities,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external returns (uint256 mintOutput);\\n\\n    function getMintOutput(address _input, uint256 _inputQuantity) external view returns (uint256 mintOutput);\\n\\n    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\\n        external\\n        view\\n        returns (uint256 mintOutput);\\n\\n    // Swaps\\n    function swap(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external returns (uint256 swapOutput);\\n\\n    function getSwapOutput(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity\\n    ) external view returns (uint256 swapOutput);\\n\\n    // Redemption\\n    function redeem(\\n        address _output,\\n        uint256 _mAssetQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external returns (uint256 outputQuantity);\\n\\n    function redeemMasset(\\n        uint256 _mAssetQuantity,\\n        uint256[] calldata _minOutputQuantities,\\n        address _recipient\\n    ) external returns (uint256[] memory outputQuantities);\\n\\n    function redeemExactBassets(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities,\\n        uint256 _maxMassetQuantity,\\n        address _recipient\\n    ) external returns (uint256 mAssetRedeemed);\\n\\n    function getRedeemOutput(address _output, uint256 _mAssetQuantity) external view returns (uint256 bAssetOutput);\\n\\n    function getRedeemExactBassetsOutput(address[] calldata _outputs, uint256[] calldata _outputQuantities)\\n        external\\n        view\\n        returns (uint256 mAssetAmount);\\n\\n    // Views\\n    function getBasket() external view returns (bool, bool);\\n\\n    function getBasset(address _token) external view returns (BassetPersonal memory personal, BassetData memory data);\\n\\n    function getBassets() external view returns (BassetPersonal[] memory personal, BassetData[] memory data);\\n\\n    function bAssetIndexes(address) external view returns (uint8);\\n\\n    // SavingsManager\\n    function collectInterest() external returns (uint256 swapFeesGained, uint256 newSupply);\\n\\n    function collectPlatformInterest() external returns (uint256 mintAmount, uint256 newSupply);\\n\\n    // Admin\\n    function setCacheSize(uint256 _cacheSize) external;\\n\\n    function upgradeForgeValidator(address _newForgeValidator) external;\\n\\n    function setFees(uint256 _swapFee, uint256 _redemptionFee) external;\\n\\n    function setTransferFeesFlag(address _bAsset, bool _flag) external;\\n\\n    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/mstable/ISavingsContractV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISavingsContractV2 {\\n    function redeemCredits(uint256 _amount) external returns (uint256 underlyingReturned); // V2\\n\\n    function exchangeRate() external view returns (uint256); // V1 & V2\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/mstable/MassetStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface MassetStructs {\\n    struct BassetPersonal {\\n        // Address of the bAsset\\n        address addr;\\n        // Address of the bAsset\\n        address integrator;\\n        // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\\n        bool hasTxFee; // takes a byte in storage\\n        // Status of the bAsset\\n        BassetStatus status;\\n    }\\n\\n    struct BassetData {\\n        // 1 Basset * ratio / ratioScale == x Masset (relative value)\\n        // If ratio == 10e8 then 1 bAsset = 10 mAssets\\n        // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\\n        uint128 ratio;\\n        // Amount of the Basset that is held in Collateral\\n        uint128 vaultBalance;\\n    }\\n\\n    // Status of the Basset - has it broken its peg?\\n    enum BassetStatus {\\n        Default,\\n        Normal,\\n        BrokenBelowPeg,\\n        BrokenAbovePeg,\\n        Blacklisted,\\n        Liquidating,\\n        Liquidated,\\n        Failed\\n    }\\n\\n    struct BasketState {\\n        bool undergoingRecol;\\n        bool failed;\\n    }\\n\\n    struct InvariantConfig {\\n        uint256 a;\\n        WeightLimits limits;\\n    }\\n\\n    struct WeightLimits {\\n        uint128 min;\\n        uint128 max;\\n    }\\n\\n    struct AmpData {\\n        uint64 initialA;\\n        uint64 targetA;\\n        uint64 rampStartTime;\\n        uint64 rampEndTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/ITokenOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/tokens/MStableTokenOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/external/mstable/IMasset.sol\\\";\\nimport \\\"../../interfaces/external/mstable/ISavingsContractV2.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\n\\n/**\\n * @title mStable's tokens oracle\\n */\\ncontract MStableTokenOracle is ITokenOracle {\\n    uint256 private constant RATIO_DENOMINATOR = 1e8;\\n\\n    IMasset public constant MUSD = IMasset(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\\n    ISavingsContractV2 public constant IMUSD = ISavingsContractV2(0x30647a72Dc82d7Fbb1123EA74716aB8A317Eac19);\\n    IMasset public constant MBTC = IMasset(0x945Facb997494CC2570096c74b5F66A3507330a1);\\n    ISavingsContractV2 public constant IMBTC = ISavingsContractV2(0x17d8CBB6Bce8cEE970a4027d1198F6700A7a6c24);\\n\\n    /// @inheritdoc ITokenOracle\\n    function getPriceInUsd(address mAsset_) external view returns (uint256) {\\n        if (mAsset_ == address(MUSD)) return _mAssetUsdPrice(MUSD);\\n        if (mAsset_ == address(IMUSD)) return (IMUSD.exchangeRate() * _mAssetUsdPrice(MUSD)) / 1e18;\\n        if (mAsset_ == address(MBTC)) return _mAssetUsdPrice(MBTC);\\n        if (mAsset_ == address(IMBTC)) return (IMBTC.exchangeRate() * _mAssetUsdPrice(MBTC)) / 1e18;\\n\\n        revert(\\\"invalid-token\\\");\\n    }\\n\\n    /// @notice Return mAsset price\\n    /// @dev Uses the `MasterOracle` (msg.sender) to get underlying assets' prices\\n    function _mAssetUsdPrice(IMasset mAsset_) private view returns (uint256) {\\n        (IMasset.BassetPersonal[] memory bAssetPersonal, IMasset.BassetData[] memory bAssetData) = mAsset_.getBassets();\\n        uint256 _totalValue;\\n        uint256 _len = bAssetData.length;\\n        for (uint256 i; i < _len; i++) {\\n            _totalValue +=\\n                ((uint256(bAssetData[i].vaultBalance * bAssetData[i].ratio)) / RATIO_DENOMINATOR) *\\n                // Note: `msg.sender` is the `MasterOracle` contract\\n                IOracle(msg.sender).getPriceInUsd(bAssetPersonal[i].addr);\\n        }\\n\\n        return _totalValue / mAsset_.totalSupply();\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"IMBTC\",\"outputs\":[{\"internalType\":\"contract ISavingsContractV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMUSD\",\"outputs\":[{\"internalType\":\"contract ISavingsContractV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MBTC\",\"outputs\":[{\"internalType\":\"contract IMasset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUSD\",\"outputs\":[{\"internalType\":\"contract IMasset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mAsset_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MStableTokenOracle","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"5000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}