{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n/**\r\n * @title TheAmericanStake\r\n * @author DevAmerican\r\n * @dev Used for Ethereum projects compatible with OpenSea\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\npragma solidity ^0.8.0;\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC721 is IERC165 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function approve(address to, uint256 tokenId) external;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.4;\r\ninterface ITheAmericansNFT {\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\npragma solidity ^0.8.4;\r\ninterface ITheAmericansToken {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.4;\r\ncontract TheAmericans_Stake is Ownable {\r\n    uint256 public constant REWARD_RATE = 20;\r\n    address public constant AMERICANS_ADDRESS = 0x4Ef3D9EaB34783995bc394d569845585aC805Ef8;\r\n    address public constant AMERICANS_TOKEN = 0x993b8C5a26AC8a9abaBabbf10a0e3c4009b16D73;\r\n\r\n    mapping(uint256 => uint256) internal americanTimeStaked;\r\n    mapping(uint256 => address) internal americanStaker;\r\n    mapping(address => uint256[]) internal stakerToAmericans;\r\n\r\n    ITheAmericansNFT private constant _AmericanContract = ITheAmericansNFT(AMERICANS_ADDRESS);\r\n    ITheAmericansToken private constant _AmericanToken = ITheAmericansToken(AMERICANS_TOKEN);\r\n\r\n    bool public live = true;\r\n\r\n    modifier stakingEnabled {\r\n        require(live, \"NOT_LIVE\");\r\n        _;\r\n    }\r\n\r\n    function getStakedAmericans(address staker) public view returns (uint256[] memory) {\r\n        return stakerToAmericans[staker];\r\n    }\r\n    \r\n    function getStakedAmount(address staker) public view returns (uint256) {\r\n        return stakerToAmericans[staker].length;\r\n    }\r\n\r\n    function getStaker(uint256 tokenId) public view returns (address) {\r\n        return americanStaker[tokenId];\r\n    }\r\n\r\n    function getAllRewards(address staker) public view returns (uint256) {\r\n        uint256 totalRewards = 0;\r\n        uint256[] memory americansTokens = stakerToAmericans[staker];\r\n        for (uint256 i = 0; i < americansTokens.length; i++) {\r\n            totalRewards += getReward(americansTokens[i]);\r\n        }\r\n        return totalRewards;\r\n    }\r\n\r\n    function stakeAmericanById(uint256[] calldata tokenIds) external stakingEnabled {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 id = tokenIds[i];\r\n            require(_AmericanContract.ownerOf(id) == msg.sender, \"NO_SWEEPING\");\r\n            _AmericanContract.transferFrom(msg.sender, address(this), id);\r\n            stakerToAmericans[msg.sender].push(id);\r\n            americanTimeStaked[id] = block.timestamp;\r\n            americanStaker[id] = msg.sender;\r\n        }\r\n    }\r\n\r\n    function unstakeAmericanByIds(uint256[] calldata tokenIds) external {\r\n        uint256 totalRewards = 0;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 id = tokenIds[i];\r\n            require(americanStaker[id] == msg.sender, \"NEEDS_TO_BE_OWNER\");\r\n            _AmericanContract.transferFrom(address(this), msg.sender, id);\r\n            totalRewards += getReward(id);\r\n            removeTokenIdFromArray(stakerToAmericans[msg.sender], id);\r\n            americanStaker[id] = address(0);\r\n        }\r\n        uint256 remaining = _AmericanToken.balanceOf(address(this));\r\n        uint256 reward = totalRewards > remaining ? remaining : totalRewards;\r\n        if(reward > 0){\r\n            _AmericanToken.transfer(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function unstakeAll() external {\r\n        require(getStakedAmount(msg.sender) > 0, \"NONE_STAKED\");\r\n        uint256 totalRewards = 0;\r\n        for (uint256 i = stakerToAmericans[msg.sender].length; i > 0; i--) {\r\n            uint256 id = stakerToAmericans[msg.sender][i - 1];\r\n            _AmericanContract.transferFrom(address(this), msg.sender, id);\r\n            totalRewards += getReward(id);\r\n            stakerToAmericans[msg.sender].pop();\r\n            americanStaker[id] = address(0);\r\n        }\r\n        uint256 remaining = _AmericanToken.balanceOf(address(this));\r\n        uint256 reward = totalRewards > remaining ? remaining : totalRewards;\r\n        if(reward > 0){\r\n            _AmericanToken.transfer(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function claimAll() external {\r\n        uint256 totalRewards = 0;\r\n        uint256[] memory americanTokens = stakerToAmericans[msg.sender];\r\n        for (uint256 i = 0; i < americanTokens.length; i++) {\r\n            uint256 id = americanTokens[i];\r\n            totalRewards += getReward(id);\r\n            americanTimeStaked[id] = block.timestamp;\r\n        }\r\n        uint256 remaining = _AmericanToken.balanceOf(address(this));\r\n        _AmericanToken.transfer(msg.sender, totalRewards > remaining ? remaining : totalRewards);\r\n    }\r\n\r\n    function getReward(uint256 tokenId) internal view returns(uint256) {\r\n        return (block.timestamp - americanTimeStaked[tokenId]) * REWARD_RATE / 86400 * 1 ether;\r\n    }\r\n\r\n    function removeTokenIdFromArray(uint256[] storage array, uint256 tokenId) internal {\r\n        uint256 length = array.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (array[i] == tokenId) {\r\n                length--;\r\n                if (i < length) {\r\n                    array[i] = array[length];\r\n                }\r\n                array.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggle() external onlyOwner {\r\n        live = !live;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMERICANS_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMERICANS_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedAmericans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeAmericanById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeAmericanByIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TheAmericans_Stake","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://68d903f0d56120a9aeac62a71a24e63e6919a5c2f2a84143c644363b0237878d"}]}