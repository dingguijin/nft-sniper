{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/misc/deposit_repay/interfaces/IWETH.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 is IERC20Upgradeable{\r\n     /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/MarketTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface MarketTokenInterface {\r\n    function isMarketToken() external view returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n    function reserveFactorMantissa() external view returns (uint256);\r\n    function accrualBlockTimestamp() external view returns (uint256);\r\n    function borrowIndex() external view returns (uint256);\r\n    function totalBorrows() external view returns (uint256);\r\n    function totalReserves() external view returns (uint256);\r\n    function accountTokens(address account) external view returns (uint256);\r\n    function accountBorrows(address account) external view returns (uint256,uint256);\r\n    function protocolSeizeShareMantissa() external view returns (uint256);\r\n    function comptroller() external view returns (address);\r\n    function interestRateModel() external view returns (address);\r\n\r\n    function transfer(address dst, uint amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n    function borrowRatePerSecond() external view returns (uint);\r\n    function supplyRatePerSecond() external view returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function borrowBalanceStored(address account) external view returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function getCash() external view returns (uint);\r\n    function accrueInterest() external returns (uint);\r\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\r\n\r\n    function _setComptroller(address newComptroller) external returns (uint);\r\n    function _setReserveFactor(uint newReserveFactorMantissa) external  returns (uint);\r\n    function _reduceReserves(uint reduceAmount) external  returns (uint);\r\n    function _setInterestRateModel(address newInterestRateModel) external  returns (uint);\r\n\r\n\r\n\r\n    \r\n}\r\n\r\ninterface MarketTokenEtherInterface is MarketTokenInterface{\r\n\r\n    function mint() external payable;\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow() external payable;\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n    function liquidateBorrow(address borrower, address marketTokenCollateral) external payable;\r\n\r\n    function _addReserves() external payable returns (uint);\r\n\r\n}\r\n\r\ninterface MarketTokenERC20Interface is MarketTokenInterface{\r\n\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, address marketTokenCollateral) external returns (uint);\r\n    function sweepToken(address token) external ;\r\n\r\n    function _addReserves(uint addAmount) external returns (uint);\r\n\r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/ComptrollerInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ComptrollerInterface {\r\n\r\n    function isComptroller() external view returns(bool);\r\n    function oracle() external view returns(address);\r\n    function distributioner() external view returns(address);\r\n    function closeFactorMantissa() external view returns(uint);\r\n    function liquidationIncentiveMantissa() external view returns(uint);\r\n    function maxAssets() external view returns(uint);\r\n    function accountAssets(address account,uint index) external view returns(address);\r\n    function markets(address market) external view returns(bool,uint);\r\n\r\n    function pauseGuardian() external view returns(address);\r\n    function paused() external view returns(bool);\r\n    function marketMintPaused(address market) external view returns(bool);\r\n    function marketRedeemPaused(address market) external view returns(bool);\r\n    function marketBorrowPaused(address market) external view returns(bool);\r\n    function marketRepayBorrowPaused(address market) external view returns(bool);\r\n    function marketTransferPaused(address market) external view returns(bool);\r\n    function marketSeizePaused(address market) external view returns(bool);\r\n    function borrowCaps(address market) external view returns(uint);\r\n    function supplyCaps(address market) external view returns(uint);\r\n    function liquidateWhiteAddresses(uint index) external view returns(address);\r\n\r\n    function enterMarkets(address[] calldata marketTokens) external returns (uint[] memory);\r\n    function exitMarket(address marketToken) external returns (uint);\r\n\r\n    function mintAllowed(address marketToken, address minter, uint mintAmount) external returns (uint);\r\n    function mintVerify(address marketToken, address minter, uint mintAmount, uint mintTokens) external;\r\n\r\n    function redeemAllowed(address marketToken, address redeemer, uint redeemTokens) external returns (uint);\r\n    function redeemVerify(address marketToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\r\n\r\n    function borrowAllowed(address marketToken, address borrower, uint borrowAmount) external returns (uint);\r\n    function borrowVerify(address marketToken, address borrower, uint borrowAmount) external;\r\n\r\n    function repayBorrowAllowed(\r\n        address marketToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function repayBorrowVerify(\r\n        address marketToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint borrowerIndex) external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address marketTokenBorrowed,\r\n        address marketTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function liquidateBorrowVerify(\r\n        address marketTokenBorrowed,\r\n        address marketTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint seizeTokens) external;\r\n\r\n    function seizeAllowed(\r\n        address marketTokenCollateral,\r\n        address marketTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external returns (uint);\r\n    function seizeVerify(\r\n        address marketTokenCollateral,\r\n        address marketTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external;\r\n\r\n    function transferAllowed(address marketToken, address src, address dst, uint transferTokens) external returns (uint);\r\n    function transferVerify(address marketToken, address src, address dst, uint transferTokens) external;\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address marketTokenBorrowed,\r\n        address marketTokenCollateral,\r\n        uint repayAmount) external view returns (uint, uint);\r\n\r\n    function getHypotheticalAccountLiquidity(\r\n        address account,\r\n        address marketTokenModify,\r\n        uint redeemTokens,\r\n        uint borrowAmount) external view returns (uint, uint, uint);\r\n\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n    function checkMembership(address account, address marketToken) external view returns (bool) ;\r\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint) ;\r\n    function getAllMarkets() external view returns (address[] memory);\r\n    function isDeprecated(address marketToken) external view returns (bool);\r\n    function isMarketListed(address marketToken) external view returns (bool);\r\n\r\n    \r\n}\r\n\r\n\r\n// File contracts/lib/interfaces/PriceOracle.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface PriceOracle {\r\n    /**\r\n      * @notice Get the underlying price of a marketToken asset\r\n      * @param marketToken The marketToken to get the underlying price of\r\n      * @return The underlying asset price mantissa (scaled by 1e(36-decimals)).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getUnderlyingPrice(MarketTokenInterface marketToken) external view returns (uint);\r\n}\r\n\r\n\r\ninterface PriceSource {\r\n    /**\r\n     * @notice Get the price of an token asset.\r\n     * @param token The token asset to get the price of.\r\n     * @return The token asset price in USD as a mantissa (scaled by 1e8).\r\n    */\r\n    function getPrice(address token) external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/misc/deposit_repay/interfaces/uniswapv2.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/misc/deposit_repay/swap/SwapHandlerInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface SwapHandlerInterface {\r\n\r\n    function router() external returns(address);\r\n\r\n    function estimateBestOut(address tokenIn, address tokenOut, uint256 amountIn, address ignorePair) external view returns (uint256, address[] memory);\r\n\r\n\r\n    function estimateBestIn(address tokenIn, address tokenOut, uint256 amountOut, address ignorePair) external view returns (uint256, address[] memory);\r\n\r\n    function swapBestOut(\r\n        address tokenIn, \r\n        address tokenOut, \r\n        address recipient, \r\n        uint256 amountIn, \r\n        uint256 amountOutMin, \r\n        uint256 deadline,\r\n        address ignorePair\r\n    ) external returns (uint256);\r\n\r\n\r\n    function swapBestIn(\r\n        address tokenIn, \r\n        address tokenOut, \r\n        address recipient, \r\n        uint256 amountInMax, \r\n        uint256 amountOut, \r\n        uint256 deadline,\r\n        address ignorePair\r\n    ) external returns (uint256);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address recipient,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address recipient,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/misc/deposit_repay/DepositToRepayV1.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DepositToRepayV1 {\r\n\r\n    using SafeMathUpgradeable for uint;\r\n    using SafeERC20Upgradeable for IERC20;\r\n\r\n    address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    address public owner;\r\n    address payable public feeManager;\r\n    ComptrollerInterface public comptroller;\r\n    IWETH public WETH;\r\n    SwapHandlerInterface public swapHandler;\r\n\r\n    constructor(ComptrollerInterface _comptroller, IWETH _WETH, SwapHandlerInterface _swapHandler, address payable _feeManager){\r\n        owner = msg.sender;\r\n        feeManager = _feeManager;\r\n        comptroller = _comptroller;\r\n        WETH = _WETH;\r\n        swapHandler = _swapHandler;\r\n    }\r\n\r\n    function estimateInternal(\r\n        address account, \r\n        MarketTokenInterface collateralMarket, \r\n        MarketTokenInterface borrowMarket, \r\n        uint depositAmount, \r\n        uint repayAmount,\r\n        uint slippage\r\n    ) internal returns(bytes memory) {\r\n\r\n        require(depositAmount == 0 || repayAmount == 0);\r\n        address collateralUnderlying = isEtherMarket(collateralMarket) ? address(WETH) : collateralMarket.underlying();\r\n        address borrowUnderlying = isEtherMarket(borrowMarket) ? address(WETH) : borrowMarket.underlying();\r\n\r\n        uint amountInMax;\r\n        uint amountOutMin;\r\n        address[] memory path;\r\n        if(depositAmount > 0) { \r\n\r\n            if(collateralUnderlying == borrowUnderlying){\r\n                amountInMax = depositAmount;\r\n                amountOutMin = depositAmount;\r\n                repayAmount = depositAmount;\r\n            }else{\r\n                (uint _amountOutMin, address[] memory _path) = swapHandler.estimateBestOut(collateralUnderlying, borrowUnderlying, depositAmount, address(0));\r\n                amountInMax = depositAmount;\r\n                amountOutMin = _amountOutMin.mul(uint(1e18).sub(slippage)).div(1e18);\r\n                repayAmount = amountOutMin;\r\n                path = _path;\r\n            }\r\n\r\n            // Check repayAmount, make sure repayAmount less than or equal to accountBorrowAmount.\r\n            uint accountBorrowAmount = borrowMarket.borrowBalanceCurrent(account);\r\n            repayAmount = accountBorrowAmount >= repayAmount ? repayAmount : accountBorrowAmount;\r\n\r\n        }else if(repayAmount > 0) { \r\n\r\n            if(collateralUnderlying == borrowUnderlying){\r\n                repayAmount = (repayAmount == type(uint).max) ? borrowMarket.borrowBalanceCurrent(account) : repayAmount; //the max repay\r\n                amountOutMin = repayAmount;\r\n                amountInMax = repayAmount;\r\n                depositAmount = repayAmount;\r\n            }else{\r\n                repayAmount = (repayAmount == type(uint).max) ? borrowMarket.borrowBalanceCurrent(account) : repayAmount; //the max repay\r\n                (uint _amountInMax, address[] memory _path) = swapHandler.estimateBestIn(collateralUnderlying, borrowUnderlying, repayAmount, address(0));\r\n                amountOutMin = repayAmount;\r\n                amountInMax = _amountInMax.mul(uint(1e18).add(slippage)).div(1e18);\r\n                depositAmount = amountInMax;\r\n                path = _path;\r\n            }\r\n\r\n            // Check depositAmount, make sure depositAmount less than or equal to accountSupplyAmount.\r\n            uint accountSupplyAmount = collateralMarket.balanceOfUnderlying(account);\r\n            depositAmount = accountSupplyAmount >= depositAmount ? depositAmount : accountSupplyAmount;\r\n\r\n        }\r\n\r\n        return abi.encode(depositAmount,repayAmount,amountOutMin,amountInMax,path);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Using the collateral market to repay the borrow market\r\n    * @param account The user\r\n    * @param collateralMarket The collateral market\r\n    * @param borrowMarket The borrow market\r\n    * @param depositAmount The collateral amount or 0. If 0, the repayAmount must bigger than 0\r\n    * @param repayAmount The repay amount or 0. If 0, the depositAmount must bigger than 0\r\n    * @param slippage The slippage for swap\r\n    * @return (depositAmount,repayAmount,amountOutMin,amountInMax,path)\r\n    */\r\n    function estimate(\r\n        address account, \r\n        MarketTokenInterface collateralMarket, \r\n        MarketTokenInterface borrowMarket, \r\n        uint depositAmount, \r\n        uint repayAmount,\r\n        uint slippage\r\n    ) public returns(uint, uint, uint, uint, address[] memory) {\r\n\r\n        return abi.decode(estimateInternal(account, collateralMarket, borrowMarket, depositAmount, repayAmount, slippage), (uint, uint, uint, uint, address[]));\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Using the collateral market to repay the borrow market\r\n    * @param account The user\r\n    * @param collateralMarket The collateral market\r\n    * @param borrowMarket The borrow market\r\n    * @param depositAmount The collateral amount or 0. If 0, the repayAmount must bigger than 0\r\n    * @param repayAmount The repay amount or 0. If 0, the depositAmount must bigger than 0\r\n    * @param slippage The slippage for swap\r\n    */\r\n    function depositRepay(\r\n        address account, \r\n        MarketTokenInterface collateralMarket, \r\n        MarketTokenInterface borrowMarket, \r\n        uint depositAmount, \r\n        uint repayAmount,\r\n        uint slippage\r\n    ) external {\r\n        require(msg.sender == account,\"Error account\");\r\n        uint liquidity = getLiquidity();\r\n        address collateralUnderlying = isEtherMarket(collateralMarket) ? address(WETH) : collateralMarket.underlying();\r\n        address borrowUnderlying = isEtherMarket(borrowMarket) ? address(WETH) : borrowMarket.underlying();\r\n       \r\n       bool forRepayAmount = repayAmount > 0 ? true : false;\r\n\r\n        address[] memory path;\r\n        {\r\n            (uint _depositAmount, uint _repayAmount,,,address[] memory _path) = estimate(account, collateralMarket, borrowMarket, depositAmount, repayAmount,slippage);\r\n            depositAmount = _depositAmount;\r\n            repayAmount = _repayAmount;\r\n            path = _path;\r\n        }\r\n        \r\n        require(depositAmount <= getTokenMaxAmount(collateralMarket),\"DepositToRepay: Insufficient liquidity\"); // Check liquidity\r\n\r\n        //  Borrowing collateralUnderlying from WePiggy\r\n        if(isEtherMarket(collateralMarket)){\r\n           MarketTokenEtherInterface(address(collateralMarket)).borrow(depositAmount);\r\n           WETH.deposit{value:depositAmount}();\r\n        }else{\r\n           MarketTokenERC20Interface(address(collateralMarket)).borrow(depositAmount);\r\n        }\r\n\r\n        //  Calculate the repayAmount and get it by swapping\r\n        if(collateralUnderlying != borrowUnderlying){\r\n            transferInternal(path[0], payable(address(swapHandler)), depositAmount);\r\n            if(forRepayAmount){            \r\n                swapHandler.swapTokensForExactTokens(repayAmount, depositAmount, path, address(this), block.timestamp); \r\n            }else{\r\n                swapHandler.swapExactTokensForTokens(depositAmount, repayAmount, path, address(this), block.timestamp); \r\n            }\r\n        }\r\n\r\n        // RepayBorrowBehalf\r\n        if(isEtherMarket(borrowMarket)){\r\n            WETH.withdraw(repayAmount);\r\n            MarketTokenEtherInterface(address(borrowMarket)).repayBorrowBehalf{value:repayAmount}(account);\r\n        }else{\r\n            approveInternal(borrowUnderlying,address(borrowMarket),repayAmount);\r\n            MarketTokenERC20Interface(address(borrowMarket)).repayBorrowBehalf(account,repayAmount);\r\n        }\r\n\r\n        //  Get the account's pToken and redeem it.\r\n        // collateralTokenAmount = (depositAmount * 1e18 / exchangeRateStored) + 1\r\n        uint collateralTokenAmount = depositAmount.mul(1e18).div(collateralMarket.exchangeRateStored()).add(1);\r\n        collateralMarket.transferFrom(account, address(this), collateralTokenAmount);\r\n        if(isEtherMarket(collateralMarket)){\r\n            MarketTokenEtherInterface(address(collateralMarket)).redeem(collateralTokenAmount);\r\n        }else{\r\n            MarketTokenERC20Interface(address(collateralMarket)).redeem(collateralTokenAmount);\r\n        }\r\n\r\n        //  Repay the collateralUnderlying to WePiggy\r\n        uint256 borrowBalance = collateralMarket.borrowBalanceCurrent(address(this));\r\n        if(isEtherMarket(collateralMarket)){\r\n            MarketTokenEtherInterface(address(collateralMarket)).repayBorrow{value:borrowBalance}();\r\n        }else{\r\n            approveInternal(collateralUnderlying, address(collateralMarket), borrowBalance);\r\n            MarketTokenERC20Interface(address(collateralMarket)).repayBorrow(borrowBalance);\r\n        }\r\n\r\n        require(liquidity <= getLiquidity(),\"DepositToRepay: liquidity decreased\");\r\n\r\n        transferInternal(collateralUnderlying, payable(account), balanceOf(collateralUnderlying));\r\n        transferInternal(borrowUnderlying, payable(account), balanceOf(borrowUnderlying));\r\n\r\n    }\r\n\r\n    function approveInternal(address token,address spender,uint amount) internal {\r\n        IERC20 erc20 = IERC20(token);\r\n        uint allowance = erc20.allowance(address(this), spender);\r\n        if (allowance < amount) {\r\n            erc20.safeApprove(spender, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function transferInternal(address asset, address payable to, uint amount) internal{\r\n        if(amount == 0){\r\n            return;\r\n        }\r\n\r\n        if (asset == ETH) {\r\n            (bool success,) = to.call{value : amount}(\"\");\r\n            require(success == true, \"Couldn't transfer ETH\");\r\n            return;\r\n        }\r\n        IERC20(asset).safeTransfer(to, amount);\r\n    }\r\n\r\n    function getLiquidity() public view returns(uint256){\r\n        (uint err, uint256 liquidity, uint shortfall) = comptroller.getAccountLiquidity(address(this));\r\n        if (err != 0 || shortfall != 0) {\r\n            return 0;\r\n        }\r\n        return liquidity;\r\n    }\r\n\r\n    function getTokenMaxAmount(MarketTokenInterface marketToken) public view returns(uint256){\r\n        (bool isListed,) = comptroller.markets(address(marketToken));\r\n        require(isListed,\"DepositToRepay: marketToken is not surpported\");\r\n\r\n        PriceOracle oracle = PriceOracle(comptroller.oracle());\r\n        uint price = oracle.getUnderlyingPrice(marketToken); \r\n        uint liquidity = getLiquidity();\r\n\r\n        return liquidity.mul(1e18).div(price);\r\n    }\r\n\r\n    function isEtherMarket(MarketTokenInterface marketToken) public view returns(bool){\r\n        return marketToken.underlying() == ETH;\r\n    }\r\n    \r\n\r\n    function balanceOf(address asset) public view returns(uint){\r\n        if (asset == ETH) {\r\n            return address(this).balance;\r\n        }\r\n        return IERC20(asset).balanceOf(address(this));\r\n    }\r\n\r\n\r\n    function _enterMarket(address marketToken) external {\r\n        require(msg.sender == owner,\"caller is not the owner\");\r\n        if(comptroller.checkMembership(address(this), marketToken)){\r\n            return;\r\n        }\r\n        address[] memory markets = new address[](1);\r\n        markets[0] = marketToken;\r\n        uint[] memory errs = comptroller.enterMarkets(markets);\r\n        require(errs[0] == 0, \"DepositToRepay: enter market error\");\r\n    } \r\n\r\n    function _exitMarket(address marketToken) external {\r\n        require(msg.sender == owner,\"caller is not the owner\");\r\n        if(comptroller.checkMembership(address(this), marketToken)){\r\n            return;\r\n        }\r\n        uint err = comptroller.exitMarket(marketToken);\r\n        require(err == 0, \"DepositToRepay: exit market error\");\r\n    }\r\n\r\n    function _approve(address token,address spender,uint amount) external{\r\n        require(msg.sender == owner,\"caller is not the owner\");\r\n        approveInternal(token, spender, amount);\r\n    }\r\n\r\n    function _withdraw(address asset, address payable to, uint amount) external{\r\n        require(msg.sender == owner,\"caller is not the owner\");\r\n\r\n        uint balance = balanceOf(asset);\r\n        if(balance < amount){\r\n            amount = balance;\r\n        }\r\n        transferInternal(asset, to, amount);\r\n    }\r\n\r\n    function _setOwner(address _owner) external{\r\n        require(msg.sender == owner,\"caller is not the owner\");\r\n        require(_owner != address(0), \"new owner is the zero address\");\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    function _setFeeManager(address payable _feeManager) external{\r\n        require(msg.sender == owner,\"caller is not the owner\");\r\n        require(_feeManager != address(0), \"new feeManager is the zero address\");\r\n        \r\n        feeManager = _feeManager;\r\n    }\r\n\r\n    function _setSwapHandler(address _swapHandler) external{\r\n        require(msg.sender == owner,\"caller is not the owner\");\r\n        require(_swapHandler != address(0), \"new swapHandler is the zero address\");\r\n\r\n        swapHandler = SwapHandlerInterface(_swapHandler);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"contract SwapHandlerInterface\",\"name\":\"_swapHandler\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"_enterMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"_exitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"_setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"_setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapHandler\",\"type\":\"address\"}],\"name\":\"_setSwapHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"collateralMarket\",\"type\":\"address\"},{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"borrowMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"depositRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"collateralMarket\",\"type\":\"address\"},{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"borrowMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"estimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"getTokenMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketTokenInterface\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"isEtherMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapHandler\",\"outputs\":[{\"internalType\":\"contract SwapHandlerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DepositToRepayV1","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a6cb3c5d9e6bec28538632e1f2346005211d101d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000546b6fd22cf17b666ffb0ba369ee72b1792361d30000000000000000000000008114b3854d1e7b7f5f14896537c321e9062284ce","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b5b5b4b60df4ae09fed0b288b52e3454a592f08c32da0fed42cedcc767a1dff3"}]}