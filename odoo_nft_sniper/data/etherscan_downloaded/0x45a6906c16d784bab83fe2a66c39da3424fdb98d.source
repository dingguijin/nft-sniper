{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2022-07-08\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-11-24\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC721Like {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function awardItem(address player, string memory _tokenURI)\r\n        external\r\n        returns (uint256);\r\n        \r\n    function approveForMarket(address _owner, address _msgsender, address _operator, uint256 _tokenId) external;\r\n    function setApproval(address _owner, address _operator, bool _approved) external;\r\n    function tokenURI(uint256 tokenId) external returns (string memory);\r\n    function ownerOf(uint256 tokenId) external returns (address);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"you are not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"you are not the owner\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract NftMarket is Owned {\r\n    address public nftAsset;\r\n    address public revenueRecipient;\r\n    string public constant version = \"2.0.5\";\r\n    uint public constant mintFee = 10 * 1e8;\r\n    uint256 public constant transferFee = 5;\r\n\r\n    // make some changes for donation\r\n    // address originator\r\n    // bool isDonate\r\n    struct Offer {\r\n        bool isForSale;\r\n        uint256 tokenID;\r\n        address originator;\r\n        address seller;\r\n        address organization;\r\n        bool isBid;\r\n        bool isDonated;\r\n        uint256 minValue;\r\n        uint256 endTime;\r\n        uint256 reward;\r\n    }\r\n    \r\n    // transaction\r\n    struct Transaction {\r\n        uint256 tokenID;\r\n        address caller;\r\n        bool isDonated;\r\n        bool isBid;\r\n        address creator;\r\n        address seller;\r\n    }\r\n\r\n    struct Bid {\r\n        uint256 tokenID;\r\n        address bidder;\r\n        uint256 value;\r\n    }\r\n\r\n    struct Royalty {\r\n        address originator;\r\n        uint256 royalty;\r\n        bool recommended;\r\n    }\r\n\r\n    mapping(uint256 => Offer) public nftOfferedForSale;\r\n    mapping(uint256 => Bid) public nftBids;\r\n    mapping(uint256 => Royalty) public royalty;\r\n    // txhash \r\n    mapping(uint256 => Transaction) public txMessage;\r\n    mapping(uint256 => mapping(address => uint256)) public offerBalances;\r\n    mapping(uint256 => address[]) public bidders;\r\n    mapping(uint256 => mapping(address => bool)) public bade;\r\n    \r\n    // NFTs isExist or not \r\n    mapping(address => mapping(string => uint256)) public isExist;\r\n    // danotion across\r\n    mapping(address => mapping(string => bool)) public isSencond;\r\n    // donated oraganizations are approved or not\r\n    mapping(address => bool) public isApprovedOrg;\r\n\r\n    event Offered(\r\n        uint256 indexed tokenID,\r\n        bool indexed isBid,\r\n        bool indexed isDonated,\r\n        uint256 minValue\r\n    );\r\n    event BidEntered(\r\n        uint256 indexed tokenID,\r\n        address fromAddress,\r\n        uint256 value,\r\n        bool indexed isBid,\r\n        bool indexed isDonated\r\n    );\r\n    event Bought(\r\n        address indexed fromAddress,\r\n        address indexed toAddress,\r\n        uint256 indexed tokenID,\r\n        uint256 value\r\n    );\r\n    event NoLongerForSale(uint256 indexed tokenID);\r\n    event AuctionPass(uint256 indexed tokenID);\r\n    event DealTransaction(\r\n        uint256 indexed tokenID,\r\n        bool indexed isDonated,\r\n        address creator,\r\n        address indexed seller\r\n    );\r\n\r\n    bool private _mutex;\r\n    modifier _lock_() {\r\n        require(!_mutex, \"reentry\");\r\n        _mutex = true;\r\n        _;\r\n        _mutex = false;\r\n    }\r\n\r\n    constructor(\r\n        address _nftAsset,\r\n        address _revenueRecipient\r\n    ) {\r\n        require(_nftAsset != address(0), \"_nftAsset address cannot be 0\");\r\n        require(\r\n            _revenueRecipient != address(0),\r\n            \"_revenueRecipient address cannot be 0\"\r\n        );\r\n        nftAsset = _nftAsset;\r\n        revenueRecipient = _revenueRecipient;\r\n    }\r\n\r\n    function NewNft(string memory _tokenURI, uint256 _royalty) external payable _lock_ returns (uint256)\r\n    {\r\n        require(_royalty < 30, \"Excessive copyright fees\");\r\n\r\n        uint256 tokenID = ERC721Like(nftAsset).awardItem(msg.sender, _tokenURI);\r\n\r\n        royalty[tokenID] = Royalty(msg.sender, _royalty, false);\r\n        isExist[msg.sender][_tokenURI] = tokenID;\r\n\r\n        return tokenID;\r\n    }\r\n    \r\n    // approve the donated oraganizations\r\n    function approveOrganization(address _organization) external _lock_ {\r\n        require(_organization != address(0), \"organization is null\");\r\n        isApprovedOrg[_organization] = true;\r\n    }\r\n    \r\n    // fake create NFTs (donate the value to the organization; usual transaction)\r\n    function buyNFTWithMultiStep(bool _isDonated, address _creator, string memory _tokenURI, uint256 _royalty, bool _isBid,\r\n        uint256 _minSalePrice, uint256 _endTime, uint256 _reward, address _organization) external payable _lock_ returns(uint256, bool) {\r\n        require(_royalty < 30, \"Excessive copyright fees\");\r\n        \r\n        uint256 _tokenid = isExist[_creator][_tokenURI];\r\n        address seller = _creator;\r\n        if(isExist[_creator][_tokenURI] == 0) {\r\n            \r\n            //create\r\n            uint256 tokenID = ERC721Like(nftAsset).awardItem(_creator, _tokenURI);\r\n            royalty[tokenID] = Royalty(_creator, _royalty, false);\r\n            isExist[_creator][_tokenURI] = tokenID;\r\n            _tokenid = isExist[_creator][_tokenURI];\r\n            \r\n        } else {\r\n            seller = ERC721Like(nftAsset).ownerOf(_tokenid);\r\n        }\r\n        \r\n        //approve \r\n        ERC721Like(nftAsset).setApproval(seller, msg.sender, true);\r\n        \r\n        ERC721Like(nftAsset).approveForMarket(seller, msg.sender, address(this), _tokenid);\r\n        \r\n        //register \r\n        require(_endTime <= block.timestamp + 30 days, \"Maximum time exceeded\");\r\n        require(_endTime > block.timestamp + 5 minutes, \"Below minimum time\");\r\n        require(\r\n            _reward < 100 - transferFee - royalty[_tokenid].royalty,\r\n            \"Excessive reward\"\r\n        );\r\n        ERC721Like(nftAsset).transferFrom(seller, address(this), _tokenid);\r\n        nftOfferedForSale[_tokenid] = Offer(\r\n            true,\r\n            _tokenid,\r\n            _creator,\r\n            seller,\r\n            _organization,\r\n            _isBid,\r\n            _isDonated,\r\n            _minSalePrice,\r\n            _endTime,\r\n            _reward\r\n        );\r\n        emit Offered(_tokenid, _isBid, _isDonated, _minSalePrice);\r\n        \r\n        // buy\r\n        Offer memory offer = nftOfferedForSale[_tokenid];\r\n        require(offer.isForSale, \"nft not actually for sale\");\r\n        require(!offer.isBid, \"nft is auction mode\");\r\n\r\n        uint256 share1 = (offer.minValue * royalty[_tokenid].royalty) / 100;\r\n        uint256 share2 = (offer.minValue * transferFee) / 100;\r\n\r\n        require(\r\n            msg.value >= offer.minValue,\r\n            \"Sorry, your credit is running low\"\r\n        );\r\n        payable(royalty[_tokenid].originator).transfer(share1);\r\n        \r\n        if(!_isDonated) {\r\n            // No donation\r\n           payable(revenueRecipient).transfer(share2); \r\n           payable(offer.seller).transfer(offer.minValue - share1 - share2);\r\n        }else {\r\n            // donate\r\n            require(isApprovedOrg[_organization], \"the organization is not approved\");\r\n            payable(_organization).transfer(offer.minValue - share1);\r\n        }\r\n    \r\n        txMessage[_tokenid] = Transaction(\r\n            _tokenid,\r\n            msg.sender,\r\n            offer.isDonated,\r\n            _isBid,\r\n            royalty[_tokenid].originator,\r\n            offer.seller\r\n        );\r\n        \r\n        ERC721Like(nftAsset).transferFrom(address(this), msg.sender, _tokenid);\r\n        \r\n        emit Bought(\r\n            offer.seller,\r\n            msg.sender,\r\n            _tokenid,\r\n            offer.minValue\r\n        );\r\n        \r\n        emit DealTransaction(\r\n            _tokenid,\r\n            offer.isDonated,\r\n            royalty[_tokenid].originator,\r\n             offer.seller\r\n        );\r\n        delete nftOfferedForSale[_tokenid];\r\n        \r\n        return (_tokenid, txMessage[_tokenid].isDonated);\r\n    }\r\n    \r\n    //the auction\r\n    function enterBidWithMultiStep(bool _isDonated, address _creator, string memory _tokenURI, uint256 _royalty, bool _isBid,\r\n        uint256 _minSalePrice, uint256 _endTime, uint256 _reward, address _organization)external payable _lock_ returns(uint256) {\r\n        uint256 _tokenid = isExist[_creator][_tokenURI];\r\n        address seller = _creator;\r\n    \r\n        // is the first offer\r\n        if(isExist[_creator][_tokenURI] == 0 || !isSencond[_creator][_tokenURI]) {\r\n            require(_royalty < 30, \"Excessive copyright fees\");\r\n            isSencond[_creator][_tokenURI] = true;\r\n            \r\n            if(isExist[_creator][_tokenURI] == 0) {\r\n                //create\r\n                uint256 tokenID = ERC721Like(nftAsset).awardItem(_creator, _tokenURI);\r\n                royalty[tokenID] = Royalty(_creator, _royalty, false);\r\n                _tokenid = tokenID;\r\n                isExist[_creator][_tokenURI] = tokenID;\r\n            }\r\n            \r\n            if(isExist[_creator][_tokenURI] != 0) {\r\n                seller = ERC721Like(nftAsset).ownerOf(_tokenid);\r\n            }\r\n            \r\n            //approve \r\n            ERC721Like(nftAsset).setApproval(seller, msg.sender, true);\r\n            \r\n            ERC721Like(nftAsset).approveForMarket(seller, msg.sender, address(this), _tokenid);\r\n            \r\n            //register \r\n            require(_endTime <= block.timestamp + 30 days, \"Maximum time exceeded\");\r\n            require(_endTime > block.timestamp + 5 minutes, \"Below minimum time\");\r\n            require(\r\n                _reward < 100 - transferFee - royalty[_tokenid].royalty,\r\n                \"Excessive reward\"\r\n            );\r\n            ERC721Like(nftAsset).transferFrom(seller, address(this), _tokenid);\r\n            nftOfferedForSale[_tokenid] = Offer(\r\n                true,\r\n                _tokenid,\r\n                _creator,\r\n                seller,\r\n                _organization,\r\n                _isBid,\r\n                _isDonated,\r\n                _minSalePrice,\r\n                _endTime,\r\n                _reward\r\n            );\r\n            emit Offered(_tokenid, _isBid, _isDonated, _minSalePrice);\r\n        }\r\n        \r\n        // enterForBid\r\n        Offer memory offer = nftOfferedForSale[_tokenid];\r\n        require(offer.isForSale, \"nft not actually for sale\");\r\n        require(offer.isBid, \"nft must beauction mode\");\r\n        \r\n        // offer again\r\n        if(block.timestamp < offer.endTime) {\r\n            if (!bade[_tokenid][msg.sender]) {\r\n                bidders[_tokenid].push(msg.sender);\r\n                bade[_tokenid][msg.sender] = true;\r\n            }\r\n    \r\n            Bid memory bid = nftBids[_tokenid];\r\n           \r\n            require(\r\n                msg.value + offerBalances[_tokenid][msg.sender] >=\r\n                    offer.minValue,\r\n                \"The bid cannot be lower than the starting price\"\r\n            );\r\n            require(\r\n                msg.value + offerBalances[_tokenid][msg.sender] > bid.value,\r\n                \"This quotation is less than the current quotation\"\r\n            );\r\n            nftBids[_tokenid] = Bid(\r\n                _tokenid,\r\n                msg.sender,\r\n                msg.value + offerBalances[_tokenid][msg.sender]\r\n            );\r\n            emit BidEntered(_tokenid, msg.sender, msg.value, offer.isBid, offer.isDonated);\r\n            offerBalances[_tokenid][msg.sender] += msg.value;\r\n        }\r\n        \r\n        return _tokenid;\r\n    }\r\n    \r\n    function recommend(uint256 tokenID) external onlyOwner {\r\n        royalty[tokenID].recommended = true;\r\n    }\r\n\r\n    function cancelRecommend(uint256 tokenID) external onlyOwner {\r\n        royalty[tokenID].recommended = false;\r\n    }\r\n\r\n    function sell(\r\n        uint256 tokenID,\r\n        bool isBid,\r\n        bool isDonated,\r\n        uint256 minSalePrice,\r\n        uint256 endTime,\r\n        uint256 reward,\r\n        address organization\r\n    ) external _lock_ {\r\n        if(isBid) {\r\n            require(endTime <= block.timestamp + 30 days, \"Maximum time exceeded\");\r\n            require(endTime > block.timestamp + 5 minutes, \"Below minimum time\");\r\n        } \r\n        \r\n        require(\r\n            reward < 100 - transferFee - royalty[tokenID].royalty,\r\n            \"Excessive reward\"\r\n        );\r\n        ERC721Like(nftAsset).transferFrom(msg.sender, address(this), tokenID);\r\n        \r\n        //sell\r\n        nftOfferedForSale[tokenID] = Offer(\r\n            true,\r\n            tokenID,\r\n            royalty[tokenID].originator,\r\n            msg.sender,\r\n            organization,\r\n            isBid,\r\n            isDonated,\r\n            minSalePrice,\r\n            endTime,\r\n            reward\r\n        );\r\n        \r\n        emit Offered(tokenID, isBid, isDonated, minSalePrice);\r\n    }\r\n\r\n    function noLongerForSale(uint256 tokenID) external _lock_ {\r\n        Offer memory offer = nftOfferedForSale[tokenID];\r\n        require(offer.isForSale, \"nft not actually for sale\");\r\n        require(msg.sender == offer.seller, \"Only the seller can operate\");\r\n        require(!offer.isBid, \"The auction cannot be cancelled\");\r\n\r\n        ERC721Like(nftAsset).transferFrom(address(this), offer.seller, tokenID);\r\n        delete nftOfferedForSale[tokenID];\r\n        emit NoLongerForSale(tokenID);\r\n    }\r\n\r\n    function buy(uint256 tokenID) external payable _lock_ returns(bool){\r\n        Offer memory offer = nftOfferedForSale[tokenID];\r\n        require(offer.isForSale, \"nft not actually for sale\");\r\n        require(!offer.isBid, \"nft is auction mode\");\r\n\r\n        uint256 share1 = (offer.minValue * transferFee) / 100;\r\n        uint256 share2 = (offer.minValue * royalty[tokenID].royalty) / 100;\r\n\r\n        require(\r\n            msg.value >= offer.minValue,\r\n            \"Sorry, your credit is running low\"\r\n        );\r\n        \r\n        payable(royalty[tokenID].originator).transfer(share2);\r\n        if(offer.isDonated) {\r\n            require(offer.organization != address(0), \"The donated organization is null\");\r\n            require(isApprovedOrg[offer.organization], \"the organization is not approved\");\r\n            payable(offer.organization).transfer(offer.minValue - share2);\r\n        }else {\r\n            payable(revenueRecipient).transfer(share1);\r\n            payable(offer.seller).transfer(offer.minValue - share1 - share2);\r\n        }\r\n        \r\n        txMessage[tokenID] = Transaction(\r\n            tokenID,\r\n            msg.sender,\r\n            false,\r\n            false,\r\n            royalty[tokenID].originator,\r\n            offer.seller\r\n        );\r\n        ERC721Like(nftAsset).transferFrom(address(this), msg.sender, tokenID);\r\n        \r\n        emit Bought(\r\n            offer.seller,\r\n            msg.sender,\r\n            tokenID,\r\n            offer.minValue\r\n        );\r\n        \r\n        emit DealTransaction(\r\n            tokenID,\r\n            offer.isDonated,\r\n            royalty[tokenID].originator,\r\n            offer.seller\r\n        );\r\n        delete nftOfferedForSale[tokenID];\r\n        return txMessage[tokenID].isDonated;\r\n    }\r\n\r\n    function enterBidForNft(uint256 tokenID)\r\n        external\r\n        payable\r\n        _lock_\r\n    {\r\n        Offer memory offer = nftOfferedForSale[tokenID];\r\n        require(offer.isForSale, \"nft not actually for sale\");\r\n        require(offer.isBid, \"nft must beauction mode\");\r\n        require(block.timestamp < offer.endTime, \"The auction is over\");\r\n\r\n        if (!bade[tokenID][msg.sender]) {\r\n            bidders[tokenID].push(msg.sender);\r\n            bade[tokenID][msg.sender] = true;\r\n            \r\n        }\r\n\r\n        Bid memory bid = nftBids[tokenID];\r\n        require(\r\n            msg.value + offerBalances[tokenID][msg.sender] >=\r\n                offer.minValue,\r\n            \"The bid cannot be lower than the starting price\"\r\n        );\r\n        require(\r\n            msg.value + offerBalances[tokenID][msg.sender] > bid.value,\r\n            \"This quotation is less than the current quotation\"\r\n        );\r\n        nftBids[tokenID] = Bid(\r\n            tokenID,\r\n            msg.sender,\r\n            msg.value + offerBalances[tokenID][msg.sender]\r\n        );\r\n        emit BidEntered(tokenID, msg.sender, msg.value, offer.isBid, offer.isDonated);\r\n        offerBalances[tokenID][msg.sender] += msg.value;\r\n    \r\n    }\r\n\r\n    //  deal for donation or not\r\n    function deal(uint256 tokenID) external _lock_ returns(bool) {\r\n        Offer memory offer = nftOfferedForSale[tokenID];\r\n        require(offer.isForSale, \"nft not actually for sale\");\r\n        require(offer.isBid, \"must be auction mode\");\r\n        require(offer.endTime < block.timestamp, \"The auction is not over yet\");\r\n\r\n        Bid memory bid = nftBids[tokenID];\r\n\r\n        if (bid.value >= offer.minValue) {\r\n            uint256 share1 = (bid.value * transferFee) / 100;\r\n            uint256 share2 = (bid.value * royalty[tokenID].royalty) / 100;\r\n            uint256 share3 = 0;\r\n            uint256 totalBid = 0;\r\n\r\n            for (uint256 i = 0; i < bidders[tokenID].length; i++) {\r\n                if (bid.bidder != bidders[tokenID][i]) {\r\n                    totalBid += offerBalances[tokenID][bidders[tokenID][i]];\r\n                }\r\n            }\r\n            for (uint256 i = 0; i < bidders[tokenID].length; i++) {\r\n                if (bid.bidder != bidders[tokenID][i]) {\r\n                    uint256 tempC =\r\n                        (bid.value *\r\n                            offer.reward *\r\n                            offerBalances[tokenID][bidders[tokenID][i]]) /\r\n                            totalBid /\r\n                            100;\r\n                    payable(bidders[tokenID][i]).transfer(tempC);\r\n                    share3 += tempC;\r\n                    payable(bidders[tokenID][i]).transfer(\r\n                        offerBalances[tokenID][bidders[tokenID][i]]\r\n                    );\r\n                    offerBalances[tokenID][bidders[tokenID][i]] = 0;\r\n                    delete bade[tokenID][bidders[tokenID][i]];\r\n                }\r\n            }\r\n\r\n            uint256 tempD = bid.value - share2 - share3;\r\n            payable(royalty[tokenID].originator).transfer(share2);\r\n            \r\n            if(offer.isDonated) {\r\n                require(offer.organization != address(0), \"The donated organization is null\");\r\n                require(isApprovedOrg[offer.organization], \"the organization is not approved\");\r\n                payable(offer.organization).transfer(tempD);\r\n            }else {\r\n                tempD = bid.value - share1 - share2 - share3;\r\n                payable(revenueRecipient).transfer(share1);\r\n                payable(offer.seller).transfer(tempD);\r\n            }\r\n\r\n            offerBalances[tokenID][bid.bidder] = 0;\r\n            delete bade[tokenID][bid.bidder];\r\n            delete bidders[tokenID];\r\n\r\n            txMessage[tokenID] = Transaction(\r\n                tokenID,\r\n                msg.sender,\r\n                offer.isDonated,\r\n                offer.isBid,\r\n                royalty[tokenID].originator,\r\n                offer.seller\r\n            );\r\n            \r\n            ERC721Like(nftAsset).transferFrom(\r\n                address(this),\r\n                bid.bidder,\r\n                tokenID\r\n            );\r\n            \r\n            emit Bought(\r\n                offer.seller,\r\n                bid.bidder,\r\n                tokenID,\r\n                bid.value\r\n            );\r\n            \r\n            emit DealTransaction(\r\n                tokenID,\r\n                offer.isDonated,\r\n                royalty[tokenID].originator,\r\n                offer.seller\r\n            );\r\n        } else {\r\n            ERC721Like(nftAsset).transferFrom(\r\n                address(this),\r\n                offer.seller,\r\n                tokenID\r\n            );\r\n            emit AuctionPass(tokenID);\r\n        }\r\n        delete nftOfferedForSale[tokenID];\r\n        delete nftBids[tokenID];\r\n        \r\n        string memory _tokenURI = ERC721Like(nftAsset).tokenURI(tokenID);\r\n        delete nftOfferedForSale[tokenID];\r\n        delete nftBids[tokenID];\r\n        if(isSencond[offer.originator][_tokenURI]) {\r\n            delete isSencond[offer.originator][_tokenURI];\r\n        }\r\n        \r\n        return txMessage[tokenID].isDonated;\r\n    }\r\n\r\n    function recoveryEth(uint256 amount) external onlyOwner {\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"AuctionPass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isDonated\",\"type\":\"bool\"}],\"name\":\"BidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isDonated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"DealTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isDonated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"}],\"name\":\"Offered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"}],\"name\":\"NewNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"}],\"name\":\"approveOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDonated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"}],\"name\":\"buyNFTWithMultiStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"cancelRecommend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"deal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"enterBidForNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDonated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"}],\"name\":\"enterBidWithMultiStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedOrg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isSencond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"organization\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDonated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"noLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"recommend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoveryEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"recommended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDonated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"organization\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDonated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NftMarket","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c320758466cc148cb624e93a7ad1a8a8f6b20215000000000000000000000000f89fa79d09ce2acbb85fd93d79532db11f3c5ab8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1801e31495ce2861037c2e07121b35a4fe36877542d734870eec40fff024e5f6"}]}